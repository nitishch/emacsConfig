;; -*- coding: utf-8 -*-
(("Real-Time Rendering" "Tracking the latest developments in interactive rendering techniques" "" (22163 58791 483799 894000) feed 0 nil nil ((title nil "Real-Time Rendering") (link ((href . "http://www.realtimerendering.com/blog/feed/") (rel . "self") (type . "application/rss+xml"))) (link nil "http://www.realtimerendering.com/blog") (description nil "Tracking the latest developments in interactive rendering techniques") (lastBuildDate nil "Thu, 31 Dec 2015 00:34:12 +0000") (language nil "en-US") (updatePeriod nil "hourly") (updateFrequency nil "1") (generator nil "https://wordpress.org/?v=4.4") (item nil (title nil "Code repository for “journal of graphics tools” updated") (link nil "http://www.realtimerendering.com/blog/code-repository-for-journal-of-graphics-tools-updated/") (comments nil "http://www.realtimerendering.com/blog/code-repository-for-journal-of-graphics-tools-updated/#respond") (pubDate nil "Tue, 29 Dec 2015 22:56:53 +0000") (creator nil "Eric") (category nil "Resources") (category nil "code") (category nil "Journal of Graphics Tools") (guid ((isPermaLink . "false")) "http://www.realtimerendering.com/blog/?p=4059") (description nil "Some staff at Taylor &#38; Francis kindly dug up some of the supplemental materials (mostly code) for the journal of graphics tools, namely, volumes 10-13. I&#8217;ve waded through it all and added these resources to the code repository: Github JGT repository If you have code from a JGT article that&#8217;s not listed here, please do send it on [&#8230;]") (encoded nil "<p>Some staff at Taylor &amp; Francis kindly dug up some of the supplemental materials (mostly code) for the <em>journal of graphics tools</em>, namely, volumes 10-13. I&#8217;ve waded through it all and added these resources to the code repository:</p>
<p style=\"padding-left: 30px;\"><strong><a href=\"https://github.com/erich666/jgt-code\">Github JGT repository</a></strong></p>
<p>If you have code from a JGT article that&#8217;s not listed here, please do send it on to me and I&#8217;ll add it.</p>
") (commentRss nil "http://www.realtimerendering.com/blog/code-repository-for-journal-of-graphics-tools-updated/feed/") (comments nil "0")) (item nil (title nil "Older books (were) currently free from Springer (- sorry, no longer)") (link nil "http://www.realtimerendering.com/blog/older-books-currently-free-from-springer/") (comments nil "http://www.realtimerendering.com/blog/older-books-currently-free-from-springer/#respond") (pubDate nil "Tue, 29 Dec 2015 21:53:24 +0000") (creator nil "Eric") (category nil "Resources") (guid ((isPermaLink . "false")) "http://www.realtimerendering.com/blog/?p=4057") (description nil "And, it&#8217;s over &#8211; Springer appears to have shut the gates a day later. Mistake? Buzz-generating marketing ploy? Who knows? I&#8217;ll leave the rest of the post intact, but books are no longer free. Some articles are, such as Knuth&#8217;s. All books from Springer that are ten years old or older are free, go look. Quoting Vít Tuček here, [&#8230;]") (encoded nil "<p>And, it&#8217;s over &#8211; Springer appears to have shut the gates a day later. Mistake? Buzz-generating marketing ploy? Who knows? I&#8217;ll leave the rest of the post intact, but books are no longer free. Some articles are, such as <a href=\"http://link.springer.com/article/10.1007/s00283-010-9170-7\">Knuth&#8217;s</a>.</p>
<p><em>All </em>books from Springer that are ten years old or older are free, <strong><a href=\"http://link.springer.com/search?showAll=false\">go look</a></strong>.</p>
<p>Quoting <a href=\"https://www.facebook.com/vit.tucek/posts/10206716082994215?fref=nf\">Vít Tuček</a> here, from Facebook (reposted by Pete Shirley):</p>
<p style=\"padding-left: 30px;\">Springer has made a lot of math &amp; physics books available online, for free! Everything that is more than 10 years old.</p>
<p style=\"padding-left: 30px;\">If you don&#8217;t know which book you may want you can start here <a href=\"http://mathoverflow.net/questions/tagged/books\" target=\"_blank\" rel=\"nofollow\">http://mathoverflow.net/questions/tagged/books</a></p>
<p style=\"padding-left: 30px;\">This links to the Graduate Texts in Mathematics series: <a href=\"https://t.co/R1EYrTrz5w\" target=\"_blank\" rel=\"nofollow\">https://t.co/R1EYrTrz5w<br />
</a><br />
This is for all materials (books, journals, chapters, articles) from all fields: <a href=\"http://goo.gl/cB5rRc\" target=\"_blank\" rel=\"nofollow\">http://goo.gl/cB5rRc</a></p>
<p>This excellent <a href=\"http://link.springer.com/book/10.1007/978-3-662-04245-8\">computational geometry book</a> is available (2nd Edition; the latest, <a href=\"http://link.springer.com/book/10.1007/978-3-540-77974-2\">3rd edition</a> costs money), as is <a href=\"http://link.springer.com/book/10.1007/978-1-4612-1098-6\">this older-but-worthwhile one</a>. For de Berg&#8217;s work, the free version is the second edition; other than <a href=\"http://www.cs.uu.nl/geobook/buglist2a.pdf\">these errata fixes</a>, the 3rd edition&#8217;s major changes are that Chapter 7 includes information on Voronoi diagrams of line-segments and for farthest point, and Chapter 12 includes BSP trees for low-density scenes.</p>
<p>There are also older computer graphics related books, e.g. <a href=\"http://link.springer.com/book/10.1007/978-1-4612-1428-1\">this one</a> and <a href=\"http://link.springer.com/chapter/10.1007/978-1-4612-4306-9_8\">this</a>. Ancient, but the price is right, and some of this stuff doesn&#8217;t change.</p>
<p>Handy list of direct links for the math &amp; physics PDFs <a href=\"https://gist.github.com/bishboria/8326b17bbd652f34566a\">here</a>.</p>
<p>Me, I&#8217;m digging around for various recreational math books. One of my favorite books, period, is here: <em><a href=\"http://link.springer.com/book/10.1007/978-1-4757-2733-3\">One Jump Ahead</a></em>. There&#8217;s a recreational math book, <em><a href=\"http://link.springer.com/book/10.1007/978-1-4612-2192-0\">Tracking the Automatic Ant</a></em>, a collection from the Mathematical Intelligencer. Some bits of newer stuff from the Mathematical Intelligencer is also available, e.g., an article on <a href=\"http://link.springer.com/article/10.1007/s00283-010-9170-7\">mathematical vanity plates</a> by Knuth, of all people. Some books I can&#8217;t find, as Springer&#8217;s searcher is pretty wonky, e.g. <em><a href=\"http://smile.amazon.com/Science-Cooking-Peter-Barham/dp/3540674667\">The Science of Cooking</a></em> appears to somehow not exist, though there&#8217;s <a href=\"http://link.springer.com/article/10.1186/2044-7248-2-5\">a short article</a> available by the author.</p>
<p>Happy hunting, and <a href=\"mailto:erich@acm.org\">email me</a> or let us know in the comments if you find any other gems related to computer graphics.</p>
") (commentRss nil "http://www.realtimerendering.com/blog/older-books-currently-free-from-springer/feed/") (comments nil "0")) (item nil (title nil "Reflections on a WebGL MOOC") (link nil "http://www.realtimerendering.com/blog/reflections-on-a-webgl-mooc/") (comments nil "http://www.realtimerendering.com/blog/reflections-on-a-webgl-mooc/#comments") (pubDate nil "Fri, 06 Nov 2015 13:44:47 +0000") (creator nil "Eric") (category nil "Miscellaneous") (category nil "WebGL") (category nil "MOOCs") (guid ((isPermaLink . "false")) "http://www.realtimerendering.com/blog/?p=4039") (description nil "Ed Angel Professor Emeritus of Computer Science University of New Mexico http://www.cs.unm.edu/~angel angel@cs.unm.edu [This is a guest post from Ed on a subject near and dear to my heart, online learning. &#8211; Eric] Recently I finished teaching a Coursera MOOC entitled Interactive Computer Graphics with WebGL. Having taken Eric’s excellent three.js course with Udacity, I [&#8230;]") (encoded nil "<p>Ed Angel<br />
Professor Emeritus of Computer Science<br />
University of New Mexico<br />
<a href=\"http://www.cs.unm.edu/~angel\">http://www.cs.unm.edu/~angel</a><br />
angel@cs.unm.edu</p>
<p>[<em>This is a guest post from Ed on a subject near and dear to my heart, online learning. &#8211; Eric</em>]</p>
<p>Recently I finished teaching a Coursera MOOC entitled <em><a href=\"https://www.coursera.org/course/webgl\">Interactive Computer Graphics with WebGL</a></em>. Having taken Eric’s excellent <a href=\"http://bit.ly/ericity\">three.js course</a> with Udacity, I was interested in doing a very different course. The experience was interesting, at times exasperating, ultimately rewarding and a lot of work. Here are some of my observations, many of which echo some of Eric’s on previous blog posts, and many that relate to the present state of MOOCs.</p>
<p>First, something about me and my course. I’m the coauthor, with Dave Shreiner, of the textbook <a href=\"http://smile.amazon.com/Interactive-Computer-Graphics-WebGL-Edition/dp/0133574849?tag=realtimerenderin\"><strong>Interactive Computer Graphics</strong>,</a> which is now in its seventh edition. It has been the standard textbook for in computer graphics for students in computer science and engineering. For the seventh edition we switched from OpenGL to WebGL, which has turned out to be an excellent decision. We’ve also done both OpenGL and WebGL SIGGRAPH courses, which are now on <a href=\"https://www.youtube.com/playlist?list=PLUPhVMQuDB_aWSKj7L_-3Ot_nxBze_YMy\">Youtube at SIGRRAPH U</a>. Given the explosion of interest in WebGL over the past year, I decided to do a MOOC using WebGL. For those of you unfamiliar with WebGL or interested in what I do in my academic course, there’s <a href=\"http://www.cs.unm.edu/~angel/BOOK/INTERACTIVE_COMPUTER_GRAPHICS/SEVENTH_EDITION/CODE/\">lots of sample code here</a> that was also available to the students in the MOOC.</p>
<p>What we teach under the title of Computer Graphics can be very different depending on the audience. For those in the application world, such as the CAD community, who want to use computer graphics at a high level and not worry about writing shaders (or even knowing about shaders), three.js is a powerful tool built on top of WebGL. Users of three.js can reap many of the advantages of WebGL without writing a single line of WebGL code. On the other hand, students in Computer Science and Computer Engineering focus on “what’s beneath the hood”: shaders, algorithms, architectures. The two MOOCs, Eric’s and mine, are completely complementary and pretty much at the same level.</p>
<p><strong>Course Outline</strong></p>
<p>A fundamental premise of my 30+ years of teaching computer graphics is that students should be able to write complete applications as early as possible. While this philosophy is fairly common in university courses, it very uncommon in programming MOOCs. There are many reasons for this. The two key ones are the time needed to do a complete program and the problem of grading thousands of assignments. Nevertheless, I did not want to teach the course unless I could require complete programs, each one satisfying a set of requirements.</p>
<p>Because WebGL runs in all recent browsers, students needed only have access to a public website where they could put their assignments. Then they only had to submit the URL to let the graders run the code and see the source. I referred the students who did not have public websites to <a href=\"http://codepen.io/\">codepen.io</a>. This mechanism worked wonderfully. The fact that the applications were on public sites never became an issue.</p>
<p>Here are the five assignments,  with some student postings folded in:</p>
<p>1. Tessellation and Twist: Twist is rotation, where the amount of rotation depends on the distance from the origin. It is can best be done in a vertex shader. The assignment starts with a single triangle centered at the origin. Twist applied to its three vertices does not result in a very interesting display. However, if we tessellate the triangle by recursive subdivision, the vertices of the smaller triangles are different distances from the origin, which creates a display in which the filled triangles have a curved outline. I give them some examples so that they need not write a lot of code to do this problem. It not only serves as test as to whether they have sufficient background for the course, they get to see what even a simple shader can do.</p>
<p><a href=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course1.jpg\"><img class=\"size-full wp-image-4044 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course1.jpg\" alt=\"course1\" width=\"1081\" height=\"442\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course1-300x123.jpg 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course1-1024x419.jpg 1024w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course1-500x204.jpg 500w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course1.jpg 1081w\" sizes=\"(max-width: 1081px) 100vw, 1081px\" /></a></p>
<p>2. Line Drawing: The minimum requirement was to create an application that rendered line segments following mouse clicks. There were many options, such as letting the user change the line thickness via a menu. The main goal was to bring in interactivity through event listeners and involved both JS and a little HTML5.</p>
<p><a href=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course2.jpg\"><img class=\"size-full wp-image-4045 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course2.jpg\" alt=\"course2\" width=\"1185\" height=\"508\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course2-300x129.jpg 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course2-1024x439.jpg 1024w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course2-500x214.jpg 500w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course2.jpg 1185w\" sizes=\"(max-width: 1185px) 100vw, 1185px\" /></a></p>
<p>3. A Mini CAD system: Create a scene by adding objects to a scene. Minimally, the application had to have two object types and the instance transform was to be determined interactively. There was code available for spheres and cubes but they were encouraged to add cylinders and/or cones. Because we had yet to cover lighting most students built applications that rendered each 3D object twice, once filled and once with lines.</p>
<p><a href=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course3.jpg\"><img class=\"size-full wp-image-4043 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course3.jpg\" alt=\"course3\" width=\"1117\" height=\"760\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course3-300x204.jpg 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course3-1024x697.jpg 1024w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course3-441x300.jpg 441w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course3.jpg 1117w\" sizes=\"(max-width: 1117px) 100vw, 1117px\" /></a></p>
<p>4. Adding Lighting: Students had to write shaders to add lighting to their CAD systems. They were encouraged to compare implementing per-vertex lighting with per-fragment lighting.</p>
<p><a href=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course4.jpg\"><img class=\"size-full wp-image-4047 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course4.jpg\" alt=\"course4\" width=\"1053\" height=\"524\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course4-300x149.jpg 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course4-1024x510.jpg 1024w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course4-500x249.jpg 500w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course4.jpg 1053w\" sizes=\"(max-width: 1053px) 100vw, 1053px\" /></a></p>
<p>5. Adding Texture Mapping: Applications had to add textures to a sphere. They were asked to use both an image and a generated checkerboard pattern as textures and to use two different methods of assigning texture coordinates.</p>
<p><a href=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course5.jpg\"><img class=\"size-full wp-image-4046 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course5.jpg\" alt=\"course5\" width=\"657\" height=\"800\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course5-246x300.jpg 246w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course5.jpg 657w\" sizes=\"(max-width: 657px) 100vw, 657px\" /></a></p>
<p>Assignment 3 proved to be more difficult than I anticipated and if I did it again I’d probably eliminate or simplify Assignment 2 and simplify Assignment 3. Students who went through the whole course loved the last couple of assignments and the freedom they had to experiment. They even created web pages to share their results. See <a href=\"http://www.cs.unm.edu/~angel/COURSERA/SCREEN_SHOTS/\">screen shots here</a>.</p>
<p><strong>The Numbers</strong></p>
<p>Initially about 14,500 signed up for the course. However, only 5,500 ever watched even the first video. I still can’t figure out why 9,000 would sign up and then never even take a look. After the first week, I had about 2,500 remaining. Fair enough, since the first week’s videos enabled them to see if the content was what the wanted and if they had the time and background to continue.</p>
<p>Of the remaining 2500, about 1000 went through all the videos. Many of them did at least some of the projects, or even all of them, but didn’t care about getting a certificate. In the end, 282 participants earned certificates, including, I believe, all the ones who paid for a verified certificate.</p>
<p>I don’t know what is the best way to evaluate these numbers, Certainly using 282 out of 14,500 makes little sense. Personally I prefer 1000 out of 2500. The 2500 represents people who really were interested and the 1000 went all the way through in one way or another.</p>
<p><strong>Working with Coursera</strong></p>
<p>My institution, the University of New Mexico, was one of the first public institutions to partner with Coursera. Having followed Eric’s course and his blog about doing a course with Udacity, I was curious about the differences. And there are many. Perhaps the most significant is that Coursera leaves virtually all the course development and support to the partner institution. Since UNM, like most public institutions, is under considerable financial stress, the course was pretty much a do-it-yourself (unpaid) venture. With the exception of 2-3 minute videos we recorded on campus to introduce each week&#8217;s lessons, I recorded all the videos on my iMac with Camtasia. These were later minimally edited by UNM’s Extended Learning staff. As weird as it may seem, one can actually get pretty good at giving an animated presentation talking to your computer. I had a similar experience to Eric in finding that making changes to a video is extremely difficult. Since the each video is fairly short, I learned to just rerecord a video instead of trying to cut and paste within an existing one.</p>
<p>The major problem I had was dealing with Coursera’s software. Some crucial parts, such as keeping the courses available 24/7 and managing the discussion forums, worked really well. However, there were many other problems that ate large amounts of time, both mine and the students’. These included lack of and bad documentation, unannounced changes to the website, rigidity of the software, and unresponsiveness to problems. It was interesting that many of the students were aware of these issues from previous courses but still were taking many MOOC courses.</p>
<p><strong>MOOCs and Professional Development</strong></p>
<p>If I compare my course to my (or any) regular academic CS course, it’s not even close in academic content. How can it be otherwise when there’s no book allowed, there&#8217;s a lower level entry requirement, and not enough time to assign the amount of work we would expect in an academic course?</p>
<p>As a professional development course, it’s more interesting. I’ve taught well over 100 professional development courses, both in person and online, to audiences ranging from the twenties to the hundreds. The majority were in a concentrated four-day format. I realized after I had finished the MOOC that the hours of video in the MOOC were very close to the amount of lecturing I would do in an intensive four-day course. But I also realized that the MOOC is a superior method for professional development. Besides the fact that it is essentially free, the material is spread over a longer period, allowing participants flexibility in when they learn and giving them time to do serious programming exercises. Looking at the analytics available from my course, it’s clear that the vast majority of the learners have figured this out and are there for professional development.</p>
<p><strong>Why are State Universities and Colleges doing MOOCs?</strong></p>
<p>My experience, reinforced by talking to participants and other MOOC instructors, led me to question why UNM or any state institution is involved with MOOCs. While I can understand the desire to try new educational methods and the idealism that many of us believed would enable us to provide first class technical education to the developing world, two things should have pretty obvious from the beginning. First, the business model under which we have done our MOOC courses makes no sense; there had to a lot of self-delusion to believe that verified certificates would bring in enough money to cover our expenses. Out of 14,500 “learners” who initially signed up for my course, all of 200 signed up for verified certificates, generating $10,000 in revenue, revenue that is shared between Coursera and UNM. That’s not going to pay even minimal costs.</p>
<p>What’s more troublesome is that MOOC courses are not academic courses. They’re not even close. So why, when public institutions are facing all kinds of financial problems to support their own students, are they putting resources into professional development courses for people outside of their own regions? Some institutions have recognized this problem. I note that many of the offerings by Coursera are now coming from self-supporting Continuing Education/Professional Development units of Universities and not from the academic units.</p>
<p><strong>MOOC Computer Programming Courses</strong></p>
<p>There’s a level of delusion that I’ve seen with almost all MOOC programming courses (<a href=\"https://www.coursera.org/\">Coursera</a>, <a href=\"https://www.udacity.com\">Udacity</a>, <a href=\"https://code.org/\">Code.org</a>, <a href=\"https://www.khanacademy.org/\">Khan</a>, <a href=\"https://www.codecademy.com/\">Codecademy</a>). These courses claim to teach a programming skill in a few weeks with the learner spending only a few hours a week. What happens in these courses is that the learner never writes a complete program but rather changes a line or two of code or adds a few lines to an existing program. Easy to check and grade by computer but in the end the student cannot write a complete program using her new skill but is deluded into believing she can. After all, she has a certificate of completion; often for many such courses. This becoming a serious and more widely recognized problem in the real world, which is getting filled with “programmers” who can’t program but have been told they can based on their experience with online courses.</p>
<p>When I decided to do my MOOC, I was adamant that it would require participants to design complete programs from a set of specifications. In spite of the clear prerequisites for the course, a majority of the participants could not even get started on the simplest of my assignments, one that could have been done by changing four or five lines of code in an example I gave them. Most of them couldn’t even take the problem statement and figure out that this was all they had to do. On the other hand, the participants who came in with real programming experience absolutely loved the course and did some remarkable work. Through the discussion forums I was able to establish relationships with a number of these students and these interactions were as rewarding as any in my 40+ years of teaching computer courses.</p>
<p><strong>How I Would Do It Again If I Were To Do It Again</strong></p>
<p>There’s a lot of if’s here but it’s conceivable that I might, with adequate support this time, do it again. It would involve almost as much work the first time since I’d rerecord the videos but what I have in mind might be a step towards a more stable MOOC that could break down some of the barriers between academia and professional development. I see the MOOC as remaining at 10 weeks with much the same outline. I’d start it at the same time as an academic semester. Students who want academic credit would also register for my regular online computer graphics class. All students would use the MOOC videos for the first 10 weeks but those registered for the University course would have additional reading and variants on the MOOC programming assignments. I would also meet with these students either live or via video conferencing, thus making the course more of a <a href=\"https://en.wikipedia.org/wiki/Flipped_classroom\">flipped classroom</a>. After the 10 week MOOC was over, I would continue working with the university students on projects and advanced topics for the rest of the 15 week semester.</p>
<p>In addition, if the University could figure out how to do this and what to charge, I’d open the academic course to students outside the university who could take the course as non-degree students at a reduced tuition. Such credit would be transferable to other academic programs. Exploring such a format might move us in a direction that helps state institutions with their financial issues, leads to a working business models for MOOC providers, and at the same time, fulfills many of the idealist goals that many of us have for MOOCs.</p>
") (commentRss nil "http://www.realtimerendering.com/blog/reflections-on-a-webgl-mooc/feed/") (comments nil "1")) (item nil (title nil "“Journal of Graphics Tools” Code Repository") (link nil "http://www.realtimerendering.com/blog/journal-of-graphics-tools-code-repository/") (comments nil "http://www.realtimerendering.com/blog/journal-of-graphics-tools-code-repository/#respond") (pubDate nil "Sat, 24 Oct 2015 17:29:12 +0000") (creator nil "Eric") (category nil "Resources") (category nil "archive") (category nil "Journal of Graphics Tools") (guid ((isPermaLink . "false")) "http://www.realtimerendering.com/blog/?p=4015") (description nil "Once upon a time the Journal of Graphics Tools had code associated with many of its articles. This was in fact one of the selling points for the journal, which grew out of the Graphics Gems series of books. When Taylor &#38; Francis acquired A.K. Peters back in 2010, they moved the journal to their vast collection [&#8230;]") (encoded nil "<p>Once upon a time the <em><a href=\"http://www.tandfonline.com/loi/ujgt21\">Journal of Graphics Tools</a> </em>had code associated with many of its articles. This was in fact one of the selling points for the journal, which grew out of the <a href=\"http://graphicsgems.org\"><em>Graphics Gems</em> </a>series of books. When Taylor &amp; Francis acquired A.K. Peters back in 2010, they moved the journal to <a href=\"http://www.tandfonline.com/action/showPublications\">their vast collection of other journals</a> (2671 and counting). The code repository didn&#8217;t fit their web template, so they no longer hosted the code. At the time I wasn&#8217;t so concerned, as the <a href=\"https://archive.org/web/\">Wayback Machine</a> mirrored the abstracts and code collection of the old A.K. Peters site. Something happened this year and those backup pages are now gone, e.g., <a href=\"https://web.archive.org/web/20140214121750/http://web.archive.org/web/20110707101838/http://jgt.akpeters.com/\">this link</a> used to work.</p>
<p>So, time to rebuild. I&#8217;ve maintained the <a href=\"http://graphicsgems.org\">Graphics Gems repository</a> for a few decades; how hard could it be to rebuild a recently-lost code archive? Well, we&#8217;ll see. I&#8217;ve written Taylor &amp; Francis in hopes that someone knows where they put that DVD or whatever with the code archive. Fingers crossed. In the meantime I&#8217;ve been looking around and asking around. Here&#8217;s what I&#8217;ve collected so far:</p>
<h2><a href=\"https://github.com/erich666/jgt-code\">&#8220;Journal of Graphics Tools&#8221; Code Repository</a></h2>
<p>Enjoy what bits are there, and please send me any code you&#8217;ve saved that is related to a JGT article. You don&#8217;t have to be an author, just a pack-rat. I know that at least one author I asked could not find a backup of his article&#8217;s code. I personally can relate: back in 1985 I finished my master&#8217;s thesis. A few months later I realized I should get copies of images from my thesis work (in the Utah RLE format &#8211; ahhh, memories; astoundingly, <a href=\"http://www.cs.utah.edu/gdc/projects/urt/\">that site is still around</a>, things put on cs.utah.edu appear to stay there forever). One backup tape was glitched, so I lost about half my images.</p>
<p>Time for <a href=\"http://worrydream.com/TheWebOfAlexandria/\">an analogy with the Library of Alexandria</a> (pointed out to me by Jason Mitchell). Go read that article, it&#8217;s short, and makes an excellent point. Shorter still is <a href=\"https://twitter.com/worrydream/status/478087637031325697\">a tweet</a> by the same person which shows the practical effect of our general lack of redundancy. Gamasutra/Game Developer code repository? Gone (AFAIK). The lovely ompf.org forum about real-time ray tracing? Gone. Various game and film company article collections, various useful blogs, various cool resources? Gone baby gone. I encounter this loss every time I update <a href=\"http://www.realtimerendering.com/portal.html\">our portal page</a> or the <a href=\"http://tog.acm.org/bib_look.cfm\">ACM TOG resources page</a>. Of course the &#8220;portal&#8221; term itself is at least a decade out of style (remember <a href=\"http://www.cringely.com/2015/10/21/why-yahoo-is-worth-less-than-nothing/\">Yahoo</a>?), but knowing where to find the good stuff is still valuable. When some bit of the good stuff goes away, how sad. Sure, there&#8217;s <a href=\"https://en.wikipedia.org/wiki/Sturgeon%27s_law\">Sturgeon&#8217;s Law</a>, but the 10% also sometimes disappears.</p>
<p>I&#8217;ve had this vague feeling for decades, ever since I started to collect bits and pieces for the Ray Tracing News in 1987, that I&#8217;m playing the role of a medieval monk attempting to keep some small bits and pieces of knowledge from disappearing. In fact, the Ray Tracing News archive briefly disappeared when ACM TOG reorganized their site; I moved it to <a href=\"http://www.realtimerendering.com/resources/RTNews/html/\">realtimerendering.com</a>. My takeaway for internet resources is &#8220;trust no one&#8221;, not even myself, since I probably don&#8217;t have an infinite life span. The <a href=\"http://worrydream.com/TheWebOfAlexandria/\">Bret Victor article</a> I mentioned last paragraph (is the article still available? I guess it depends when you read this posting&#8230;) points out the problem, but I know of no good solution right now. The Internet Archive&#8217;s Wayback Machine is related to <a href=\"http://www.bibalex.org/en/project/details?documentid=283\">Bibliotheca Alexandrina</a>, which is something like naming your new ship the Titanica. The irony, she drips, that this archive somehow lost the Journal of Graphic Tools&#8217; code (<em>update:</em> my guess is someone recently popped in a <a href=\"http://www.economist.com/blogs/babbage/2014/01/internet-permanence\">robots.txt</a> on the dead site). I&#8217;m of course now kicking myself for not making a copy of JGT&#8217;s code base myself back when I had the chance.</p>
<p>Maybe a better takeaway is &#8220;trust everyone.&#8221; My one positive suggestion is &#8220;make it a zip.&#8221; If you have a resource, make the whole site downloadable as one big zip so that it&#8217;s easy for you and others to back up. Github offers this automatically. If zipping had been done with JGT&#8217;s site, I&#8217;d probably have a copy. I have a sort of future sadness for the day <a href=\"http://paulbourke.net/\">Paul Bourke&#8217;s</a> or <a href=\"http://steve.hollasch.net/cgindex/index.html\">Steve Hollasch&#8217;s</a> sites disappear. There are utilities such as <a href=\"https://www.httrack.com/\">HTTrack</a> where one could grab a whole web site, but who wants to mess with that? Well, I now do, but for Hollasch it won&#8217;t matter all that much, since he links to lots of external pages (by the way, <a href=\"http://home.snafu.de/tilman/xenulink.html\">Xenu</a> is a wonderful free dead link checker). Steve Hollasch&#8217;s site, 76 files, sum up to 798 kb &#8211; so much more valuable than just about any iPhone photo, which is more than twice as large. Bourke&#8217;s site, which includes many PDFs and zips and whatnot, is quite large &#8211; it&#8217;s still downloading &#8211; it might be the size of a <a href=\"https://itunes.apple.com/us/tv-season/rick-and-morty-season-1/id741096885\">season of Rick and Morty</a> (which BTW is a great show). But, once done downloading, I&#8217;ll have it, so &#8220;<a href=\"https://youtu.be/V_kBdnziEFA?t=13\">don&#8217;t you die on me, man</a>&#8221; is then a non-issue, at least for me. At a price of <a href=\"http://www.newegg.com/Product/Product.aspx?Item=N82E16822178745\">less than a nickel per gigabyte</a>, who cares about the cost of storage for code and text?</p>
<p>Sure, a lot of information dies off that absolutely no one will ever care about. But some of the seemingly-useless bits kept around are wonderful to have. Me, I just found <a href=\"http://babel.hathitrust.org/cgi/pt?id=chi.27966196;view=1up;seq=46\">the shower</a> that came with our condo-ized piece of the old Victorian we live in &#8211; very helpful! It&#8217;s said that 90% of the files in any file cabinet are never accessed again. But which 10% are the useful ones? So we naturally keep all the files around. Digital storage is much more compact and painless, yet still easily gets wiped out due to a disk head failure, power surge, or the owner passes away. By the way, if you use Google Docs or Gmail or etc., go set up your <a href=\"https://www.google.com/settings/u/0/account/inactive\">Inactive Account Manager</a> right now. On that morbid but practical note, please do remember to send me any code bits you might have from the Journal of Graphics Tools. And do us all a favor and <a href=\"https://github.com/erich666/jgt-code/archive/master.zip\">download a zip of the JGT code repository</a> every now and then, just in case Github goes away (I&#8217;m thinking of <a href=\"http://google-opensource.blogspot.com/2015/03/farewell-to-google-code.html\">Google Code</a> here, but even <a href=\"https://www.reddit.com/r/programming/comments/3pwwgb/bitbucket_down_4th_day_running_this_time_to_ddos/\">BitBucket gets DDOS&#8217;ed</a>).</p>
<p>Not so fun fact:  27.5% of the external links on <a href=\"http://www.realtimerendering.com/refs.html\">our references page</a> are dead, after 7 years. They&#8217;re mostly papers, so perhaps the links have just changed or, at worst, the article can be dug up somewhere (though that&#8217;s only true half the time &#8211; a lot of game-related articles are not in journals).</p>
") (commentRss nil "http://www.realtimerendering.com/blog/journal-of-graphics-tools-code-repository/feed/") (comments nil "0")) (item nil (title nil "New free interactive linear algebra text on web") (link nil "http://www.realtimerendering.com/blog/new-free-interactive-linear-algebra-text-on-web/") (comments nil "http://www.realtimerendering.com/blog/new-free-interactive-linear-algebra-text-on-web/#respond") (pubDate nil "Tue, 08 Sep 2015 02:28:42 +0000") (creator nil "Eric") (category nil "Resources") (category nil "linear algebra") (guid ((isPermaLink . "false")) "http://www.realtimerendering.com/blog/?p=4012") (description nil "Here it is &#8211; you should recognize the third author&#8217;s name for sure. I&#8217;ve only skimmed a bit, but wow, very interesting. Many of the figures are indeed interactive, which is magical. I also like the idea that you can move the mouse over a term and a pop-up shows more information about it. Seriously, go [&#8230;]") (encoded nil "<p><a href=\"http://immersivemath.com/ila/index.html\">Here it is</a> &#8211; you should recognize the third author&#8217;s name for sure. I&#8217;ve only skimmed a bit, but wow, very interesting. Many of the figures are indeed interactive, which is magical. I also like the idea that you can move the mouse over a term and a pop-up shows more information about it. Seriously, go <a href=\"http://immersivemath.com/ila/ch02_vectors/ch02.html\">check out a section</a> right now.</p>
") (commentRss nil "http://www.realtimerendering.com/blog/new-free-interactive-linear-algebra-text-on-web/feed/") (comments nil "0")) (item nil (title nil "Seven Things for August 22, 2015") (link nil "http://www.realtimerendering.com/blog/seven-things-for-august-22-2015/") (comments nil "http://www.realtimerendering.com/blog/seven-things-for-august-22-2015/#respond") (pubDate nil "Sat, 22 Aug 2015 13:18:39 +0000") (creator nil "Eric") (category nil "Miscellaneous") (guid ((isPermaLink . "false")) "http://www.realtimerendering.com/blog/?p=3991") (description nil "Last collection of links for awhile &#8211; I&#8217;m pretty much caught up. Here&#8217;s a rundown of things that are more physical: Where&#8217;s Waldo in the real world; specifically, Seattle. Info. Some of the Easter Eggs are truly great. Pixelated hair. I collect anything where &#8220;X is used as pixels&#8221;; link collection here (and send me more). I&#8217;m impressed by [&#8230;]") (encoded nil "<p>Last collection of links for awhile &#8211; I&#8217;m pretty much caught up. Here&#8217;s a rundown of things that are more physical:</p>
<ul>
<li><a href=\"http://gigapixelartzoom.com/#Artists\">Where&#8217;s Waldo</a> in the real world; specifically, Seattle. <a href=\"http://www.engadget.com/2014/01/24/microsoft-gigapixel-artzoom-seattle-panorama/\">Info</a>. Some of the Easter Eggs are truly great.</li>
<li><a href=\"http://www.viralnova.com/pixel-hair/?mb=sga\">Pixelated hair</a>. I collect anything where &#8220;X is used as pixels&#8221;; <a href=\"https://delicious.com/erich666/pixel\">link collection here</a> (and <a href=\"mailto:erich@acm.org\">send me more</a>).</li>
<li>I&#8217;m impressed by Google Cardboard. A local architecture firm <a href=\"http://cardboard.autodesk.com/\">has been using it</a> to give clients a much better sense of their designs. The fact that you can pre-render at very high quality I consider a large advantage over GPU-based VR. Also, it seems like many firms overbuilt, so these viewers are now dirt cheap, e.g. <a href=\"http://www.dx.com/p/assembling-google-virtual-reality-cardboard-w-resin-lens-set-khaki-339632?tc=USD#.VdTdyvlVhBc\">less than $3 with free shipping</a>.</li>
<li>Surroundings:
<ul>
<li>The <a href=\"http://smile.amazon.com/dp/B00OZCM7DC?tag=realtimerenderin\">Ricoh Theta </a>gives surprisingly nice instant IBLs in a relatively cheap ($300) compact camera &#8211; <a href=\"https://theta360.com/en/gallery/\">gallery</a>, <a href=\"http://www.ephotozine.com/article/ricoh-theta-review-23706\">review</a>.</li>
<li><a href=\"http://matterport.com/\">Matterport</a> looks like a pretty nice room capture device.</li>
<li><a href=\"https://photosynth.net/preview/\">Photosynth 3</a> is strangely compelling at times. On one level it&#8217;s a low-frame-count video you can scrub through, but scenes often have a surreal feel as interpolations are shown.</li>
</ul>
</li>
<li><a href=\"https://www.youtube.com/watch?v=BFkp0GHz5v8&amp;feature=player_detailpage#t=91\">Intel Thunderbolt 3 demos</a>, showing a laptop driving an external GPU. Annoying ad will play, but then the chewy bit of the video plays. Too much info about USB &amp; Thunderbolt <a href=\"http://www.anandtech.com/show/9331/intel-announces-thunderbolt-3\">here</a>.</li>
<li>If you have lots of old business cards, two words: <a href=\"http://theiff.org/oexhibits/menger02.html\">Menger Sponge</a>.</li>
<li><a class=\"external-link\" href=\"http://www.thisiscolossal.com\" rel=\"nofollow\">This Is Colossal</a> covers lots of interesting artistic and well-crafted works. Mostly real-world stuff (I liked this <a href=\"http://www.thisiscolossal.com/2015/08/mirrored-ziggurat/\">mirror work</a>), and also great things such as <a href=\"http://www.thisiscolossal.com/2014/08/dizzying-new-gifs-at-the-intersection-of-art-and-math-by-dave-whyte/\">Bees &amp; Bombs</a> (example below).</li>
</ul>
<p><img class=\"alignnone\" src=\"http://www.thisiscolossal.com/wp-content/uploads/2014/08/cubes.gif\" alt=\"\" width=\"800\" height=\"600\" /></p>
") (commentRss nil "http://www.realtimerendering.com/blog/seven-things-for-august-22-2015/feed/") (comments nil "0")) (item nil (title nil "Seven Things for August 21, 2015") (link nil "http://www.realtimerendering.com/blog/seven-things-for-august-21-2015/") (comments nil "http://www.realtimerendering.com/blog/seven-things-for-august-21-2015/#respond") (pubDate nil "Fri, 21 Aug 2015 11:38:22 +0000") (creator nil "Eric") (category nil "Miscellaneous") (guid ((isPermaLink . "false")) "http://www.realtimerendering.com/blog/?p=3983") (description nil "I&#8217;ve burnt through most of my SIGGRAPH tidbits. Now to start running through a few worthwhile articles, resources, and sites I&#8217;ve found the past months: Colors and words article &#8211; a must-read. Teaser: &#8220;So he raised his daughter while being careful to never describe the color of the sky to her, and then one day asked her [&#8230;]") (encoded nil "<p>I&#8217;ve burnt through most of my SIGGRAPH tidbits. Now to start running through a few worthwhile articles, resources, and sites I&#8217;ve found the past months:</p>
<ul>
<li><a href=\"http://www.businessinsider.com/what-is-blue-and-how-do-we-see-color-2015-2\">Colors and words article</a> &#8211; a must-read. Teaser: &#8220;So he raised his daughter while being careful to never describe the color of the sky to her, and then one day asked her what color she saw when she looked up.&#8221;</li>
<li><a class=\"external-link\" style=\"line-height: 1.4; font-size: 12.1599998474121px;\" href=\"http://www.cgsociety.org/index.php/CGSFeatures/CGSFeatureSpecial/building_3d_with_ikea\" rel=\"nofollow\">IKEA has been using V-Ray</a><span style=\"line-height: 1.4; font-size: 12.1599998474121px;\"> for much of its catalog for years. Favorite quote: &#8220;But the real turning point for us was when, in 2009, they called us and said, &#8216;You have to stop using CG. I’ve got 200 product images and they’re just terrible. You guys need to practise [sic] more.&#8217; So we looked at all the images they said weren’t good enough and the two or three they said were great, and the ones they didn’t like were photography and the good ones were all CG!&#8221;</span></li>
<li>Cambridge, Mass. (which I live next to) as a <a class=\"external-link\" href=\"http://cesiumjs.org/cambridge/\" rel=\"nofollow\">3D map in your browser</a>. Background info <a class=\"external-link\" href=\"http://cesiumjs.org/2015/06/15/Cambridge-in-3D/\" rel=\"nofollow\">here</a>. WebGL is great.</li>
<li><span class=\"TextRun SCX183570054\"><span class=\"NormalTextRun SCX183570054\"><a href=\"http://www.dhteumeuleu.com/apparently-transparent\">Slightly spooky 3D program</a>, done in CSS (that&#8217;s right &#8211; no </span><span class=\"SpellingError SCX183570054\">WebGL</span><span class=\"NormalTextRun SCX183570054\"> here). Other fun experiments by the author <a href=\"http://codepen.io/ge1doot/\">here</a>.</span></span></li>
<li>Languages: I hadn&#8217;t heard of a few of these <a href=\"http://nickdesaulniers.github.io/blog/2015/07/23/additional-c-slash-c-plus-plus-tooling/\">C++ tools</a>. The Swift language, which I&#8217;ve heard nice things about, <a class=\"external-link\" href=\"http://readwrite.com/2015/06/09/apple-swift-open-source-wwdc2015\" rel=\"nofollow\">is going to be open-sourced</a> by Apple (surprising, for Apple). Michael Gleicher mentioned liking the free book <em><a href=\"https://github.com/spencertipping/js-in-ten-minutes/blob/master/js-in-ten-minutes.pdf\">Javascript in 10 Minutes</a></em>.</li>
<li>Tools: For home use only, <a class=\"external-link\" href=\"http://www.glarysoft.com/glary-utilities/\" rel=\"nofollow\">Glary Utilities</a> is a bunch of free utilities &#8211; two minutes to clean off various types of sludge from your PC. <a class=\"external-link\" href=\"http://www.voidtools.com/\" rel=\"nofollow\">Everything</a> is a simple super-fast file and folder name searcher for Windows. I&#8217;ve added these to the bottom section of the <a href=\"http://realtimerendering.com/portal.html\">portal page</a>.</li>
<li>Ray tracing using armor stands in Minecraft. Things just keep getting weirder.<iframe width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/7E9p4hi252A?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe></li>
</ul>
") (commentRss nil "http://www.realtimerendering.com/blog/seven-things-for-august-21-2015/feed/") (comments nil "0")) (item nil (title nil "Seven Things for August 20, 2015") (link nil "http://www.realtimerendering.com/blog/seven-things-for-august-20-2015/") (comments nil "http://www.realtimerendering.com/blog/seven-things-for-august-20-2015/#respond") (pubDate nil "Thu, 20 Aug 2015 13:55:18 +0000") (creator nil "Eric") (category nil "Miscellaneous") (guid ((isPermaLink . "false")) "http://www.realtimerendering.com/blog/?p=3966") (description nil "Still more things, bits of info worth knowing (at least to me &#8211; now I know where I&#8217;ve written it all down): glTF is an up and coming format for transmitting 3D models, tailored for WebGL and OpenGL &#8211; they like to think of it as a 3D model codec. There&#8217;s three.js and Node.js support, as [&#8230;]") (encoded nil "<p>Still more things, bits of info worth knowing (at least to me &#8211; now I know where I&#8217;ve written it all down):</p>
<ul>
<li><a href=\"https://github.com/KhronosGroup/glTF\">glTF</a> is an up and coming format for transmitting 3D models, tailored for WebGL and OpenGL &#8211; they like to think of it as a 3D model codec. There&#8217;s three.js and Node.js support, as well as a Collada and separate <a href=\"https://github.com/cyrillef/FBX-glTF\">FBX converter</a>. There&#8217;s more explanation of glTF in the presentation at the <a href=\"https://www.khronos.org/webgl/wiki/Presentations#SIGGRAPH_2015_WebGL_BOF\">WebGL BOF</a>. Compression progress <a href=\"https://gist.github.com/kainino0x/c082067f61ac9356ac04\">here</a>, discussion <a href=\"https://github.com/KhronosGroup/glTF/issues/398\">here</a>.<em> (Thanks to Patrick Cozzi for these links.)</em></li>
<li>I mentioned Shadertoy two days ago. I&#8217;ll mention it again! I&#8217;ve heard <a href=\"https://www.youtube.com/user/mari1234mari\">Iñigo Quilez&#8217;s youtube video channel</a> has good tutorials on programming for Shadertoy, or just watch <a href=\"https://www.youtube.com/watch?v=c6EwLCIhaxs\">great demos</a> (with no chance of locking up your GPU). Also, check this <a href=\"https://www.shadertoy.com/view/4dsXzM\">great Shadertoy illusion</a>. My theory is every blog post should have a reference to Shadertoy, at least in my perfect world.</li>
<li><a href=\"https://www.unrealengine.com/ue4-on-github\">The code for Epic&#8217;s Unreal Engine 4</a> is all open-sourced now. Best story for me at SIGGRAPH was of a guy who looked like a gang member coming to an Educator&#8217;s meeting and getting the signatures of some of the UE4 programmers, as he wanted to thank them for changing his life due to their code being accessible.</li>
<li><a href=\"https://unity3d.com/get-unity/download\">Unity 4 is also free (including royalty free) for personal use</a> (though not open source). Old news from March and GDC, but I realized I had only tweeted it, not blogged it.</li>
<li>3D printing. Yeah, it&#8217;s not graphics, but it&#8217;s close enough for me. The <a href=\"http://computational-fabrication.com/\">Computational Tools for 3D Printing course</a> had <a href=\"http://computational-fabrication.com/Matusik_Part1.pdf\">a good introduction</a> to the major types of 3D print processes, along with a useful walk down the software pipeline. BTW, I made <a href=\"http://bit.ly/info3dp\">a little page of links to 3D printing resources</a> for beginners with an URL I can remember, bit.ly/info3dp</li>
<li>I was surprised to learn that <a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">cross-site scripting attacks</a> are <a href=\"http://www.economist.com/news/science-and-technology/21660075-it-too-easy-hack-websites-some-people-do-so-make-it-harder\">80% (by some measure)</a> of all website security problems. A form of this type of attack was found and fixed back in summer 2011 for WebGL in <a href=\"http://blog.chromium.org/2011/07/using-cross-domain-images-in-webgl-and.html\">Chrome</a> and <a href=\"https://hacks.mozilla.org/2011/06/cross-domain-webgl-textures-disabled-in-firefox-5/\">Firefox</a>, with the concern that private textures from other sites could be read and copied by WebGL programs.</li>
<li><a href=\"https://sketchfab.com/\">Sketchfab</a> has been adding cool new features, such as <a href=\"https://sketchfab.com/sketchfab/folders/animation\">animation</a> and <a href=\"https://sketchfab.com/models/40fb0d39b50147b3b8099a73f165a2f6\">object annotation</a> (click horizontal arrows in lower right), as well as Oculus Rift support: just put &#8220;<a href=\"https://www.flickr.com/photos/11998354@N07/20601972182/in/album-72157654978049134/\">/embed?oculus=2</a>&#8221; at the end of any model URL.</li>
</ul>
<p><iframe src=\"https://sketchfab.com/models/e526641b0a724a599ed4ae6da2728896/embed\" width=\"480\" height=\"480\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></p>
<p style=\"font-size: 13px; font-weight: normal; margin: 5px; color: #4a4a4a;\"><a style=\"font-weight: bold; color: #1caad9;\" href=\"https://sketchfab.com/models/e526641b0a724a599ed4ae6da2728896?utm_source=oembed&amp;utm_medium=embed&amp;utm_campaign=e526641b0a724a599ed4ae6da2728896\" target=\"_blank\">Going for a walk</a><br />
by <a style=\"font-weight: bold; color: #1caad9;\" href=\"https://sketchfab.com/Kokusho?utm_source=oembed&amp;utm_medium=embed&amp;utm_campaign=e526641b0a724a599ed4ae6da2728896\" target=\"_blank\">Yann</a><br />
on <a style=\"font-weight: bold; color: #1caad9;\" href=\"https://sketchfab.com?utm_source=oembed&amp;utm_medium=embed&amp;utm_campaign=e526641b0a724a599ed4ae6da2728896\" target=\"_blank\">Sketchfab</a></p>
") (commentRss nil "http://www.realtimerendering.com/blog/seven-things-for-august-20-2015/feed/") (comments nil "0")) (item nil (title nil "Seven Things for August 19, 2015") (link nil "http://www.realtimerendering.com/blog/seven-things-for-august-19-2015/") (comments nil "http://www.realtimerendering.com/blog/seven-things-for-august-19-2015/#respond") (pubDate nil "Wed, 19 Aug 2015 13:31:18 +0000") (creator nil "Eric") (category nil "Resources") (category nil "Book") (category nil "Reports") (category nil "books") (category nil "displays") (category nil "image processing") (category nil "path tracing") (category nil "spectra") (category nil "HALIDE") (guid ((isPermaLink . "false")) "http://www.realtimerendering.com/blog/?p=3959") (description nil "More stuff: New interactive 3D graphics books at SIGGRAPH 2015: WebGL Insights, GPU Pro 6 (Kindle right now, hardcover in September). Let me know if I missed anything (see full list here, which also includes links to Google Books previews for these new books). Updated book: 7th edition of the OpenGL SuperBible. I would guess that, [&#8230;]") (encoded nil "<p>More stuff:</p>
<ul>
<li>New interactive 3D graphics books at SIGGRAPH 2015: <em><a href=\"http://smile.amazon.com/WebGL-Insights-Patrick-Cozzi/dp/1498716075?tag=realtimerenderin\">WebGL Insights</a></em>, <em><a href=\"http://smile.amazon.com/GPU-Pro-Advanced-Rendering-Techniques/dp/1482264617?tag=realtimerenderin\">GPU Pro 6</a> </em>(Kindle right now, hardcover in September). Let me know if I missed anything (see <a href=\"http://www.realtimerendering.com/books.html\">full list here</a>, which also includes links to Google Books previews for these new books).</li>
<li>Updated book: 7th edition of the <em><a href=\"http://smile.amazon.com/OpenGL-Superbible-Comprehensive-Tutorial-Reference/dp/0672337479?tag=realtimerenderin\">OpenGL SuperBible</a></em>. I would guess that, with Vulkan coming down the pike, and Apple going with Metal and no longer developing OpenGL (it&#8217;s <a href=\"https://www.opengl.org/wiki/History_of_OpenGL#OpenGL_4.1_.282010.29\">back in 2010</a> at <a href=\"https://support.apple.com/en-us/HT202823\">4.1 in Mavericks</a>), this will be the final edition. Future students having to learn Vulkan or DirectX 12, well, that won&#8217;t be much fun at all&#8230;</li>
<li>I mentioned yesterday how you can <a href=\"http://dl.acm.org/citation.cfm?id=2809654&amp;_sm_au_=iVV25TfRTPr0jbK6\">download the SIGGRAPH 2015 Proceedings</a> for free this week. <a href=\"http://www.siggraph.org/discover/news/looking-siggraph-2015-conference-content\">There&#8217;s more</a>, in theory. Some of the links <a href=\"http://www.siggraph.org/discover/news/looking-siggraph-2015-conference-content\">there</a> have nothing as of right now. The <a href=\"http://dl.acm.org/citation.cfm?id=2787626&amp;_sm_au_=iVV25TfRTPr0jbK6\">Posters</a> are worth a skim, especially since I didn&#8217;t see them at SIGGRAPH. I also liked the <a href=\"http://dl.acm.org/citation.cfm?id=2785585&amp;_sm_au_=iVV25TfRTPr0jbK6\">Studio PDF</a>. It starts with a bunch of single-page talks that are fun to snack on, followed by a few random slidesets. <a href=\"http://dl.acm.org/citation.cfm?id=2782782&amp;_sm_au_=iVV25TfRTPr0jbK6\">Emerging Tech</a> also has longer descriptions than on <a href=\"http://s2015.siggraph.org/attendees/emerging-technologies\">the ETech page</a> (which has more pics and videos, however). If you gotta catch &#8217;em all, there&#8217;s also a PDF for <a href=\"http://dl.acm.org/citation.cfm?id=2786601&amp;_sm_au_=iVV25TfRTPr0jbK6\">Panels</a>.</li>
<li>There have been many news articles recently about <a href=\"http://www.treehugger.com/gadgets/how-use-screens-night-without-ruining-your-sleep.html\">not viewing screens at bedtime</a>. Right, sure. Michael Herf (former CTO at Picasa) is the president at <a href=\"https://justgetflux.com/\">f.lux</a>, one company that makes screens vary in overall spectra during the day to ameliorate the problem. He pointed me at a useful-to-researchers bit: their <a href=\"https://fluxometer.com/rainbow/#!id=iPhone%206/6500K-iPhone6\">fluxometer site</a>, with spectra for many different displays, all downloadable.</li>
<li>Oh, and related, a tip from Michael: <a href=\"http://www.pantone.com/pantone-lighting-indicator-stickers\">Pantone stickers</a> with differing colors (using <a href=\"https://en.wikipedia.org/wiki/Metamerism_(color)#Metameric_failure\">metameric failure</a>) under different temperature lights, so you can ensure you&#8217;re showing work under consistent lighting conditions.</li>
<li>I was impressed by <a href=\"http://halide-lang.org/\">HALIDE</a>, an MIT licensed open source project for writing high performance image processing code (including GPU versions) from scratch. Most impressive is their case study for local Laplacian filters (<a href=\"http://halide-lang.org/assets/lectures/Halide_CVPR_intro.pdf\">p. 28</a>), showing great performance with considerably less code and time coding vs. Adobe Photoshop&#8217;s efforts. Google and others use it extensively (<a href=\"http://halide-lang.org/assets/lectures/Halide_CVPR_intro.pdf\">p. 32</a>).</li>
<li><a href=\"https://sites.google.com/site/pathtracingrevolution/\">Path tracing</a> is all the rage for the film industry; the Arnold renderer started it (AFAIK) and others have followed suit. Here&#8217;s an entertaining path trace of interior lighting for a Minecraft scene using the free <a href=\"http://chunky.llbit.se/\">Chunky path tracer</a>. SPP is samples per pixel:</li>
</ul>
<p><img class=\"alignnone\" src=\"http://chunky.llbit.se/spp-compare.gif\" alt=\"Chunk progressive render\" width=\"400\" height=\"400\" /></p>
") (commentRss nil "http://www.realtimerendering.com/blog/seven-things-for-august-19-2015/feed/") (comments nil "0")) (item nil (title nil "Seven Things for August 18, 2015") (link nil "http://www.realtimerendering.com/blog/seven-things-for-august-18-2015/") (comments nil "http://www.realtimerendering.com/blog/seven-things-for-august-18-2015/#respond") (pubDate nil "Tue, 18 Aug 2015 19:37:11 +0000") (creator nil "Eric") (category nil "Resources") (category nil "patents") (category nil "SIGGRAPH 2015") (category nil "froxel") (category nil "Shadertoy") (guid ((isPermaLink . "false")) "http://www.realtimerendering.com/blog/?p=3956") (description nil "Seven things: Stephen Hill&#8217;s great collection of SIGGRAPH 2015 links. As he and others have noted, the entire SIGGRAPH 2015 proceedings is available to all for free download until the end of this week. Grab it now if you&#8217;re not a SIGGRAPH member. SIGGRAPH members always have Digital Library access to SIGGRAPH-sponsored conferences, even if [&#8230;]") (encoded nil "<p>Seven things:</p>
<ul>
<li>Stephen Hill&#8217;s great <a href=\"http://blog.selfshadow.com/2015/08/15/siggraph-2015-links/\">collection of SIGGRAPH 2015 links</a>.</li>
<li>As he and others have noted, <a href=\"http://dl.acm.org/citation.cfm?id=2809654\">the entire SIGGRAPH 2015 proceedings</a> is available to all for free download until the end of this week. Grab it now if you&#8217;re not a SIGGRAPH member. SIGGRAPH members always have Digital Library access to SIGGRAPH-sponsored conferences, even if not Digital Library subscribers, e.g. <a href=\"http://dl.acm.org/citation.cfm?id=2601097&amp;_sm_au_=iVV25TfRTPr0jbK6\">here&#8217;s the SIGGRAPH 2014 proceedings</a>.</li>
<li>New term: <em>froxel </em>&#8211; frustum voxel. Alex Evans mentioned it in <a href=\"http://www.mediamolecule.com/blog/article/siggraph_2015\">his fascinating talk</a> in the Advances in RTR course; on page 83 he notes, &#8220;The term originated at the Sony WWS ATG group, I believe.&#8221; <a href=\"https://twitter.com/self_shadow/status/632342234856333312\">Diagram</a>. He&#8217;s semi-right that Shadertoy programs do ray marching through froxels at their simplest; a speedup for Shadertoy is using the minimum distance-field distance found to any object as a minimum step size (e.g., <a href=\"https://www.shadertoy.com/view/4llXDB\">line 126 of this demo</a>, most of which <a href=\"https://www.flickr.com/photos/11998354@N07/19990143333/in/album-72157654978049134/\">they live-coded</a> during the wonderful Shadertoy studio workshop).</li>
<li><a href=\"http://www.economist.com/node/21660559?fsrc=scn/tw/te/pe/st/aquestionofutility\">Evidence</a> that patents appear to not spur research and innovation, even for big pharma. I like <em>The Economist</em>, as it tries to weigh the evidence for &amp; against some idea, vs. knee-jerking it one way or the other.</li>
<li>Folklore 1: Jim Blinn confirmed that the teapot model was scaled down vertically because it looked nicer that way, not that the pixels were non-square (incorrectly propagated <a href=\"http://www.sjbaker.org/wiki/index.php?title=The_History_of_The_Teapot#The_Teapot_DataSet\">here</a> and <a href=\"http://www.computerhistory.org/revolution/computer-graphics-music-and-art/15/206\">here</a>). <a href=\"https://www.flickr.com/photos/11998354@N07/20424362159/in/album-72157654978049134/\">Jim &amp; 3D printed teapot</a>.</li>
<li>Which reminds me: here&#8217;s my <a href=\"https://www.flickr.com/photos/11998354@N07/sets/72157654978049134\">random set of pics</a> from SIGGRAPH 2015, with captions. I like, &#8220;Hundreds of beautiful designs, and only one or two that suck.&#8221; <em>Update: </em><a href=\"https://www.flickr.com/photos/mvives/sets/72157655112456374/\">more photos</a> from Mauricio Vives, along with <a href=\"https://www.flickr.com/photos/mvives/sets/72157657446681081/\">WebGL specific shots</a>. Need more? <a href=\"https://www.flickr.com/search/?text=siggraph%202015\">Everyone&#8217;s</a>.</li>
<li>Folklore 2: <em>(Updated and corrected)</em> Rendering equation: Kajiya&#8217;s used <em>S</em> as a subscript, in <em><a href=\"http://www.realtimerendering.com/blog/principles-of-digital-image-synthesis-now-free-for-download/\">PoDIS</a></em> Glassner used an omega symbol because it looks like a hemisphere, since that&#8217;s what was being integrated over. <a href=\"https://en.wikipedia.org/wiki/Rendering_equation\">Wikipedia uses it</a>.</li>
</ul>
<p><a href=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/08/unnamed1.jpg\"><img class=\" size-full wp-image-3957 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/08/unnamed1.jpg\" alt=\"unnamed1\" width=\"540\" height=\"127\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/08/unnamed1-300x71.jpg 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/08/unnamed1-500x118.jpg 500w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/08/unnamed1.jpg 540w\" sizes=\"(max-width: 540px) 100vw, 540px\" /></a></p>
<p>Seven more tomorrow.</p>
") (commentRss nil "http://www.realtimerendering.com/blog/seven-things-for-august-18-2015/feed/") (comments nil "0")))) ("Code repository for “journal of graphics tools” updated" "<p>Some staff at Taylor &amp; Francis kindly dug up some of the supplemental materials (mostly code) for the <em>journal of graphics tools</em>, namely, volumes 10-13. I’ve waded through it all and added these resources to the code repository:</p>
<p style=\"padding-left: 30px;\"><strong><a href=\"https://github.com/erich666/jgt-code\">Github JGT repository</a></strong></p>
<p>If you have code from a JGT article that’s not listed here, please do send it on to me and I’ll add it.</p>" "http://www.realtimerendering.com/blog/code-repository-for-journal-of-graphics-tools-updated/" (22147 4021) old 2 nil nil ((title nil "Code repository for “journal of graphics tools” updated") (link nil "http://www.realtimerendering.com/blog/code-repository-for-journal-of-graphics-tools-updated/") (comments nil "http://www.realtimerendering.com/blog/code-repository-for-journal-of-graphics-tools-updated/#respond") (pubDate nil "Tue, 29 Dec 2015 22:56:53 +0000") (creator nil "Eric") (category nil "Resources") (category nil "code") (category nil "Journal of Graphics Tools") (guid ((isPermaLink . "false")) "http://www.realtimerendering.com/blog/?p=4059") (description nil "Some staff at Taylor &#38; Francis kindly dug up some of the supplemental materials (mostly code) for the journal of graphics tools, namely, volumes 10-13. I&#8217;ve waded through it all and added these resources to the code repository: Github JGT repository If you have code from a JGT article that&#8217;s not listed here, please do send it on [&#8230;]") (encoded nil "<p>Some staff at Taylor &amp; Francis kindly dug up some of the supplemental materials (mostly code) for the <em>journal of graphics tools</em>, namely, volumes 10-13. I&#8217;ve waded through it all and added these resources to the code repository:</p>
<p style=\"padding-left: 30px;\"><strong><a href=\"https://github.com/erich666/jgt-code\">Github JGT repository</a></strong></p>
<p>If you have code from a JGT article that&#8217;s not listed here, please do send it on to me and I&#8217;ll add it.</p>
") (commentRss nil "http://www.realtimerendering.com/blog/code-repository-for-journal-of-graphics-tools-updated/feed/") (comments nil "0"))) ("Older books (were) currently free from Springer (- sorry, no longer)" "<p>And, it’s over – Springer appears to have shut the gates a day later. Mistake? Buzz-generating marketing ploy? Who knows? I’ll leave the rest of the post intact, but books are no longer free. Some articles are, such as <a href=\"http://link.springer.com/article/10.1007/s00283-010-9170-7\">Knuth’s</a>.</p>
<p><em>All </em>books from Springer that are ten years old or older are free, <strong><a href=\"http://link.springer.com/search?showAll=false\">go look</a></strong>.</p>
<p>Quoting <a href=\"https://www.facebook.com/vit.tucek/posts/10206716082994215?fref=nf\">Vít Tuček</a> here, from Facebook (reposted by Pete Shirley):</p>
<p style=\"padding-left: 30px;\">Springer has made a lot of math &amp; physics books available online, for free! Everything that is more than 10 years old.</p>
<p style=\"padding-left: 30px;\">If you don’t know which book you may want you can start here <a href=\"http://mathoverflow.net/questions/tagged/books\" target=\"_blank\" rel=\"nofollow\">http://mathoverflow.net/questions/tagged/books</a></p>
<p style=\"padding-left: 30px;\">This links to the Graduate Texts in Mathematics series: <a href=\"https://t.co/R1EYrTrz5w\" target=\"_blank\" rel=\"nofollow\">https://t.co/R1EYrTrz5w<br />
</a><br />
This is for all materials (books, journals, chapters, articles) from all fields: <a href=\"http://goo.gl/cB5rRc\" target=\"_blank\" rel=\"nofollow\">http://goo.gl/cB5rRc</a></p>
<p>This excellent <a href=\"http://link.springer.com/book/10.1007/978-3-662-04245-8\">computational geometry book</a> is available (2nd Edition; the latest, <a href=\"http://link.springer.com/book/10.1007/978-3-540-77974-2\">3rd edition</a> costs money), as is <a href=\"http://link.springer.com/book/10.1007/978-1-4612-1098-6\">this older-but-worthwhile one</a>. For de Berg’s work, the free version is the second edition; other than <a href=\"http://www.cs.uu.nl/geobook/buglist2a.pdf\">these errata fixes</a>, the 3rd edition’s major changes are that Chapter 7 includes information on Voronoi diagrams of line-segments and for farthest point, and Chapter 12 includes BSP trees for low-density scenes.</p>
<p>There are also older computer graphics related books, e.g. <a href=\"http://link.springer.com/book/10.1007/978-1-4612-1428-1\">this one</a> and <a href=\"http://link.springer.com/chapter/10.1007/978-1-4612-4306-9_8\">this</a>. Ancient, but the price is right, and some of this stuff doesn’t change.</p>
<p>Handy list of direct links for the math &amp; physics PDFs <a href=\"https://gist.github.com/bishboria/8326b17bbd652f34566a\">here</a>.</p>
<p>Me, I’m digging around for various recreational math books. One of my favorite books, period, is here: <em><a href=\"http://link.springer.com/book/10.1007/978-1-4757-2733-3\">One Jump Ahead</a></em>. There’s a recreational math book, <em><a href=\"http://link.springer.com/book/10.1007/978-1-4612-2192-0\">Tracking the Automatic Ant</a></em>, a collection from the Mathematical Intelligencer. Some bits of newer stuff from the Mathematical Intelligencer is also available, e.g., an article on <a href=\"http://link.springer.com/article/10.1007/s00283-010-9170-7\">mathematical vanity plates</a> by Knuth, of all people. Some books I can’t find, as Springer’s searcher is pretty wonky, e.g. <em><a href=\"http://smile.amazon.com/Science-Cooking-Peter-Barham/dp/3540674667\">The Science of Cooking</a></em> appears to somehow not exist, though there’s <a href=\"http://link.springer.com/article/10.1186/2044-7248-2-5\">a short article</a> available by the author.</p>
<p>Happy hunting, and <a href=\"mailto:erich@acm.org\">email me</a> or let us know in the comments if you find any other gems related to computer graphics.</p>" "http://www.realtimerendering.com/blog/older-books-currently-free-from-springer/" (22147 212) old 3 nil nil ((title nil "Older books (were) currently free from Springer (- sorry, no longer)") (link nil "http://www.realtimerendering.com/blog/older-books-currently-free-from-springer/") (comments nil "http://www.realtimerendering.com/blog/older-books-currently-free-from-springer/#respond") (pubDate nil "Tue, 29 Dec 2015 21:53:24 +0000") (creator nil "Eric") (category nil "Resources") (guid ((isPermaLink . "false")) "http://www.realtimerendering.com/blog/?p=4057") (description nil "And, it&#8217;s over &#8211; Springer appears to have shut the gates a day later. Mistake? Buzz-generating marketing ploy? Who knows? I&#8217;ll leave the rest of the post intact, but books are no longer free. Some articles are, such as Knuth&#8217;s. All books from Springer that are ten years old or older are free, go look. Quoting Vít Tuček here, [&#8230;]") (encoded nil "<p>And, it&#8217;s over &#8211; Springer appears to have shut the gates a day later. Mistake? Buzz-generating marketing ploy? Who knows? I&#8217;ll leave the rest of the post intact, but books are no longer free. Some articles are, such as <a href=\"http://link.springer.com/article/10.1007/s00283-010-9170-7\">Knuth&#8217;s</a>.</p>
<p><em>All </em>books from Springer that are ten years old or older are free, <strong><a href=\"http://link.springer.com/search?showAll=false\">go look</a></strong>.</p>
<p>Quoting <a href=\"https://www.facebook.com/vit.tucek/posts/10206716082994215?fref=nf\">Vít Tuček</a> here, from Facebook (reposted by Pete Shirley):</p>
<p style=\"padding-left: 30px;\">Springer has made a lot of math &amp; physics books available online, for free! Everything that is more than 10 years old.</p>
<p style=\"padding-left: 30px;\">If you don&#8217;t know which book you may want you can start here <a href=\"http://mathoverflow.net/questions/tagged/books\" target=\"_blank\" rel=\"nofollow\">http://mathoverflow.net/questions/tagged/books</a></p>
<p style=\"padding-left: 30px;\">This links to the Graduate Texts in Mathematics series: <a href=\"https://t.co/R1EYrTrz5w\" target=\"_blank\" rel=\"nofollow\">https://t.co/R1EYrTrz5w<br />
</a><br />
This is for all materials (books, journals, chapters, articles) from all fields: <a href=\"http://goo.gl/cB5rRc\" target=\"_blank\" rel=\"nofollow\">http://goo.gl/cB5rRc</a></p>
<p>This excellent <a href=\"http://link.springer.com/book/10.1007/978-3-662-04245-8\">computational geometry book</a> is available (2nd Edition; the latest, <a href=\"http://link.springer.com/book/10.1007/978-3-540-77974-2\">3rd edition</a> costs money), as is <a href=\"http://link.springer.com/book/10.1007/978-1-4612-1098-6\">this older-but-worthwhile one</a>. For de Berg&#8217;s work, the free version is the second edition; other than <a href=\"http://www.cs.uu.nl/geobook/buglist2a.pdf\">these errata fixes</a>, the 3rd edition&#8217;s major changes are that Chapter 7 includes information on Voronoi diagrams of line-segments and for farthest point, and Chapter 12 includes BSP trees for low-density scenes.</p>
<p>There are also older computer graphics related books, e.g. <a href=\"http://link.springer.com/book/10.1007/978-1-4612-1428-1\">this one</a> and <a href=\"http://link.springer.com/chapter/10.1007/978-1-4612-4306-9_8\">this</a>. Ancient, but the price is right, and some of this stuff doesn&#8217;t change.</p>
<p>Handy list of direct links for the math &amp; physics PDFs <a href=\"https://gist.github.com/bishboria/8326b17bbd652f34566a\">here</a>.</p>
<p>Me, I&#8217;m digging around for various recreational math books. One of my favorite books, period, is here: <em><a href=\"http://link.springer.com/book/10.1007/978-1-4757-2733-3\">One Jump Ahead</a></em>. There&#8217;s a recreational math book, <em><a href=\"http://link.springer.com/book/10.1007/978-1-4612-2192-0\">Tracking the Automatic Ant</a></em>, a collection from the Mathematical Intelligencer. Some bits of newer stuff from the Mathematical Intelligencer is also available, e.g., an article on <a href=\"http://link.springer.com/article/10.1007/s00283-010-9170-7\">mathematical vanity plates</a> by Knuth, of all people. Some books I can&#8217;t find, as Springer&#8217;s searcher is pretty wonky, e.g. <em><a href=\"http://smile.amazon.com/Science-Cooking-Peter-Barham/dp/3540674667\">The Science of Cooking</a></em> appears to somehow not exist, though there&#8217;s <a href=\"http://link.springer.com/article/10.1186/2044-7248-2-5\">a short article</a> available by the author.</p>
<p>Happy hunting, and <a href=\"mailto:erich@acm.org\">email me</a> or let us know in the comments if you find any other gems related to computer graphics.</p>
") (commentRss nil "http://www.realtimerendering.com/blog/older-books-currently-free-from-springer/feed/") (comments nil "0"))) ("Reflections on a WebGL MOOC" "<p>Ed Angel<br />
Professor Emeritus of Computer Science<br />
University of New Mexico<br />
<a href=\"http://www.cs.unm.edu/~angel\">http://www.cs.unm.edu/~angel</a><br />
angel@cs.unm.edu</p>
<p>[<em>This is a guest post from Ed on a subject near and dear to my heart, online learning. – Eric</em>]</p>
<p>Recently I finished teaching a Coursera MOOC entitled <em><a href=\"https://www.coursera.org/course/webgl\">Interactive Computer Graphics with WebGL</a></em>. Having taken Eric’s excellent <a href=\"http://bit.ly/ericity\">three.js course</a> with Udacity, I was interested in doing a very different course. The experience was interesting, at times exasperating, ultimately rewarding and a lot of work. Here are some of my observations, many of which echo some of Eric’s on previous blog posts, and many that relate to the present state of MOOCs.</p>
<p>First, something about me and my course. I’m the coauthor, with Dave Shreiner, of the textbook <a href=\"http://smile.amazon.com/Interactive-Computer-Graphics-WebGL-Edition/dp/0133574849?tag=realtimerenderin\"><strong>Interactive Computer Graphics</strong>,</a> which is now in its seventh edition. It has been the standard textbook for in computer graphics for students in computer science and engineering. For the seventh edition we switched from OpenGL to WebGL, which has turned out to be an excellent decision. We’ve also done both OpenGL and WebGL SIGGRAPH courses, which are now on <a href=\"https://www.youtube.com/playlist?list=PLUPhVMQuDB_aWSKj7L_-3Ot_nxBze_YMy\">Youtube at SIGRRAPH U</a>. Given the explosion of interest in WebGL over the past year, I decided to do a MOOC using WebGL. For those of you unfamiliar with WebGL or interested in what I do in my academic course, there’s <a href=\"http://www.cs.unm.edu/~angel/BOOK/INTERACTIVE_COMPUTER_GRAPHICS/SEVENTH_EDITION/CODE/\">lots of sample code here</a> that was also available to the students in the MOOC.</p>
<p>What we teach under the title of Computer Graphics can be very different depending on the audience. For those in the application world, such as the CAD community, who want to use computer graphics at a high level and not worry about writing shaders (or even knowing about shaders), three.js is a powerful tool built on top of WebGL. Users of three.js can reap many of the advantages of WebGL without writing a single line of WebGL code. On the other hand, students in Computer Science and Computer Engineering focus on “what’s beneath the hood”: shaders, algorithms, architectures. The two MOOCs, Eric’s and mine, are completely complementary and pretty much at the same level.</p>
<p><strong>Course Outline</strong></p>
<p>A fundamental premise of my 30+ years of teaching computer graphics is that students should be able to write complete applications as early as possible. While this philosophy is fairly common in university courses, it very uncommon in programming MOOCs. There are many reasons for this. The two key ones are the time needed to do a complete program and the problem of grading thousands of assignments. Nevertheless, I did not want to teach the course unless I could require complete programs, each one satisfying a set of requirements.</p>
<p>Because WebGL runs in all recent browsers, students needed only have access to a public website where they could put their assignments. Then they only had to submit the URL to let the graders run the code and see the source. I referred the students who did not have public websites to <a href=\"http://codepen.io/\">codepen.io</a>. This mechanism worked wonderfully. The fact that the applications were on public sites never became an issue.</p>
<p>Here are the five assignments,  with some student postings folded in:</p>
<p>1. Tessellation and Twist: Twist is rotation, where the amount of rotation depends on the distance from the origin. It is can best be done in a vertex shader. The assignment starts with a single triangle centered at the origin. Twist applied to its three vertices does not result in a very interesting display. However, if we tessellate the triangle by recursive subdivision, the vertices of the smaller triangles are different distances from the origin, which creates a display in which the filled triangles have a curved outline. I give them some examples so that they need not write a lot of code to do this problem. It not only serves as test as to whether they have sufficient background for the course, they get to see what even a simple shader can do.</p>
<p><a href=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course1.jpg\"><img class=\"size-full wp-image-4044 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course1.jpg\" alt=\"course1\" width=\"1081\" height=\"442\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course1-300x123.jpg 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course1-1024x419.jpg 1024w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course1-500x204.jpg 500w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course1.jpg 1081w\" sizes=\"(max-width: 1081px) 100vw, 1081px\" /></a></p>
<p>2. Line Drawing: The minimum requirement was to create an application that rendered line segments following mouse clicks. There were many options, such as letting the user change the line thickness via a menu. The main goal was to bring in interactivity through event listeners and involved both JS and a little HTML5.</p>
<p><a href=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course2.jpg\"><img class=\"size-full wp-image-4045 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course2.jpg\" alt=\"course2\" width=\"1185\" height=\"508\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course2-300x129.jpg 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course2-1024x439.jpg 1024w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course2-500x214.jpg 500w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course2.jpg 1185w\" sizes=\"(max-width: 1185px) 100vw, 1185px\" /></a></p>
<p>3. A Mini CAD system: Create a scene by adding objects to a scene. Minimally, the application had to have two object types and the instance transform was to be determined interactively. There was code available for spheres and cubes but they were encouraged to add cylinders and/or cones. Because we had yet to cover lighting most students built applications that rendered each 3D object twice, once filled and once with lines.</p>
<p><a href=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course3.jpg\"><img class=\"size-full wp-image-4043 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course3.jpg\" alt=\"course3\" width=\"1117\" height=\"760\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course3-300x204.jpg 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course3-1024x697.jpg 1024w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course3-441x300.jpg 441w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course3.jpg 1117w\" sizes=\"(max-width: 1117px) 100vw, 1117px\" /></a></p>
<p>4. Adding Lighting: Students had to write shaders to add lighting to their CAD systems. They were encouraged to compare implementing per-vertex lighting with per-fragment lighting.</p>
<p><a href=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course4.jpg\"><img class=\"size-full wp-image-4047 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course4.jpg\" alt=\"course4\" width=\"1053\" height=\"524\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course4-300x149.jpg 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course4-1024x510.jpg 1024w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course4-500x249.jpg 500w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course4.jpg 1053w\" sizes=\"(max-width: 1053px) 100vw, 1053px\" /></a></p>
<p>5. Adding Texture Mapping: Applications had to add textures to a sphere. They were asked to use both an image and a generated checkerboard pattern as textures and to use two different methods of assigning texture coordinates.</p>
<p><a href=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course5.jpg\"><img class=\"size-full wp-image-4046 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course5.jpg\" alt=\"course5\" width=\"657\" height=\"800\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course5-246x300.jpg 246w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course5.jpg 657w\" sizes=\"(max-width: 657px) 100vw, 657px\" /></a></p>
<p>Assignment 3 proved to be more difficult than I anticipated and if I did it again I’d probably eliminate or simplify Assignment 2 and simplify Assignment 3. Students who went through the whole course loved the last couple of assignments and the freedom they had to experiment. They even created web pages to share their results. See <a href=\"http://www.cs.unm.edu/~angel/COURSERA/SCREEN_SHOTS/\">screen shots here</a>.</p>
<p><strong>The Numbers</strong></p>
<p>Initially about 14,500 signed up for the course. However, only 5,500 ever watched even the first video. I still can’t figure out why 9,000 would sign up and then never even take a look. After the first week, I had about 2,500 remaining. Fair enough, since the first week’s videos enabled them to see if the content was what the wanted and if they had the time and background to continue.</p>
<p>Of the remaining 2500, about 1000 went through all the videos. Many of them did at least some of the projects, or even all of them, but didn’t care about getting a certificate. In the end, 282 participants earned certificates, including, I believe, all the ones who paid for a verified certificate.</p>
<p>I don’t know what is the best way to evaluate these numbers, Certainly using 282 out of 14,500 makes little sense. Personally I prefer 1000 out of 2500. The 2500 represents people who really were interested and the 1000 went all the way through in one way or another.</p>
<p><strong>Working with Coursera</strong></p>
<p>My institution, the University of New Mexico, was one of the first public institutions to partner with Coursera. Having followed Eric’s course and his blog about doing a course with Udacity, I was curious about the differences. And there are many. Perhaps the most significant is that Coursera leaves virtually all the course development and support to the partner institution. Since UNM, like most public institutions, is under considerable financial stress, the course was pretty much a do-it-yourself (unpaid) venture. With the exception of 2-3 minute videos we recorded on campus to introduce each week’s lessons, I recorded all the videos on my iMac with Camtasia. These were later minimally edited by UNM’s Extended Learning staff. As weird as it may seem, one can actually get pretty good at giving an animated presentation talking to your computer. I had a similar experience to Eric in finding that making changes to a video is extremely difficult. Since the each video is fairly short, I learned to just rerecord a video instead of trying to cut and paste within an existing one.</p>
<p>The major problem I had was dealing with Coursera’s software. Some crucial parts, such as keeping the courses available 24/7 and managing the discussion forums, worked really well. However, there were many other problems that ate large amounts of time, both mine and the students’. These included lack of and bad documentation, unannounced changes to the website, rigidity of the software, and unresponsiveness to problems. It was interesting that many of the students were aware of these issues from previous courses but still were taking many MOOC courses.</p>
<p><strong>MOOCs and Professional Development</strong></p>
<p>If I compare my course to my (or any) regular academic CS course, it’s not even close in academic content. How can it be otherwise when there’s no book allowed, there’s a lower level entry requirement, and not enough time to assign the amount of work we would expect in an academic course?</p>
<p>As a professional development course, it’s more interesting. I’ve taught well over 100 professional development courses, both in person and online, to audiences ranging from the twenties to the hundreds. The majority were in a concentrated four-day format. I realized after I had finished the MOOC that the hours of video in the MOOC were very close to the amount of lecturing I would do in an intensive four-day course. But I also realized that the MOOC is a superior method for professional development. Besides the fact that it is essentially free, the material is spread over a longer period, allowing participants flexibility in when they learn and giving them time to do serious programming exercises. Looking at the analytics available from my course, it’s clear that the vast majority of the learners have figured this out and are there for professional development.</p>
<p><strong>Why are State Universities and Colleges doing MOOCs?</strong></p>
<p>My experience, reinforced by talking to participants and other MOOC instructors, led me to question why UNM or any state institution is involved with MOOCs. While I can understand the desire to try new educational methods and the idealism that many of us believed would enable us to provide first class technical education to the developing world, two things should have pretty obvious from the beginning. First, the business model under which we have done our MOOC courses makes no sense; there had to a lot of self-delusion to believe that verified certificates would bring in enough money to cover our expenses. Out of 14,500 “learners” who initially signed up for my course, all of 200 signed up for verified certificates, generating $10,000 in revenue, revenue that is shared between Coursera and UNM. That’s not going to pay even minimal costs.</p>
<p>What’s more troublesome is that MOOC courses are not academic courses. They’re not even close. So why, when public institutions are facing all kinds of financial problems to support their own students, are they putting resources into professional development courses for people outside of their own regions? Some institutions have recognized this problem. I note that many of the offerings by Coursera are now coming from self-supporting Continuing Education/Professional Development units of Universities and not from the academic units.</p>
<p><strong>MOOC Computer Programming Courses</strong></p>
<p>There’s a level of delusion that I’ve seen with almost all MOOC programming courses (<a href=\"https://www.coursera.org/\">Coursera</a>, <a href=\"https://www.udacity.com\">Udacity</a>, <a href=\"https://code.org/\">Code.org</a>, <a href=\"https://www.khanacademy.org/\">Khan</a>, <a href=\"https://www.codecademy.com/\">Codecademy</a>). These courses claim to teach a programming skill in a few weeks with the learner spending only a few hours a week. What happens in these courses is that the learner never writes a complete program but rather changes a line or two of code or adds a few lines to an existing program. Easy to check and grade by computer but in the end the student cannot write a complete program using her new skill but is deluded into believing she can. After all, she has a certificate of completion; often for many such courses. This becoming a serious and more widely recognized problem in the real world, which is getting filled with “programmers” who can’t program but have been told they can based on their experience with online courses.</p>
<p>When I decided to do my MOOC, I was adamant that it would require participants to design complete programs from a set of specifications. In spite of the clear prerequisites for the course, a majority of the participants could not even get started on the simplest of my assignments, one that could have been done by changing four or five lines of code in an example I gave them. Most of them couldn’t even take the problem statement and figure out that this was all they had to do. On the other hand, the participants who came in with real programming experience absolutely loved the course and did some remarkable work. Through the discussion forums I was able to establish relationships with a number of these students and these interactions were as rewarding as any in my 40+ years of teaching computer courses.</p>
<p><strong>How I Would Do It Again If I Were To Do It Again</strong></p>
<p>There’s a lot of if’s here but it’s conceivable that I might, with adequate support this time, do it again. It would involve almost as much work the first time since I’d rerecord the videos but what I have in mind might be a step towards a more stable MOOC that could break down some of the barriers between academia and professional development. I see the MOOC as remaining at 10 weeks with much the same outline. I’d start it at the same time as an academic semester. Students who want academic credit would also register for my regular online computer graphics class. All students would use the MOOC videos for the first 10 weeks but those registered for the University course would have additional reading and variants on the MOOC programming assignments. I would also meet with these students either live or via video conferencing, thus making the course more of a <a href=\"https://en.wikipedia.org/wiki/Flipped_classroom\">flipped classroom</a>. After the 10 week MOOC was over, I would continue working with the university students on projects and advanced topics for the rest of the 15 week semester.</p>
<p>In addition, if the University could figure out how to do this and what to charge, I’d open the academic course to students outside the university who could take the course as non-degree students at a reduced tuition. Such credit would be transferable to other academic programs. Exploring such a format might move us in a direction that helps state institutions with their financial issues, leads to a working business models for MOOC providers, and at the same time, fulfills many of the idealist goals that many of us have for MOOCs.</p>" "http://www.realtimerendering.com/blog/reflections-on-a-webgl-mooc/" (22076 44751) old 4 nil nil ((title nil "Reflections on a WebGL MOOC") (link nil "http://www.realtimerendering.com/blog/reflections-on-a-webgl-mooc/") (comments nil "http://www.realtimerendering.com/blog/reflections-on-a-webgl-mooc/#comments") (pubDate nil "Fri, 06 Nov 2015 13:44:47 +0000") (creator nil "Eric") (category nil "Miscellaneous") (category nil "WebGL") (category nil "MOOCs") (guid ((isPermaLink . "false")) "http://www.realtimerendering.com/blog/?p=4039") (description nil "Ed Angel Professor Emeritus of Computer Science University of New Mexico http://www.cs.unm.edu/~angel angel@cs.unm.edu [This is a guest post from Ed on a subject near and dear to my heart, online learning. &#8211; Eric] Recently I finished teaching a Coursera MOOC entitled Interactive Computer Graphics with WebGL. Having taken Eric’s excellent three.js course with Udacity, I [&#8230;]") (encoded nil "<p>Ed Angel<br />
Professor Emeritus of Computer Science<br />
University of New Mexico<br />
<a href=\"http://www.cs.unm.edu/~angel\">http://www.cs.unm.edu/~angel</a><br />
angel@cs.unm.edu</p>
<p>[<em>This is a guest post from Ed on a subject near and dear to my heart, online learning. &#8211; Eric</em>]</p>
<p>Recently I finished teaching a Coursera MOOC entitled <em><a href=\"https://www.coursera.org/course/webgl\">Interactive Computer Graphics with WebGL</a></em>. Having taken Eric’s excellent <a href=\"http://bit.ly/ericity\">three.js course</a> with Udacity, I was interested in doing a very different course. The experience was interesting, at times exasperating, ultimately rewarding and a lot of work. Here are some of my observations, many of which echo some of Eric’s on previous blog posts, and many that relate to the present state of MOOCs.</p>
<p>First, something about me and my course. I’m the coauthor, with Dave Shreiner, of the textbook <a href=\"http://smile.amazon.com/Interactive-Computer-Graphics-WebGL-Edition/dp/0133574849?tag=realtimerenderin\"><strong>Interactive Computer Graphics</strong>,</a> which is now in its seventh edition. It has been the standard textbook for in computer graphics for students in computer science and engineering. For the seventh edition we switched from OpenGL to WebGL, which has turned out to be an excellent decision. We’ve also done both OpenGL and WebGL SIGGRAPH courses, which are now on <a href=\"https://www.youtube.com/playlist?list=PLUPhVMQuDB_aWSKj7L_-3Ot_nxBze_YMy\">Youtube at SIGRRAPH U</a>. Given the explosion of interest in WebGL over the past year, I decided to do a MOOC using WebGL. For those of you unfamiliar with WebGL or interested in what I do in my academic course, there’s <a href=\"http://www.cs.unm.edu/~angel/BOOK/INTERACTIVE_COMPUTER_GRAPHICS/SEVENTH_EDITION/CODE/\">lots of sample code here</a> that was also available to the students in the MOOC.</p>
<p>What we teach under the title of Computer Graphics can be very different depending on the audience. For those in the application world, such as the CAD community, who want to use computer graphics at a high level and not worry about writing shaders (or even knowing about shaders), three.js is a powerful tool built on top of WebGL. Users of three.js can reap many of the advantages of WebGL without writing a single line of WebGL code. On the other hand, students in Computer Science and Computer Engineering focus on “what’s beneath the hood”: shaders, algorithms, architectures. The two MOOCs, Eric’s and mine, are completely complementary and pretty much at the same level.</p>
<p><strong>Course Outline</strong></p>
<p>A fundamental premise of my 30+ years of teaching computer graphics is that students should be able to write complete applications as early as possible. While this philosophy is fairly common in university courses, it very uncommon in programming MOOCs. There are many reasons for this. The two key ones are the time needed to do a complete program and the problem of grading thousands of assignments. Nevertheless, I did not want to teach the course unless I could require complete programs, each one satisfying a set of requirements.</p>
<p>Because WebGL runs in all recent browsers, students needed only have access to a public website where they could put their assignments. Then they only had to submit the URL to let the graders run the code and see the source. I referred the students who did not have public websites to <a href=\"http://codepen.io/\">codepen.io</a>. This mechanism worked wonderfully. The fact that the applications were on public sites never became an issue.</p>
<p>Here are the five assignments,  with some student postings folded in:</p>
<p>1. Tessellation and Twist: Twist is rotation, where the amount of rotation depends on the distance from the origin. It is can best be done in a vertex shader. The assignment starts with a single triangle centered at the origin. Twist applied to its three vertices does not result in a very interesting display. However, if we tessellate the triangle by recursive subdivision, the vertices of the smaller triangles are different distances from the origin, which creates a display in which the filled triangles have a curved outline. I give them some examples so that they need not write a lot of code to do this problem. It not only serves as test as to whether they have sufficient background for the course, they get to see what even a simple shader can do.</p>
<p><a href=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course1.jpg\"><img class=\"size-full wp-image-4044 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course1.jpg\" alt=\"course1\" width=\"1081\" height=\"442\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course1-300x123.jpg 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course1-1024x419.jpg 1024w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course1-500x204.jpg 500w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course1.jpg 1081w\" sizes=\"(max-width: 1081px) 100vw, 1081px\" /></a></p>
<p>2. Line Drawing: The minimum requirement was to create an application that rendered line segments following mouse clicks. There were many options, such as letting the user change the line thickness via a menu. The main goal was to bring in interactivity through event listeners and involved both JS and a little HTML5.</p>
<p><a href=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course2.jpg\"><img class=\"size-full wp-image-4045 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course2.jpg\" alt=\"course2\" width=\"1185\" height=\"508\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course2-300x129.jpg 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course2-1024x439.jpg 1024w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course2-500x214.jpg 500w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course2.jpg 1185w\" sizes=\"(max-width: 1185px) 100vw, 1185px\" /></a></p>
<p>3. A Mini CAD system: Create a scene by adding objects to a scene. Minimally, the application had to have two object types and the instance transform was to be determined interactively. There was code available for spheres and cubes but they were encouraged to add cylinders and/or cones. Because we had yet to cover lighting most students built applications that rendered each 3D object twice, once filled and once with lines.</p>
<p><a href=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course3.jpg\"><img class=\"size-full wp-image-4043 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course3.jpg\" alt=\"course3\" width=\"1117\" height=\"760\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course3-300x204.jpg 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course3-1024x697.jpg 1024w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course3-441x300.jpg 441w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course3.jpg 1117w\" sizes=\"(max-width: 1117px) 100vw, 1117px\" /></a></p>
<p>4. Adding Lighting: Students had to write shaders to add lighting to their CAD systems. They were encouraged to compare implementing per-vertex lighting with per-fragment lighting.</p>
<p><a href=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course4.jpg\"><img class=\"size-full wp-image-4047 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course4.jpg\" alt=\"course4\" width=\"1053\" height=\"524\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course4-300x149.jpg 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course4-1024x510.jpg 1024w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course4-500x249.jpg 500w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course4.jpg 1053w\" sizes=\"(max-width: 1053px) 100vw, 1053px\" /></a></p>
<p>5. Adding Texture Mapping: Applications had to add textures to a sphere. They were asked to use both an image and a generated checkerboard pattern as textures and to use two different methods of assigning texture coordinates.</p>
<p><a href=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course5.jpg\"><img class=\"size-full wp-image-4046 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course5.jpg\" alt=\"course5\" width=\"657\" height=\"800\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course5-246x300.jpg 246w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/11/course5.jpg 657w\" sizes=\"(max-width: 657px) 100vw, 657px\" /></a></p>
<p>Assignment 3 proved to be more difficult than I anticipated and if I did it again I’d probably eliminate or simplify Assignment 2 and simplify Assignment 3. Students who went through the whole course loved the last couple of assignments and the freedom they had to experiment. They even created web pages to share their results. See <a href=\"http://www.cs.unm.edu/~angel/COURSERA/SCREEN_SHOTS/\">screen shots here</a>.</p>
<p><strong>The Numbers</strong></p>
<p>Initially about 14,500 signed up for the course. However, only 5,500 ever watched even the first video. I still can’t figure out why 9,000 would sign up and then never even take a look. After the first week, I had about 2,500 remaining. Fair enough, since the first week’s videos enabled them to see if the content was what the wanted and if they had the time and background to continue.</p>
<p>Of the remaining 2500, about 1000 went through all the videos. Many of them did at least some of the projects, or even all of them, but didn’t care about getting a certificate. In the end, 282 participants earned certificates, including, I believe, all the ones who paid for a verified certificate.</p>
<p>I don’t know what is the best way to evaluate these numbers, Certainly using 282 out of 14,500 makes little sense. Personally I prefer 1000 out of 2500. The 2500 represents people who really were interested and the 1000 went all the way through in one way or another.</p>
<p><strong>Working with Coursera</strong></p>
<p>My institution, the University of New Mexico, was one of the first public institutions to partner with Coursera. Having followed Eric’s course and his blog about doing a course with Udacity, I was curious about the differences. And there are many. Perhaps the most significant is that Coursera leaves virtually all the course development and support to the partner institution. Since UNM, like most public institutions, is under considerable financial stress, the course was pretty much a do-it-yourself (unpaid) venture. With the exception of 2-3 minute videos we recorded on campus to introduce each week&#8217;s lessons, I recorded all the videos on my iMac with Camtasia. These were later minimally edited by UNM’s Extended Learning staff. As weird as it may seem, one can actually get pretty good at giving an animated presentation talking to your computer. I had a similar experience to Eric in finding that making changes to a video is extremely difficult. Since the each video is fairly short, I learned to just rerecord a video instead of trying to cut and paste within an existing one.</p>
<p>The major problem I had was dealing with Coursera’s software. Some crucial parts, such as keeping the courses available 24/7 and managing the discussion forums, worked really well. However, there were many other problems that ate large amounts of time, both mine and the students’. These included lack of and bad documentation, unannounced changes to the website, rigidity of the software, and unresponsiveness to problems. It was interesting that many of the students were aware of these issues from previous courses but still were taking many MOOC courses.</p>
<p><strong>MOOCs and Professional Development</strong></p>
<p>If I compare my course to my (or any) regular academic CS course, it’s not even close in academic content. How can it be otherwise when there’s no book allowed, there&#8217;s a lower level entry requirement, and not enough time to assign the amount of work we would expect in an academic course?</p>
<p>As a professional development course, it’s more interesting. I’ve taught well over 100 professional development courses, both in person and online, to audiences ranging from the twenties to the hundreds. The majority were in a concentrated four-day format. I realized after I had finished the MOOC that the hours of video in the MOOC were very close to the amount of lecturing I would do in an intensive four-day course. But I also realized that the MOOC is a superior method for professional development. Besides the fact that it is essentially free, the material is spread over a longer period, allowing participants flexibility in when they learn and giving them time to do serious programming exercises. Looking at the analytics available from my course, it’s clear that the vast majority of the learners have figured this out and are there for professional development.</p>
<p><strong>Why are State Universities and Colleges doing MOOCs?</strong></p>
<p>My experience, reinforced by talking to participants and other MOOC instructors, led me to question why UNM or any state institution is involved with MOOCs. While I can understand the desire to try new educational methods and the idealism that many of us believed would enable us to provide first class technical education to the developing world, two things should have pretty obvious from the beginning. First, the business model under which we have done our MOOC courses makes no sense; there had to a lot of self-delusion to believe that verified certificates would bring in enough money to cover our expenses. Out of 14,500 “learners” who initially signed up for my course, all of 200 signed up for verified certificates, generating $10,000 in revenue, revenue that is shared between Coursera and UNM. That’s not going to pay even minimal costs.</p>
<p>What’s more troublesome is that MOOC courses are not academic courses. They’re not even close. So why, when public institutions are facing all kinds of financial problems to support their own students, are they putting resources into professional development courses for people outside of their own regions? Some institutions have recognized this problem. I note that many of the offerings by Coursera are now coming from self-supporting Continuing Education/Professional Development units of Universities and not from the academic units.</p>
<p><strong>MOOC Computer Programming Courses</strong></p>
<p>There’s a level of delusion that I’ve seen with almost all MOOC programming courses (<a href=\"https://www.coursera.org/\">Coursera</a>, <a href=\"https://www.udacity.com\">Udacity</a>, <a href=\"https://code.org/\">Code.org</a>, <a href=\"https://www.khanacademy.org/\">Khan</a>, <a href=\"https://www.codecademy.com/\">Codecademy</a>). These courses claim to teach a programming skill in a few weeks with the learner spending only a few hours a week. What happens in these courses is that the learner never writes a complete program but rather changes a line or two of code or adds a few lines to an existing program. Easy to check and grade by computer but in the end the student cannot write a complete program using her new skill but is deluded into believing she can. After all, she has a certificate of completion; often for many such courses. This becoming a serious and more widely recognized problem in the real world, which is getting filled with “programmers” who can’t program but have been told they can based on their experience with online courses.</p>
<p>When I decided to do my MOOC, I was adamant that it would require participants to design complete programs from a set of specifications. In spite of the clear prerequisites for the course, a majority of the participants could not even get started on the simplest of my assignments, one that could have been done by changing four or five lines of code in an example I gave them. Most of them couldn’t even take the problem statement and figure out that this was all they had to do. On the other hand, the participants who came in with real programming experience absolutely loved the course and did some remarkable work. Through the discussion forums I was able to establish relationships with a number of these students and these interactions were as rewarding as any in my 40+ years of teaching computer courses.</p>
<p><strong>How I Would Do It Again If I Were To Do It Again</strong></p>
<p>There’s a lot of if’s here but it’s conceivable that I might, with adequate support this time, do it again. It would involve almost as much work the first time since I’d rerecord the videos but what I have in mind might be a step towards a more stable MOOC that could break down some of the barriers between academia and professional development. I see the MOOC as remaining at 10 weeks with much the same outline. I’d start it at the same time as an academic semester. Students who want academic credit would also register for my regular online computer graphics class. All students would use the MOOC videos for the first 10 weeks but those registered for the University course would have additional reading and variants on the MOOC programming assignments. I would also meet with these students either live or via video conferencing, thus making the course more of a <a href=\"https://en.wikipedia.org/wiki/Flipped_classroom\">flipped classroom</a>. After the 10 week MOOC was over, I would continue working with the university students on projects and advanced topics for the rest of the 15 week semester.</p>
<p>In addition, if the University could figure out how to do this and what to charge, I’d open the academic course to students outside the university who could take the course as non-degree students at a reduced tuition. Such credit would be transferable to other academic programs. Exploring such a format might move us in a direction that helps state institutions with their financial issues, leads to a working business models for MOOC providers, and at the same time, fulfills many of the idealist goals that many of us have for MOOCs.</p>
") (commentRss nil "http://www.realtimerendering.com/blog/reflections-on-a-webgl-mooc/feed/") (comments nil "1"))) ("“Journal of Graphics Tools” Code Repository" "<p>Once upon a time the <em><a href=\"http://www.tandfonline.com/loi/ujgt21\">Journal of Graphics Tools</a> </em>had code associated with many of its articles. This was in fact one of the selling points for the journal, which grew out of the <a href=\"http://graphicsgems.org\"><em>Graphics Gems</em> </a>series of books. When Taylor &amp; Francis acquired A.K. Peters back in 2010, they moved the journal to <a href=\"http://www.tandfonline.com/action/showPublications\">their vast collection of other journals</a> (2671 and counting). The code repository didn’t fit their web template, so they no longer hosted the code. At the time I wasn’t so concerned, as the <a href=\"https://archive.org/web/\">Wayback Machine</a> mirrored the abstracts and code collection of the old A.K. Peters site. Something happened this year and those backup pages are now gone, e.g., <a href=\"https://web.archive.org/web/20140214121750/http://web.archive.org/web/20110707101838/http://jgt.akpeters.com/\">this link</a> used to work.</p>
<p>So, time to rebuild. I’ve maintained the <a href=\"http://graphicsgems.org\">Graphics Gems repository</a> for a few decades; how hard could it be to rebuild a recently-lost code archive? Well, we’ll see. I’ve written Taylor &amp; Francis in hopes that someone knows where they put that DVD or whatever with the code archive. Fingers crossed. In the meantime I’ve been looking around and asking around. Here’s what I’ve collected so far:</p>
<h2><a href=\"https://github.com/erich666/jgt-code\">“Journal of Graphics Tools” Code Repository</a></h2>
<p>Enjoy what bits are there, and please send me any code you’ve saved that is related to a JGT article. You don’t have to be an author, just a pack-rat. I know that at least one author I asked could not find a backup of his article’s code. I personally can relate: back in 1985 I finished my master’s thesis. A few months later I realized I should get copies of images from my thesis work (in the Utah RLE format – ahhh, memories; astoundingly, <a href=\"http://www.cs.utah.edu/gdc/projects/urt/\">that site is still around</a>, things put on cs.utah.edu appear to stay there forever). One backup tape was glitched, so I lost about half my images.</p>
<p>Time for <a href=\"http://worrydream.com/TheWebOfAlexandria/\">an analogy with the Library of Alexandria</a> (pointed out to me by Jason Mitchell). Go read that article, it’s short, and makes an excellent point. Shorter still is <a href=\"https://twitter.com/worrydream/status/478087637031325697\">a tweet</a> by the same person which shows the practical effect of our general lack of redundancy. Gamasutra/Game Developer code repository? Gone (AFAIK). The lovely ompf.org forum about real-time ray tracing? Gone. Various game and film company article collections, various useful blogs, various cool resources? Gone baby gone. I encounter this loss every time I update <a href=\"http://www.realtimerendering.com/portal.html\">our portal page</a> or the <a href=\"http://tog.acm.org/bib_look.cfm\">ACM TOG resources page</a>. Of course the “portal” term itself is at least a decade out of style (remember <a href=\"http://www.cringely.com/2015/10/21/why-yahoo-is-worth-less-than-nothing/\">Yahoo</a>?), but knowing where to find the good stuff is still valuable. When some bit of the good stuff goes away, how sad. Sure, there’s <a href=\"https://en.wikipedia.org/wiki/Sturgeon%27s_law\">Sturgeon’s Law</a>, but the 10% also sometimes disappears.</p>
<p>I’ve had this vague feeling for decades, ever since I started to collect bits and pieces for the Ray Tracing News in 1987, that I’m playing the role of a medieval monk attempting to keep some small bits and pieces of knowledge from disappearing. In fact, the Ray Tracing News archive briefly disappeared when ACM TOG reorganized their site; I moved it to <a href=\"http://www.realtimerendering.com/resources/RTNews/html/\">realtimerendering.com</a>. My takeaway for internet resources is “trust no one”, not even myself, since I probably don’t have an infinite life span. The <a href=\"http://worrydream.com/TheWebOfAlexandria/\">Bret Victor article</a> I mentioned last paragraph (is the article still available? I guess it depends when you read this posting…) points out the problem, but I know of no good solution right now. The Internet Archive’s Wayback Machine is related to <a href=\"http://www.bibalex.org/en/project/details?documentid=283\">Bibliotheca Alexandrina</a>, which is something like naming your new ship the Titanica. The irony, she drips, that this archive somehow lost the Journal of Graphic Tools’ code (<em>update:</em> my guess is someone recently popped in a <a href=\"http://www.economist.com/blogs/babbage/2014/01/internet-permanence\">robots.txt</a> on the dead site). I’m of course now kicking myself for not making a copy of JGT’s code base myself back when I had the chance.</p>
<p>Maybe a better takeaway is “trust everyone.” My one positive suggestion is “make it a zip.” If you have a resource, make the whole site downloadable as one big zip so that it’s easy for you and others to back up. Github offers this automatically. If zipping had been done with JGT’s site, I’d probably have a copy. I have a sort of future sadness for the day <a href=\"http://paulbourke.net/\">Paul Bourke’s</a> or <a href=\"http://steve.hollasch.net/cgindex/index.html\">Steve Hollasch’s</a> sites disappear. There are utilities such as <a href=\"https://www.httrack.com/\">HTTrack</a> where one could grab a whole web site, but who wants to mess with that? Well, I now do, but for Hollasch it won’t matter all that much, since he links to lots of external pages (by the way, <a href=\"http://home.snafu.de/tilman/xenulink.html\">Xenu</a> is a wonderful free dead link checker). Steve Hollasch’s site, 76 files, sum up to 798 kb – so much more valuable than just about any iPhone photo, which is more than twice as large. Bourke’s site, which includes many PDFs and zips and whatnot, is quite large – it’s still downloading – it might be the size of a <a href=\"https://itunes.apple.com/us/tv-season/rick-and-morty-season-1/id741096885\">season of Rick and Morty</a> (which BTW is a great show). But, once done downloading, I’ll have it, so “<a href=\"https://youtu.be/V_kBdnziEFA?t=13\">don’t you die on me, man</a>” is then a non-issue, at least for me. At a price of <a href=\"http://www.newegg.com/Product/Product.aspx?Item=N82E16822178745\">less than a nickel per gigabyte</a>, who cares about the cost of storage for code and text?</p>
<p>Sure, a lot of information dies off that absolutely no one will ever care about. But some of the seemingly-useless bits kept around are wonderful to have. Me, I just found <a href=\"http://babel.hathitrust.org/cgi/pt?id=chi.27966196;view=1up;seq=46\">the shower</a> that came with our condo-ized piece of the old Victorian we live in – very helpful! It’s said that 90% of the files in any file cabinet are never accessed again. But which 10% are the useful ones? So we naturally keep all the files around. Digital storage is much more compact and painless, yet still easily gets wiped out due to a disk head failure, power surge, or the owner passes away. By the way, if you use Google Docs or Gmail or etc., go set up your <a href=\"https://www.google.com/settings/u/0/account/inactive\">Inactive Account Manager</a> right now. On that morbid but practical note, please do remember to send me any code bits you might have from the Journal of Graphics Tools. And do us all a favor and <a href=\"https://github.com/erich666/jgt-code/archive/master.zip\">download a zip of the JGT code repository</a> every now and then, just in case Github goes away (I’m thinking of <a href=\"http://google-opensource.blogspot.com/2015/03/farewell-to-google-code.html\">Google Code</a> here, but even <a href=\"https://www.reddit.com/r/programming/comments/3pwwgb/bitbucket_down_4th_day_running_this_time_to_ddos/\">BitBucket gets DDOS’ed</a>).</p>
<p>Not so fun fact:  27.5% of the external links on <a href=\"http://www.realtimerendering.com/refs.html\">our references page</a> are dead, after 7 years. They’re mostly papers, so perhaps the links have just changed or, at worst, the article can be dug up somewhere (though that’s only true half the time – a lot of game-related articles are not in journals).</p>" "http://www.realtimerendering.com/blog/journal-of-graphics-tools-code-repository/" (22059 49128) old 5 nil nil ((title nil "“Journal of Graphics Tools” Code Repository") (link nil "http://www.realtimerendering.com/blog/journal-of-graphics-tools-code-repository/") (comments nil "http://www.realtimerendering.com/blog/journal-of-graphics-tools-code-repository/#respond") (pubDate nil "Sat, 24 Oct 2015 17:29:12 +0000") (creator nil "Eric") (category nil "Resources") (category nil "archive") (category nil "Journal of Graphics Tools") (guid ((isPermaLink . "false")) "http://www.realtimerendering.com/blog/?p=4015") (description nil "Once upon a time the Journal of Graphics Tools had code associated with many of its articles. This was in fact one of the selling points for the journal, which grew out of the Graphics Gems series of books. When Taylor &#38; Francis acquired A.K. Peters back in 2010, they moved the journal to their vast collection [&#8230;]") (encoded nil "<p>Once upon a time the <em><a href=\"http://www.tandfonline.com/loi/ujgt21\">Journal of Graphics Tools</a> </em>had code associated with many of its articles. This was in fact one of the selling points for the journal, which grew out of the <a href=\"http://graphicsgems.org\"><em>Graphics Gems</em> </a>series of books. When Taylor &amp; Francis acquired A.K. Peters back in 2010, they moved the journal to <a href=\"http://www.tandfonline.com/action/showPublications\">their vast collection of other journals</a> (2671 and counting). The code repository didn&#8217;t fit their web template, so they no longer hosted the code. At the time I wasn&#8217;t so concerned, as the <a href=\"https://archive.org/web/\">Wayback Machine</a> mirrored the abstracts and code collection of the old A.K. Peters site. Something happened this year and those backup pages are now gone, e.g., <a href=\"https://web.archive.org/web/20140214121750/http://web.archive.org/web/20110707101838/http://jgt.akpeters.com/\">this link</a> used to work.</p>
<p>So, time to rebuild. I&#8217;ve maintained the <a href=\"http://graphicsgems.org\">Graphics Gems repository</a> for a few decades; how hard could it be to rebuild a recently-lost code archive? Well, we&#8217;ll see. I&#8217;ve written Taylor &amp; Francis in hopes that someone knows where they put that DVD or whatever with the code archive. Fingers crossed. In the meantime I&#8217;ve been looking around and asking around. Here&#8217;s what I&#8217;ve collected so far:</p>
<h2><a href=\"https://github.com/erich666/jgt-code\">&#8220;Journal of Graphics Tools&#8221; Code Repository</a></h2>
<p>Enjoy what bits are there, and please send me any code you&#8217;ve saved that is related to a JGT article. You don&#8217;t have to be an author, just a pack-rat. I know that at least one author I asked could not find a backup of his article&#8217;s code. I personally can relate: back in 1985 I finished my master&#8217;s thesis. A few months later I realized I should get copies of images from my thesis work (in the Utah RLE format &#8211; ahhh, memories; astoundingly, <a href=\"http://www.cs.utah.edu/gdc/projects/urt/\">that site is still around</a>, things put on cs.utah.edu appear to stay there forever). One backup tape was glitched, so I lost about half my images.</p>
<p>Time for <a href=\"http://worrydream.com/TheWebOfAlexandria/\">an analogy with the Library of Alexandria</a> (pointed out to me by Jason Mitchell). Go read that article, it&#8217;s short, and makes an excellent point. Shorter still is <a href=\"https://twitter.com/worrydream/status/478087637031325697\">a tweet</a> by the same person which shows the practical effect of our general lack of redundancy. Gamasutra/Game Developer code repository? Gone (AFAIK). The lovely ompf.org forum about real-time ray tracing? Gone. Various game and film company article collections, various useful blogs, various cool resources? Gone baby gone. I encounter this loss every time I update <a href=\"http://www.realtimerendering.com/portal.html\">our portal page</a> or the <a href=\"http://tog.acm.org/bib_look.cfm\">ACM TOG resources page</a>. Of course the &#8220;portal&#8221; term itself is at least a decade out of style (remember <a href=\"http://www.cringely.com/2015/10/21/why-yahoo-is-worth-less-than-nothing/\">Yahoo</a>?), but knowing where to find the good stuff is still valuable. When some bit of the good stuff goes away, how sad. Sure, there&#8217;s <a href=\"https://en.wikipedia.org/wiki/Sturgeon%27s_law\">Sturgeon&#8217;s Law</a>, but the 10% also sometimes disappears.</p>
<p>I&#8217;ve had this vague feeling for decades, ever since I started to collect bits and pieces for the Ray Tracing News in 1987, that I&#8217;m playing the role of a medieval monk attempting to keep some small bits and pieces of knowledge from disappearing. In fact, the Ray Tracing News archive briefly disappeared when ACM TOG reorganized their site; I moved it to <a href=\"http://www.realtimerendering.com/resources/RTNews/html/\">realtimerendering.com</a>. My takeaway for internet resources is &#8220;trust no one&#8221;, not even myself, since I probably don&#8217;t have an infinite life span. The <a href=\"http://worrydream.com/TheWebOfAlexandria/\">Bret Victor article</a> I mentioned last paragraph (is the article still available? I guess it depends when you read this posting&#8230;) points out the problem, but I know of no good solution right now. The Internet Archive&#8217;s Wayback Machine is related to <a href=\"http://www.bibalex.org/en/project/details?documentid=283\">Bibliotheca Alexandrina</a>, which is something like naming your new ship the Titanica. The irony, she drips, that this archive somehow lost the Journal of Graphic Tools&#8217; code (<em>update:</em> my guess is someone recently popped in a <a href=\"http://www.economist.com/blogs/babbage/2014/01/internet-permanence\">robots.txt</a> on the dead site). I&#8217;m of course now kicking myself for not making a copy of JGT&#8217;s code base myself back when I had the chance.</p>
<p>Maybe a better takeaway is &#8220;trust everyone.&#8221; My one positive suggestion is &#8220;make it a zip.&#8221; If you have a resource, make the whole site downloadable as one big zip so that it&#8217;s easy for you and others to back up. Github offers this automatically. If zipping had been done with JGT&#8217;s site, I&#8217;d probably have a copy. I have a sort of future sadness for the day <a href=\"http://paulbourke.net/\">Paul Bourke&#8217;s</a> or <a href=\"http://steve.hollasch.net/cgindex/index.html\">Steve Hollasch&#8217;s</a> sites disappear. There are utilities such as <a href=\"https://www.httrack.com/\">HTTrack</a> where one could grab a whole web site, but who wants to mess with that? Well, I now do, but for Hollasch it won&#8217;t matter all that much, since he links to lots of external pages (by the way, <a href=\"http://home.snafu.de/tilman/xenulink.html\">Xenu</a> is a wonderful free dead link checker). Steve Hollasch&#8217;s site, 76 files, sum up to 798 kb &#8211; so much more valuable than just about any iPhone photo, which is more than twice as large. Bourke&#8217;s site, which includes many PDFs and zips and whatnot, is quite large &#8211; it&#8217;s still downloading &#8211; it might be the size of a <a href=\"https://itunes.apple.com/us/tv-season/rick-and-morty-season-1/id741096885\">season of Rick and Morty</a> (which BTW is a great show). But, once done downloading, I&#8217;ll have it, so &#8220;<a href=\"https://youtu.be/V_kBdnziEFA?t=13\">don&#8217;t you die on me, man</a>&#8221; is then a non-issue, at least for me. At a price of <a href=\"http://www.newegg.com/Product/Product.aspx?Item=N82E16822178745\">less than a nickel per gigabyte</a>, who cares about the cost of storage for code and text?</p>
<p>Sure, a lot of information dies off that absolutely no one will ever care about. But some of the seemingly-useless bits kept around are wonderful to have. Me, I just found <a href=\"http://babel.hathitrust.org/cgi/pt?id=chi.27966196;view=1up;seq=46\">the shower</a> that came with our condo-ized piece of the old Victorian we live in &#8211; very helpful! It&#8217;s said that 90% of the files in any file cabinet are never accessed again. But which 10% are the useful ones? So we naturally keep all the files around. Digital storage is much more compact and painless, yet still easily gets wiped out due to a disk head failure, power surge, or the owner passes away. By the way, if you use Google Docs or Gmail or etc., go set up your <a href=\"https://www.google.com/settings/u/0/account/inactive\">Inactive Account Manager</a> right now. On that morbid but practical note, please do remember to send me any code bits you might have from the Journal of Graphics Tools. And do us all a favor and <a href=\"https://github.com/erich666/jgt-code/archive/master.zip\">download a zip of the JGT code repository</a> every now and then, just in case Github goes away (I&#8217;m thinking of <a href=\"http://google-opensource.blogspot.com/2015/03/farewell-to-google-code.html\">Google Code</a> here, but even <a href=\"https://www.reddit.com/r/programming/comments/3pwwgb/bitbucket_down_4th_day_running_this_time_to_ddos/\">BitBucket gets DDOS&#8217;ed</a>).</p>
<p>Not so fun fact:  27.5% of the external links on <a href=\"http://www.realtimerendering.com/refs.html\">our references page</a> are dead, after 7 years. They&#8217;re mostly papers, so perhaps the links have just changed or, at worst, the article can be dug up somewhere (though that&#8217;s only true half the time &#8211; a lot of game-related articles are not in journals).</p>
") (commentRss nil "http://www.realtimerendering.com/blog/journal-of-graphics-tools-code-repository/feed/") (comments nil "0"))) ("New free interactive linear algebra text on web" "<p><a href=\"http://immersivemath.com/ila/index.html\">Here it is</a> – you should recognize the third author’s name for sure. I’ve only skimmed a bit, but wow, very interesting. Many of the figures are indeed interactive, which is magical. I also like the idea that you can move the mouse over a term and a pop-up shows more information about it. Seriously, go <a href=\"http://immersivemath.com/ila/ch02_vectors/ch02.html\">check out a section</a> right now.</p>" "http://www.realtimerendering.com/blog/new-free-interactive-linear-algebra-text-on-web/" (21998 18394) old 6 nil nil ((title nil "New free interactive linear algebra text on web") (link nil "http://www.realtimerendering.com/blog/new-free-interactive-linear-algebra-text-on-web/") (comments nil "http://www.realtimerendering.com/blog/new-free-interactive-linear-algebra-text-on-web/#respond") (pubDate nil "Tue, 08 Sep 2015 02:28:42 +0000") (creator nil "Eric") (category nil "Resources") (category nil "linear algebra") (guid ((isPermaLink . "false")) "http://www.realtimerendering.com/blog/?p=4012") (description nil "Here it is &#8211; you should recognize the third author&#8217;s name for sure. I&#8217;ve only skimmed a bit, but wow, very interesting. Many of the figures are indeed interactive, which is magical. I also like the idea that you can move the mouse over a term and a pop-up shows more information about it. Seriously, go [&#8230;]") (encoded nil "<p><a href=\"http://immersivemath.com/ila/index.html\">Here it is</a> &#8211; you should recognize the third author&#8217;s name for sure. I&#8217;ve only skimmed a bit, but wow, very interesting. Many of the figures are indeed interactive, which is magical. I also like the idea that you can move the mouse over a term and a pop-up shows more information about it. Seriously, go <a href=\"http://immersivemath.com/ila/ch02_vectors/ch02.html\">check out a section</a> right now.</p>
") (commentRss nil "http://www.realtimerendering.com/blog/new-free-interactive-linear-algebra-text-on-web/feed/") (comments nil "0"))) ("Seven Things for August 22, 2015" "<p>Last collection of links for awhile – I’m pretty much caught up. Here’s a rundown of things that are more physical:</p>
<ul>
<li><a href=\"http://gigapixelartzoom.com/#Artists\">Where’s Waldo</a> in the real world; specifically, Seattle. <a href=\"http://www.engadget.com/2014/01/24/microsoft-gigapixel-artzoom-seattle-panorama/\">Info</a>. Some of the Easter Eggs are truly great.</li>
<li><a href=\"http://www.viralnova.com/pixel-hair/?mb=sga\">Pixelated hair</a>. I collect anything where “X is used as pixels”; <a href=\"https://delicious.com/erich666/pixel\">link collection here</a> (and <a href=\"mailto:erich@acm.org\">send me more</a>).</li>
<li>I’m impressed by Google Cardboard. A local architecture firm <a href=\"http://cardboard.autodesk.com/\">has been using it</a> to give clients a much better sense of their designs. The fact that you can pre-render at very high quality I consider a large advantage over GPU-based VR. Also, it seems like many firms overbuilt, so these viewers are now dirt cheap, e.g. <a href=\"http://www.dx.com/p/assembling-google-virtual-reality-cardboard-w-resin-lens-set-khaki-339632?tc=USD#.VdTdyvlVhBc\">less than $3 with free shipping</a>.</li>
<li>Surroundings:
<ul>
<li>The <a href=\"http://smile.amazon.com/dp/B00OZCM7DC?tag=realtimerenderin\">Ricoh Theta </a>gives surprisingly nice instant IBLs in a relatively cheap ($300) compact camera – <a href=\"https://theta360.com/en/gallery/\">gallery</a>, <a href=\"http://www.ephotozine.com/article/ricoh-theta-review-23706\">review</a>.</li>
<li><a href=\"http://matterport.com/\">Matterport</a> looks like a pretty nice room capture device.</li>
<li><a href=\"https://photosynth.net/preview/\">Photosynth 3</a> is strangely compelling at times. On one level it’s a low-frame-count video you can scrub through, but scenes often have a surreal feel as interpolations are shown.</li>
</ul>
</li>
<li><a href=\"https://www.youtube.com/watch?v=BFkp0GHz5v8&amp;feature=player_detailpage#t=91\">Intel Thunderbolt 3 demos</a>, showing a laptop driving an external GPU. Annoying ad will play, but then the chewy bit of the video plays. Too much info about USB &amp; Thunderbolt <a href=\"http://www.anandtech.com/show/9331/intel-announces-thunderbolt-3\">here</a>.</li>
<li>If you have lots of old business cards, two words: <a href=\"http://theiff.org/oexhibits/menger02.html\">Menger Sponge</a>.</li>
<li><a class=\"external-link\" href=\"http://www.thisiscolossal.com\" rel=\"nofollow\">This Is Colossal</a> covers lots of interesting artistic and well-crafted works. Mostly real-world stuff (I liked this <a href=\"http://www.thisiscolossal.com/2015/08/mirrored-ziggurat/\">mirror work</a>), and also great things such as <a href=\"http://www.thisiscolossal.com/2014/08/dizzying-new-gifs-at-the-intersection-of-art-and-math-by-dave-whyte/\">Bees &amp; Bombs</a> (example below).</li>
</ul>
<p><img class=\"alignnone\" src=\"http://www.thisiscolossal.com/wp-content/uploads/2014/08/cubes.gif\" alt=\"\" width=\"800\" height=\"600\" /></p>" "http://www.realtimerendering.com/blog/seven-things-for-august-22-2015/" (21976 30383) old 7 nil nil ((title nil "Seven Things for August 22, 2015") (link nil "http://www.realtimerendering.com/blog/seven-things-for-august-22-2015/") (comments nil "http://www.realtimerendering.com/blog/seven-things-for-august-22-2015/#respond") (pubDate nil "Sat, 22 Aug 2015 13:18:39 +0000") (creator nil "Eric") (category nil "Miscellaneous") (guid ((isPermaLink . "false")) "http://www.realtimerendering.com/blog/?p=3991") (description nil "Last collection of links for awhile &#8211; I&#8217;m pretty much caught up. Here&#8217;s a rundown of things that are more physical: Where&#8217;s Waldo in the real world; specifically, Seattle. Info. Some of the Easter Eggs are truly great. Pixelated hair. I collect anything where &#8220;X is used as pixels&#8221;; link collection here (and send me more). I&#8217;m impressed by [&#8230;]") (encoded nil "<p>Last collection of links for awhile &#8211; I&#8217;m pretty much caught up. Here&#8217;s a rundown of things that are more physical:</p>
<ul>
<li><a href=\"http://gigapixelartzoom.com/#Artists\">Where&#8217;s Waldo</a> in the real world; specifically, Seattle. <a href=\"http://www.engadget.com/2014/01/24/microsoft-gigapixel-artzoom-seattle-panorama/\">Info</a>. Some of the Easter Eggs are truly great.</li>
<li><a href=\"http://www.viralnova.com/pixel-hair/?mb=sga\">Pixelated hair</a>. I collect anything where &#8220;X is used as pixels&#8221;; <a href=\"https://delicious.com/erich666/pixel\">link collection here</a> (and <a href=\"mailto:erich@acm.org\">send me more</a>).</li>
<li>I&#8217;m impressed by Google Cardboard. A local architecture firm <a href=\"http://cardboard.autodesk.com/\">has been using it</a> to give clients a much better sense of their designs. The fact that you can pre-render at very high quality I consider a large advantage over GPU-based VR. Also, it seems like many firms overbuilt, so these viewers are now dirt cheap, e.g. <a href=\"http://www.dx.com/p/assembling-google-virtual-reality-cardboard-w-resin-lens-set-khaki-339632?tc=USD#.VdTdyvlVhBc\">less than $3 with free shipping</a>.</li>
<li>Surroundings:
<ul>
<li>The <a href=\"http://smile.amazon.com/dp/B00OZCM7DC?tag=realtimerenderin\">Ricoh Theta </a>gives surprisingly nice instant IBLs in a relatively cheap ($300) compact camera &#8211; <a href=\"https://theta360.com/en/gallery/\">gallery</a>, <a href=\"http://www.ephotozine.com/article/ricoh-theta-review-23706\">review</a>.</li>
<li><a href=\"http://matterport.com/\">Matterport</a> looks like a pretty nice room capture device.</li>
<li><a href=\"https://photosynth.net/preview/\">Photosynth 3</a> is strangely compelling at times. On one level it&#8217;s a low-frame-count video you can scrub through, but scenes often have a surreal feel as interpolations are shown.</li>
</ul>
</li>
<li><a href=\"https://www.youtube.com/watch?v=BFkp0GHz5v8&amp;feature=player_detailpage#t=91\">Intel Thunderbolt 3 demos</a>, showing a laptop driving an external GPU. Annoying ad will play, but then the chewy bit of the video plays. Too much info about USB &amp; Thunderbolt <a href=\"http://www.anandtech.com/show/9331/intel-announces-thunderbolt-3\">here</a>.</li>
<li>If you have lots of old business cards, two words: <a href=\"http://theiff.org/oexhibits/menger02.html\">Menger Sponge</a>.</li>
<li><a class=\"external-link\" href=\"http://www.thisiscolossal.com\" rel=\"nofollow\">This Is Colossal</a> covers lots of interesting artistic and well-crafted works. Mostly real-world stuff (I liked this <a href=\"http://www.thisiscolossal.com/2015/08/mirrored-ziggurat/\">mirror work</a>), and also great things such as <a href=\"http://www.thisiscolossal.com/2014/08/dizzying-new-gifs-at-the-intersection-of-art-and-math-by-dave-whyte/\">Bees &amp; Bombs</a> (example below).</li>
</ul>
<p><img class=\"alignnone\" src=\"http://www.thisiscolossal.com/wp-content/uploads/2014/08/cubes.gif\" alt=\"\" width=\"800\" height=\"600\" /></p>
") (commentRss nil "http://www.realtimerendering.com/blog/seven-things-for-august-22-2015/feed/") (comments nil "0"))) ("Seven Things for August 21, 2015" "<p>I’ve burnt through most of my SIGGRAPH tidbits. Now to start running through a few worthwhile articles, resources, and sites I’ve found the past months:</p>
<ul>
<li><a href=\"http://www.businessinsider.com/what-is-blue-and-how-do-we-see-color-2015-2\">Colors and words article</a> – a must-read. Teaser: “So he raised his daughter while being careful to never describe the color of the sky to her, and then one day asked her what color she saw when she looked up.”</li>
<li><a class=\"external-link\" style=\"line-height: 1.4; font-size: 12.1599998474121px;\" href=\"http://www.cgsociety.org/index.php/CGSFeatures/CGSFeatureSpecial/building_3d_with_ikea\" rel=\"nofollow\">IKEA has been using V-Ray</a><span style=\"line-height: 1.4; font-size: 12.1599998474121px;\"> for much of its catalog for years. Favorite quote: “But the real turning point for us was when, in 2009, they called us and said, ‘You have to stop using CG. I’ve got 200 product images and they’re just terrible. You guys need to practise [sic] more.’ So we looked at all the images they said weren’t good enough and the two or three they said were great, and the ones they didn’t like were photography and the good ones were all CG!”</span></li>
<li>Cambridge, Mass. (which I live next to) as a <a class=\"external-link\" href=\"http://cesiumjs.org/cambridge/\" rel=\"nofollow\">3D map in your browser</a>. Background info <a class=\"external-link\" href=\"http://cesiumjs.org/2015/06/15/Cambridge-in-3D/\" rel=\"nofollow\">here</a>. WebGL is great.</li>
<li><span class=\"TextRun SCX183570054\"><span class=\"NormalTextRun SCX183570054\"><a href=\"http://www.dhteumeuleu.com/apparently-transparent\">Slightly spooky 3D program</a>, done in CSS (that’s right – no </span><span class=\"SpellingError SCX183570054\">WebGL</span><span class=\"NormalTextRun SCX183570054\"> here). Other fun experiments by the author <a href=\"http://codepen.io/ge1doot/\">here</a>.</span></span></li>
<li>Languages: I hadn’t heard of a few of these <a href=\"http://nickdesaulniers.github.io/blog/2015/07/23/additional-c-slash-c-plus-plus-tooling/\">C++ tools</a>. The Swift language, which I’ve heard nice things about, <a class=\"external-link\" href=\"http://readwrite.com/2015/06/09/apple-swift-open-source-wwdc2015\" rel=\"nofollow\">is going to be open-sourced</a> by Apple (surprising, for Apple). Michael Gleicher mentioned liking the free book <em><a href=\"https://github.com/spencertipping/js-in-ten-minutes/blob/master/js-in-ten-minutes.pdf\">Javascript in 10 Minutes</a></em>.</li>
<li>Tools: For home use only, <a class=\"external-link\" href=\"http://www.glarysoft.com/glary-utilities/\" rel=\"nofollow\">Glary Utilities</a> is a bunch of free utilities – two minutes to clean off various types of sludge from your PC. <a class=\"external-link\" href=\"http://www.voidtools.com/\" rel=\"nofollow\">Everything</a> is a simple super-fast file and folder name searcher for Windows. I’ve added these to the bottom section of the <a href=\"http://realtimerendering.com/portal.html\">portal page</a>.</li>
<li>Ray tracing using armor stands in Minecraft. Things just keep getting weirder.<iframe width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/7E9p4hi252A?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe></li>
</ul>" "http://www.realtimerendering.com/blog/seven-things-for-august-21-2015/" (21975 3502) old 8 nil nil ((title nil "Seven Things for August 21, 2015") (link nil "http://www.realtimerendering.com/blog/seven-things-for-august-21-2015/") (comments nil "http://www.realtimerendering.com/blog/seven-things-for-august-21-2015/#respond") (pubDate nil "Fri, 21 Aug 2015 11:38:22 +0000") (creator nil "Eric") (category nil "Miscellaneous") (guid ((isPermaLink . "false")) "http://www.realtimerendering.com/blog/?p=3983") (description nil "I&#8217;ve burnt through most of my SIGGRAPH tidbits. Now to start running through a few worthwhile articles, resources, and sites I&#8217;ve found the past months: Colors and words article &#8211; a must-read. Teaser: &#8220;So he raised his daughter while being careful to never describe the color of the sky to her, and then one day asked her [&#8230;]") (encoded nil "<p>I&#8217;ve burnt through most of my SIGGRAPH tidbits. Now to start running through a few worthwhile articles, resources, and sites I&#8217;ve found the past months:</p>
<ul>
<li><a href=\"http://www.businessinsider.com/what-is-blue-and-how-do-we-see-color-2015-2\">Colors and words article</a> &#8211; a must-read. Teaser: &#8220;So he raised his daughter while being careful to never describe the color of the sky to her, and then one day asked her what color she saw when she looked up.&#8221;</li>
<li><a class=\"external-link\" style=\"line-height: 1.4; font-size: 12.1599998474121px;\" href=\"http://www.cgsociety.org/index.php/CGSFeatures/CGSFeatureSpecial/building_3d_with_ikea\" rel=\"nofollow\">IKEA has been using V-Ray</a><span style=\"line-height: 1.4; font-size: 12.1599998474121px;\"> for much of its catalog for years. Favorite quote: &#8220;But the real turning point for us was when, in 2009, they called us and said, &#8216;You have to stop using CG. I’ve got 200 product images and they’re just terrible. You guys need to practise [sic] more.&#8217; So we looked at all the images they said weren’t good enough and the two or three they said were great, and the ones they didn’t like were photography and the good ones were all CG!&#8221;</span></li>
<li>Cambridge, Mass. (which I live next to) as a <a class=\"external-link\" href=\"http://cesiumjs.org/cambridge/\" rel=\"nofollow\">3D map in your browser</a>. Background info <a class=\"external-link\" href=\"http://cesiumjs.org/2015/06/15/Cambridge-in-3D/\" rel=\"nofollow\">here</a>. WebGL is great.</li>
<li><span class=\"TextRun SCX183570054\"><span class=\"NormalTextRun SCX183570054\"><a href=\"http://www.dhteumeuleu.com/apparently-transparent\">Slightly spooky 3D program</a>, done in CSS (that&#8217;s right &#8211; no </span><span class=\"SpellingError SCX183570054\">WebGL</span><span class=\"NormalTextRun SCX183570054\"> here). Other fun experiments by the author <a href=\"http://codepen.io/ge1doot/\">here</a>.</span></span></li>
<li>Languages: I hadn&#8217;t heard of a few of these <a href=\"http://nickdesaulniers.github.io/blog/2015/07/23/additional-c-slash-c-plus-plus-tooling/\">C++ tools</a>. The Swift language, which I&#8217;ve heard nice things about, <a class=\"external-link\" href=\"http://readwrite.com/2015/06/09/apple-swift-open-source-wwdc2015\" rel=\"nofollow\">is going to be open-sourced</a> by Apple (surprising, for Apple). Michael Gleicher mentioned liking the free book <em><a href=\"https://github.com/spencertipping/js-in-ten-minutes/blob/master/js-in-ten-minutes.pdf\">Javascript in 10 Minutes</a></em>.</li>
<li>Tools: For home use only, <a class=\"external-link\" href=\"http://www.glarysoft.com/glary-utilities/\" rel=\"nofollow\">Glary Utilities</a> is a bunch of free utilities &#8211; two minutes to clean off various types of sludge from your PC. <a class=\"external-link\" href=\"http://www.voidtools.com/\" rel=\"nofollow\">Everything</a> is a simple super-fast file and folder name searcher for Windows. I&#8217;ve added these to the bottom section of the <a href=\"http://realtimerendering.com/portal.html\">portal page</a>.</li>
<li>Ray tracing using armor stands in Minecraft. Things just keep getting weirder.<iframe width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/7E9p4hi252A?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe></li>
</ul>
") (commentRss nil "http://www.realtimerendering.com/blog/seven-things-for-august-21-2015/feed/") (comments nil "0"))) ("Seven Things for August 20, 2015" "<p>Still more things, bits of info worth knowing (at least to me – now I know where I’ve written it all down):</p>
<ul>
<li><a href=\"https://github.com/KhronosGroup/glTF\">glTF</a> is an up and coming format for transmitting 3D models, tailored for WebGL and OpenGL – they like to think of it as a 3D model codec. There’s three.js and Node.js support, as well as a Collada and separate <a href=\"https://github.com/cyrillef/FBX-glTF\">FBX converter</a>. There’s more explanation of glTF in the presentation at the <a href=\"https://www.khronos.org/webgl/wiki/Presentations#SIGGRAPH_2015_WebGL_BOF\">WebGL BOF</a>. Compression progress <a href=\"https://gist.github.com/kainino0x/c082067f61ac9356ac04\">here</a>, discussion <a href=\"https://github.com/KhronosGroup/glTF/issues/398\">here</a>.<em> (Thanks to Patrick Cozzi for these links.)</em></li>
<li>I mentioned Shadertoy two days ago. I’ll mention it again! I’ve heard <a href=\"https://www.youtube.com/user/mari1234mari\">Iñigo Quilez’s youtube video channel</a> has good tutorials on programming for Shadertoy, or just watch <a href=\"https://www.youtube.com/watch?v=c6EwLCIhaxs\">great demos</a> (with no chance of locking up your GPU). Also, check this <a href=\"https://www.shadertoy.com/view/4dsXzM\">great Shadertoy illusion</a>. My theory is every blog post should have a reference to Shadertoy, at least in my perfect world.</li>
<li><a href=\"https://www.unrealengine.com/ue4-on-github\">The code for Epic’s Unreal Engine 4</a> is all open-sourced now. Best story for me at SIGGRAPH was of a guy who looked like a gang member coming to an Educator’s meeting and getting the signatures of some of the UE4 programmers, as he wanted to thank them for changing his life due to their code being accessible.</li>
<li><a href=\"https://unity3d.com/get-unity/download\">Unity 4 is also free (including royalty free) for personal use</a> (though not open source). Old news from March and GDC, but I realized I had only tweeted it, not blogged it.</li>
<li>3D printing. Yeah, it’s not graphics, but it’s close enough for me. The <a href=\"http://computational-fabrication.com/\">Computational Tools for 3D Printing course</a> had <a href=\"http://computational-fabrication.com/Matusik_Part1.pdf\">a good introduction</a> to the major types of 3D print processes, along with a useful walk down the software pipeline. BTW, I made <a href=\"http://bit.ly/info3dp\">a little page of links to 3D printing resources</a> for beginners with an URL I can remember, bit.ly/info3dp</li>
<li>I was surprised to learn that <a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">cross-site scripting attacks</a> are <a href=\"http://www.economist.com/news/science-and-technology/21660075-it-too-easy-hack-websites-some-people-do-so-make-it-harder\">80% (by some measure)</a> of all website security problems. A form of this type of attack was found and fixed back in summer 2011 for WebGL in <a href=\"http://blog.chromium.org/2011/07/using-cross-domain-images-in-webgl-and.html\">Chrome</a> and <a href=\"https://hacks.mozilla.org/2011/06/cross-domain-webgl-textures-disabled-in-firefox-5/\">Firefox</a>, with the concern that private textures from other sites could be read and copied by WebGL programs.</li>
<li><a href=\"https://sketchfab.com/\">Sketchfab</a> has been adding cool new features, such as <a href=\"https://sketchfab.com/sketchfab/folders/animation\">animation</a> and <a href=\"https://sketchfab.com/models/40fb0d39b50147b3b8099a73f165a2f6\">object annotation</a> (click horizontal arrows in lower right), as well as Oculus Rift support: just put “<a href=\"https://www.flickr.com/photos/11998354@N07/20601972182/in/album-72157654978049134/\">/embed?oculus=2</a>” at the end of any model URL.</li>
</ul>
<p><iframe src=\"https://sketchfab.com/models/e526641b0a724a599ed4ae6da2728896/embed\" width=\"480\" height=\"480\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></p>
<p style=\"font-size: 13px; font-weight: normal; margin: 5px; color: #4a4a4a;\"><a style=\"font-weight: bold; color: #1caad9;\" href=\"https://sketchfab.com/models/e526641b0a724a599ed4ae6da2728896?utm_source=oembed&amp;utm_medium=embed&amp;utm_campaign=e526641b0a724a599ed4ae6da2728896\" target=\"_blank\">Going for a walk</a><br />
by <a style=\"font-weight: bold; color: #1caad9;\" href=\"https://sketchfab.com/Kokusho?utm_source=oembed&amp;utm_medium=embed&amp;utm_campaign=e526641b0a724a599ed4ae6da2728896\" target=\"_blank\">Yann</a><br />
on <a style=\"font-weight: bold; color: #1caad9;\" href=\"https://sketchfab.com?utm_source=oembed&amp;utm_medium=embed&amp;utm_campaign=e526641b0a724a599ed4ae6da2728896\" target=\"_blank\">Sketchfab</a></p>" "http://www.realtimerendering.com/blog/seven-things-for-august-20-2015/" (21973 56390) old 9 nil nil ((title nil "Seven Things for August 20, 2015") (link nil "http://www.realtimerendering.com/blog/seven-things-for-august-20-2015/") (comments nil "http://www.realtimerendering.com/blog/seven-things-for-august-20-2015/#respond") (pubDate nil "Thu, 20 Aug 2015 13:55:18 +0000") (creator nil "Eric") (category nil "Miscellaneous") (guid ((isPermaLink . "false")) "http://www.realtimerendering.com/blog/?p=3966") (description nil "Still more things, bits of info worth knowing (at least to me &#8211; now I know where I&#8217;ve written it all down): glTF is an up and coming format for transmitting 3D models, tailored for WebGL and OpenGL &#8211; they like to think of it as a 3D model codec. There&#8217;s three.js and Node.js support, as [&#8230;]") (encoded nil "<p>Still more things, bits of info worth knowing (at least to me &#8211; now I know where I&#8217;ve written it all down):</p>
<ul>
<li><a href=\"https://github.com/KhronosGroup/glTF\">glTF</a> is an up and coming format for transmitting 3D models, tailored for WebGL and OpenGL &#8211; they like to think of it as a 3D model codec. There&#8217;s three.js and Node.js support, as well as a Collada and separate <a href=\"https://github.com/cyrillef/FBX-glTF\">FBX converter</a>. There&#8217;s more explanation of glTF in the presentation at the <a href=\"https://www.khronos.org/webgl/wiki/Presentations#SIGGRAPH_2015_WebGL_BOF\">WebGL BOF</a>. Compression progress <a href=\"https://gist.github.com/kainino0x/c082067f61ac9356ac04\">here</a>, discussion <a href=\"https://github.com/KhronosGroup/glTF/issues/398\">here</a>.<em> (Thanks to Patrick Cozzi for these links.)</em></li>
<li>I mentioned Shadertoy two days ago. I&#8217;ll mention it again! I&#8217;ve heard <a href=\"https://www.youtube.com/user/mari1234mari\">Iñigo Quilez&#8217;s youtube video channel</a> has good tutorials on programming for Shadertoy, or just watch <a href=\"https://www.youtube.com/watch?v=c6EwLCIhaxs\">great demos</a> (with no chance of locking up your GPU). Also, check this <a href=\"https://www.shadertoy.com/view/4dsXzM\">great Shadertoy illusion</a>. My theory is every blog post should have a reference to Shadertoy, at least in my perfect world.</li>
<li><a href=\"https://www.unrealengine.com/ue4-on-github\">The code for Epic&#8217;s Unreal Engine 4</a> is all open-sourced now. Best story for me at SIGGRAPH was of a guy who looked like a gang member coming to an Educator&#8217;s meeting and getting the signatures of some of the UE4 programmers, as he wanted to thank them for changing his life due to their code being accessible.</li>
<li><a href=\"https://unity3d.com/get-unity/download\">Unity 4 is also free (including royalty free) for personal use</a> (though not open source). Old news from March and GDC, but I realized I had only tweeted it, not blogged it.</li>
<li>3D printing. Yeah, it&#8217;s not graphics, but it&#8217;s close enough for me. The <a href=\"http://computational-fabrication.com/\">Computational Tools for 3D Printing course</a> had <a href=\"http://computational-fabrication.com/Matusik_Part1.pdf\">a good introduction</a> to the major types of 3D print processes, along with a useful walk down the software pipeline. BTW, I made <a href=\"http://bit.ly/info3dp\">a little page of links to 3D printing resources</a> for beginners with an URL I can remember, bit.ly/info3dp</li>
<li>I was surprised to learn that <a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">cross-site scripting attacks</a> are <a href=\"http://www.economist.com/news/science-and-technology/21660075-it-too-easy-hack-websites-some-people-do-so-make-it-harder\">80% (by some measure)</a> of all website security problems. A form of this type of attack was found and fixed back in summer 2011 for WebGL in <a href=\"http://blog.chromium.org/2011/07/using-cross-domain-images-in-webgl-and.html\">Chrome</a> and <a href=\"https://hacks.mozilla.org/2011/06/cross-domain-webgl-textures-disabled-in-firefox-5/\">Firefox</a>, with the concern that private textures from other sites could be read and copied by WebGL programs.</li>
<li><a href=\"https://sketchfab.com/\">Sketchfab</a> has been adding cool new features, such as <a href=\"https://sketchfab.com/sketchfab/folders/animation\">animation</a> and <a href=\"https://sketchfab.com/models/40fb0d39b50147b3b8099a73f165a2f6\">object annotation</a> (click horizontal arrows in lower right), as well as Oculus Rift support: just put &#8220;<a href=\"https://www.flickr.com/photos/11998354@N07/20601972182/in/album-72157654978049134/\">/embed?oculus=2</a>&#8221; at the end of any model URL.</li>
</ul>
<p><iframe src=\"https://sketchfab.com/models/e526641b0a724a599ed4ae6da2728896/embed\" width=\"480\" height=\"480\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></p>
<p style=\"font-size: 13px; font-weight: normal; margin: 5px; color: #4a4a4a;\"><a style=\"font-weight: bold; color: #1caad9;\" href=\"https://sketchfab.com/models/e526641b0a724a599ed4ae6da2728896?utm_source=oembed&amp;utm_medium=embed&amp;utm_campaign=e526641b0a724a599ed4ae6da2728896\" target=\"_blank\">Going for a walk</a><br />
by <a style=\"font-weight: bold; color: #1caad9;\" href=\"https://sketchfab.com/Kokusho?utm_source=oembed&amp;utm_medium=embed&amp;utm_campaign=e526641b0a724a599ed4ae6da2728896\" target=\"_blank\">Yann</a><br />
on <a style=\"font-weight: bold; color: #1caad9;\" href=\"https://sketchfab.com?utm_source=oembed&amp;utm_medium=embed&amp;utm_campaign=e526641b0a724a599ed4ae6da2728896\" target=\"_blank\">Sketchfab</a></p>
") (commentRss nil "http://www.realtimerendering.com/blog/seven-things-for-august-20-2015/feed/") (comments nil "0"))) ("Seven Things for August 19, 2015" "<p>More stuff:</p>
<ul>
<li>New interactive 3D graphics books at SIGGRAPH 2015: <em><a href=\"http://smile.amazon.com/WebGL-Insights-Patrick-Cozzi/dp/1498716075?tag=realtimerenderin\">WebGL Insights</a></em>, <em><a href=\"http://smile.amazon.com/GPU-Pro-Advanced-Rendering-Techniques/dp/1482264617?tag=realtimerenderin\">GPU Pro 6</a> </em>(Kindle right now, hardcover in September). Let me know if I missed anything (see <a href=\"http://www.realtimerendering.com/books.html\">full list here</a>, which also includes links to Google Books previews for these new books).</li>
<li>Updated book: 7th edition of the <em><a href=\"http://smile.amazon.com/OpenGL-Superbible-Comprehensive-Tutorial-Reference/dp/0672337479?tag=realtimerenderin\">OpenGL SuperBible</a></em>. I would guess that, with Vulkan coming down the pike, and Apple going with Metal and no longer developing OpenGL (it’s <a href=\"https://www.opengl.org/wiki/History_of_OpenGL#OpenGL_4.1_.282010.29\">back in 2010</a> at <a href=\"https://support.apple.com/en-us/HT202823\">4.1 in Mavericks</a>), this will be the final edition. Future students having to learn Vulkan or DirectX 12, well, that won’t be much fun at all…</li>
<li>I mentioned yesterday how you can <a href=\"http://dl.acm.org/citation.cfm?id=2809654&amp;_sm_au_=iVV25TfRTPr0jbK6\">download the SIGGRAPH 2015 Proceedings</a> for free this week. <a href=\"http://www.siggraph.org/discover/news/looking-siggraph-2015-conference-content\">There’s more</a>, in theory. Some of the links <a href=\"http://www.siggraph.org/discover/news/looking-siggraph-2015-conference-content\">there</a> have nothing as of right now. The <a href=\"http://dl.acm.org/citation.cfm?id=2787626&amp;_sm_au_=iVV25TfRTPr0jbK6\">Posters</a> are worth a skim, especially since I didn’t see them at SIGGRAPH. I also liked the <a href=\"http://dl.acm.org/citation.cfm?id=2785585&amp;_sm_au_=iVV25TfRTPr0jbK6\">Studio PDF</a>. It starts with a bunch of single-page talks that are fun to snack on, followed by a few random slidesets. <a href=\"http://dl.acm.org/citation.cfm?id=2782782&amp;_sm_au_=iVV25TfRTPr0jbK6\">Emerging Tech</a> also has longer descriptions than on <a href=\"http://s2015.siggraph.org/attendees/emerging-technologies\">the ETech page</a> (which has more pics and videos, however). If you gotta catch ’em all, there’s also a PDF for <a href=\"http://dl.acm.org/citation.cfm?id=2786601&amp;_sm_au_=iVV25TfRTPr0jbK6\">Panels</a>.</li>
<li>There have been many news articles recently about <a href=\"http://www.treehugger.com/gadgets/how-use-screens-night-without-ruining-your-sleep.html\">not viewing screens at bedtime</a>. Right, sure. Michael Herf (former CTO at Picasa) is the president at <a href=\"https://justgetflux.com/\">f.lux</a>, one company that makes screens vary in overall spectra during the day to ameliorate the problem. He pointed me at a useful-to-researchers bit: their <a href=\"https://fluxometer.com/rainbow/#!id=iPhone%206/6500K-iPhone6\">fluxometer site</a>, with spectra for many different displays, all downloadable.</li>
<li>Oh, and related, a tip from Michael: <a href=\"http://www.pantone.com/pantone-lighting-indicator-stickers\">Pantone stickers</a> with differing colors (using <a href=\"https://en.wikipedia.org/wiki/Metamerism_(color)#Metameric_failure\">metameric failure</a>) under different temperature lights, so you can ensure you’re showing work under consistent lighting conditions.</li>
<li>I was impressed by <a href=\"http://halide-lang.org/\">HALIDE</a>, an MIT licensed open source project for writing high performance image processing code (including GPU versions) from scratch. Most impressive is their case study for local Laplacian filters (<a href=\"http://halide-lang.org/assets/lectures/Halide_CVPR_intro.pdf\">p. 28</a>), showing great performance with considerably less code and time coding vs. Adobe Photoshop’s efforts. Google and others use it extensively (<a href=\"http://halide-lang.org/assets/lectures/Halide_CVPR_intro.pdf\">p. 32</a>).</li>
<li><a href=\"https://sites.google.com/site/pathtracingrevolution/\">Path tracing</a> is all the rage for the film industry; the Arnold renderer started it (AFAIK) and others have followed suit. Here’s an entertaining path trace of interior lighting for a Minecraft scene using the free <a href=\"http://chunky.llbit.se/\">Chunky path tracer</a>. SPP is samples per pixel:</li>
</ul>
<p><img class=\"alignnone\" src=\"http://chunky.llbit.se/spp-compare.gif\" alt=\"Chunk progressive render\" width=\"400\" height=\"400\" /></p>" "http://www.realtimerendering.com/blog/seven-things-for-august-19-2015/" (21972 34086) old 10 nil nil ((title nil "Seven Things for August 19, 2015") (link nil "http://www.realtimerendering.com/blog/seven-things-for-august-19-2015/") (comments nil "http://www.realtimerendering.com/blog/seven-things-for-august-19-2015/#respond") (pubDate nil "Wed, 19 Aug 2015 13:31:18 +0000") (creator nil "Eric") (category nil "Resources") (category nil "Book") (category nil "Reports") (category nil "books") (category nil "displays") (category nil "image processing") (category nil "path tracing") (category nil "spectra") (category nil "HALIDE") (guid ((isPermaLink . "false")) "http://www.realtimerendering.com/blog/?p=3959") (description nil "More stuff: New interactive 3D graphics books at SIGGRAPH 2015: WebGL Insights, GPU Pro 6 (Kindle right now, hardcover in September). Let me know if I missed anything (see full list here, which also includes links to Google Books previews for these new books). Updated book: 7th edition of the OpenGL SuperBible. I would guess that, [&#8230;]") (encoded nil "<p>More stuff:</p>
<ul>
<li>New interactive 3D graphics books at SIGGRAPH 2015: <em><a href=\"http://smile.amazon.com/WebGL-Insights-Patrick-Cozzi/dp/1498716075?tag=realtimerenderin\">WebGL Insights</a></em>, <em><a href=\"http://smile.amazon.com/GPU-Pro-Advanced-Rendering-Techniques/dp/1482264617?tag=realtimerenderin\">GPU Pro 6</a> </em>(Kindle right now, hardcover in September). Let me know if I missed anything (see <a href=\"http://www.realtimerendering.com/books.html\">full list here</a>, which also includes links to Google Books previews for these new books).</li>
<li>Updated book: 7th edition of the <em><a href=\"http://smile.amazon.com/OpenGL-Superbible-Comprehensive-Tutorial-Reference/dp/0672337479?tag=realtimerenderin\">OpenGL SuperBible</a></em>. I would guess that, with Vulkan coming down the pike, and Apple going with Metal and no longer developing OpenGL (it&#8217;s <a href=\"https://www.opengl.org/wiki/History_of_OpenGL#OpenGL_4.1_.282010.29\">back in 2010</a> at <a href=\"https://support.apple.com/en-us/HT202823\">4.1 in Mavericks</a>), this will be the final edition. Future students having to learn Vulkan or DirectX 12, well, that won&#8217;t be much fun at all&#8230;</li>
<li>I mentioned yesterday how you can <a href=\"http://dl.acm.org/citation.cfm?id=2809654&amp;_sm_au_=iVV25TfRTPr0jbK6\">download the SIGGRAPH 2015 Proceedings</a> for free this week. <a href=\"http://www.siggraph.org/discover/news/looking-siggraph-2015-conference-content\">There&#8217;s more</a>, in theory. Some of the links <a href=\"http://www.siggraph.org/discover/news/looking-siggraph-2015-conference-content\">there</a> have nothing as of right now. The <a href=\"http://dl.acm.org/citation.cfm?id=2787626&amp;_sm_au_=iVV25TfRTPr0jbK6\">Posters</a> are worth a skim, especially since I didn&#8217;t see them at SIGGRAPH. I also liked the <a href=\"http://dl.acm.org/citation.cfm?id=2785585&amp;_sm_au_=iVV25TfRTPr0jbK6\">Studio PDF</a>. It starts with a bunch of single-page talks that are fun to snack on, followed by a few random slidesets. <a href=\"http://dl.acm.org/citation.cfm?id=2782782&amp;_sm_au_=iVV25TfRTPr0jbK6\">Emerging Tech</a> also has longer descriptions than on <a href=\"http://s2015.siggraph.org/attendees/emerging-technologies\">the ETech page</a> (which has more pics and videos, however). If you gotta catch &#8217;em all, there&#8217;s also a PDF for <a href=\"http://dl.acm.org/citation.cfm?id=2786601&amp;_sm_au_=iVV25TfRTPr0jbK6\">Panels</a>.</li>
<li>There have been many news articles recently about <a href=\"http://www.treehugger.com/gadgets/how-use-screens-night-without-ruining-your-sleep.html\">not viewing screens at bedtime</a>. Right, sure. Michael Herf (former CTO at Picasa) is the president at <a href=\"https://justgetflux.com/\">f.lux</a>, one company that makes screens vary in overall spectra during the day to ameliorate the problem. He pointed me at a useful-to-researchers bit: their <a href=\"https://fluxometer.com/rainbow/#!id=iPhone%206/6500K-iPhone6\">fluxometer site</a>, with spectra for many different displays, all downloadable.</li>
<li>Oh, and related, a tip from Michael: <a href=\"http://www.pantone.com/pantone-lighting-indicator-stickers\">Pantone stickers</a> with differing colors (using <a href=\"https://en.wikipedia.org/wiki/Metamerism_(color)#Metameric_failure\">metameric failure</a>) under different temperature lights, so you can ensure you&#8217;re showing work under consistent lighting conditions.</li>
<li>I was impressed by <a href=\"http://halide-lang.org/\">HALIDE</a>, an MIT licensed open source project for writing high performance image processing code (including GPU versions) from scratch. Most impressive is their case study for local Laplacian filters (<a href=\"http://halide-lang.org/assets/lectures/Halide_CVPR_intro.pdf\">p. 28</a>), showing great performance with considerably less code and time coding vs. Adobe Photoshop&#8217;s efforts. Google and others use it extensively (<a href=\"http://halide-lang.org/assets/lectures/Halide_CVPR_intro.pdf\">p. 32</a>).</li>
<li><a href=\"https://sites.google.com/site/pathtracingrevolution/\">Path tracing</a> is all the rage for the film industry; the Arnold renderer started it (AFAIK) and others have followed suit. Here&#8217;s an entertaining path trace of interior lighting for a Minecraft scene using the free <a href=\"http://chunky.llbit.se/\">Chunky path tracer</a>. SPP is samples per pixel:</li>
</ul>
<p><img class=\"alignnone\" src=\"http://chunky.llbit.se/spp-compare.gif\" alt=\"Chunk progressive render\" width=\"400\" height=\"400\" /></p>
") (commentRss nil "http://www.realtimerendering.com/blog/seven-things-for-august-19-2015/feed/") (comments nil "0"))) ("Seven Things for August 18, 2015" "<p>Seven things:</p>
<ul>
<li>Stephen Hill’s great <a href=\"http://blog.selfshadow.com/2015/08/15/siggraph-2015-links/\">collection of SIGGRAPH 2015 links</a>.</li>
<li>As he and others have noted, <a href=\"http://dl.acm.org/citation.cfm?id=2809654\">the entire SIGGRAPH 2015 proceedings</a> is available to all for free download until the end of this week. Grab it now if you’re not a SIGGRAPH member. SIGGRAPH members always have Digital Library access to SIGGRAPH-sponsored conferences, even if not Digital Library subscribers, e.g. <a href=\"http://dl.acm.org/citation.cfm?id=2601097&amp;_sm_au_=iVV25TfRTPr0jbK6\">here’s the SIGGRAPH 2014 proceedings</a>.</li>
<li>New term: <em>froxel </em>– frustum voxel. Alex Evans mentioned it in <a href=\"http://www.mediamolecule.com/blog/article/siggraph_2015\">his fascinating talk</a> in the Advances in RTR course; on page 83 he notes, “The term originated at the Sony WWS ATG group, I believe.” <a href=\"https://twitter.com/self_shadow/status/632342234856333312\">Diagram</a>. He’s semi-right that Shadertoy programs do ray marching through froxels at their simplest; a speedup for Shadertoy is using the minimum distance-field distance found to any object as a minimum step size (e.g., <a href=\"https://www.shadertoy.com/view/4llXDB\">line 126 of this demo</a>, most of which <a href=\"https://www.flickr.com/photos/11998354@N07/19990143333/in/album-72157654978049134/\">they live-coded</a> during the wonderful Shadertoy studio workshop).</li>
<li><a href=\"http://www.economist.com/node/21660559?fsrc=scn/tw/te/pe/st/aquestionofutility\">Evidence</a> that patents appear to not spur research and innovation, even for big pharma. I like <em>The Economist</em>, as it tries to weigh the evidence for &amp; against some idea, vs. knee-jerking it one way or the other.</li>
<li>Folklore 1: Jim Blinn confirmed that the teapot model was scaled down vertically because it looked nicer that way, not that the pixels were non-square (incorrectly propagated <a href=\"http://www.sjbaker.org/wiki/index.php?title=The_History_of_The_Teapot#The_Teapot_DataSet\">here</a> and <a href=\"http://www.computerhistory.org/revolution/computer-graphics-music-and-art/15/206\">here</a>). <a href=\"https://www.flickr.com/photos/11998354@N07/20424362159/in/album-72157654978049134/\">Jim &amp; 3D printed teapot</a>.</li>
<li>Which reminds me: here’s my <a href=\"https://www.flickr.com/photos/11998354@N07/sets/72157654978049134\">random set of pics</a> from SIGGRAPH 2015, with captions. I like, “Hundreds of beautiful designs, and only one or two that suck.” <em>Update: </em><a href=\"https://www.flickr.com/photos/mvives/sets/72157655112456374/\">more photos</a> from Mauricio Vives, along with <a href=\"https://www.flickr.com/photos/mvives/sets/72157657446681081/\">WebGL specific shots</a>. Need more? <a href=\"https://www.flickr.com/search/?text=siggraph%202015\">Everyone’s</a>.</li>
<li>Folklore 2: <em>(Updated and corrected)</em> Rendering equation: Kajiya’s used <em>S</em> as a subscript, in <em><a href=\"http://www.realtimerendering.com/blog/principles-of-digital-image-synthesis-now-free-for-download/\">PoDIS</a></em> Glassner used an omega symbol because it looks like a hemisphere, since that’s what was being integrated over. <a href=\"https://en.wikipedia.org/wiki/Rendering_equation\">Wikipedia uses it</a>.</li>
</ul>
<p><a href=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/08/unnamed1.jpg\"><img class=\" size-full wp-image-3957 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/08/unnamed1.jpg\" alt=\"unnamed1\" width=\"540\" height=\"127\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/08/unnamed1-300x71.jpg 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/08/unnamed1-500x118.jpg 500w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/08/unnamed1.jpg 540w\" sizes=\"(max-width: 540px) 100vw, 540px\" /></a></p>
<p>Seven more tomorrow.</p>" "http://www.realtimerendering.com/blog/seven-things-for-august-18-2015/" (21971 35175) obsolete 10 nil nil ((title nil "Seven Things for August 18, 2015") (link nil "http://www.realtimerendering.com/blog/seven-things-for-august-18-2015/") (comments nil "http://www.realtimerendering.com/blog/seven-things-for-august-18-2015/#respond") (pubDate nil "Tue, 18 Aug 2015 19:37:11 +0000") (creator nil "Eric") (category nil "Resources") (category nil "patents") (category nil "SIGGRAPH 2015") (category nil "froxel") (category nil "Shadertoy") (guid ((isPermaLink . "false")) "http://www.realtimerendering.com/blog/?p=3956") (description nil "Seven things: Stephen Hill&#8217;s great collection of SIGGRAPH 2015 links. As he and others have noted, the entire SIGGRAPH 2015 proceedings is available to all for free download until the end of this week. Grab it now if you&#8217;re not a SIGGRAPH member. SIGGRAPH members always have Digital Library access to SIGGRAPH-sponsored conferences, even if [&#8230;]") (encoded nil "<p>Seven things:</p>
<ul>
<li>Stephen Hill&#8217;s great <a href=\"http://blog.selfshadow.com/2015/08/15/siggraph-2015-links/\">collection of SIGGRAPH 2015 links</a>.</li>
<li>As he and others have noted, <a href=\"http://dl.acm.org/citation.cfm?id=2809654\">the entire SIGGRAPH 2015 proceedings</a> is available to all for free download until the end of this week. Grab it now if you&#8217;re not a SIGGRAPH member. SIGGRAPH members always have Digital Library access to SIGGRAPH-sponsored conferences, even if not Digital Library subscribers, e.g. <a href=\"http://dl.acm.org/citation.cfm?id=2601097&amp;_sm_au_=iVV25TfRTPr0jbK6\">here&#8217;s the SIGGRAPH 2014 proceedings</a>.</li>
<li>New term: <em>froxel </em>&#8211; frustum voxel. Alex Evans mentioned it in <a href=\"http://www.mediamolecule.com/blog/article/siggraph_2015\">his fascinating talk</a> in the Advances in RTR course; on page 83 he notes, &#8220;The term originated at the Sony WWS ATG group, I believe.&#8221; <a href=\"https://twitter.com/self_shadow/status/632342234856333312\">Diagram</a>. He&#8217;s semi-right that Shadertoy programs do ray marching through froxels at their simplest; a speedup for Shadertoy is using the minimum distance-field distance found to any object as a minimum step size (e.g., <a href=\"https://www.shadertoy.com/view/4llXDB\">line 126 of this demo</a>, most of which <a href=\"https://www.flickr.com/photos/11998354@N07/19990143333/in/album-72157654978049134/\">they live-coded</a> during the wonderful Shadertoy studio workshop).</li>
<li><a href=\"http://www.economist.com/node/21660559?fsrc=scn/tw/te/pe/st/aquestionofutility\">Evidence</a> that patents appear to not spur research and innovation, even for big pharma. I like <em>The Economist</em>, as it tries to weigh the evidence for &amp; against some idea, vs. knee-jerking it one way or the other.</li>
<li>Folklore 1: Jim Blinn confirmed that the teapot model was scaled down vertically because it looked nicer that way, not that the pixels were non-square (incorrectly propagated <a href=\"http://www.sjbaker.org/wiki/index.php?title=The_History_of_The_Teapot#The_Teapot_DataSet\">here</a> and <a href=\"http://www.computerhistory.org/revolution/computer-graphics-music-and-art/15/206\">here</a>). <a href=\"https://www.flickr.com/photos/11998354@N07/20424362159/in/album-72157654978049134/\">Jim &amp; 3D printed teapot</a>.</li>
<li>Which reminds me: here&#8217;s my <a href=\"https://www.flickr.com/photos/11998354@N07/sets/72157654978049134\">random set of pics</a> from SIGGRAPH 2015, with captions. I like, &#8220;Hundreds of beautiful designs, and only one or two that suck.&#8221; <em>Update: </em><a href=\"https://www.flickr.com/photos/mvives/sets/72157655112456374/\">more photos</a> from Mauricio Vives, along with <a href=\"https://www.flickr.com/photos/mvives/sets/72157657446681081/\">WebGL specific shots</a>. Need more? <a href=\"https://www.flickr.com/search/?text=siggraph%202015\">Everyone&#8217;s</a>.</li>
<li>Folklore 2: <em>(Updated and corrected)</em> Rendering equation: Kajiya&#8217;s used <em>S</em> as a subscript, in <em><a href=\"http://www.realtimerendering.com/blog/principles-of-digital-image-synthesis-now-free-for-download/\">PoDIS</a></em> Glassner used an omega symbol because it looks like a hemisphere, since that&#8217;s what was being integrated over. <a href=\"https://en.wikipedia.org/wiki/Rendering_equation\">Wikipedia uses it</a>.</li>
</ul>
<p><a href=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/08/unnamed1.jpg\"><img class=\" size-full wp-image-3957 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/08/unnamed1.jpg\" alt=\"unnamed1\" width=\"540\" height=\"127\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2015/08/unnamed1-300x71.jpg 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/08/unnamed1-500x118.jpg 500w, http://www.realtimerendering.com/blog/wp-content/uploads/2015/08/unnamed1.jpg 540w\" sizes=\"(max-width: 540px) 100vw, 540px\" /></a></p>
<p>Seven more tomorrow.</p>
") (commentRss nil "http://www.realtimerendering.com/blog/seven-things-for-august-18-2015/feed/") (comments nil "0"))) ("GPUs prefer premultiplication" "<p>This one’s important, so read it and grok. You either know it already, great, or it’s news and you may not believe me. Even if you don’t believe, keep it in mind for the day you see dark edges around your cutouts or decals, or mipmap levels that are clearly too dark.</p>
<p>The short version: if you want your renderer to properly handle textures with alphas when using bilinear interpolation or mipmapping, you need to premultiply your PNG color data by their (unassociated) alphas.</p>
<p>If you parsed that long jargon-filled sentence and already know it, then go visit <a href=\"http://www.smbc-comics.com/index.php?id=3865\">Saturday Morning Breakfast Cereal</a> or <a href=\"http://www.qwantz.com/index.php?comic=2884\">Dinosaur Comics</a> and enjoy life, there’s probably not much more for you to learn here. If you parsed it and don’t believe you have to preprocess your PNG alpha texture, skip to <strong>The Argument</strong> section. Otherwise, here’s what I mean.</p>
<p>Some textures have alpha values. For simplicity, assume every integer you see in this article is in the range 0-255, an 8-bit channel. The alpha value of a texel could be 255, meaning fully opaque, or 0, meaning fully transparent, or somewhere in between. PNG textures are always “unassociated,” meaning the color RGB data is entirely independent from the alpha value. For example, a half-transparent red texel in a PNG file is stored as RGBA of [255,0,0, 127] – full red, with an alpha representing it being half-transparent. Premultiplication is where you multiply the stored RGB value by the alpha value, treated as a fraction. So the premultiplied version of our red semitransparent texel is [127,0,0, 127], as we multiply the red channel’s 255 by the alpha of 127/255.</p>
<p>What I was somewhat surprised to learn is that, for GPUs, you <em>must </em>premultiply the texture’s RGB value by its alpha before a fragment shader (a.k.a. pixel shader) samples it. I used to think that it didn’t matter – surely you could sample the PNG’s RGBA texture and then perform the premultiplication. Not so.</p>
<p><strong>The Argument</strong></p>
<p>Here’s a simple case, bilinear interpolation between two texels, one semitransparent:</p>
<p><img class=\"size-full wp-image-4077 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/interp1.png\" alt=\"interp1\" width=\"400\" height=\"191\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/interp1-300x143.png 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/interp1.png 400w\" sizes=\"(max-width: 400px) 100vw, 400px\" /></p>
<p>Raw, untouched, unassociated PNG data is stored in these two texels. The left texel is an opaque red, the right texel is almost entirely transparent (alpha of 2) and green. To get the RGBA value at the dot in between, we sample this texture and perform bilinear interpolation, as usual. The answer we’ll get is the average of the two texels : [127.5,127.5,0, 128.5]. Note that this resulting value is wrong. An almost non-existent semitransparent green texel has the same effect on the interpolated <em>color </em>as the fully opaque red texel. The alphas combine sensibly, but the colors do not, because they’re not weighted by the alphas. To interpolate correctly, the colors need to be premultiplied.</p>
<p>However, GPUs can’t currently premultiply before they perform bilinear interpolation. They sample by getting the texels surrounding the location of interest, then interpolate between these texels. A software renderer could get this right, by sampling, premultiplying, <em>then</em> interpolating (that said, from surveying a few, some software renderers also don’t do it correctly). In some circumstances this failure can have a serious effect. See this <a href=\"https://skfb.ly/JPH8\">demo</a>. Notice how the fringe of the cutout flower is black. The original PNG texture is like so:</p>
<p><img class=\"size-full wp-image-4080 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush1.png\" alt=\"mush1\" width=\"228\" height=\"206\" /></p>
<p>The checkerboard background shows where the texels are fully transparent with [0,0,0, 0] – there is no black fringe in the texture itself. In the <a href=\"https://skfb.ly/JPH8\">demo</a> you can see a black fringe as these fully transparent texels are interpolated along the edges:</p>
<p><img class=\"size-full wp-image-4081 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush_bad.png\" alt=\"mush_bad\" width=\"310\" height=\"195\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush_bad-300x189.png 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush_bad.png 310w\" sizes=\"(max-width: 310px) 100vw, 310px\" /></p>
<p>Here’s another example with a flower texture, using an entirely different renderer (that will remain nameless). These are low-resolution textures, but that just exaggerates the effect; it’s present for any cutout texture that is not premultiplied.</p>
<p><img class=\"size-full wp-image-4085 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/g3d_fringing.png\" alt=\"g3d_fringing\" width=\"403\" height=\"474\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/g3d_fringing-255x300.png 255w, http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/g3d_fringing.png 403w\" sizes=\"(max-width: 403px) 100vw, 403px\" /></p>
<p>By the way,  I’m not picking on Sketchfab at all – <a href=\"https://skfb.ly/JPH8\">they’re refreshingly open</a> about their design dilemmas. I use their site for the demo because of its ease of use.</p>
<p>The black fringing occurs because of unassociated RGBA’s being used for interpolation. If you interpolate between an opaque red texel and a fully transparent but “black” texel, you get red fading into black, the black fringe.</p>
<p><strong>The Answer</strong></p>
<p>Because GPUs don’t allow premultiplication before interpolation during sampling, the answer is to premultiply the PNG texture in advance. The RGB color is multiplied by the alpha, treated as a fraction. Now the two texels in our example are:</p>
<p><img class=\"size-full wp-image-4076 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/interp2.png\" alt=\"interp2\" width=\"400\" height=\"191\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/interp2-300x143.png 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/interp2.png 400w\" sizes=\"(max-width: 400px) 100vw, 400px\" /></p>
<p>The interpolated location’s RGBA is [127.5,1,0, 128.5], which is what we’d expect: almost entirely red, a tiny bit of green, and an alpha that’s about half transparent. That’s the whole point: GPUs actually sample and interpolate in such a way that they expect premultiplied colors being fed in as textures.</p>
<p><strong>Analysis</strong></p>
<p>Who knew? Well, probably half of you, but I didn’t: this isn’t written down in any textbook I know (including our own), and I recently had to work it out myself. Also, note that it’s not just alpha cutouts affected – any texture, such as a decal, or semitransparent stained glass, or anything else with alphas, must be premultiplied if you want to use the GPU’s native sampling and filtering support.</p>
<p>The tricky part is fixing this bug in your renderer, if you haven’t already. First, if you ever expect semitransparent alphas (between 1 and 254), you have to premultiply the PNG texture before you sample it with the GPU. If you save the resulting premultiplied values at 8 bits per channel, this is destructive, you have lost precision and can’t unassociate the alpha later. For physically-based or other systems where color correction is applied, this precision loss could be noticeable. So, you may be forced to go to 16 bits per channel when you premultiply. To be honest, for highest quality you’ll want to use 16 bits for texture storage if you’re performing physically-based rendering on the GPU. 8-bit PNG data is normally in non-linear gamma encoded form, ready for display. You want to linearize this texture data before sampling it anyway, so that all your lighting and filtering computations are done in linear space. Marc Olano pointed me at Jim Blinn’s old article <a href=\"http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=637309\">“A Ghost in a Snowstorm”</a> (collected in <a href=\"http://smile.amazon.com/Jim-Blinns-Corner-Notation-Kaufmann/dp/1558608605?tag=realtimerenderin\">this book</a>), which talks about this problem in depth. Throughout this blog post I’ve assumed you’re computing everything in a nice linear space. If not, you’re in trouble anyway, and Blinn’s article talks about some options. Nowadays there’s <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/bb173460(v=vs.85).aspx\">sRGB sampling support</a> on the GPU, but you still need to premultiply, which will lose you precision for each texel with a semitransparent alpha.</p>
<p>You may have other concerns about incoming PNG data and don’t want to premultiply; see the comments on <a href=\"https://skfb.ly/JPH8\">the demo page</a> to see what I mean. I can relate: the ancient <a href=\"http://casual-effects.blogspot.com/2012/01/translucency-in-obj-mtl-files.html\">Wavefront OBJ format has multiple interpretations</a> and there’s no one to decide which way it should be interpreted. For example, should a PNG texture assigned as an alpha map be a single channel, RGB, or RGBA? If RGBA, should the color’s red channel or luminance, or the alpha value itself, be interpreted as the alpha channel? Sketchfab allows the user to decide, since there’s no definitive answer and different model exporters do different things.</p>
<p>Assume you indeed premultiply your PNG data in some fashion. The next question is whether your fragment shaders currently return premultiplied or unassociated RGBA values. If your shaders already return premultiplied values, good for you, you’re done – you just have to make sure that you’re treating the incoming texture value as a premultiplied entity.</p>
<p>However, it’s likely you return unassociated values from your fragment shaders. Three.js does, for example. It’s a pretty natural thing to do. For example, you first implement some surface shader, then add semitransparency by modifying the alpha separately. Why bother multiplying the color by the alpha in the fragment shader when <a href=\"https://www.opengl.org/wiki/Blending\">the blending unit</a> can do so for you? Changing your code to return a premultiplied RGBA means you have to change the blending mode used. It also means, at least for your own sanity, that <em>all</em> your fragment shaders should return premultiplied values. You don’t want to have to track which shaders return unassociated values and which return premultiplied results. It’s also inefficient to possibly need to switch the blend mode for every transparent object that comes by. If you have external users writing fragment shaders, you have to get them to change over, too.</p>
<p>The alternative is to unassociate the alpha from the texture sample returned by the GPU. That is, the GPU gives you back a premultiplied RGBA when you sample the texture. If the floating-point alpha value is not 0.0 or 1.0, then <em>divide</em> (un-multiply) the RGB value by alpha and use this RGBA throughout the rest of your shader, remembering it’s unassociated. Now you don’t have to change your shader’s output, the blend mode, or all the other shaders so that they return premultiplied values. It’s a bit goofy – in a perfect world we’d premultiply and return premultiplied RGBA values -but often legacy code and a user base work against the right solution.</p>
<p><strong>Weak Solutions</strong></p>
<p>There are other ways to avoid the problem. One is to simply never use bilinear interpolation or mipmapping on such textures. Minecraft can get away with this, since it’s part of its look:</p>
<p><img class=\"size-full wp-image-4083 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mc_mush.png\" alt=\"mc_mush\" width=\"389\" height=\"286\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mc_mush-300x221.png 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mc_mush.png 389w\" sizes=\"(max-width: 389px) 100vw, 389px\" /></p>
<p>Another solution is to use <a href=\"https://www.opengl.org/documentation/specs/version1.1/glspec1.1/node96.html\">the alpha test to reject fragments</a> whose floating-point alpha is less than 1.0. This works in that it gets rid of the black fringes, but only for true cutout textures, since all semitransparent texels are all discarded. The edges of the texture are trimmed back to the texel centers, which can look “skeletal” and different than how the asset was created. Update: Angelo Pesce notes that, with a tight alpha test, standard mipmapping can cause the area coverage to shrink as the object gets farther away.</p>
<p>A third solution is to rationalize and imagine the black fringing you get is somehow a feature. It <em>does</em> give a toon-line outline to objects, but it’s not something you can really control; you’re relying on an artifact for your rendering.</p>
<p>There <em>is</em> one preprocess that can help ameliorate the black fringing problem, which is to “bleed” the colors along the edges of the cutout so that the same or average colors are put in the fully transparent texels. Since the PNG has unassociated data, you can put whatever you want in the colors for fully transparent texels. Well, you <em>can</em> put such colors in premultiplied texels with alphas of 0, as Zap Andersson and Morgan McGuire mentioned to me. Morgan notes, “in premultiplied alpha, you can have emissive surfaces that also produce no coverage. This is handy for fireballs and lightning.” But, that’s for a different purpose.</p>
<p>Here’s an example of bleeding a texture:</p>
<p><img class=\"size-full wp-image-4088 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush_nonbled.png\" alt=\"mush_nonbled\" width=\"160\" height=\"116\" />  <img class=\"size-full wp-image-4095 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush_bled1.png\" alt=\"mush_bled1\" width=\"160\" height=\"116\" /></p>
<p>The original cutout mushroom texture is extended by one texel along its cutout edges. The basic idea is when a transparent edge texel is found, assign it some weighted average of the surrounding opaque colors. Now when you interpolate unassociated color channels, you get a neighbor color in the transparent region that is mostly like the actual region.</p>
<p>See <a href=\"https://skfb.ly/JPH6\">this demo</a> and compare it to <a href=\"https://skfb.ly/JPH8\">the original situation</a> to see the improvement. Here’s a side by side, untouched vs. bled:</p>
<p><img class=\"alignleft size-full wp-image-4081\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush_bad.png\" alt=\"mush_bad\" width=\"310\" height=\"195\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush_bad-300x189.png 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush_bad.png 310w\" sizes=\"(max-width: 310px) 100vw, 310px\" /><img class=\"size-full wp-image-4086 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush_good.png\" alt=\"mush_good\" width=\"322\" height=\"195\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush_good-300x182.png 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush_good.png 322w\" sizes=\"(max-width: 322px) 100vw, 322px\" /></p>
<p>Me, I had to implement this solution in <a href=\"http://mineways.com\">Mineways</a>, my free Minecraft model exporter. Most renderers (who will again remain nameless) have this fringing problem, even in their software implementations. I couldn’t fix the renderers, but could at least massage the data a bit to avoid fringing. I originally added this bleeding process back in 2012 for a particular renderer. After extensive testing on a number of renderers I found the fix to be generally useful so yesterday I released a version which always performs bleeding. One nice feature of bleeding is that if a renderer does later move to a premultiplied solution, the fully transparent texels that have been bled on will not affect the correct algorithm at all.</p>
<p>For the specialized case where your texture has a single solid color and only the alphas vary, filling the whole texture with this color works perfectly. The interpolated color is always the same, and alphas interpolate properly.</p>
<p>In general, bleeding is an imperfect solution at best. For example, if you had a red texel next to a green pixel along a cutout edge, the blend texel might be some yellow color. You’ll get a different result than if you did it the right way, using premultiplied colors. Bleeding is difficult to impossible if the texture has semitransparent texels with different colors, since weighting is so broken with unassociated values. Also, for mipmapping a simple bleed won’t work, as the “black” fully transparent RGBs that are left will get blended in as you go up the mip pyramid. Premultiplying the texels avoids all filtering problems by properly weighting the samples.</p>
<p><strong>But, wait, there’s more!</strong></p>
<p>While researching this blog post I looked at some textbooks and asked Zap Andersson, Morgan McGuire, Marc Olano, and others for input. I followed up on the two Blinn articles Marc pointed out to me. I mentioned “A Ghost in a Sandstorm” earlier; the other was “<a href=\"http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=536279\">Fun with Premultiplied Alpha</a>.” This article doesn’t discuss alpha filtering problems directly, but points to an earlier Blinn article, “<a href=\"http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=310740\">Compositing–Theory</a>.” This one indeed talks about the problem, wading through a few derivations of the right and wrong ways to filter. That’s yet another reason to avoid unassociated values – they won’t filter correctly, e.g., you won’t properly be able to blur a texture with unassociated alphas, something Morgan mentioned to me. Blinn notes how Gouraud interpolation will also fail on unassociated values at the vertices. Both of these articles are collected in Blinn’s book <em><a href=\"http://smile.amazon.com/Jim-Blinns-Corner-Kaufmann-Computer/dp/1558604553?tag=realtimerenderin\">Dirty Pixels</a></em>, worth picking up used for cheap.</p>
<p>So, Blinn described this problem back in 1994, but it certainly didn’t sink in for much of the 3D graphics world, and certainly not for interactive rendering. His treatment was pretty equation-intensive and he didn’t talk about what would happen if we did things the wrong way. We all had enough other problems around then, such as gamma-space computations warping the results of shading equations. The PNG format wouldn’t even exist until two years later, so alphas had to come from TIFFs or cutouts from GIFs. For interactive rendering, DOOM came out in 1993, 3dfx’s Voodoo graphics accelerator wouldn’t appear until 1996, and a 24-bit interactive frame buffer was a far-off dream.</p>
<p>Halfway through writing this post today I searched on “premultiplied alpha opengl” to find <a href=\"https://www.opengl.org/wiki/Blending\">this blending page</a> that I linked to earlier. Looking at the list of pages returned, the very first hit is <a href=\"https://developer.nvidia.com/content/alpha-blending-pre-or-not-pre\">John McDonald’s article from almost three years ago</a>. Amazingly, he presents almost exactly the same example, a red opaque texel next to a almost transparent green texel. It kinda makes sense that we’d hit on the same idea, it’s an excellent “see how wrong things can be” case. Anyway, definitely check out <a href=\"https://developer.nvidia.com/content/alpha-blending-pre-or-not-pre\">his article</a> for a more visual explanation. He himself points to an <a href=\"http://blogs.msdn.com/b/shawnhar/archive/2009/11/06/premultiplied-alpha.aspx\">article by Shawn Hargreaves from 2009</a>, who notes premultiplying gives the correct result, that cutouts then work properly. Shawn also notes in <a href=\"http://blogs.msdn.com/b/shawnhar/archive/2009/11/02/texture-filtering-alpha-cutouts.aspx\">an earlier post</a> some other drawbacks of the bleeding solution I mention, that some codecs and DXT1 compression won’t work with this solution. It took a solid 15 years after Blinn’s article for this alpha problem to be solved again for interactive rendering; Jim Blinn was right, but we weren’t ready before then to need his article.</p>
<p>So, I guess the takeaway is that someone will rediscover this premultiplication fact every three or four years and write a blog post about it. Jim’s article was equation-heavy and didn’t seem relevant to GPUs, Shawn’s involved GPUs but was pretty technical and had no illustrations, John’s was well-illustrated but focused on mipmapping problems. Honestly, I hope my post drives it home and we’re done here, but I suspect not. That said, if you’ve read all this and worked through it and are still not convinced, email me and I’ll try to convert you to the One True Way, now that I’ve finally seen the light.</p>
<p><em>Addenda:</em> A few people pointed out that Tom Forsyth explained this problem, the poor bleeding solution, and the proper solution in <a href=\"https://t.co/4kGINPjCFR\">a blog post from 2006</a>. Nice, and it fits in with my theory of “we need to rediscover this every 3 years or so.” I probably even read his article back then (I went through <a href=\"http://www.realtimerendering.com/refs.html\">a lot of Tom’s writings</a> for <em>Real-Time Rendering</em>) but black fringes around cutouts were way out of my experience at the time – CAD tends to be about solid objects, not cutouts. I wasn’t at a point where it made sense to me. Which is why I beat the issue to death in this post and added lots of images, so that even if readers don’t care about cutouts now, they might someday remember seeing the black fringing in some post somewhere.</p>
<p>A few people have reacted with “of course we know about premultiplication, Porter &amp; Duff, etc.” My main point is that you need to premultiply the texture itself, not the result that you get from the texture. To really do it right you also need to linearize (“de-gamma”) your texture – this is all costly in resources (you may need 16 bit textures to avoid banding), which in turn costs memory and so can cost efficiency. I understand and sympathize with having artists use bleeding instead of changing the renderer itself. I left it out of the original article, but Morgan McGuire noted, “You can find a lot of artist blogs advocating painting the average color of a surface around alpha-matted objects, so that they don’t pick up black bleeding into the edges.” From my own limited survey (I checked 8 different systems), I’m seeing a number of renderers today with fringing artifacts. <a href=\"https://sketchfab.com/models/9f34e2dcbec84185b3916d78787102be?utm_source=triggered-emails&amp;utm_medium=email&amp;utm_campaign=new-comment#download\">Download the model</a> and try it on your own renderer.</p>" "http://www.realtimerendering.com/blog/gpus-prefer-premultiplication/" (22162 64942) old 1 nil nil ((title nil "GPUs prefer premultiplication") (link nil "http://www.realtimerendering.com/blog/gpus-prefer-premultiplication/") (comments nil "http://www.realtimerendering.com/blog/gpus-prefer-premultiplication/#comments") (pubDate nil "Mon, 11 Jan 2016 00:56:14 +0000") (creator nil "Eric") (category nil "Miscellaneous") (category nil "alpha") (category nil "premultiplied") (guid ((isPermaLink . "false")) "http://www.realtimerendering.com/blog/?p=4075") (description nil "This one&#8217;s important, so read it and grok. You either know it already, great, or it&#8217;s news and you may not believe me. Even if you don&#8217;t believe, keep it in mind for the day you see dark edges around your cutouts or decals, or mipmap levels that are clearly too dark. The short version: if you [&#8230;]") (encoded nil "<p>This one&#8217;s important, so read it and grok. You either know it already, great, or it&#8217;s news and you may not believe me. Even if you don&#8217;t believe, keep it in mind for the day you see dark edges around your cutouts or decals, or mipmap levels that are clearly too dark.</p>
<p>The short version: if you want your renderer to properly handle textures with alphas when using bilinear interpolation or mipmapping, you need to premultiply your PNG color data by their (unassociated) alphas.</p>
<p>If you parsed that long jargon-filled sentence and already know it, then go visit <a href=\"http://www.smbc-comics.com/index.php?id=3865\">Saturday Morning Breakfast Cereal</a> or <a href=\"http://www.qwantz.com/index.php?comic=2884\">Dinosaur Comics</a> and enjoy life, there&#8217;s probably not much more for you to learn here. If you parsed it and don&#8217;t believe you have to preprocess your PNG alpha texture, skip to <strong>The Argument</strong> section. Otherwise, here&#8217;s what I mean.</p>
<p>Some textures have alpha values. For simplicity, assume every integer you see in this article is in the range 0-255, an 8-bit channel. The alpha value of a texel could be 255, meaning fully opaque, or 0, meaning fully transparent, or somewhere in between. PNG textures are always &#8220;unassociated,&#8221; meaning the color RGB data is entirely independent from the alpha value. For example, a half-transparent red texel in a PNG file is stored as RGBA of [255,0,0, 127] &#8211; full red, with an alpha representing it being half-transparent. Premultiplication is where you multiply the stored RGB value by the alpha value, treated as a fraction. So the premultiplied version of our red semitransparent texel is [127,0,0, 127], as we multiply the red channel&#8217;s 255 by the alpha of 127/255.</p>
<p>What I was somewhat surprised to learn is that, for GPUs, you <em>must </em>premultiply the texture&#8217;s RGB value by its alpha before a fragment shader (a.k.a. pixel shader) samples it. I used to think that it didn&#8217;t matter &#8211; surely you could sample the PNG&#8217;s RGBA texture and then perform the premultiplication. Not so.</p>
<p><strong>The Argument</strong></p>
<p>Here&#8217;s a simple case, bilinear interpolation between two texels, one semitransparent:</p>
<p><img class=\"size-full wp-image-4077 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/interp1.png\" alt=\"interp1\" width=\"400\" height=\"191\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/interp1-300x143.png 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/interp1.png 400w\" sizes=\"(max-width: 400px) 100vw, 400px\" /></p>
<p>Raw, untouched, unassociated PNG data is stored in these two texels. The left texel is an opaque red, the right texel is almost entirely transparent (alpha of 2) and green. To get the RGBA value at the dot in between, we sample this texture and perform bilinear interpolation, as usual. The answer we&#8217;ll get is the average of the two texels : [127.5,127.5,0, 128.5]. Note that this resulting value is wrong. An almost non-existent semitransparent green texel has the same effect on the interpolated <em>color </em>as the fully opaque red texel. The alphas combine sensibly, but the colors do not, because they&#8217;re not weighted by the alphas. To interpolate correctly, the colors need to be premultiplied.</p>
<p>However, GPUs can&#8217;t currently premultiply before they perform bilinear interpolation. They sample by getting the texels surrounding the location of interest, then interpolate between these texels. A software renderer could get this right, by sampling, premultiplying, <em>then</em> interpolating (that said, from surveying a few, some software renderers also don&#8217;t do it correctly). In some circumstances this failure can have a serious effect. See this <a href=\"https://skfb.ly/JPH8\">demo</a>. Notice how the fringe of the cutout flower is black. The original PNG texture is like so:</p>
<p><img class=\"size-full wp-image-4080 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush1.png\" alt=\"mush1\" width=\"228\" height=\"206\" /></p>
<p>The checkerboard background shows where the texels are fully transparent with [0,0,0, 0] &#8211; there is no black fringe in the texture itself. In the <a href=\"https://skfb.ly/JPH8\">demo</a> you can see a black fringe as these fully transparent texels are interpolated along the edges:</p>
<p><img class=\"size-full wp-image-4081 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush_bad.png\" alt=\"mush_bad\" width=\"310\" height=\"195\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush_bad-300x189.png 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush_bad.png 310w\" sizes=\"(max-width: 310px) 100vw, 310px\" /></p>
<p>Here&#8217;s another example with a flower texture, using an entirely different renderer (that will remain nameless). These are low-resolution textures, but that just exaggerates the effect; it&#8217;s present for any cutout texture that is not premultiplied.</p>
<p><img class=\"size-full wp-image-4085 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/g3d_fringing.png\" alt=\"g3d_fringing\" width=\"403\" height=\"474\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/g3d_fringing-255x300.png 255w, http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/g3d_fringing.png 403w\" sizes=\"(max-width: 403px) 100vw, 403px\" /></p>
<p>By the way,  I&#8217;m not picking on Sketchfab at all &#8211; <a href=\"https://skfb.ly/JPH8\">they&#8217;re refreshingly open</a> about their design dilemmas. I use their site for the demo because of its ease of use.</p>
<p>The black fringing occurs because of unassociated RGBA&#8217;s being used for interpolation. If you interpolate between an opaque red texel and a fully transparent but &#8220;black&#8221; texel, you get red fading into black, the black fringe.</p>
<p><strong>The Answer</strong></p>
<p>Because GPUs don&#8217;t allow premultiplication before interpolation during sampling, the answer is to premultiply the PNG texture in advance. The RGB color is multiplied by the alpha, treated as a fraction. Now the two texels in our example are:</p>
<p><img class=\"size-full wp-image-4076 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/interp2.png\" alt=\"interp2\" width=\"400\" height=\"191\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/interp2-300x143.png 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/interp2.png 400w\" sizes=\"(max-width: 400px) 100vw, 400px\" /></p>
<p>The interpolated location&#8217;s RGBA is [127.5,1,0, 128.5], which is what we&#8217;d expect: almost entirely red, a tiny bit of green, and an alpha that&#8217;s about half transparent. That&#8217;s the whole point: GPUs actually sample and interpolate in such a way that they expect premultiplied colors being fed in as textures.</p>
<p><strong>Analysis</strong></p>
<p>Who knew? Well, probably half of you, but I didn&#8217;t: this isn&#8217;t written down in any textbook I know (including our own), and I recently had to work it out myself. Also, note that it&#8217;s not just alpha cutouts affected &#8211; any texture, such as a decal, or semitransparent stained glass, or anything else with alphas, must be premultiplied if you want to use the GPU&#8217;s native sampling and filtering support.</p>
<p>The tricky part is fixing this bug in your renderer, if you haven&#8217;t already. First, if you ever expect semitransparent alphas (between 1 and 254), you have to premultiply the PNG texture before you sample it with the GPU. If you save the resulting premultiplied values at 8 bits per channel, this is destructive, you have lost precision and can&#8217;t unassociate the alpha later. For physically-based or other systems where color correction is applied, this precision loss could be noticeable. So, you may be forced to go to 16 bits per channel when you premultiply. To be honest, for highest quality you&#8217;ll want to use 16 bits for texture storage if you&#8217;re performing physically-based rendering on the GPU. 8-bit PNG data is normally in non-linear gamma encoded form, ready for display. You want to linearize this texture data before sampling it anyway, so that all your lighting and filtering computations are done in linear space. Marc Olano pointed me at Jim Blinn&#8217;s old article <a href=\"http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=637309\">&#8220;A Ghost in a Snowstorm&#8221;</a> (collected in <a href=\"http://smile.amazon.com/Jim-Blinns-Corner-Notation-Kaufmann/dp/1558608605?tag=realtimerenderin\">this book</a>), which talks about this problem in depth. Throughout this blog post I&#8217;ve assumed you&#8217;re computing everything in a nice linear space. If not, you&#8217;re in trouble anyway, and Blinn&#8217;s article talks about some options. Nowadays there&#8217;s <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/bb173460(v=vs.85).aspx\">sRGB sampling support</a> on the GPU, but you still need to premultiply, which will lose you precision for each texel with a semitransparent alpha.</p>
<p>You may have other concerns about incoming PNG data and don&#8217;t want to premultiply; see the comments on <a href=\"https://skfb.ly/JPH8\">the demo page</a> to see what I mean. I can relate: the ancient <a href=\"http://casual-effects.blogspot.com/2012/01/translucency-in-obj-mtl-files.html\">Wavefront OBJ format has multiple interpretations</a> and there&#8217;s no one to decide which way it should be interpreted. For example, should a PNG texture assigned as an alpha map be a single channel, RGB, or RGBA? If RGBA, should the color&#8217;s red channel or luminance, or the alpha value itself, be interpreted as the alpha channel? Sketchfab allows the user to decide, since there&#8217;s no definitive answer and different model exporters do different things.</p>
<p>Assume you indeed premultiply your PNG data in some fashion. The next question is whether your fragment shaders currently return premultiplied or unassociated RGBA values. If your shaders already return premultiplied values, good for you, you&#8217;re done &#8211; you just have to make sure that you&#8217;re treating the incoming texture value as a premultiplied entity.</p>
<p>However, it&#8217;s likely you return unassociated values from your fragment shaders. Three.js does, for example. It&#8217;s a pretty natural thing to do. For example, you first implement some surface shader, then add semitransparency by modifying the alpha separately. Why bother multiplying the color by the alpha in the fragment shader when <a href=\"https://www.opengl.org/wiki/Blending\">the blending unit</a> can do so for you? Changing your code to return a premultiplied RGBA means you have to change the blending mode used. It also means, at least for your own sanity, that <em>all</em> your fragment shaders should return premultiplied values. You don&#8217;t want to have to track which shaders return unassociated values and which return premultiplied results. It&#8217;s also inefficient to possibly need to switch the blend mode for every transparent object that comes by. If you have external users writing fragment shaders, you have to get them to change over, too.</p>
<p>The alternative is to unassociate the alpha from the texture sample returned by the GPU. That is, the GPU gives you back a premultiplied RGBA when you sample the texture. If the floating-point alpha value is not 0.0 or 1.0, then <em>divide</em> (un-multiply) the RGB value by alpha and use this RGBA throughout the rest of your shader, remembering it&#8217;s unassociated. Now you don&#8217;t have to change your shader&#8217;s output, the blend mode, or all the other shaders so that they return premultiplied values. It&#8217;s a bit goofy &#8211; in a perfect world we&#8217;d premultiply and return premultiplied RGBA values -but often legacy code and a user base work against the right solution.</p>
<p><strong>Weak Solutions</strong></p>
<p>There are other ways to avoid the problem. One is to simply never use bilinear interpolation or mipmapping on such textures. Minecraft can get away with this, since it&#8217;s part of its look:</p>
<p><img class=\"size-full wp-image-4083 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mc_mush.png\" alt=\"mc_mush\" width=\"389\" height=\"286\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mc_mush-300x221.png 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mc_mush.png 389w\" sizes=\"(max-width: 389px) 100vw, 389px\" /></p>
<p>Another solution is to use <a href=\"https://www.opengl.org/documentation/specs/version1.1/glspec1.1/node96.html\">the alpha test to reject fragments</a> whose floating-point alpha is less than 1.0. This works in that it gets rid of the black fringes, but only for true cutout textures, since all semitransparent texels are all discarded. The edges of the texture are trimmed back to the texel centers, which can look &#8220;skeletal&#8221; and different than how the asset was created. Update: Angelo Pesce notes that, with a tight alpha test, standard mipmapping can cause the area coverage to shrink as the object gets farther away.</p>
<p>A third solution is to rationalize and imagine the black fringing you get is somehow a feature. It <em>does</em> give a toon-line outline to objects, but it&#8217;s not something you can really control; you&#8217;re relying on an artifact for your rendering.</p>
<p>There <em>is</em> one preprocess that can help ameliorate the black fringing problem, which is to &#8220;bleed&#8221; the colors along the edges of the cutout so that the same or average colors are put in the fully transparent texels. Since the PNG has unassociated data, you can put whatever you want in the colors for fully transparent texels. Well, you <em>can</em> put such colors in premultiplied texels with alphas of 0, as Zap Andersson and Morgan McGuire mentioned to me. Morgan notes, &#8220;in premultiplied alpha, you can have emissive surfaces that also produce no coverage. This is handy for fireballs and lightning.&#8221; But, that&#8217;s for a different purpose.</p>
<p>Here&#8217;s an example of bleeding a texture:</p>
<p><img class=\"size-full wp-image-4088 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush_nonbled.png\" alt=\"mush_nonbled\" width=\"160\" height=\"116\" />  <img class=\"size-full wp-image-4095 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush_bled1.png\" alt=\"mush_bled1\" width=\"160\" height=\"116\" /></p>
<p>The original cutout mushroom texture is extended by one texel along its cutout edges. The basic idea is when a transparent edge texel is found, assign it some weighted average of the surrounding opaque colors. Now when you interpolate unassociated color channels, you get a neighbor color in the transparent region that is mostly like the actual region.</p>
<p>See <a href=\"https://skfb.ly/JPH6\">this demo</a> and compare it to <a href=\"https://skfb.ly/JPH8\">the original situation</a> to see the improvement. Here&#8217;s a side by side, untouched vs. bled:</p>
<p><img class=\"alignleft size-full wp-image-4081\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush_bad.png\" alt=\"mush_bad\" width=\"310\" height=\"195\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush_bad-300x189.png 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush_bad.png 310w\" sizes=\"(max-width: 310px) 100vw, 310px\" /><img class=\"size-full wp-image-4086 alignnone\" src=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush_good.png\" alt=\"mush_good\" width=\"322\" height=\"195\" srcset=\"http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush_good-300x182.png 300w, http://www.realtimerendering.com/blog/wp-content/uploads/2016/01/mush_good.png 322w\" sizes=\"(max-width: 322px) 100vw, 322px\" /></p>
<p>Me, I had to implement this solution in <a href=\"http://mineways.com\">Mineways</a>, my free Minecraft model exporter. Most renderers (who will again remain nameless) have this fringing problem, even in their software implementations. I couldn&#8217;t fix the renderers, but could at least massage the data a bit to avoid fringing. I originally added this bleeding process back in 2012 for a particular renderer. After extensive testing on a number of renderers I found the fix to be generally useful so yesterday I released a version which always performs bleeding. One nice feature of bleeding is that if a renderer does later move to a premultiplied solution, the fully transparent texels that have been bled on will not affect the correct algorithm at all.</p>
<p>For the specialized case where your texture has a single solid color and only the alphas vary, filling the whole texture with this color works perfectly. The interpolated color is always the same, and alphas interpolate properly.</p>
<p>In general, bleeding is an imperfect solution at best. For example, if you had a red texel next to a green pixel along a cutout edge, the blend texel might be some yellow color. You&#8217;ll get a different result than if you did it the right way, using premultiplied colors. Bleeding is difficult to impossible if the texture has semitransparent texels with different colors, since weighting is so broken with unassociated values. Also, for mipmapping a simple bleed won&#8217;t work, as the &#8220;black&#8221; fully transparent RGBs that are left will get blended in as you go up the mip pyramid. Premultiplying the texels avoids all filtering problems by properly weighting the samples.</p>
<p><strong>But, wait, there&#8217;s more!</strong></p>
<p>While researching this blog post I looked at some textbooks and asked Zap Andersson, Morgan McGuire, Marc Olano, and others for input. I followed up on the two Blinn articles Marc pointed out to me. I mentioned &#8220;A Ghost in a Sandstorm&#8221; earlier; the other was &#8220;<a href=\"http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=536279\">Fun with Premultiplied Alpha</a>.&#8221; This article doesn&#8217;t discuss alpha filtering problems directly, but points to an earlier Blinn article, &#8220;<a href=\"http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=310740\">Compositing&#8211;Theory</a>.&#8221; This one indeed talks about the problem, wading through a few derivations of the right and wrong ways to filter. That&#8217;s yet another reason to avoid unassociated values &#8211; they won&#8217;t filter correctly, e.g., you won&#8217;t properly be able to blur a texture with unassociated alphas, something Morgan mentioned to me. Blinn notes how Gouraud interpolation will also fail on unassociated values at the vertices. Both of these articles are collected in Blinn&#8217;s book <em><a href=\"http://smile.amazon.com/Jim-Blinns-Corner-Kaufmann-Computer/dp/1558604553?tag=realtimerenderin\">Dirty Pixels</a></em>, worth picking up used for cheap.</p>
<p>So, Blinn described this problem back in 1994, but it certainly didn&#8217;t sink in for much of the 3D graphics world, and certainly not for interactive rendering. His treatment was pretty equation-intensive and he didn&#8217;t talk about what would happen if we did things the wrong way. We all had enough other problems around then, such as gamma-space computations warping the results of shading equations. The PNG format wouldn&#8217;t even exist until two years later, so alphas had to come from TIFFs or cutouts from GIFs. For interactive rendering, DOOM came out in 1993, 3dfx&#8217;s Voodoo graphics accelerator wouldn&#8217;t appear until 1996, and a 24-bit interactive frame buffer was a far-off dream.</p>
<p>Halfway through writing this post today I searched on &#8220;premultiplied alpha opengl&#8221; to find <a href=\"https://www.opengl.org/wiki/Blending\">this blending page</a> that I linked to earlier. Looking at the list of pages returned, the very first hit is <a href=\"https://developer.nvidia.com/content/alpha-blending-pre-or-not-pre\">John McDonald&#8217;s article from almost three years ago</a>. Amazingly, he presents almost exactly the same example, a red opaque texel next to a almost transparent green texel. It kinda makes sense that we&#8217;d hit on the same idea, it&#8217;s an excellent &#8220;see how wrong things can be&#8221; case. Anyway, definitely check out <a href=\"https://developer.nvidia.com/content/alpha-blending-pre-or-not-pre\">his article</a> for a more visual explanation. He himself points to an <a href=\"http://blogs.msdn.com/b/shawnhar/archive/2009/11/06/premultiplied-alpha.aspx\">article by Shawn Hargreaves from 2009</a>, who notes premultiplying gives the correct result, that cutouts then work properly. Shawn also notes in <a href=\"http://blogs.msdn.com/b/shawnhar/archive/2009/11/02/texture-filtering-alpha-cutouts.aspx\">an earlier post</a> some other drawbacks of the bleeding solution I mention, that some codecs and DXT1 compression won&#8217;t work with this solution. It took a solid 15 years after Blinn&#8217;s article for this alpha problem to be solved again for interactive rendering; Jim Blinn was right, but we weren&#8217;t ready before then to need his article.</p>
<p>So, I guess the takeaway is that someone will rediscover this premultiplication fact every three or four years and write a blog post about it. Jim&#8217;s article was equation-heavy and didn&#8217;t seem relevant to GPUs, Shawn&#8217;s involved GPUs but was pretty technical and had no illustrations, John&#8217;s was well-illustrated but focused on mipmapping problems. Honestly, I hope my post drives it home and we&#8217;re done here, but I suspect not. That said, if you&#8217;ve read all this and worked through it and are still not convinced, email me and I&#8217;ll try to convert you to the One True Way, now that I&#8217;ve finally seen the light.</p>
<p><em>Addenda:</em> A few people pointed out that Tom Forsyth explained this problem, the poor bleeding solution, and the proper solution in <a href=\"https://t.co/4kGINPjCFR\">a blog post from 2006</a>. Nice, and it fits in with my theory of &#8220;we need to rediscover this every 3 years or so.&#8221; I probably even read his article back then (I went through <a href=\"http://www.realtimerendering.com/refs.html\">a lot of Tom&#8217;s writings</a> for <em>Real-Time Rendering</em>) but black fringes around cutouts were way out of my experience at the time &#8211; CAD tends to be about solid objects, not cutouts. I wasn&#8217;t at a point where it made sense to me. Which is why I beat the issue to death in this post and added lots of images, so that even if readers don&#8217;t care about cutouts now, they might someday remember seeing the black fringing in some post somewhere.</p>
<p>A few people have reacted with &#8220;of course we know about premultiplication, Porter &amp; Duff, etc.&#8221; My main point is that you need to premultiply the texture itself, not the result that you get from the texture. To really do it right you also need to linearize (&#8220;de-gamma&#8221;) your texture &#8211; this is all costly in resources (you may need 16 bit textures to avoid banding), which in turn costs memory and so can cost efficiency. I understand and sympathize with having artists use bleeding instead of changing the renderer itself. I left it out of the original article, but Morgan McGuire noted, &#8220;You can find a lot of artist blogs advocating painting the average color of a surface around alpha-matted objects, so that they don&#8217;t pick up black bleeding into the edges.&#8221; From my own limited survey (I checked 8 different systems), I&#8217;m seeing a number of renderers today with fringing artifacts. <a href=\"https://sketchfab.com/models/9f34e2dcbec84185b3916d78787102be?utm_source=triggered-emails&amp;utm_medium=email&amp;utm_campaign=new-comment#download\">Download the model</a> and try it on your own renderer.</p>
") (commentRss nil "http://www.realtimerendering.com/blog/gpus-prefer-premultiplication/feed/") (comments nil "1"))))