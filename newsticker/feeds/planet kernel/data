;; -*- coding: utf-8 -*-
(("Kernel Planet" "Kernel Planet - http://www.kernelplanet.org/" "http://www.kernelplanet.org/" (22163 58789 853478 263000) feed 0 nil nil ((title nil "Kernel Planet") (link nil "http://www.kernelplanet.org/") (language nil "en") (description nil "Kernel Planet - http://www.kernelplanet.org/") (item nil (title nil "Pavel Machek: N900: Found a way to do rotation in X") (guid nil "http://pavelmachek.livejournal.com/130337.html") (link nil "http://pavelmachek.livejournal.com/130337.html") (description nil "<div>...which is needed for control by single hand. Unfortunately, xrandr <span style=\"line-height: 1.4;\">refuses to rotate on N900 for some reason, so I'm doing Xephyr and</span></div><div><i>then</i> xrandr.<br /><br /><b>...and looking for better ssh.</b><br /><br /><div>Sitting at the train, ssh-ing from laptop to phone, with second phone <span style=\"line-height: 1.4;\">providing hotspot (okay, I do feel a bit silly). Now... this does not work too well. First, I had to </span><span style=\"line-height: 1.4;\">manually copy the IP address, and second, I did not really verify the </span><span style=\"line-height: 1.4;\">ssh key. And as IP address changes, I'd have to do it each </span><span style=\"line-height: 1.4;\">time. Better solution would be welcome.</span></div><div>I want to connect to my phone, no matter what IP address it has. If possible, I'd like the keys to b<span style=\"line-height: 1.4;\">e checked during connection, too.</span></div><br /></div>") (pubDate nil "Mon, 04 Jan 2016 07:58:47 +0000")) (item nil (title nil "Rusty Russell: Bitcoin And Stuck Transactions?") (guid nil "http://rusty.ozlabs.org/?p=573") (link nil "http://rusty.ozlabs.org/?p=573") (description nil "<p>One problem of filling blocks is that transactions with too-low fees will get “stuck”; I’ve read about such things happening on Reddit.  Then one of my coworkers told me that those he looked at were simply never broadcast properly, and broadcasting them manually fixed it.  Which lead both of us to wonder how often it’s <strong>really</strong> happening…</p>
<p>My approach is to look at the last 2 years of block data, and make a simple model:</p>
<ol>
<li>I assume the tx is not a priority tx (some miners reserve space for these; default 50k).</li>
<li>I judge the “minimum feerate to get into a block” as the smallest feerate for any transaction after the first 50k beyond the coinbase (this is an artifact of how bitcoin core builds transactions; priority area first).</li>
<li>I assume the tx won’t be included in “empty” blocks with only a coinbase or a single non-coinbase tx (SPV mining); their feerate is “infinite”.</li>
</ol>
<p>Now, what feerate do we assume?  The default “dumb wallet” fee is 10000 satoshi per kilobyte: bitcoin-core doesn’t do this pro-rata, so a median 300-byte transaction still pays 10000 satoshi by default (fee-per-byte 33.33).  The worse case is a transaction of exactly 1000 bytes (or, a wallet which does pro-rata fees), which would have a fee-per-byte of 10.</p>
<p>So let’s consider the last two years (since block 277918).  How many blocks in a row we see with a fee-per-byte &gt; 33.33, and how many we see with a feerate of &gt; 10:</p>
<p><img alt=\"\" class=\"alignnone\" height=\"456\" src=\"http://ozlabs.org/~rusty/diagrams/feerate-33.33-blockdelay.png\" width=\"1184\" /></p>
<p><img alt=\"\" class=\"alignnone\" height=\"456\" src=\"http://ozlabs.org/~rusty/diagrams/feerate-10-blockdelay.png\" width=\"1184\" /></p>
<h2>Conclusion</h2>
<p>In the last two years you would <strong>never</strong> have experienced a delay of more than 10 blocks for a median-size transaction with a 10,000 satoshi fee.</p>
<p>For a 1000-byte transaction paying the same fee, you would have experienced a 10 block delay 0.7% of the time, with a 20+ block delay on eight occasions: the worse being a 26 block delay at block 382918 (just under 5 hours).  But note that this fee is insufficient to be included in 40% of blocks during the last two years, too; if your wallet is generating such things without warning you, it’s time to switch wallets!</p>
<p><strong>Stuck low-fee transactions are not a real user problem yet</strong>.  It’s good to see adoption of smarter wallets, though, because it’s expected that they will be in the near future…</p>") (pubDate nil "Sun, 03 Jan 2016 22:24:43 +0000")) (item nil (title nil "James Bottomley: A Modest Proposal on the DCO") (guid nil "http://blog.hansenpartnership.com/?p=314") (link nil "http://blog.hansenpartnership.com/a-modest-proposal-on-the-dco/") (description nil "<p>In <a href=\"http://blog.hansenpartnership.com/the-dco-patents-and-openstack\">this post</a>, I discussed why corporations are having trouble regarding the DCO as sufficient for contributions to projects using licences which require patent grants.  The fear being that rogue corporations could legitimately claim that under the DCO they were authorizing their developers as agents for copyrights but not for patents.  Rather than argue about the legality of this trick, I think it will be much more productive to move the environment forwards to a place where it simply won’t work.  The key to doing this is to change the expectations of the corporate players which moves them to the point where they expect that a corporate signoff under the DCO gives agency for both patents and copyrights because once this happens for most of them (the good actors), the usual estoppal rules would make it apply to all.</p>
<p>The fact is that even though corporate lawyers fear that agency might not exist for patent grants via DCO signoffs in contributions, all legitimate corporate entities who make bona fide code contributions wish to effect this anyway; that’s why they go to the additional lengths of setting up Contributor Licence Agreements and signing them.  The corollary here is that really only a bad actor in the ecosystem wishes to perpetuate the myth that patents aren’t handled by the DCO.  So if all good actors want the system to work correctly anyway, how do we make it so?</p>
<p>The lever that will help to make this move is a simple pledge, which can be published on a corporate website,  that allows corporations expecting to make legitimate contributions to patent binding licences under the DCO to do so properly without needing any additional Contributor Licence Agreements.  Essentially it would be an explicit statement that when their developers submit code to a project under the DCO using a corporate signoff, they’re acting as agents for the necessary patent and copyright grants, meaning you can always trust a DCO signoff from that corporation.  When enough corporations do this, it becomes standard practice and thus expectations on the DCO have moved to the point we originally assumed they were at, so here’s the proposal for what such a statement would look like.</p>
<hr />
<p> </p>
<h2>Corporate Contribution Pledge</h2>
<h3>Preamble</h3>
<p>It is our expectation that any <a href=\"http://developercertificate.org/\">DCO</a> signoff from a corporate email address binds that corporation to grant all necessary copyright and, where required, patent rights to satisfy the terms of the licence.  Accordingly, we are publishing this pledge to illustrate how, as a matter of best practice, we implement this expectation.</p>
<p>For the purposes of this pledge, our corporate email domain is <em>@bigcorp.com</em> and its subdomains.</p>
<h3>Limitations</h3>
<ol>
<li>This pledge only applies to projects which use an OSI accepted Open Source  licence and which also use a developer certificate of origin (DCO).</li>
<li>No authority is given under this pledge to sign contribution agreements on behalf of the company or otherwise bind it except by contributing code under an OSI approved licence and DCO process.</li>
<li>No authority is given under this pledge if a developer, who may be our employee, posts patches under an email address which is not our corporate email domain above.</li>
<li>No trademarks of this corporation may ever be bound under this pledge.</li>
<li>Except as stated below, no other warranty, express or implied, is made on behalf of the contribution, including, but not limited to, fitness of the code for a specific purpose or merchantability.  The entire risk of the quality and performance of this contribution rests with the recipient.</li>
</ol>
<h3>Warranties</h3>
<ol>
<li>Our corporation trains its Open Source contributors carefully to understand when they may and may not post patches from our corporate email domain and to obtain all necessary internal clearances according to our processes before making such a posting.</li>
<li>When one of our developers posts a patch to a project under an OSI approved licence with a DCO Signed-off-by: from our corporate email domain, we authorise that developer to be our agent in the minimum set of patent and copyright grants that are required to satisfy the terms of the OSI approved licence for the contribution.</li>
</ol>") (pubDate nil "Sat, 02 Jan 2016 20:26:18 +0000")) (item nil (title nil "Pavel Machek: N900 progress... and roadblock") (guid nil "http://pavelmachek.livejournal.com/130187.html") (link nil "http://pavelmachek.livejournal.com/130187.html") (description nil "Ok, developing directly on target is easy... and phone is now in much better shape. I added watchdogs, so I'm no longer afraid to let it run debian for extended periods of time. Voice calls work, but audio quality is awful/unusable.<br /><br />Developing directly on target also has problems:'<br /><br /><span style=\"line-height: 1.4;\">remote: error: object c86cce9eda127cd891a7cf2d23e007deaddf4d34: badTimezone: invalid author/committer line - bad time zone</span><div>remote: fatal: Error in object</div><div><br /><div>pavel@n900:/my/tui$ git show c86cce9eda127cd891a7cf2d23e007deaddf4d34</div><div>error: object directory /data/l/clean-cg/.git/objects does not exist; check .git/objects/info/alternates.</div><div>commit c86cce9eda127cd891a7cf2d23e007deaddf4d34</div><div>Author: Pavel &lt;pavel@ucw.cz&gt;</div><div>Date:   Wed Dec 31 23:59:43 1969 +35150858</div><div><br />Fun. I wonder what happened there, if it is going to happen again, and if I can fix it somehow...<br /><br />Happy New Year!</div></div>") (pubDate nil "Sat, 02 Jan 2016 13:31:52 +0000")) (item nil (title nil "Matthew Garrett: The current state of boot security") (guid nil "tag:dreamwidth.org,2011-02-12:696190:39339") (link nil "http://mjg59.dreamwidth.org/39339.html") (description nil "I gave a <a href=\"https://media.ccc.de/v/32c3-7343-beyond_anti_evil_maid\">presentation</a> at 32C3 this week. One of the things I said was \"If any of you are doing seriously confidential work on Apple laptops, stop. For the love of god, please stop.\" I didn't really have time to go into the details of that at the time, but right now I'm sitting on a plane with a ridiculous sinus headache and the pseudoephedrine hasn't kicked in yet so here we go.<br /><br />The basic premise of my presentation was that it's very difficult to determine whether your system is in a trustworthy state before you start typing your secrets (such as your disk decryption passphrase) into it. If it's easy for an attacker to modify your system such that it's not trustworthy at the point where you type in a password, it's easy for an attacker to obtain your password. So, if you actually care about your disk encryption being resistant to anybody who can get temporary physical possession of your laptop, you care about it being difficult for someone to compromise your early boot process without you noticing.<br /><br />There's two approaches to this. The first is UEFI Secure Boot. If you cryptographically verify each component of the boot process, it's not possible for a user to compromise the boot process. The second is a measured boot. If you measure each component of the boot process into the TPM, and if you use these measurements to control access to a secret that allows the laptop to prove that it's trustworthy (such as Joanna Rutkowska's <a href=\"http://theinvisiblethings.blogspot.co.uk/2011/09/anti-evil-maid.html\">Anti Evil Maid</a> or my <a href=\"https://mjg59.dreamwidth.org/35742.html\">variant on the theme</a>), an attacker can compromise the boot process but you'll know that they've done so before you start typing.<br /><br />So, how do current operating systems stack up here?<br /><br />Windows: Supports UEFI Secure Boot in a meaningful way. Supports measured boot, but provides no mechanism for the system to attest that it hasn't been compromised. Good, but not perfect.<br /><br />Linux: Supports UEFI Secure Boot[1], but doesn't verify signatures on the initrd[2]. This means that attacks such as <a href=\"https://github.com/GDSSecurity/EvilAbigail/\">Evil Abigail</a> are still possible. Measured boot isn't in a good state, but it's possible to incorporate with a bunch of manual work. Vulnerable out of the box, but can be configured to be better than Windows.<br /><br />Apple: Ha. Snare talked about attacking the Apple boot process <a href=\"http://ho.ax/downloads/De_Mysteriis_Dom_Jobsivs_Black_Hat_Slides.pdf\">in 2012</a> - basically everything he described then is still possible. Apple recently hired the people behind <a href=\"http://www.legbacore.com/\">Legbacore</a>, so there's hope - but right now all shipping Apple hardware has no firmware support for UEFI Secure Boot and no TPM. This makes it impossible to provide any kind of boot attestation, and there's no real way you can verify that your system hasn't been compromised.<br /><br />Now, to be fair, there's attacks that even Windows and properly configured Linux will still be vulnerable to. Firmware defects that permit modification of System Management Mode code can still be used to circumvent these protections, and the Management Engine is in a position to just do whatever it wants and fuck all of you. But that's really not an excuse to just ignore everything else. Improving the current state of boot security makes it more difficult for adversaries to compromise a system, and if we ever do get to the point of systems which aren't running any hidden proprietary code we'll still need this functionality. It's worth doing, and it's worth doing now.<br /><br />[1] Well, except Ubuntu's signed bootloader will happily boot unsigned kernels which kind of defeats the entire point of the exercise<br />[2] Initrds are built on the local machine, so we can't just ship signed images<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=39339\" style=\"vertical-align: middle;\" width=\"30\" /> comments") (pubDate nil "Fri, 01 Jan 2016 00:48:32 +0000")) (item nil (title nil "Davidlohr Bueso: LPC 2015: Performance and Scalability MC") (guid nil "tag:blogger.com,1999:blog-5789291509148224079.post-7433466098575674607") (link nil "http://feedproxy.google.com/~r/stgolabs/eMGj/~3/RkpPevsVBpA/lpc-2015-performance-and-scalability-mc.html") (description nil "<div dir=\"ltr\" style=\"text-align: left;\"><div style=\"text-align: justify;\"><span style=\"font-family: inherit;\"><span style=\"font-size: small;\">This year I had the privilege of <span style=\"font-family: inherit;\">leading the<span style=\"font-family: inherit;\"> </span></span><a href=\"https://www.linuxplumbersconf.org/2015/ocw/events/LPC2015/tracks/453\">Performance and Scalability</a> micro-conference for Linux Plumbers. The goals and motivation behind <span style=\"font-family: inherit;\">organi<span style=\"font-family: inherit;\">zing</span></span> this track were threefold. First present relevant work-in-progress ideas that can improve performance in core kernel subsystems, and need some face to face discussion -- as such, this requires previous debate on lkml. Similarly, learn about real bottlenecks and issues people are running into. And finally, get to know more relevant academic (experimental) work going on in in both the kernel and system-level userland. As such, the sessions were grouped as follows:</span></span></div><div style=\"text-align: justify;\"><span style=\"font-family: inherit;\"><br /></span><span style=\"font-family: inherit;\"><span style=\"font-size: small;\"><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><i>(i)</i> <a href=\"http://backtrace.io/blog/blog/2015/03/13/workload-specialization/\">Fast Bounded-Concurrency Hash Tables</a>. </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">Samy <span style=\"font-family: inherit;\">B</span>ahra introduced a novel non-blocking multi-reader/single writer hash table with strong forward</span> <span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">progress guarantees for TSO. Because the common-case fastpath does not incur </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">in barriers or atomic operations</span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">, this technique </span></span></span><span style=\"font-family: inherit;\"><span style=\"font-size: small;\"><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><span style=\"font-family: inherit;\"><span style=\"font-size: small;\"><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">allows nearly </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">perfect scaling</span></span></span>. While his work is done in userspace, he sees potential </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">for it in the kernel, such as the networking subsystem. In such situations, the use of RCU (readers being the common case) might also be used.</span></span><br style=\"color: #2e3436; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\" /><span style=\"font-size: small;\"><br style=\"color: #2e3436; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\" /><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><i>(ii)</i> <a href=\"http://linuxplumbersconf.org/2015/ocw//system/presentations/2913/original/mcs_tsx.pdf\">Improving Transactional Memory Performance with Queued Locking</a>. </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">While transactional memory  works nicely in conflict-free setups, it ends up requiring common </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">serialization otherwise. An option is to ret<span style=\"font-family: inherit;\">r<span style=\"font-family: inherit;\">y, however, when <span style=\"font-family: inherit;\">the amount o<span style=\"font-family: inherit;\">f threads executing in the CR is larger than the<span style=\"font-family: inherit;\"> amount of completed threads, you can get pile<span style=\"font-family: inherit;\">ups. </span></span></span></span></span></span>Tim Chen <span style=\"font-family: inherit;\">p</span></span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">resented a solution based on applying a sort of 'aperture' and using </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">principles based on MCS for faired queuing, <span style=\"font-family: inherit;\">where </span>can be regulated based on </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">metrics such as the number of threads in the critical region a<span style=\"font-family: inherit;\">nd abort ra<span style=\"font-family: inherit;\">te</span></span>.</span><br style=\"color: #2e3436; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\" /><br style=\"color: #2e3436; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\" /><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><i>(iii)</i> <a href=\"https://linuxplumbersconf.org/2015/ocw/proposals/2751\">How to <span style=\"font-family: inherit;\">Apply Mutation Testing to RCU</span></a></span>. <span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">Iftekhar Ahmed from OSU<span style=\"font-family: inherit;\">, </span></span></span></span><span style=\"font-family: inherit;\"><span style=\"font-size: small;\"><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">summarized his research in overcoming limitations of mutation</span> <span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">testing to identify problems in RCU. As usual, working with Paul Mc<span style=\"font-family: inherit;\">Kenney</span>, they </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">have been able to identify a number of mutants along with making use of </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">rcutorture for specific periods of time. They generated ~3300 mutants </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">from rcu and rcutorture is doing a good job identifying them. It w<span style=\"font-family: inherit;\">ould be interesting to see this applied<span style=\"font-family: inherit;\"> along with f<span style=\"font-family: inherit;\">uzzy test<span style=\"font-family: inherit;\">ing which has <span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\">already<span style=\"font-family: inherit;\"> </span>uncovered several <span style=\"font-family: inherit;\">bugs in RCU<span style=\"font-family: inherit;\"> in the past.</span></span></span></span></span></span></span></span></span></span></span></span></div><div style=\"text-align: justify;\"><br /></div><table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://1.bp.blogspot.com/-lYTixqVUO68/VdlYfEsueBI/AAAAAAAABH0/90x6SbeQEnw/s1600/20805464645_410a3218b0_k.jpg\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"300\" src=\"http://1.bp.blogspot.com/-lYTixqVUO68/VdlYfEsueBI/AAAAAAAABH0/90x6SbeQEnw/s400/20805464645_410a3218b0_k.jpg\" width=\"400\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Scaling track -- LPC'15, Seattle.</td><td class=\"tr-caption\" style=\"text-align: center;\"><br /></td></tr></tbody></table><div class=\"separator\" style=\"clear: both; text-align: justify;\"><span style=\"font-size: small;\"><span style=\"font-family: inherit;\"></span></span></div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"font-family: inherit;\"> <span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><i>(iv)</i> <a href=\"https://linuxplumbersconf.org/2015/ocw/proposals/3291\">Unfair Qu</a><span style=\"font-family: inherit;\"><a href=\"https://linuxplumbersconf.org/2015/ocw/proposals/3291\">eued Spinlocks and Transactional Locks</a>.</span> </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">Waiman Long has been working on extending <span style=\"font-family: inherit;\">spinlocks</span> and apply <span style=\"font-family: inherit;\">them</span></span> <span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">to solve issues with <span style=\"font-family: inherit;\">transactional memory.</span> He presented experiments based on rwlocks and </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">transactional spinlock (new primitive) for transactional (reader) and </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">non-transactional (writer) executions. This talk <span style=\"font-family: inherit;\">nicely complemented</span> Tim Chen<span style=\"font-family: inherit;\">'s previous presenta<span style=\"font-family: inherit;\">tion</span>.</span></span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"> He also touched on the qspinlock performance in virtualized</span> <span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">environments and the challenges currently out there. <span style=\"font-family: inherit;\">As we<span style=\"font-family: inherit;\"> alrea<span style=\"font-family: inherit;\">dy have code for this,<span style=\"font-family: inherit;\"> it was much easier to discuss face to face. </span></span></span></span>Consensus in the </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">room was that kernel developers are not against improving pv spinlocks, </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">but what is determined is that we will not accept a 3rd primitive.</span><br style=\"color: #2e3436; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\" /><br style=\"color: #2e3436; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\" /><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><i>(v)</i> <a href=\"https://sslab.gtisc.gatech.edu/2015/cloud-scalability.html\">Do Virtual Machines Really Scale</a><span style=\"font-family: inherit;\">. </span></span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">Sanidhya Kashyap</span></span></span><span style=\"font-size: small;\"><span style=\"font-family: inherit;\"><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><a href=\"https://sslab.gtisc.gatech.edu/author/sanidhya-kashyap.html\"></a>from GA<span style=\"font-family: inherit;\"> Tech</span> showed us the state of scalability in the cloud where there is </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">a clear trend that services hit poor scalability after certain degrees </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">of contention/core-count. These are LHP issues and vmexits/enters cause </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">performance issues at high vcpu counts. He introduces oticket backed by </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">performing multiple wakeups at once when granting the lock. Good</span> <span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">feedback and suggestions to overcome some of the presented issues<span style=\"font-family: inherit;\"> with the approach<span style=\"font-family: inherit;\">. This was a<span style=\"font-family: inherit;\">n extra short BoF like of presentation, but <span style=\"font-family: inherit;\">there was quite a bi<span style=\"font-family: inherit;\">t of interest, and the <span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\">appropriate</span> people</span></span> were in the<span style=\"font-family: inherit;\"> room.</span></span></span></span></span></span></span></span></span></span></div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"font-family: inherit;\"><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\">Overall I would say that all thr<span style=\"font-family: inherit;\">e<span style=\"font-family: inherit;\">e </span></span></span><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\">objectives</span> were met and the quality of the sessions were high, thus <span style=\"font-family: inherit;\">meeting all expectations</span> <span style=\"font-family: inherit;\">(if not, please email me for feedback<span style=\"font-family: inherit;\"> ;-)</span></span>. <span style=\"font-family: inherit;\">In fact, there were some highly interesting and <span style=\"font-family: inherit;\">relevant </span>presentations t<span style=\"font-family: inherit;\">hat, due to t<span style=\"font-family: inherit;\">i<span style=\"font-family: inherit;\">me constraints<span style=\"font-family: inherit;\">, had to <span style=\"font-family: inherit;\">be left out<span style=\"font-family: inherit;\">.</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></div></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/stgolabs/eMGj/~4/RkpPevsVBpA\" width=\"1\" />") (pubDate nil "Wed, 30 Dec 2015 14:31:49 +0000")) (item nil (title nil "Michael Kerrisk (manpages): man-pages-4.04 is released") (guid nil "tag:blogger.com,1999:blog-3174631896317411826.post-4574555021991462082") (link nil "http://linux-man-pages.blogspot.com/2015/12/man-pages-404-is-released.html") (description nil "I've released <i>man-pages-4.04</i>. The release tarball is available on <a href=\"http://www.kernel.org/pub/linux/docs/man-pages/\">kernel.org</a>. The browsable online pages can be <a href=\"http://man7.org/linux/man-pages/index.html\">found on man7.org</a>. The Git repository for <i>man-pages</i> is <a href=\"http://www.kernel.org/doc/man-pages/download.html\">available on kernel.org</a>.<br /><br />This release resulted from patches, bug reports,and  comments from more than 30 contributors. As well as a large number of minor fixes to nearly 90 man pages, the more significant <a href=\"http://man7.org/linux/man-pages/changelog.html#release_4.04\">changes in <span style=\"font-style: italic;\">man-pages-4.04</span></a> include the following:<br /><ul><li>The <i><a href=\"http://man7.org/linux/man-pages/man2/futex.2.html\">futex(2)</a></i> man page was long in a sorry state, with many aspects of the system call undocumented in the man page. After more than a year working off and on (and more than 250 commits!), I've completed a major rewrite and expansion of the page (which is now nearly 6 times as long as it used to be). Some of the information was drawn from Ulrich Drepper's highly informative paper, <a href=\"http://www.akkadia.org/drepper/futex.pdf\"><i>Futexes are tricky</i></a>. A lot more information came from reading kernel and user-space source code, doing some experimenting (the revised man page even includes an example program!), and significant input from a number of reviewers (special thanks here to Thomas Gleixner and Torvald Riegel).</li><li>A new <i><a href=\"http://man7.org/linux/man-pages/man2/membarrier.2.html\">membarrier(2)</a></i> man page was added, contributed by <a href=\"https://www.efficios.com/\">Mathieu Desnoyers</a>, the developer of the new system call (added in Linux 4.3).</li><li>Eric Munson added documentation of the new <i>mlock2()</i> system call and the new <i>mlockall()</i> <span style=\"font-family: Courier New, Courier, monospace;\">MCL_ONFAULT</span> flag to the <i><a href=\"http://man7.org/linux/man-pages/man2/mlock.2.html\">mlock(2)</a></i> man page.</li></ul>") (pubDate nil "Tue, 29 Dec 2015 16:03:44 +0000")) (item nil (title nil "Davidlohr Bueso: fu(zz)tex: targeted fuzzing of futexes") (guid nil "tag:blogger.com,1999:blog-5789291509148224079.post-3926339682891681060") (link nil "http://feedproxy.google.com/~r/stgolabs/eMGj/~3/GKDyqBrK-DU/fuzztex-targeted-fuzzing-of-futexes.html") (description nil "<div dir=\"ltr\" style=\"text-align: left;\"><div style=\"text-align: justify;\">The complexity of futexes, their non-trivial interactions and semantics, very much serve as a good candidate for applying fuzzy testing techniques to them. In general futex code is poorly understood and audited, both at a kernel implementation level and by the respective userland callers, normally trying to implement some sort of locking primitive. Unsurprisingly, bugs related to this call will often be subtle and nasty, sometimes with <a href=\"http://www.cvedetails.com/google-search-results.php?q=futex&amp;sa=Search\">security</a> implications. Specifically for futexes, all system call fuzzers use generic and completely randomized inputs, which has only limited usefulness. This is even the case for Dave Jones' <a href=\"http://codemonkey.org.uk/projects/trinity\">trinity</a> program, which has been extremely good at finding kernel bugs (and ruining my weekends more than once ;). Much of the success and popularity of this program is because not all the inputs are random and meaningful parameters are passed for many of the exercised syscalls. This is called targeted fuzzing, and has been proven to find more bugs than blindly random inputs, which in turn is more likely to produce logic that makes the kernel actually do something related to the call, as opposed to quickly erroring out due to some trivial bogus scenario. A nice example is the <i>perf_event_open(2)</i> call, which was <a href=\"http://web.eece.maine.edu/~vweaver/projects/perf_events/fuzzer/2015_perf_fuzzer_tr.pdf\">studied</a> for targeted fuzzy testing with very good results.</div><h3 style=\"text-align: justify;\">Extending Trinity </h3><div style=\"text-align: justify;\">Reusing the already proven-to-work machinery of trinity. and extend it for futex ad-hoc work, is the obvious step for improving coverage, in the hope to tackle some of the issues previously described. While reading the code is always the definite answer, having a man-page that is <i>up-to-par</i> with the call is quite essential; if we want programmers to make correct use of the tools we provide, that is. Fortunately, Michael Kerrisk has been doing a nice job of <a href=\"https://git.kernel.org/cgit/docs/man-pages/man-pages.git/tree/man2/futex.2\">rewriting</a> the current <i>futex.2</i> page, which is so surprisingly crappy and incomplete, it's sad. This makes the task correctly setting the input parameters following a certain purpose a little less tedious and error-prone:<br /><br /><pre><span><code style=\"color: black;\"> </code></span><code style=\"color: black;\"><span>SYSCALL_DEFINE6(futex, u32 __user *, uaddr, int, op, u32, val,<br />     struct timespec __user *, utime, u32 __user *, uaddr2, u32, val3)</span><br /></code></pre><span></span><br /> -- just imagine if <i>mmap.2</i> were barely documented and stale.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">There are two immediately obvious op flags that are not being exercised at all (with the exception of randomly bumping into them, which is quite unlikey and badly controllable):</div><ul style=\"text-align: justify;\"><li><span>FUTEX_CLOCK_RT:</span> When set, the kernel treats the timeout as an absolute time based on <span>CLOCK_REALTIME</span> as opposed to <span>CLOCK_MONOTONIC.</span> This is only affected by <span>FUTEX_WAIT_BITSET</span> and <span>FUTEX_REQUEUE_PI</span> commands.</li></ul><ul style=\"text-align: justify;\"><li><span>FUTEX_PRIVATE_FLAG:</span> Refers to the user address space mapping, and applies to all operations. The main benefit is that kernel can directly use the virtual address without having to do any lookups or other overhead (vmas, gup, thp, etc.) imposed by shared mappings.</li></ul><h4 style=\"text-align: justify;\">Ever-changing task priorities</h4><div style=\"text-align: justify;\">The whole purpose of PI futexes are to address priority inheritance issues for systems with real time requirements. Randomly changing a processes priority will therefore better stress the system call instead of always using the default nice value, exercising priority boosting code in the kernel.</div><div style=\"text-align: left;\"><h4 style=\"text-align: left;\">Fault/error injections</h4><div style=\"text-align: justify;\">This year we <a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=ab51fbab39d864f3223e44a2600fd951df261f0b\">added</a> support for artificially triggering errors within the various futex paths faults and deadlock scenarios, via the <span>CONFIG_FAULT_INJECTION</span> kernel framework along with the <span>CONFIG_FAIL_FUTEX</span> option. Trinity can make use of this feature by randomly toggling the process' <a href=\"https://www.kernel.org/doc/Documentation/fault-injection/fault-injection.txt\">make-it-fail</a> file as well as selecting appropriate fault injection debugfs options.</div></div><h4 style=\"text-align: left;\">Feeding user-addresses</h4><div style=\"text-align: justify;\">Perhaps the single most important argument that we can pass to the syscall is the user address (uaddr, or 'the futex'), which will govern everything the kernel attempts to do with it, being private or shared address space. As such, it is not very useful to blindly feed it random addresses, even if trinity is setup by default, these inputs will sometimes be picked by previously <i>mmap-created</i> shared memory playgrounds. However, at a futex level, this does not matter unless we are doing blocking calls (WAIT).<br /><br />So this has been reworked such that trinity now creates a number of locks in shared memory at startup, which has the owner PID and the actual futex. Upon a call, both fields of uaddr get either a random lock or a random address from the mmap playground, each with a 50% chance. The locks follow very simple semantics, where a successful <i>cmpxchg</i> will allow the caller to acquire the lock without the kernel being involved (fastpath), otherwise we need to wait/block through the futex call.<br /><br />Because of how trinity is structured with callbacks for pre/post syscall invocation, there are a number of racy windows between when the lock is dealt (ie considered contended) with and when the fuzzer actually calls futex(2). As such, this must be taken with a grain of salt, but does exercise lots of real world situations, nonetheless.<br /><h4 style=\"text-align: left;\">Choosing operations</h4>The idea is to randomly perform different operations on the selected futex, such that combinations of wake, wait, requeue are done (both for regular and PI futexes). While passing informed, <i>not-so-random,</i> parameters to the system call reduces the chance of shallow fuzzing, choosing the futex operation will determine the kind of work to be done on the uaddress. As such this part can further determine the usefulness of trinity regarding futexes. However, one cannot get too strict here as reducing the randomness will also limit the usefulness. For now the layout is a 25% chance when performing lock operations. Oh the other hand, for the case of mmap selected uaddress, the operation is left up to trinity to decide.</div><div style=\"text-align: justify;\"></div><div style=\"text-align: justify;\"></div><div style=\"text-align: justify;\"><h3 style=\"text-align: justify;\">Evaluation and future work</h3><div style=\"text-align: justify;\">Evaluating software that purposely tries to mess up other software is always twofold. For one, any new futex bug that is found indicates that modifying trinity was a good step towards better testing coverage. But unfortunately this creates a new headache for futex hackers, and a bug needs to be fixed (including any corresponding Linux distribution backporting, security and <i>-stable</i> work). So any useful results which exhibit the presence of bugs can be bitter/sweet -- just think <a href=\"http://www.brainyquote.com/quotes/quotes/e/edsgerdijk201165.html\">Dijkstra</a>.<br /><br />One immediate way of evaluating the changes to trinity is to see the number of successful calls. While this can be a misleading metric, it does at least indicate whether or not many of the bogus parameter passing have been mitigated and replaced with smarter, more informed calls. Tests show that these changes have in fact boosted the amount of successful futex(2) returns; within a trinity run of 10,000 calls with 4 threads, we were able to go from ~470 to nearly ~4300, which is around a 10x improvement. This also means that it takes more time to run trinity as the kernel is doing actual work now with our futexes, not simply returning immediately due to bogus parameters and trivial error checks.<br /><br />In the future, it would be good to fuzz futexes with memory-back file (uaddress), instead of always relying on anonymous memory. While is perhaps not so interesting from a futex standpoint (with the exception of hashing), it would be good when combining with other memory related calls which actually do things with the file. Another useful direction would be to further investigate operation selection policies. Different models will fuzz different parts of the futex subsystem, and perhaps (very probably, actually) I have not found the best one yet.</div><div style=\"text-align: justify;\"><br /></div></div><div style=\"text-align: justify;\">This work was done as part of SUSE <a href=\"https://hackweek.suse.com/13/projects/1064\">Hackweek 13</a>, which allowed me to finally allocate some time to focus on this (although this writing is much overdue). So as always, lots of thanks to my employer.</div></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/stgolabs/eMGj/~4/GKDyqBrK-DU\" width=\"1\" />") (pubDate nil "Tue, 29 Dec 2015 13:36:29 +0000")) (item nil (title nil "Matthew Garrett: GPL enforcement is a social good") (guid nil "tag:dreamwidth.org,2011-02-12:696190:38992") (link nil "http://mjg59.dreamwidth.org/38992.html") (description nil "The Software Freedom Conservancy is currently running a <a href=\"https://sfconservancy.org/supporter/\">fundraising program</a> in an attempt to raise enough money to continue funding GPL compliance work. If they don't gain enough supporters, the majority of their compliance work will cease. And, since SFC are one of the only groups currently actively involved in performing GPL compliance work, that basically means that there will be nobody working to ensure that users have the rights that copyright holders chose to give them.<br /><br />Why does this matter? More people are using GPLed software than at any point in history. Hundreds of millions of Android devices were sold this year, all including GPLed code. An unknowably vast number of IoT devices run Linux. Cameras, Blu Ray players, TVs, light switches, coffee machines. Software running in places that we would never have previously imagined. And much of it abandoned immediately after shipping, gently rotting, exposing an increasingly large number of widely known security vulnerabilities to an increasingly hostile internet. Devices that become useless because of protocol updates. Toys that have a \"Guaranteed to work until\" date, and then suddenly Barbie goes dead and you're forced to have an unexpected conversation about API mortality with your 5-year old child.<br /><br />We can't fix all of these things. Many of these devices have important functionality locked inside proprietary components, released under licenses that grant no permission for people to examine or improve them. But there are many that we can. Millions of devices are running modern and secure versions of Android despite being abandoned by their manufacturers, purely because the vendor released appropriate source code and a community grew up to maintain it. But this can only happen when the vendor plays by the rules.<br /><br />Vendors who don't release their code remove that freedom from their users, and the weapons users have to fight against that are limited. Most users hold no copyright over the software in the device and are unable to take direct action themselves. A vendor's failure to comply dooms them to having to choose between buying a new device in 12 months or no longer receiving security updates. When yet more examples of vendor-supplied malware are discovered, it's more difficult to produce new builds without them. The utility of the devices that the user purchased is curtailed significantly.<br /><br />The Software Freedom Conservancy is one of the only organisations actively fighting against this, and if they're forced to give up their enforcement work the pressure on vendors to comply with the GPL will be reduced even further. If we want users to control their devices, to be able to obtain security updates even after the vendor has given up, we need to keep that pressure up. Supporting the SFC's work has a real impact on the security of the internet and people's lives. Please consider giving them money.<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=38992\" style=\"vertical-align: middle;\" width=\"30\" /> comments") (pubDate nil "Wed, 23 Dec 2015 19:38:18 +0000")) (item nil (title nil "LPC 2016: Planning has begun for LPC 2016") (guid nil "https://www.linuxplumbersconf.org/2016/?p=236") (link nil "https://www.linuxplumbersconf.org/2016/planning-has-begun-for-lpc-2016/") (description nil "<p>The planning committee for the 2016 edition of the Linux Plumbers Conference is happy to announce that planning for the conference has begun. LPC will be held November 2-4 in Santa Fe, New Mexico in conjunction with the Kernel Summit at the <a href=\"http://www.communityconventioncenter.com/\">Santa Fe Convention Center</a> in the historic downtown area. More information about LPC can be found at the <a href=\"http://linuxplumbersconf.org\">web site</a> and we will be posting additional bits and pieces here as they become available. We look forward to seeing you there!</p>") (pubDate nil "Wed, 23 Dec 2015 19:21:18 +0000")) (item nil (title nil "Rusty Russell: Bitcoin: Mixed Signs of A Fee Market") (guid nil "http://rusty.ozlabs.org/?p=564") (link nil "http://rusty.ozlabs.org/?p=564") (description nil "<p>Six months ago in a <a href=\"http://rusty.ozlabs.org/?p=500\">previous post</a> I showed that 45% of transactions have an output of less that $1, and estimated that they would get squeezed out first as blocks filled.  It’s time to review that prediction, and also to see several things:</p>
<ol>
<li>Are fees rising?</li>
<li>Are fees detached from magic (default) numbers of satoshi?</li>
<li>Are low value transactions getting squeezed out?</li>
<li>Are transactions starting to shrink in response to fee pressure?</li>
</ol>
<p>Here are some scenarios: low-value transactions might be vanishing even if nothing else changes, because people’s expectations (“free global microtransactions!” are changing).  Fees might be rising but still on magic numbers, because miners and nodes increased their relayfee due to spam attacks (most commonly, the rate was increased from 1000 satoshi per kb to 5000 satoshi per kb).  Finally, we’d eventually expect wallets which produce large transactions (eg. using uncompressed signatures) to lose popularity, and wallets to get smarter about transaction generation (particularly once Segregated Witness makes it fairly easy).</p>
<h2>Fees For The Last 2 Years</h2>
<p>The <a href=\"http://ozlabs.org/~rusty/diagrams/feerate.png\">full 4 year graph</a> is very noisy, so I only plotted the mean txfee/kb for each day for the last two years, in Satoshi and USD (<a href=\"http://www.coindesk.com/price/bitcoin-price-index/\">thanks to the Coindesk BPI data</a> for the conversion):</p>
<p><img alt=\"\" class=\"alignnone\" height=\"937\" src=\"http://ozlabs.org/~rusty/diagrams/feerate-2-years.png\" width=\"1250\" /></p>
<p> </p>
<p><strong>Conclusion</strong>: Too noisy to be conclusive: they seem to be rising recently, but some of that reflects the exchange rate changes.</p>
<h2>Are Fees on Magic Boundaries?</h2>
<p>Wallets should be estimating fees: in a real fee market they’d need to.</p>
<p>Dumb wallets pay a fixed fee per kb: eg. the bitcoin-core wallet pays 1,000 (now 5,000) satoshi per kb by default; even if the transaction is 300 bytes, it will pay 5,000 satoshi.  Some wallets use (slightly more sensible) scaling-by-size, so they’d pay 1,500 satoshi.  So if a transaction fee ends in “000”, or the scaled transaction fee does (+/- 2) we can categorize them as “fixed fee”.  We assume others are using a variable fee (about 0.6% will be erroneously marked as fixed):</p>
<p><img alt=\"\" class=\"alignnone\" height=\"468\" src=\"http://ozlabs.org/~rusty/diagrams/var-or-fixed-rate.png\" width=\"1250\" /></p>
<p>This graph is a bit dense, so we thin it by grouping into weeks:</p>
<p><img alt=\"\" class=\"alignnone\" height=\"468\" src=\"http://ozlabs.org/~rusty/diagrams/var-or-fixed-rate-weekly.png\" width=\"1093\" /></p>
<p> </p>
<p><strong>Conclusion</strong>: Wallets are starting to adapt to fee pressure, though the majority are still using a fixed fee.</p>
<h2>Low Value Transactions For Last 4 Years</h2>
<p>We categorize 4 distinct types of transactions: ones which have an output below 25c, ones which have an output between 25c and $1, ones which have an output between $1 and $5, and ones which have no output below $5, and graph the trends for each for the last four years:</p>
<p><img alt=\"\" class=\"alignnone\" height=\"468\" src=\"http://ozlabs.org/~rusty/diagrams/tx-by-value.png\" width=\"1250\" /></p>
<p><strong>Conclusion: </strong>25c transactions are flat (ignoring those spam attack spikes).  &lt; $1 and &lt;$5 are growing, but most growth is coming from transactions &gt;= $5.</p>
<h2>Transaction Size For Last 4 Years</h2>
<p>Here are the transaction sizes for the last 4 years:</p>
<p><img alt=\"\" class=\"alignnone\" height=\"468\" src=\"http://ozlabs.org/~rusty/diagrams/txsize.png\" width=\"1250\" /></p>
<p><strong>Conclusion</strong>: There seems to be a slight decline in transaction sizes, but it’s not clear the cause, and it might be just noise.</p>
<h2>Conclusion</h2>
<p>There are signs of a nascent fee market, but it’s still very early. I’d expect something conclusive in the next 6 months.</p>
<p>The majority of fees should be variable, and they’re not: wallets remain poor, but users will migrate as blocks fill and more transactions get stuck.</p>
<p>A fee rate of over 10c per kb (2.5c per median transaction) hasn’t suppressed 25c transactions: perhaps it’s not high enough yet, or perhaps wallets aren’t making the relative fees clear enough (eg. my Trezor gives fees in BTC, as well as  only offering fixed fee rates).</p>
<p>The slight dip in mean transaction sizes and lack of growth in 25c transactions to may point to early market pressure, however.</p>
<p>Six months ago I <a href=\"http://rusty.ozlabs.org/?p=500\">showed that 45% of transactions were less than a dollar</a>.  In the last six months that has declined to 38%.  I previously estimated that we would want larger blocks within two years, and need them within three.  That still seems a reasonable estimate.</p>
<h3>Data</h3>
<p>I used <a href=\"https://github.com/rustyrussell/bitcoin-iterate\">bitcoin-iterate</a> and a really crappy Makefile to generate CSVs with the data.  You can <a href=\"https://github.com/rustyrussell/bitcoin-feemarket\">see the result on github</a> or go straight to downloading the <a href=\"https://github.com/rustyrussell/bitcoin-feemarket/blob/master/graphs.gnumeric?raw=true\">Gnumeric spreadsheet with the graphs</a>.</p>
<h3>Disclaimer: I Work For <a href=\"http://blockstream.com\">Blockstream</a></h3>
<p>On lightning.  Not on drawing pretty graphs.  But I wanted to see the data…</p>
<p> </p>") (pubDate nil "Tue, 22 Dec 2015 05:53:31 +0000")) (item nil (title nil "James Bottomley: The DCO, Patents and OpenStack") (guid nil "http://blog.hansenpartnership.com/?p=312") (link nil "http://blog.hansenpartnership.com/the-dco-patents-and-openstack/") (description nil "<p>Historically, the <a href=\"http://developercertificate.org\">Developer Certificate of Origin</a> originally adopted by the Linux Kernel in 2005 has seen widespread use within a large variety of Open Source projects.  The DCO is designed to replace a Contributor Licence Agreement with a simple Signed-off-by attestation which is placed into the commit message of the source repository itself, thus meaning that all the necessary DCO attestations are automatically available to anyone who downloads the source code repository.  It also allows (again, through the use of a strong source control system) the identification of who changed any given line of code within the source tree and all their DCO signoffs.</p>
<p>The legal basis of the DCO is that it is an attestation by an individual developer that they have sufficient rights in the contribution to submit it under the project (or file) licence.</p>
<h2>The DCO and Corporate Contributions</h2>
<p>In certain jurisdictions, particularly the United States of America, when you work as a software developer for a Corporation, they actually own, exclusively, the copyright of any source code you produce under something called the Work for Hire doctrine.  So the question naturally arises: if the developer who makes the Signed-off-by attestation  doesn’t actually own any rights in the code, how is that attestation valid and how does the rights owning entity (the corporation) actually license the code correctly to make the contribution?</p>
<p>The answer to that question resides in something called the <a href=\"https://en.wikipedia.org/wiki/Law_of_agency\">theory of agency</a>.  Agency is the mechanism by which individuals give effect to actions of a corporation.  For example, being a nebulous entity with no actual arms or legs, a corporation cannot itself sign any documents.  Thus, when a salesman signs a contract to supply widgets on behalf of a corporation, he is acting as the agent of that corporation.  His signature on the sales contract becomes binding on the corporation as if the corporation itself had made it.  However, there’s a problem here: how does the person who paid for and is expecting the delivery of widgets know that the sales person is actually authorised to be an agent of the corporation?  The answer here is again in the theory of agency: as long as the person receiving the widgets had reasonable cause to think that the salesperson signing the contract is acting as an agent of the corporation.  Usually all that’s required is that the company gave the salesperson a business card and a title which would make someone think they were authorised to sign contracts (such as “Sales Manager”).</p>
<p>Thus, the same thing applies to developers submitting patches on behalf of a corporation.  They become agents of that corporation when making DCO attestations and thus, even if the contribution is a work for hire and the copyright owned by the corporation, the DCO attestation the developer makes is still binding on the corporation.</p>
<h2>Email addresses matter</h2>
<p>Under the<a href=\"https://en.wikipedia.org/wiki/Apparent_authority\"> theory of agency, it’s not sufficient</a> to state “I am an agent”, there must be some sign on behalf of the corporation that they’re granting agency (in the case of the salesperson, it was a business card and checkable title).  For developers making contributions with a Signed-off-by, the best indication of agency is to do the signoff using a corporate email address.  For this reason, the Linux kernel has adopted the habit of not accepting controversial patches without a corporate signoff.</p>
<h2>Patents and the DCO</h2>
<p>The Linux Kernel uses GPLv2 as its licence.  GPLv2 is solely a copyright licence and has nothing really to say about patents, except that if you assert against the project, you lose your right to distribute under GPLv2.  This is what is termed an implied patent licence, but it means that the DCO signoff for GPLv2 only concerns copyrights.  However, there are many open source licences (like Apache-2 or GPLv3) which require explicit patent grants as well as copyright ones, so can the DCO give all the necessary rights, including patent ones, to make the contribution on behalf of the corporation?  The common sense answer, which is if the developer is accepted as an agent for copyright, they should also be an agent for patent grants, isn’t as universally accepted as you might think.</p>
<h2>The OpenStack problem</h2>
<p>OpenStack has been <a href=\"https://wiki.openstack.org/wiki/OpenStackAndItsCLA\">trying for years</a> to drop its complex contributor licence infrastructure in favour of a simple DCO attestation.  Most recently, the Technical Committee <a href=\"http://git.openstack.org/cgit/openstack/governance/tree/resolutions/20140909-cla.rst\">made that request</a> of the board in 2014 and it was finally granted in a limited fashion on November 2015.  The <a href=\"https://wiki.openstack.org/w/images/2/26/263072653_2%28Individual_Contribution_LicenseAgreementStrategy%29.pdf\">recommendation</a> of the OpenStack counsel was accepted and the DCO was adopted for individuals only, keeping the contributor licence agreements for corporations.  The given reason for this is that the corporate members of OpenStack want more assurance that corporations are correctly granting their patents in their contributions than they believe the DCO gives (conversely, individuals aren’t expected to have any patents, so, for them, the DCO applies just fine since it’s effectively only a copyright attestation they’re giving).</p>
<h2>Why are Patents such an Issue?</h2>
<p>Or why do lots of people think developers aren’t agents for patents in contributions unlike for copyrights?  The essential argument (as shown <a href=\"https://twitter.com/jejb_/status/659960629134884864\">here</a>) is that corporations as a matter of practise, do not allow developers (or anyone else except specific title holders) to be agents for patent transactions and thus there should not be an expectation, even when they make a DCO attestation using a corporate email signoff, that they are.</p>
<p>One way to look at this is that corporations have no choice but to make developers agents for the copyright because without that, the DCO attestation is false since the developers themselves has no rights to a work for hire piece of code.  However, some corporations think they can get away with not making developers agents for patents because the contribution and the licence do not require this to happen.  The theory here is that the developer is making an agency grant for the copyright, but an individual grant of the patents (and, since developers don’t usually own patents, that’s no grant at all).  Effectively this is a get out of jail free card for corporations to cheat on the patent requirements of the licence.</p>
<p>Does this interpretation really hold water?  Well, I don’t think so, because it’s deceptive.  It’s deliberately trying to evade the responsibilities for patents that the licences require.  Usually under the theory of agency, deceptive practises are barred.  However, the fear that a court might be induced to accept this viewpoint is sufficient to get the OpenStack board to require that corporations sign a CLA to ensure that patents are well and truly bound.  The problem with this viewpoint is that, if it becomes common enough, it ends up being de facto what the legal situation actually is (because the question courts most often ask in cases about agency is what would the average person think, so a practise that becomes standard in the industry ipso facto becomes what the average reasonable person would think).  Effectively therefore, the very act of OpenStack acting on its fear causes the thing they fear eventually to become true.  The only way to reverse this now is to change the current state of how the industry views patents and the DCO … and that will be the subject of another post.</p>") (pubDate nil "Mon, 21 Dec 2015 23:18:29 +0000")) (item nil (title nil "James Morris: Bangalore Linux Kernel Meetup – Jan 2016") (guid nil "http://blog.namei.org/?p=629") (link nil "http://blog.namei.org/2015/12/18/bangalore-linux-kernel-meetup-jan-2016/") (description nil "<p><a href=\"https://twitter.com/allenpais\">Allen Pais</a>, who was one of the <a href=\"https://en.wikipedia.org/wiki/FOSS.IN\">FOSS.IN</a> organizers, and now works on my <a href=\"https://blogs.oracle.com/linuxkernel/\">team at Oracle</a>, has announced a new event, the <a href=\"https://kernelmeetup.wordpress.com/\">Bangalore Linux Kernel Meetup</a>.</p>
<p>This is a great idea!  There are many Linux kernel developers in Bangalore.</p>
<p>The first meetup will be on 16th Jan, 2016, at a location to be announced.</p>") (pubDate nil "Fri, 18 Dec 2015 02:07:32 +0000")) (item nil (title nil "Pete Zaitcev: HP Reconfigurable") (guid nil "http://zaitcev.livejournal.com/231095.html") (link nil "http://zaitcev.livejournal.com/231095.html") (description nil "<p>I learned <a href=\"https://www.mirantis.com/blog/hpe-introduces-a-new-way-of-computing-but-will-it-work/\" rel=\"nofollow\">by way of Mirantis</a> today that an entity known as \"HP Enterprise\" or \"HPE\" introduced something described thus:</p>
<blockquote>
<p>It’s an architecture in which a large server acts as a “pool” of compute, storage, and networking resources, the same way a cloud might. When an application needs resources, they’re allocated from that hardware pool, and when the application goes away, they’re returned from the pool.  All of this happens via the composable architecture.</p>
</blockquote>
<p>That may explain the mysterious Intel computer that I saw <a href=\"http://zaitcev.livejournal.com/230683.html\" rel=\"nofollow\">in Tokyo</a>. So it's not quite NUMA taken to extremes, it's also hardware domains taken to extremes.</p>") (pubDate nil "Tue, 15 Dec 2015 18:36:47 +0000")) (item nil (title nil "Daniel Vetter: Neat drm/i915 stuff for 4.4") (guid nil "tag:blogger.com,1999:blog-8047628228132312466.post-64982716988550007") (link nil "http://blog.ffwll.ch/2015/12/neat-drmi915-stuff-for-44.html") (description nil "Due to vacations, conferences and other things I'm way later than usual and <a href=\"http://blog.ffwll.ch/2015/09/neat-drmi915-stuff-for-43.html\">4.3 has been released</a> a while ago. More than overdue to take a look at what's in store in the next kernel release.<br /><a name=\"more\"></a>First looking at overall infrastructure work on the display side there's a lot of <b>atomic conversion</b> progress again. One feature that's now on solid fundations is <b>fastboot, built on top of atomic infrastructure</b> with patches from Maarten. Unfortunately we had to disable it again due to some backligh issues early in 4.4-rc. The other big piece is reworking the watermark update code (Ville&amp;Matt), which unfortunately ran into regression roadblocks already in the development cycle and had to be reverted partially. Another piece of infrastructure building on top of atomic is <b>validation&amp;adjusting the display clock</b> - some ULT chips can't drive all DP screens and the driver now detects that, and it should also downclock when less bandwidth is needed. This was implemented by Mika Kahola and Ville.<br /><br />Again this round has seen a lot of improvements and <b>bug fixes to PSR code</b> (from Rodrigo) and for <b>FBC</b> (from Paulo). Unfortunately we're not yet done with those, but it looks really good that at least PSR can finally be enabled for 4.5. Still on the display side of the driver there was a pile of smaller improvements all over: Prep work for Broxton DSI support (Shashank Sharma). HDMI detection finally checks the hotplug sense, after some workaround from Sonika. And tons of cleanups all over. Fixing up DMC support (for new low-power display states) was also a topic, but we've only managed to fix it up for real in 4.5.<br /><br />On the GEM side the big thing for sure is support for the extended <b>48-bit GPU address space</b> on Broadwell and later chips, from Michel Thierry. And then there's the code for <b>GuC-based command submission</b> (Alex Dai and Dave Gordon), which is merged but not yet enabled by default. The idea behind that is to feed all command submission through an on-chip microcontroller, which can then react much faster to changing workloads and tune power states accordingly. It should also help long-term with better scheduling by supporting preemption. But none of that is implemented yet, so this is just fundations.<br /><br />For existing features there are <b>bugfixes for userptr and shrinker improvements</b> from Chris Wilson. And Tvrtko has extended the vma view code in prepartion of rotation support for NV12.<br /><br />Of course there's also been the usual enabling work for new platforms, this time around mostly consisting of workaround patches for Skylake and Broxton. But Zhiyuan Lv submitted support for the <b>virtualized XenGT gpu support on Broadwell</b>.<br /><br />Finally for driver internals there's the massive work from Ville to <b>make the register access functions type safe</b>. This is escpecially a problem for writing registers, where both the register and the value that needs to be written are of type <code>uin32_t</code>. That resulted in subtile bugs fairly often. Ville encapsulated the register offset into a struct and converted all the thousands of register #defines and users over to that, and now compilation will fail if we ever get this wrong again.") (pubDate nil "Wed, 09 Dec 2015 10:52:48 +0000")) (item nil (title nil "Michael Kerrisk (manpages): man-pages-4.03 is released") (guid nil "tag:blogger.com,1999:blog-3174631896317411826.post-3309684743588243307") (link nil "http://linux-man-pages.blogspot.com/2015/12/man-pages-403-is-released.html") (description nil "I've released <i>man-pages-4.03</i>. The release tarball is available on <a href=\"http://www.kernel.org/pub/linux/docs/man-pages/\">kernel.org</a>. The browsable online pages can be <a href=\"http://man7.org/linux/man-pages/index.html\">found on man7.org</a>. The Git repository for <i>man-pages</i> is <a href=\"http://www.kernel.org/doc/man-pages/download.html\">available on kernel.org</a>.<br /><br />This release is relatively small, but nevertheless nearly 40 people contributed patches, bug reports,and comments. The more significant <a href=\"http://man7.org/linux/man-pages/changelog.html#release_4.03\">changes in <span style=\"font-style: italic;\">man-pages-4.03</span></a> include the following:<br /><ul><li>Vince Weaver has once again been very active on the <a href=\"http://man7.org/linux/man-pages/man2/perf_event_open.2.html\"><i>perf_event_open(2)</i></a> page, making many updates related to recent kernel changes.</li><li>Documentation of the ambient capabilities feature that was added in Linux 4.3 has been added to the <i><a href=\"http://man7.org/linux/man-pages/man7/capabilities.7.html\">capabilities(7)</a></i> and <i><a href=\"http://man7.org/linux/man-pages/man2/prctl.2.html\">prctl(2)</a></i> pages.</li></ul>") (pubDate nil "Sat, 05 Dec 2015 12:27:26 +0000")) (item nil (title nil "Matthew Garrett: What is hacker culture?") (guid nil "tag:dreamwidth.org,2011-02-12:696190:38746") (link nil "http://mjg59.dreamwidth.org/38746.html") (description nil "Eric Raymond, author of <a href=\"http://www.catb.org/esr/writings/cathedral-bazaar/\">The Cathedral and the Bazaar</a> (an important work describing the effectiveness of open collaboration and development), recently wrote a piece <a href=\"http://esr.ibiblio.org/?p=6918\">calling for \"Social Justice Warriors\" to be ejected from the hacker community</a>. The primary thrust of his argument is that by calling for a removal of the \"cult of meritocracy\", these SJWs are attacking the central aspect of hacker culture - that the quality of code is all that matters.<br /><br />This argument is simply wrong.<br /><br />Eric's been involved in software development for a long time. In that time he's seen a number of significant changes. We've gone from computers being the playthings of the privileged few to being nearly ubiquitous. We've moved from the internet being something you found in universities to something you carry around in your pocket. You can now own a computer whose CPU executes only free software from the moment you press the power button. And, as Eric wrote almost 20 years ago, we've identified that the \"Bazaar\" model of open collaborative development works better than the \"Cathedral\" model of closed centralised development.<br /><br />These are huge shifts in how computers are used, how available they are, how important they are in people's lives, and, as a consequence, how we develop software. It's not a surprise that the rise of Linux and the victory of the bazaar model coincided with internet access becoming more widely available. As the potential pool of developers grew larger, development methods had to be altered. It was no longer possible to insist that somebody spend a significant period of time winning the trust of the core developers before being permitted to give feedback on code. Communities had to change in order to accept these offers of work, and the communities were better for that change.<br /><br />The increasing ubiquity of computing has had another outcome. People are much more aware of the role of computing in their lives. They are more likely to understand how proprietary software can restrict them, how not having the freedom to share software can impair people's lives, how not being able to involve themselves in software development means software doesn't meet their needs. The largest triumph of free software has not been amongst people from a traditional software development background - it's been the fact that we've grown our communities to include people from a huge number of different walks of life. Free software has helped bring computing to under-served populations all over the world. It's aided circumvention of censorship. It's inspired people who would never have considered software development as something they could be involved in to develop entire careers in the field. We will not win because we are better developers. We will win because our software meets the needs of many more people, needs the proprietary software industry either can not or will not satisfy. We will win because our software is shaped not only by people who have a university degree and a six figure salary in San Francisco, but because our contributors include people whose native language is spoken by so few people that proprietary operating system vendors won't support it, people who live in a heavily censored regime and rely on free software for free communication, people who rely on free software because they can't otherwise afford the tools they would need to participate in development.<br /><br />In other words, we will win because free software is accessible to more of society than proprietary software. And for that to be true, it must be possible for our communities to be accessible to anybody who can contribute, regardless of their background.<br /><br />Up until this point, I don't think I've made any controversial claims. In fact, I suspect that Eric would agree. He would argue that because hacker culture defines itself through the quality of contributions, the background of the contributor is irrelevant. On the internet, nobody knows that you're contributing from a basement in an active warzone, or from a refuge shelter after escaping an abusive relationship, or with the aid of assistive technology. If you can write the code, you can participate.<br /><br />Of course, this kind of viewpoint is overly naive. Humans are wonderful at noticing indications of \"otherness\". Eric even <a href=\"http://esr.ibiblio.org/?p=5001\">wrote</a> about his struggle to stop having a viscerally negative reaction to people of a particular race. This happened within the past few years, so before then we can assume that he was less aware of the issue. If Eric received a patch from someone whose name indicated membership of this group, would there have been part of his subconscious that reacted negatively? Would he have rationalised this into a more critical analysis of the patch, increasing the probability of rejection? We don't know, and it's unlikely that Eric does either.<br /><br />Hacker culture has long been concerned with good design, and a core concept of good design is that code should fail safe - ie, if something unexpected happens or an assumption turns out to be untrue, the desirable outcome is the one that does least harm. A command that fails to receive a filename as an argument shouldn't assume that it should modify <em>all</em> files. A network transfer that fails a checksum shouldn't be permitted to overwrite the existing data. An authentication server that receives an unexpected error shouldn't default to granting access. And a development process that may be subject to unconscious bias should have processes in place that make it less likely that said bias will result in the rejection of useful contributions.<br /><br />When people criticise meritocracy, they're not criticising the concept of treating contributions based on their merit. They're criticising the idea that humans are sufficiently self-aware that they will be able to identify and reject every subconscious prejudice that will affect their treatment of others. It's not a criticism of a desirable goal, it's a criticism of a flawed implementation. There's <a href=\"http://asq.sagepub.com/content/55/4/543.short\">evidence that organisations that claim to embody meritocratic principles are more likely to reward men than women even when everything else is equal</a>. The \"cult of meritocracy\" isn't the belief that meritocracy is a good thing, it's the belief that a project founded on meritocracy will automatically be free of bias.<br /><br />Projects like the <a href=\"http://contributor-covenant.org/\">Contributor Covenant</a> that Eric finds so objectionable exist to help create processes that (at least partially) compensate for our flaws. Review of our processes to determine whether we're making poor social decisions is just as important as review of our code to determine whether we're making poor technical decisions. Just as the bazaar overtook the cathedral by making it easier for developers to be involved, inclusive communities will overtake \"pure meritocracies\" because, in the long run, these communities will produce better output - not just in terms of the quality of the code, but also in terms of the ability of the project to meet the needs of a wider range of people.<br /><br />The fight between the cathedral and the bazaar came from people who were outside the cathedral. Those fighting against the assumption that meritocracies work may be outside what Eric considers to be hacker culture, but they're already part of our communities, already making contributions to our projects, already bringing free software to more people than ever before. This time it's Eric building a cathedral and decrying the decadent hordes in their bazaar, Eric who's failed to notice the shift in the culture that surrounds him. And, like those who continued building their cathedrals in the 90s, it's Eric who's now irrelevant to hacker culture.<br /><br />(Edited to add: for two quite different perspectives on why Eric's wrong, see <a href=\"https://tim.dreamwidth.org/1986615.html\">Tim's</a> and <a href=\"https://medium.com/@coralineada/why-hackers-must-welcome-social-justice-advocates-1f8d7e216b00#.jyd01hyyi\">Coraline's</a> posts)<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=38746\" style=\"vertical-align: middle;\" width=\"30\" /> comments") (pubDate nil "Sun, 29 Nov 2015 22:41:52 +0000")) (item nil (title nil "Matthew Garrett: If it's not practical to redistribute free software, it's not free software in practice") (guid nil "tag:dreamwidth.org,2011-02-12:696190:38467") (link nil "http://mjg59.dreamwidth.org/38467.html") (description nil "I've previously written about Canonical's <a href=\"https://mjg59.dreamwidth.org/35969.html\">obnoxious IP policy</a> and how <a href=\"https://mjg59.dreamwidth.org/37113.html\">Mark Shuttleworth admits it's deliberately vague</a>. After spending some time discussing specific examples with Canonical, I've been explicitly told that while Canonical will gladly give me a cost-free trademark license permitting me to redistribute unmodified Ubuntu binaries, they will not tell me what <q>Any redistribution of modified versions of Ubuntu must be approved, certified or provided by Canonical if you are going to associate it with the Trademarks. Otherwise you must remove and replace the Trademarks and will need to recompile the source code to create your own binaries</q> actually <em>means</em>.<br /><br />Why does this matter? The <a href=\"http://www.gnu.org/philosophy/free-sw.en.html\">free software definition</a> requires that you be able to redistribute software to other people in either unmodified or modified form without needing to ask for permission first. This makes it clear that Ubuntu itself isn't free software - distributing the individual binary packages without permission is forbidden, even if they wouldn't contain any infringing trademarks[1]. This is obnoxious, but not inherently toxic. The source packages for Ubuntu could still be free software, making it fairly straightforward to build a free software equivalent.<br /><br />Unfortunately, while true in theory, this isn't true in practice. The issue here is the apparently simple phrase <q>you must remove and replace the Trademarks and will need to recompile the source code</q>. \"Trademarks\" is defined later as being the words \"Ubuntu\", \"Kubuntu\", \"Juju\", \"Landscape\", \"Edubuntu\" and \"Xubuntu\" in either textual or logo form. The naive interpretation of this is that you have to remove trademarks where they'd be infringing - for instance, shipping the Ubuntu bootsplash as part of a modified product would almost certainly be clear trademark infringement, so you shouldn't do that. But that's not what the policy actually says. It insists that all trademarks be removed, whether they would embody an infringement or not. If a README says \"To build this software under Ubuntu, install the following packages\", a literal reading of Canonical's policy would require you to remove or replace the word \"Ubuntu\" even though failing to do so wouldn't be a trademark infringement. If an @ubuntu.com email address is present in a changelog, you'd have to change it. You wouldn't be able to ship the juju-core package without renaming it and the application within. If this is what the policy means, it's so impractical to be able to rebuild Ubuntu that it's not free software in any meaningful way.<br /><br />This seems like a pretty ludicrous interpretation, but it's one that Canonical refuse to explicitly rule out. Compare this to <a href=\"https://fedoraproject.org/wiki/Legal:Trademark_guidelines#Distributing_combinations_of_Fedora_software_with_non-Fedora_or_modified_Fedora_software\">Red Hat's requirements around Fedora</a> - if you replace the fedora-logos, fedora-release and fedora-release-notes packages with your own content, you're good. A policy like this satisfies the concerns that <a href=\"http://blog.dustinkirkland.com/2015/07/appellation-of-origin-from-ubuntu.html\">Dustin raised</a> over people misrepresenting their products, but still makes it easy for users to distribute modified code to other users. There's nothing whatsoever stopping Canonical from adopting a similarly unambiguous policy.<br /><br />Mark has repeatedly asserted that attempts to raise this issue are mere FUD, but he won't answer you if you ask him direct questions about this policy and will insist that it's necessary to protect Ubuntu's brand. The reality is that if Debian had had an identical policy in 2004, Ubuntu wouldn't exist. The effort required to strip all Debian trademarks from the source packages would have been immense[2], and this would have had to be repeated for every release. While this policy is in place, nobody's going to be able to take Ubuntu and build something better. It's grotesquely hypocritical, especially when the Ubuntu website still <a href=\"http://www.ubuntu.com/about/about-ubuntu/our-philosophy\">talks about their belief that people should be able to distribute modifications without licensing fees</a>.<br /><br />All that's required for Canonical to deal with this problem is to follow Fedora's lead and isolate their trademarks in a small set of packages, then tell users that those packages must be replaced if distributing a modified version of Ubuntu. If they're serious about this being a branding issue, they'll do it. And if I'm right that <a href=\"https://mjg59.dreamwidth.org/37113.html\">the policy is deliberately obfuscated so Canonical can encourage people to buy licenses</a>, they won't. It's easy for them to prove me wrong, and I'll be delighted if they do. Let's see what happens.<br /><br />[1] The policy is quite clear on this. If you want to distribute something other than an unmodified Ubuntu image, you have two choices:<ol><li>Gain approval or certification from Canonical</li><li>Remove all trademarks and recompile the source code</li></ol> Note that option 2 requires you to rebuild even if there are no trademarks to remove.<br /><br />[2] Especially when every source package contains a directory called \"debian\"…<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=38467\" style=\"vertical-align: middle;\" width=\"30\" /> comments") (pubDate nil "Thu, 19 Nov 2015 22:16:30 +0000")) (item nil (title nil "Gustavo F. Padovan: Collabora contributions to Linux Kernel 4.2") (guid nil "http://padovan.org/blog/?p=412") (link nil "https://padovan.org/blog/2015/08/collabora-contributions-to-linux-kernel-4-2/") (description nil "<p>A total of 63 patches were contributed upsteam by <a href=\"http://www.collabora.com\" target=\"_blank\">Collabora</a> engineers as part of our current projects.</p>
<p>In the ARM multi_v7_defconfig we have the addition of support for <a href=\"https://lkml.org/lkml/2015/5/14/460\" target=\"_blank\">Exynos Chromebooks</a>, all options that had a tristate Kconfig option were added as module. After this change it was found that a few drivers weren’t working  properly when built as module, so this was fixed. This work was done by Javier Martinez.</p>
<p>Javier also added <a href=\"https://lkml.org/lkml/2015/6/4/144\" target=\"_blank\">multi EC support</a> as newer Chromebooks have more than one Embedded Controller in the system.</p>
<p>Tomeu Vizoso added <a href=\"https://lkml.org/lkml/2015/3/11/160\" target=\"_blank\">EMC (External Memory Controller) support</a> to the Tegra124 platform.</p>
<p>On the DRM side initial support for Atomic Modesetting was added to Exynos devices by Gustavo Padovan. The Atomic Modesetting interface allows all screen updates such as changing modes, pageflip and set planes/cursors to happen in the same IOCTL. Thus everything can be updated atomically. More on that can be found at Daniel Vetter’s post at <a href=\"https://lwn.net/Articles/653071/\" target=\"_blank\">LWN.net</a>. Another contribution, from Daniel Stone, to Atomic Modesetting was the addition of the <a href=\"http://comments.gmane.org/gmane.comp.video.dri.devel/129629\" target=\"_blank\">CRTC state mode property</a>, it is through this property that userspace configure a modeset that will be updated via an Atomic Modesetting ioctl.</p>
<p>Following is a list of all patches submitted by Collabora for this kernel release:</p>
<p style=\"margin-bottom: 0;\">Daniel Stone (17):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=9b0adc29d203116cadd81b663518104cfb19b48c\">drm/atomic: Don’t open-code CRTC state destroy</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=4339ed82b2fe11689353ab1955c8ee1af8b5c385\">drm: Don’t leak path blob property when updating</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d2ed34362a52c9f0c4d77325fb25bb729704be45\">drm: Introduce helper for replacing blob properties</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=8fb6e7a579670d5b71fc0d5641c1523b3df612e8\">drm: Introduce blob_lock</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=6bcacf51d050d412e5c302e0dd5e582212c5f7be\">drm: Add reference counting to blob properties</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=f102c16ebbeb40ba2f2a7ba4703ed3e2fc013c68\">drm: kerneldoc fixes for blob properties</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=9f658b7b62e7aefc1ee067136126eca3f58cabfd\">drm/crtc_helper: Replace open-coded CRTC state helpers</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=7dec9a9648f825a0698fd875d2834b597f122bd6\">drm/mode: Validate modes inside drm_crtc_convert_umode</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=934a8a899a7275ed187810fe9a15a93397e88c6b\">drm/mode: Unstatic kernel-userspace mode conversion</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=99531d9bb76c649df15311c717deefdff7cc5b7b\">drm: Allow creating blob properties without copy</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=10e8cb7e79391071b950a28a4d85790dd38fb714\">drm: Return error value from blob creation</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=e2f5d2ea479b9b2619965d43db70939589afe43a\">drm/mode: Add user blob-creation ioctl</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=da9b2a381a32c2a287f99e4be2f372587c53ef14\">drm: Retain reference to blob properties in lookup</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=819364da20fd914aba2fd03e95ee0467286752f5\">drm: Add drm_atomic_set_mode_for_crtc</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=99cf4a29fa24461bbfe22125967188a18383eb5c\">drm/atomic: Add current-mode blob to CRTC state</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=955f3c334f0fb2b843efad5cc6d3b7e141e9d666\">drm/atomic: Add MODE_ID property</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=8b72ce158cf0dba443e36fc66e0bb29c2580e0b6\">drm: Always enable atomic API</a></li>
</ul>
<p style=\"margin-bottom: 0;\">Gustavo Padovan (17):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=744b058827b3db9a4f6027522dd9c73a208c2d31\">drm/atomic: remove duplicated assignment of old_plane_state</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=43dbdad2a9a6c64e3ce8339107d8666006ca2b5d\">drm/exynos: atomic phase 1: use drm_plane_helper_update()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=b744868cd2372c3783e460ec3c5b026a69c39332\">drm/exynos: atomic phase 1: use drm_plane_helper_disable()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=199329cb3713c93c9e96831398a2e17a1e170e95\">drm/exynos: atomic phase 1: add .mode_set_nofb() callback</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=4ea9526b09d337b36852989c6cebf252824c867f\">drm/exynos: atomic phase 2: wire up state reset(), duplicate() and destroy()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=7cf1ff2571215fbd32967ec465a79d3f1528cc19\">drm/exynos: atomic phase 2: keep track of framebuffer pointer</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=910874a8bd2b4a09c6abb963926e076fe1471863\">drm/exynos: atomic phase 3: atomic updates of planes</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=47a7deff3606c4455f0abf0cdb1a9c89ba722a6b\">drm/exynos: atomic phase 3: use atomic .set_config helper</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=9d5ab6a0ff7bb9565e8e1bcce5648964b6434470\">drm/exynos: atomic phase 3: convert page flips</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d5f5223c464110919bb5439888eaaa72ece6ddb8\">drm/exynos: remove exported functions from exynos_drm_plane</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=bbcf7bd6406e4aee0379ecca4f160215fefec7e2\">drm/exynos: don’t disable unused functions at init</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=3fc4867c5dc4565992533b03ce02e47cb430d789\">drm/exynos: move exynos_drm_crtc_disable()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d6562a291ed0b48db520f2da83faee48d1216cab\">drm/exynos: add exynos specific .atomic_commit()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=63498e30652ee9b1c16b66129080749e2fa0d79e\">drm/exynos: atomic dpms support</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c4d96f1689226a2342962f2c70b16b0a3b8343ff\">drm/exynos: remove unnecessary calls to disable_plane()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=3cecda030f03efe5ce064f0263cd8ad2dc1e21ac\">drm/exynos: split exynos_crtc-&gt;dpms in enable() and disable()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=38000dbb71ded4121b27338a2d41ad060001592a\">drm/exynos: add error messages if clks failed to get enabled</a></li>
</ul>
<p style=\"margin-bottom: 0;\">Javier Martinez Canillas (19):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=394e5b6d8651db92fd55eac78747a3b13d40f7b7\">drm/bridge: ptn3460: Fix I2C ID table to match the reported modalias</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=cccb94543c8299e0bc7564cc6f8b26e0f15bafde\">pwm: samsung: Use MODULE_DEVICE_TABLE() to include OF modalias</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=eb2209b4a97ab5d751f0feaa223f222a7c4dc3e1\">ARM: multi_v7_defconfig: Enable support for Samsung S3C64XX SPI</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=f3caa529c6f5db9a6f10891cfc6231ba6fe461ab\">ARM: multi_v7_defconfig: Enable max77802 regulator, rtc and clock drivers</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=7de7c6717f2c80ba64292cfc537c893947115cae\">ARM: multi_v7_defconfig: Enable Exynos USB PHY drivers support</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c3e4b72db160c79b36a95b77da5956a1b7d7750c\">ARM: multi_v7_defconfig: Enable support for missing ChromeOS EC drivers</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=1cbdc6c1bd76618d16bc33f127414fb7364f4849\">ARM: multi_v7_defconfig: Enable Samsung PWM support</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=aaf8977ff417aeea05a7dae2bb3bd6e24feb7dfe\">ARM: multi_v7_defconfig: Enable Samsung S3C SoC RTC</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=56579f52aa37206d211263c253274896e99c6c28\">ARM: multi_v7_defconfig: Enable options for Exynos display support</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=50bc2ad87c693e7fa1945ad0de91659c772858f0\">ARM: multi_v7_defconfig: Enable GPIO-based I2C arbitration support</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=1dbba598b5c7128e50e2ed30398452f80f746448\">ARM: multi_v7_defconfig: Enable Cypress APA I2C Trackpad support</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=a841178445bb72a3d566b4e6ab9d19e9b002eb47\">mfd: cros_ec: Use a zero-length array for command data</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=062476f24aa7cf714169342cc50626fd9bbb93da\">mfd: cros_ec: Move protocol helpers out of the MFD driver</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=6fd4899a54a522ccd6a24fea2318d3b515b95945\">irqchip: exynos-combiner: Save IRQ enable set on suspend</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=8be4efad81d814b607cbdad47176f426be83ba75\">mfd: max77686: Remove unused struct max77686_opmode_data</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=2d0cca0db4134712c7a67694c5aab57a49e228f2\">rtc: max77686: Report platform modalias to fix module autoload</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=9bde31df56bdd8950e31ae409af5276cb324058c\">rtc: max77802: Report platform modalias to fix module autoload</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d12bbcd3ea4402704d13f687601dc5af1361a548\">platform/chrome: Don’t make CHROME_PLATFORMS depends on X86 || ARM</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=fb9caeedafe61599371d057696bff3baef01f455\">mfd: Remove MFD_CROS_EC_SPI depends on OF</a></li>
</ul>
<p style=\"margin-bottom: 0;\">Tomeu Vizoso (11):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=405990c7e834913554482538321f16f457dda50e\">of: Document long-ram-code property in nvidia,tegra20-apbmisc</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=6f0a4d0c26f17e93f296e43c7b9f44733ea188ae\">memory: tegra: Disable ARBITRATION_EMEM interrupt</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=101197c39b459b6ab0045089b514f3ce8c0d8250\">of: Document timings subnode of nvidia,tegra-mc</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=42c86547f4e5c2e81616c76ce9a2badce515c41f\">clk: Expose clk_hw_reparent() to providers</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=e34812c5bac8de641a2551b5ccb601627c10e772\">of: document new emc-timings subnode in nvidia,tegra124-car</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=ef03b35a9a2cadd6b3abc758dab4c580a454760c\">of: document external-memory-controller property in tegra124-car</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=ac67477f8f4163a6e7678f252030051f4eef2d5f\">clk: tegra: Set the EMC clock as the parent of the MC clock</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=890d6a54ead9dafdfdeebe65cbb10056e14c835a\">clk: tegra: Have EMC clock implement determine_rate()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d1ed0d21695f632f8ec7bf8588abcf6a8da2b105\">ARM: dts: Add syscon property to the MIPI phy in exynos5420</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=35068ce8cbf1749ef1a4b9b1493af83b8488c37b\">of: constify drv arg of of_driver_match_device stub</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=e984a1791ac6a7c944911207e8a9c344763f0003\">memory: omap-gpmc: Don’t try to save uninitialized GPMC context</a></li>
</ul>") (pubDate nil "Fri, 13 Nov 2015 09:38:47 +0000")) (item nil (title nil "Gustavo F. Padovan: Collabora contributions to Linux Kernel 4.3") (guid nil "http://padovan.org/blog/?p=429") (link nil "https://padovan.org/blog/2015/11/collabora-contributions-to-linux-kernel-4-3/") (description nil "<p><a href=\"http://www.collabora.com\" target=\"_blank\">Collabora</a> developers contributed 48 patches to kernel 4.3 as part of our current projects.</p>
<p>Danilo worked on the kernel doc scripts to add  cross-reference links to html documentation and arguments documentation in struct body. While Sjoerd Simons fixed a clock definition in rockchip and a incorrect udelay usage for the stmmac phy reset delay.</p>
<p>Tomeu fixed gpiolib to defer probe if the pin controller isn’t available, added another fix to chipidea USB to defer probe of usbmisc hasn’t been probed yet. On Tegra Tomeu worked to support to gpio-ranges property. Still on Tegra cpuidle_state.enter_freeze() was added.</p>
<p>Gustavo Padovan did a lot of exynos DRM work, with the most important changes being improvements to atomic modesetting, including the asynchronous atomic commit in exynos, in async mode we just schedule the atomic update and return right away to the userspace, in a similar way that PageFlips works in the old API. In this release the exynos atomic modesetting interface was enabled for userspace usage. Another important set of patches was the removal of structs exynos_drm_display and exynos_drm_encoder layers which greatly improved the code making it cleaner and easier to use. Apart from that there is also a few cleanup and fixes.</p>
<p>Danilo Cesar Lemes de Paula (2):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=a4c6ebede2f99fc3aaa5a42228a16747d0aa2504\">scripts/kernel-doc Allow struct arguments documentation in struct body</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=5699f871d2d51ce40012501378670613d4d49214\">scripts/kernel-doc: Adding cross-reference links to html documentation.</a></li>
</ul>
<p>Gustavo Padovan (36):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=451a8c0c59b3feebb5bf6a1ce1335e9f3e428355\">drm/exynos: pass the correct pipe number</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=eafd540aeaae6f1c4d04fdf3959419716d23cdc5\">drm/exynos: use KMS version of DRM vblanks functions</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=f59a89d05f1290d0cdaa588d29871e05cdec159b\">drm/exynos: remove duplicated check for suspend</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=9cc7610a2375a94ec967f771ce74b51db0d43d1c\">drm/exynos: rename win_commit/disable to atomic-like names</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=1e1d13932283419ddfdb60c73319cc0e753ded5b\">drm/exynos: pass struct exynos_drm_plane in update/enable</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=2eeb2e5e6634dbb97bdda81f65f70e4b037028d5\">drm/exynos: use drm atomic state directly</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=a1bcc9da90ab44d29c38fc6e4a8dba633e97f3f3\">drm/exynos: remove unused fields from struct exynos_drm_plane</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d88d2463fecb13c67d8eec78c4b61671900deb94\">drm/exynos: unify exynos_drm_plane names with drm core</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=08dd20099f3ce55a2ded0045b5a087aefea38cd8\">drm/exynos: return return value of exynos_crtc-&gt;enable_vblank</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=b6595dc7e1ccc0964862a5bd436a8f004b36c02f\">drm/exynos: split display’s .dpms() into .enable() and .disable()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=b6f3c36183470bbbee9da1c0a8cc892e69f88c4f\">drm/exynos: remove wrappers for phy_power_{on,off}</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=a090f45ff0acae51aa0363a72e5c3b47332af9f9\">drm/exynos: remove unused .remove() and .check_mode() ops from display</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d1fa72d0a6e70057f6aa0d0f6187e4a49e261fa8\">drm/exynos: simplify calculation of possible CRTCs</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=cf67cc9a29ac19c98bc4fa0e6d14b0c1f592d322\">drm/exynos: remove struct exynos_drm_display</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c2c099f2d97a039c5e1714c803dd9d20458c388f\">drm/exynos: remove extra call to hdmi_commit()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=07fd6e1f9985399f08af0f7981eaed362512a5af\">drm/exynos: remove extra call to exynos_dp_commit()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=af8be3f6fe80262f29b5e353421392196ff626f0\">drm/exynos: remove exynos_encoder’s .commit() op</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=a2986e8032bddbe237ed16e2e26c71f5416cd5fd\">drm/exynos: remove exynos_drm_create_enc_conn()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=6cf272751be22a9ae6a6a9550854156dd812ff66\">drm/exynos: fold encoder setup into exynos_drm_load()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=2b8376c803c4c1c02446520527b31161e8a3c066\">drm/exynos: remove struct exynos_drm_encoder layer</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=bb0fa93523b8d7f89b6ee61ab8e9b926ff7a9779\">drm/exynos: don’t track enabled state at exynos_crtc</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=fc75f7107a8de47e135cf3b9fec62f99c184a2c8\">drm/exynos: fimd: unify call to exynos_drm_crtc_finish_pageflip()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d9220d4733d1ea1ae375bd76dd2c961969a6795c\">drm/exynos: add prepare and cleanup phases for planes</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=ce3ff36be91a85d87f138794dbbd704fb99320c2\">drm/exynos: fimd: move window protect code to prepare/cleanup_plane</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=822f6dfd714c961e3c5648b1d4a5ac10f807d592\">drm/exynos: check for pending fb before finish update</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=44205083751cdcfdbd3f8607694ee1a5a9b161c7\">drm/exynos: add macro to get the address of START_S reg</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=cb11b3f18957f90f8adeb95adf694f52581416b3\">drm/exynos: fimd: only finish update if START == START_S</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=a379df19356de97afdca37c4e8f5e8729215d6ea\">drm/exynos: add atomic asynchronous commit</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c4533665d819271dad890440b887776ac3d5f265\">drm/exynos: wait all planes updates to finish</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=7cf23eaf0d8e6f34f3bc89141efc96b2502b290c\">drm/exynos: remove wait queue for pending page flip</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c8c38ccff9308a706b5314ca1cf157713a40f6b5\">drm/exynos: Enable atomic modesetting feature</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=e7fefb1d5af5d90baec5204d9096e8c4db8c93bd\">drm/exynos: remove legacy -&gt;suspend()/resume()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=50bbfbffa5c894def440ce8157dfe53e60960d35\">drm/exynos: remove fimd_mode_fixup()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=208d7ee3c89e5e94627aa33331b15dd4df814707\">drm/exynos: remove decon_mode_fixup()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=10d97d5869f9a50eb3142c7ee562ecc5b5b33f5b\">drm/exynos: remove unused mode_fixup() code</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=3c79fb8c9424a24bf812b9a8cb4f19b781052b0b\">drm/exynos: fimd: actually disable dp clock</a></li>
</ul>
<p>Javier Martinez Canillas (1):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=acdecb04e2115747f260700384f2c403c8e9693e\">mfd: Remove MFD_CROS_EC_SPI depends on OF</a></li>
</ul>
<p>Sjoerd Simons (2):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=bea047e075784471461c4338d0ffa45cb1378d67\">clk: rockchip: Fix SPIF special clock definition</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=892aa01df2ad67237f213c8f9d9b491e908aa910\">net: stmmac: Use msleep rather then udelay for reset delay</a></li>
</ul>
<p>Tomeu Vizoso (7):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d32651f68785bd8d73b24481b62e428ca30a2546\">gpiolib: Fix docs for gpiochip_add_pingroup_range</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=28355f81969962cf01aef5b13d7de5b4ab0c5f13\">gpio: defer probe if pinctrl cannot be found</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=82b2c3c5b838b4fac9471eab320670aff5a822e0\">driver core: fix docbook for device_private.device</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=9462510ce31e2b91156bdcc33e4c737e6768e5f8\">pinctrl: tegra: Only set the gpio range if needed</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=1ec0e115f8604940491861d207cc1e1478db97b3\">ARM: tegra: cpuidle: implement cpuidle_state.enter_freeze()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=ef12da914ed696745b495bea22aea137e88cffb6\">usb: chipidea: imx: properly check for usbmisc</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=17cdddf0fb684f5456c1af3aa2c10aca3b68b8de\">ARM: tegra: Add gpio-ranges property</a></li>
</ul>") (pubDate nil "Thu, 12 Nov 2015 12:20:01 +0000")) (item nil (title nil "Kees Cook: evolution of seccomp") (guid nil "https://outflux.net/blog/?p=873") (link nil "https://outflux.net/blog/archives/2015/11/11/evolution-of-seccomp/") (description nil "<p>I’m excited to see other people thinking about userspace-to-kernel attack surface reduction ideas. Theo de Raadt recently published slides describing <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00001.html\">Pledge</a>. This uses the same ideas that seccomp implements, but with less granularity. While seccomp works at the individual syscall level and in addition to killing processes, it allows for signaling, tracing, and errno spoofing. As de Raadt mentions, Pledge could be implemented with seccomp very easily: libseccomp would just categorize syscalls.</p>
<p>I don’t really understand the presentation’s mention of <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00005.html\">“Optional Security”</a>, though. Pledge, like seccomp, is an opt-in feature. Nothing in the kernel refuses to run “unpledged” programs. I assume his point was that when it gets ubiquitously built into programs (like stack protector), it’s effectively not optional (which is alluded to later as <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00031.html\">“comprehensive applicability ~= mandatory mitigation”</a>). Regardless, this sensible (though optional) design gets me back to his <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00011.html\">slide on seccomp</a>, which seems to have a number of misunderstandings:</p>
<ul>
<li><strong>A Turing complete eBPF program watches your program</strong> Strictly speaking, seccomp is implemented using a subset of BPF, not eBPF. And since BPF (and eBPF) programs are guaranteed to halt, it makes seccomp filters not Turing complete.</li>
<li><strong>Who watches the watcher?</strong> I don’t even understand this. It’s in the kernel. The kernel watches your program. Just like always. If this is a question of BPF program verification, there is literally a program verifier that checks various properties of the BPF program.</li>
<li><strong>seccomp program is stored elsewhere</strong> This, with the next statement, is just totally misunderstood. Programs using seccomp define their program in their own code. It’s used the same way as the Pledge examples are shown doing.</li>
<li><strong>Easy to get desyncronized either program is updated</strong> As above, this just isn’t the case. The only place where this might be true is when using seccomp on programs that were not written natively with seccomp. In that case, yes, desync is possible. But that’s one of the advantages of seccomp’s design: a program launcher (like minijail or systemd) can declare a seccomp filter for a program that hasn’t yet been ported to use one natively.</li>
<li><strong>eBPF watcher has no real idea what the program under observation is doing…</strong> I don’t understand this statement. I don’t see how Pledge would “have a real idea” either: they’re both doing filtering. If we get AI out of our syscall filters, we’re in serious trouble. :)</li>
</ul>
<p>OpenBSD has some <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00019.html\">interesting advantages</a> in the syscall filtering department, especially around sockets. Right now, it’s hard for Linux syscall filtering to understand why a given socket is being used. Something like SOCK_DNS seems like it could be quite handy.</p>
<p>Another nice feature of Pledge is the <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00030.html\">path whitelist feature</a>. As it’s still under development, I hope they expand this to include more things than just paths. Argument inspection is a weak point for seccomp, but under Linux, most of the arguments are ultimately exposed to the LSM layer. Last year I experimented with creating a <a href=\"http://git.kernel.org/cgit/linux/kernel/git/kees/linux.git/log/?h=seccomp/lsm\">“seccomp LSM”</a> for path matching where programs could declare whitelists, similar to standard LSMs.</p>
<p>So, yes, Linux <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00034.html\">“could match this API on seccomp”</a>. It’d just take some extensions to libseccomp to implement <code>pledge()</code>, as I described at the top. With OpenBSD doing a bunch of <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00032.html\">analysis</a> <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00033.html\">work</a> on common programs, it’d be excellent to see this usable on Linux too. So far on Linux, only a few programs (e.g. Chrome, vsftpd) have bothered to do this using seccomp, and it could be argued that this is ultimately due to how fine grained it is.</p>
<p style=\"clear: both; text-align: left;\">© 2015, <a href=\"https://outflux.net/blog/\">Kees Cook</a>. This work is licensed under a <a href=\"http://creativecommons.org/licenses/by-sa/3.0/us/\" rel=\"license\">Creative Commons Attribution-ShareAlike 3.0 License</a>.<br /><a href=\"http://creativecommons.org/licenses/by-sa/3.0/us/\" rel=\"license\"><img alt=\"Creative Commons License\" src=\"https://outflux.net/illustrations/cc-88x31.png\" style=\"border-width: 0;\" /></a> </p>") (pubDate nil "Wed, 11 Nov 2015 18:01:54 +0000")) (item nil (title nil "Dave Jones: Trinity 1.6") (guid nil "http://codemonkey.org.uk/?p=766") (link nil "http://codemonkey.org.uk/2015/11/06/trinity-16/") (description nil "<p>As alluded to in my last post, a few days ago I released a new version of <a href=\"http://codemonkey.org.uk/projects/trinity/\">Trinity</a>.<br />
The bulk of the work in this release happened prior to my <a href=\"http://codemonkey.org.uk/2015/07/12/future-trinity/\">burn out</a> back in July.  The combination of everything described in that post, and general unhappiness in my last job etc led to me just wanting to walk away from everything for an indeterminate amount of time.</p>
<p>Distance is good. I’ve continued to poke at trinity in small amounts since then. At last weeks kernel summit, a number of people expressed just how useful they find Trinity and how much they were bummed to find out I wasn’t working on it any more.  With that feedback, I felt motivated to clean the decks and get 1.6 out.  There’s a short description of most of the bigger changes below, but there were probably a whole bunch more changes made that I forgot to highlight in the shortlog.</p>
<p>With that release wrapped up, and with the fresh perspective of having been ‘away’ from the project for a while, when I was travelling last week, I started work on some new features, starting with implementing a generic object cache instead of hard coding a “remember this” set of functionality for every single object type a syscall could return. A relatively small amount of code, which should make life easier to support recycling syscall results for syscalls other than mmap (which is all that’s implemented right now).</p>
<p>So,.. while I’m working on this stuff again, it’s not the <a href=\"https://www.youtube.com/watch?v=vimZj8HW0Kg\">comeback</a> many would like. I don’t know just how much time I’m going to have to devote to working on Trinity.  From time to time, I suspect I’ll find some intersection between my work at Facebook and the sort of targeted testing that Trinity is useful for, but it’s not my primary focus, and probably won’t be again. Additionally, I’ve got a bunch of ideas for new projects I’m itching to work on that spawned from discussions last week, so “spare time” hacking effort might be devoted more to them in future. </p>
<p>tl;dr: Don’t send me feature requests. I’ve got more than enough ideas for stuff *I* want to implement. Diffs speak louder than words.</p>
<h3>Summary of some of the bigger changes to Trinity since the last (1.5) tarball release include:</h3>
<ul>
<li>Assorted improvements to the tuned random number generation.<br />
 (Including one particularly stupid bug where sometimes all child processes would get the same seed, and end up doing the same syscalls. oops)
</li>
<li>Various networking related improvements/fixes:
<ul>
<li>tcp: add TCP_TIMESTAMP, TCP_NOTSENT_LOWAT &amp; TCP_CC_INFO socket options.
 </li>
<li>ipv6: Improved generation of random addresses. (No longer just localhost)
 </li>
<li>ipv6: Added 14 missing socket options.
 </li>
<li>ipv6: Now passes correct lengths for socket options. (Note: This change may break older glibcs: See <a href=\"https://patchwork.ozlabs.org/patch/425881/\">this patch</a>.)
 </li>
<li>Beginnings of some better proto-alg sockaddr generation.
 </li>
<li>Recognise PF_IB and PF_MPLS network protocols
 </li>
<li>Socket generation improvements. (Picks right socket type to go with protocol)
 </li>
<li>Now supports an ARG_SOCKETINFO for syscalls that operate primarily on sockets. (Still occasionally passes random fd’s)
 </li>
<li>accept,accept4,bind,connect,getpeername,getsockname,recv,setsockopt,send converted to use ARG_SOCKETINFO.
 </li>
<li>setsockopt now also matches the protocol of the socket passed to the right setsockopt args.
 </li>
<li>netlink socket generation fix (pid is a portid, not a process id)
 </li>
<li>The -P parameter no longer accepts the incomprehensible numeric form of arguments, just names.
 </li>
<li>The PF_ prefix to the -P parameter is now optional, so you can just say ‘UNIX’ instead of ‘PF_UNIX’.
</li>
</ul>
</li>
<li>Updates to keep up with new upstream kernel changes.
<ul>
<li>Updated perf_event_open syscall to include 4.1 changes
</li>
<li>Updated syscall lists<br />
 alpha: execveat, getrandom, memfd_create<br />
 s390[x]: execveat, NUMA related syscalls<br />
 parisc: execveat
 </li>
<li>mips: add new prctls for PR_SET_FP_MODE / PR_GET_FP_MODE
 </li>
<li>Support for new fallocate flags (FALLOC_FL_INSERT_RANGE)
</li>
</ul>
</li>
<li>Watchdog:
<ul>
<li>Remove some false-positive triggering checks from the watchdog.
 </li>
<li>Watchdog process is now nice’d to -19
 </li>
<li>Monitor how many processes are currently stalled.
 </li>
<li>If all child processes are stalled, send SIGKILLs to 50%
</li>
</ul>
</li>
<li>Misc:
<ul>
<li>New fd generators for drm dumb buffers &amp; inotify watches.
 </li>
<li>blacklist /dev/sd* from the fd list, so we can be a bit safer when running as root with –dropprivs
 </li>
<li>Fixed the ‘bind process to CPU’ code to only pick online CPUs.
 </li>
<li>Self-corruption checks added to child processes, like the watchdog code already did.
 </li>
<li>Remove guard pages around shm.
 </li>
<li>In debug mode, write protect the shm before making syscalls.
 </li>
<li>Refactoring of logging code.
 </li>
<li>Various code cleanups as usual.
 </li>
<li>No longer tries to mmap 1GB pages if running with less than 8GB free.
</li>
</ul>
</li>
</ul>
<p>The post <a href=\"http://codemonkey.org.uk/2015/11/06/trinity-16/\" rel=\"nofollow\">Trinity 1.6</a> appeared first on <a href=\"http://codemonkey.org.uk\" rel=\"nofollow\">codemonkey.org.uk</a>.</p>
<div class=\"yarpp-related-rss\">
<p>Related posts:</p><ol>
<li><a href=\"http://codemonkey.org.uk/2015/05/01/trinity-socket-improvements/\" rel=\"bookmark\" title=\"Trinity socket improvements\">Trinity socket improvements </a> <small>I’ve been wanting to get back to working on the...</small></li>
<li><a href=\"http://codemonkey.org.uk/2015/03/02/trinity-15-release/\" rel=\"bookmark\" title=\"Trinity 1.5 release.\">Trinity 1.5 release. </a> <small>As announced this morning, today I decided that things had...</small></li>
<li><a href=\"http://codemonkey.org.uk/2015/07/12/future-trinity/\" rel=\"bookmark\" title=\"Future development of Trinity.\">Future development of Trinity. </a> <small>It’s been an odd few weeks regarding Trinity based things....</small></li>
</ol><p></p>
</div>") (pubDate nil "Fri, 06 Nov 2015 16:08:48 +0000")) (item nil (title nil "Matthew Garrett: Why improving kernel security is important") (guid nil "tag:dreamwidth.org,2011-02-12:696190:38158") (link nil "http://mjg59.dreamwidth.org/38158.html") (description nil "The Washington Post published <a href=\"http://www.washingtonpost.com/sf/business/2015/11/05/net-of-insecurity-the-kernel-of-the-argument/\">an article</a> today which describes the ongoing tension between the security community and Linux kernel developers. This has been roundly denounced as FUD, with Rob Graham going so far as to claim that <a href=\"https://twitter.com/ErrataRob/status/662427924545593348\">nobody ever attacks the kernel</a>.<br /><br />Unfortunately he's entirely and demonstrably wrong, it's not FUD and the state of security in the kernel is currently far short of where it should be.<br /><br />An example. Recent versions of Android use SELinux to confine applications. Even if you have full control over an application running on Android, the SELinux rules make it very difficult to do anything especially user-hostile. Hacking Team, the GPL-violating Italian company who sells surveillance software to human rights abusers, found that this impeded their ability to drop their spyware onto targets' devices. So they took advantage of the fact that many Android devices shipped a kernel with a flawed copy_from_user() implementation that allowed them to copy arbitrary userspace data over arbitrary kernel code, thus allowing them to disable SELinux.<br /><br />If we could trust userspace applications, we wouldn't need SELinux. But we assume that userspace code may be buggy, misconfigured or actively hostile, and we use technologies such as SELinux or AppArmor to restrict its behaviour. There's simply too much userspace code for us to guarantee that it's all correct, so we do our best to prevent it from doing harm anyway.<br /><br />This is significantly less true in the kernel. The model up until now has largely been \"Fix security bugs as we find them\", an approach that fails on two levels:<br /><br />1) Once we find them and fix them, there's still a window between the fixed version being available and it actually being deployed<br />2) The forces of good may not be the first ones to find them<br /><br />This reactive approach is fine for a world where it's possible to push out software updates without having to perform extensive testing first, a world where the only people hunting for interesting kernel vulnerabilities are nice people. This isn't that world, and this approach isn't fine.<br /><br />Just as features like SELinux allow us to reduce the harm that can occur if a new userspace vulnerability is found, we can add features to the kernel that make it more difficult (or impossible) for attackers to turn a kernel bug into an exploitable vulnerability. The number of people using Linux systems is increasing every day, and many of these users depend on the security of these systems in critical ways. It's vital that we do what we can to avoid their trust being misplaced.<br /><br />Many useful mitigation features already exist in the <a href=\"http://www.grsecurity.net\">Grsecurity</a> patchset, but a combination of technical disagreements around certain features, personality conflicts and an apparent lack of enthusiasm on the side of upstream kernel developers has resulted in almost none of it landing in the kernels that most people use. Kees Cook has proposed a <a href=\"http://www.openwall.com/lists/kernel-hardening/2015/11/05/1\">new project</a> to start making a more concerted effort to migrate components of Grsecurity to upstream. If you rely on the kernel being a secure component, either because you ship a product based on it or because you use it yourself, you should probably be doing what you can to support this.<br /><br />Microsoft received entirely justifiable criticism for the terrible state of security on their platform. They responded by introducing cutting-edge security features across the OS, including the kernel. Accusing anyone who says we need to do the same of spreading FUD is risking free software being sidelined in favour of proprietary software providing more real-world security. That doesn't seem like a good outcome.<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=38158\" style=\"vertical-align: middle;\" width=\"30\" /> comments") (pubDate nil "Fri, 06 Nov 2015 09:19:07 +0000")) (item nil (title nil "Pete Zaitcev: Cool hardware in Tokyo") (guid nil "http://zaitcev.livejournal.com/230683.html") (link nil "http://zaitcev.livejournal.com/230683.html") (description nil "<p>At the Mitaka Summit, we finally got some interesting kit exhibited, after the relatively lean summits in <a href=\"http://zaitcev.livejournal.com/223667.html\" rel=\"nofollow\">Atlanta</a> and <a href=\"http://zaitcev.livejournal.com/227321.html\" rel=\"nofollow\">Vancouver</a>. Unfortunately, the lightning in the Marketplace was very weird and pictures came out poorly.</p>
<div align=\"center\"><p><img height=\"480\" src=\"http://www.zaitcev.us/things/lj/2015/20151104a1.jpg\" width=\"640\" /></p></div>
<div align=\"center\"><p><img height=\"480\" src=\"http://www.zaitcev.us/things/lj/2015/20151104a2.jpg\" width=\"640\" /></p></div>
<p>My personal favourite is probably the flash array by SanDisk. It's nothing but JBOF, the host connection is SAS. You'd think any idiot could slap a few flash chips on cards and plug them into backplane... But just look how elegant it is. The capacity of the 2U box is 512 TB, but the whole thing only consumes 700 W maximum. It's brilliant, really.</p>
<p>Unfortunately, I don't have a good picture, but the second best was Ericksson's passive optical backplane. It promises to make your cables last forever: just swap out optronics when new bit rates come along. Even a terabit! Now it may actually be a misguided product. If they cannot get 3rd party vendors to build modules for it, the whole things comes crashing to the ground. Ditto if they build, but overprice. But the audacity of making something that's different is to be acknowledged. And frankly I'm not a fan of re-cabling when new servers come about.</p>
<div align=\"center\"><p><img height=\"480\" src=\"http://www.zaitcev.us/things/lj/2015/20151104a3.jpg\" width=\"640\" /></p></div>
<p>Intel wins a consolation prize for preservance. They quietly presented some kind of next-generation multiblock computer, with pieces connected by serial cables. Finally, the future dreamed by the creators of Infiniband is here - only 15 years late, and still we don't know if it is viable.</p>
<p>There was also a bunch of fairly mundane boxes. Various also-run flash vendors were present, of course. Interestingly, SolidFire had a booth, but without anything eye-catching. Resting on the laurels? IBM brought their newest PowerPC, which was mostly remarkable for still existing. That sort of thing.</p>") (pubDate nil "Thu, 05 Nov 2015 02:46:35 +0000")) (item nil (title nil "Dave Jones: kernel summit 2015 wrap-up") (guid nil "http://codemonkey.org.uk/?p=764") (link nil "http://codemonkey.org.uk/2015/11/04/kernel-summit-2015-wrapup/") (description nil "<p>Exhausting travel aside, kernel summit in Seoul was a good use of time.<br />
Most of the sessions didn’t feel as interactive as prior years, in part I think because there really wasn’t a lot of objection, even to some<br />
of the more controversial things.  Kees’ security talk went over pretty well even if it did depress most the people in the room. Hopefully something good will come of it.  The restartable sequences feature got talked about but didn’t get much (if any) real pushback.</p>
<p>There were a few hallway discussions surrounding various upcoming<br />
kernel functionality that didn’t get ‘airtime’ in the sessions.<br />
The kernel TLS stuff was probably discussed more in depth at netconf, and assorted VM features were covered more at LSFMM<br />
earlier this year. Quite a few people talking excitedly about eBPF, both from a networking point of view, and soon.. tracing.<br />
Quite a few people still seem concerned (rightly) about the upcoming unpriveledged bpf syscall.</p>
<p>It seems by fracturing the kernel summit into lots of smaller events the deep-dives into new features/problems happens there, leaving the kernel summit more for executive summary type talks, and as has been the general push over the last decade more and more process related discussions.</p>
<p>On process, Sasha’s discussion on stable was probably the most interesting to me personally. GregKH agreed to make 4.4 the next LTS starting a new tradition of “the next LTS is the one after the kernel summit”. We’ll see how that works out.</p>
<p>Chris Mason gave a “what went good/bad when facebook moved to 4.0” talk. Which for the most part, was all good. There are a few small things that are still being shaken out, but it’s by no means awful.</p>
<p>I had a lot of hallway conversations that began “so, trinity..”<br />
The short answer there is that I’m still working on it, though at a much reduced pace than I was a year ago. It was good to hear feedback<br />
from pretty much everyone I talked to that it was something that people value, which was a good motivator. More on that later.</p>
<p>I also had a lot of people asking a lot of questions about my Facebook bootcamp experience.  I’ll do a longer write-up of that soon.</p>
<p>The post <a href=\"http://codemonkey.org.uk/2015/11/04/kernel-summit-2015-wrapup/\" rel=\"nofollow\">kernel summit 2015 wrap-up</a> appeared first on <a href=\"http://codemonkey.org.uk\" rel=\"nofollow\">codemonkey.org.uk</a>.</p>
<div class=\"yarpp-related-rss\">
<p>Related posts:</p><ol>
<li><a href=\"http://codemonkey.org.uk/2015/03/13/lsfmm-2015-recap/\" rel=\"bookmark\" title=\"LSF/MM 2015 recap.\">LSF/MM 2015 recap. </a> <small>It’s been a long week. Spent Monday/Tuesday at LSFMM. This...</small></li>
<li><a href=\"http://codemonkey.org.uk/2015/03/02/trinity-15-release/\" rel=\"bookmark\" title=\"Trinity 1.5 release.\">Trinity 1.5 release. </a> <small>As announced this morning, today I decided that things had...</small></li>
<li><a href=\"http://codemonkey.org.uk/2015/05/04/kernel-code-coverage-brain-dump/\" rel=\"bookmark\" title=\"kernel code coverage brain dump.\">kernel code coverage brain dump. </a> <small>Someone at work recently asked me about code coverage tooling...</small></li>
</ol><p></p>
</div>") (pubDate nil "Wed, 04 Nov 2015 19:00:40 +0000")) (item nil (title nil "Grant Likely: Debugging 96Boards I2C") (guid nil "http://www.secretlab.ca/?p=164") (link nil "http://www.secretlab.ca/archives/164") (description nil "<p>I was originally just going to post this to one of the 96boards mailing list, but it got sufficiently interesting that I thought I’d make it a blog post instead. I’ve been working on making i2c on the 96Boards sensors adapter work properly and I’ve made some progress. The problem that user have run into is that the Grove RGB LCD module won’t work when connected to one of the baseboard’s I2C busses. I pulled out the oscilloscope today to investigate.</p>
<p>The LCD module is particularly useful for testing because it actually has 2 i2c devices embedded in it; an LCD controller at address 0x3e, and an RGB controller at 0x62. The two devices operate independently with different electrical properties.</p>
<p>​On Hikey+sensors (TXS0108 level shifter), the RGB device will work, but only after pulling the ribbon cable apart to reduce crosstalk due to insufficient pullups. However, the LCD causes the entire bus to lock up, and no further transactions will work.</p>
<p>On Hikey+pca9306 the LCD isn’t detected and the RGB works correctly (undetermined if there are crosstalk issues)</p>
<p>​The traces below show both sides of the level shifter. Green and blue on the top for the data line. Orange and purple on the bottom with the clock.​</p>
<p>First, what I saw on using Hikey+pca9306+RGB:</p>
<figure class=\"wp-caption aligncenter\" id=\"attachment_168\" style=\"width: 300px;\"><a href=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-pca9306-rgb.jpg\"><img alt=\"Screen Capture\" class=\"size-medium wp-image-168\" height=\"225\" src=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-pca9306-rgb-300x225.jpg\" width=\"300\" /></a>RGB transaction via PCA9306</figure>
<p>And with the LCD:</p>
<figure class=\"wp-caption aligncenter\" id=\"attachment_167\" style=\"width: 300px;\"><a href=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-pca9306-lcd.jpg\"><img alt=\"Screen Capture\" class=\"size-medium wp-image-167\" height=\"225\" src=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-pca9306-lcd-300x225.jpg\" width=\"300\" /></a>LCD transaction via PCA9306</figure>
<p>In both traces you can see the start condition (data goes low while clock is high), the 7 bits of address (7 rising clock edges), the R/W bit (1 rising clock), and then the acknowledgement bit driven by the device. If the controller doesn’t see the device drive the data line low on the 9th clock, then it decides the device isn’t there and it terminates the transaction. It is easy to recognize the ack bit because the device has a different drive strength and the voltage level is different.</p>
<div>
<p>The RGB controller is a happy little device and it jumps at the chance to drive the data line low. It goes down pretty close to 0V. The LCD on the other hand is sulky and doesn’t drive the line quite as low as the controller can. About to 1V. 1V is recognized fine as logic low on a 5V device, but with 1.8V it is not even less than half. The way the pca9306 level shifter works is there are pull-up resistors on either side of the device that draws each side up to its respective high level. In this case, 1.8V and 5V. When either side gets driven low, the level shifter begins to conduct and the other side also gets drawn down to the same voltage, but it can only go as low as the voltage it is driven to. If it only gets driven down to 1V, then it will never get low enough for a 1.8V controller to recognize it as a low state.</p>
<p class=\"gmail_default\">It may be that with weaker pull-ups the LCD will be able to drive to a lower voltage level. I’ll need to experiment more, but in the mean time let’s move onto the Sensors board. Back to the traces:</p>
<p class=\"gmail_default\">First, here is a transaction to address 0x63 with no device present:</p>
</div>
<div>
<figure class=\"wp-caption aligncenter\" id=\"attachment_170\" style=\"width: 300px;\"><a href=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-sensors-nodev.jpg\"><img alt=\"Screen Capture\" class=\"size-medium wp-image-170\" height=\"225\" src=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-sensors-nodev-300x225.jpg\" width=\"300\" /></a>No device</figure>
</div>
<p>​Looks perfectly normal so far. Next, the RGB device at address 0x62:</p>
<div>
<figure class=\"wp-caption aligncenter\" id=\"attachment_171\" style=\"width: 300px;\"><a href=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-sensors-rgb.jpg\"><img alt=\"Screen Capture\" class=\"size-medium wp-image-171\" height=\"225\" src=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-sensors-rgb-300x225.jpg\" width=\"300\" /></a>RGB</figure>
<p class=\"gmail_default\">Also behaving the same way as it did with the pca9306. Finally, an LCD transaction:</p>
</div>
<div>
<figure class=\"wp-caption aligncenter\" id=\"attachment_169\" style=\"width: 300px;\"><a href=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-sensors-lcd.jpg\"><img alt=\"Screen Capture\" class=\"size-medium wp-image-169\" height=\"225\" src=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-sensors-lcd-300x225.jpg\" width=\"300\" /></a>LCD</figure>
<p class=\"gmail_default\">Again we see the start condition, the 7 data bits and 1 r/w bit, but the ack bit looks weird. The LCD successfully drives the data bit low enough to be recognized, but then something weird happens. The data line stays low and the clock stops running. I don’t know actually know what is happening here, but I’ve got my suspicions. The LCD is continuing to drive the data line low, (you can tell by the slightly different voltage level) but keeping data low should not stop the clock. I suspect the txs0108 is getting confused and driving the clock line high. I’ve come across reports from others having trouble with the txs010x series on i2c. It has ‘one-shot’ accelerators to reduce rise time by driving the line high. I don’t know for sure though.</p>
<p class=\"gmail_default\">On the plus side, I now know that the Hikey I2C busses are working correctly. Now I need to decide what to do next. Aside from the i2c problem, Rev B of the sensors board ready for manufacturing. I either need to make the txs part work, or rework the design to use a pair of pca9306s. I think I’ll try weaker pull-ups on the pca9306 breakout board first and see how that goes. Sadly, I blew up the i2c drives on my Hikey board while experimenting today, so I need to do the same experiments with my Dragonboard 410c.</p>
<p class=\"gmail_default\">Dear lazyweb, do you have any other suggestions on things to try?</p>
</div>") (pubDate nil "Tue, 03 Nov 2015 00:35:12 +0000")) (item nil (title nil "Pete Zaitcev: Darcy on the future of storage") (guid nil "http://zaitcev.livejournal.com/230538.html") (link nil "http://zaitcev.livejournal.com/230538.html") (description nil "<p>Quick <a href=\"http://pl.atyp.us/2015-10-nibble-on-storage.html\" rel=\"nofollow\">comment on the following</a>:</p>
<blockquote>
<blockquote> Good morning, madam. What kind of storage system would you like me to build for you today? </blockquote>
<p>Scary thought. That means that selling storage products is going to be hard for all of us. We'll be selling components, both hardware and software, or we'll be selling integration and support services. Somebody will always pay to have somebody else assemble the parts, maybe add some light customization, and support the result. There's a nice living to be made there... but no empires.</p>
</blockquote>
<p>Why is it a problem that no empires are to be built? It's only a problem for an empire-builder like I dunno... Sam Altman or something. Darcy is an old engineer, not a startup founder. A good one, too. His kids aren't going to go to bed hungry.</p>
<p>We've been at this dance before with Linux. People have been asking if Red Hat was going to be like Microsoft, and I told everyone: nope. We're transfering the wealth that the proprietary lock-in vendors were collecting <i>back to the users</i>. That was the whole idea. In the process, we're collecting less - a more reasonable amount, necessary to put stuff together and make it run. <i>Therefore</i>, we're not going to be as wealthy off users' backs. But the society as a whole benefits.</p>
<p>So cry me a river. Not scary at all. But RTWT, I think he's drawing a truthful outline overall.</p>
<p>P.S. Another thing, what's magical about storage? Why, I can go build spacecraft when storage goes bust. Or whatever. Of course it's a pity for all the storage-specific techniques and skills that I accumulated, but eh. As long as we leave behind the good code (and docs), it's all good.</p>") (pubDate nil "Wed, 28 Oct 2015 01:41:44 +0000")) (item nil (title nil "James Morris: LSM Mailing List Being Archived Again") (guid nil "http://blog.namei.org/?p=627") (link nil "http://blog.namei.org/2015/10/22/lsm-mailing-list-being-archived-again/") (description nil "<p>Several folks noticed that all of the known <a href=\"https://en.wikipedia.org/wiki/Linux_Security_Modules\">LSM</a> <a href=\"http://vger.kernel.org/vger-lists.html#linux-security-module\">mailing list</a> archives stopped archiving earlier this year.  We don’t know why and generally have not had any luck contacting the owners of several archives, including <a href=\"http://marc.info/?l=linux-security-module\">marc</a> and <a href=\"http://news.gmane.org/gmane.linux.kernel.lsm\">gmane</a>.  This is a concern, because the list is generally where Linux kernel security takes place and it’s important to have a public record of it.</p>
<p>The good news is that <a href=\"http://www.paul-moore.com/blog/\">Paul Moore</a> was finally able to re-register the list with <a href=\"https://www.mail-archive.com/\">mail-archive.com</a>, and there is once again an active archive here: <a href=\"http://www.mail-archive.com/linux-security-module@vger.kernel.org/\">http://www.mail-archive.com/linux-security-module@vger.kernel.org/</a></p>
<p>Please update any links you may have!</p>") (pubDate nil "Thu, 22 Oct 2015 04:58:57 +0000")) (item nil (title nil "Andy Grover: iSNS support coming soon for LIO in Fedora") (guid nil "http://groveronline.com/?p=542") (link nil "http://groveronline.com/2015/10/isns-support-coming-soon-for-lio-in-fedora/") (description nil "<p><a href=\"https://github.com/cvubrugier/target-isns\">target-isns</a> recently was added to Rawhide, and will be in a future Fedora release. This add-on to LIO allows it to register with an iSNS server, which potential initiators can then query for available targets. (On Fedora, see <code>isns-utils</code> for both the server, and client query tools.) This removes one of the few remaining areas that other target implementations have been ahead of LIO.</p>
<p>Kudos and thanks to <span class=\"vcard-fullname\"><a href=\"https://github.com/cvubrugier\">Christophe Vu-Brugier</a> for writing this useful program!</span></p>") (pubDate nil "Thu, 22 Oct 2015 00:29:41 +0000")) (item nil (title nil "Andy Grover: Some targetcli and TCMU questions") (guid nil "http://groveronline.com/?p=536") (link nil "http://groveronline.com/2015/10/targetcli-tcmu-questions/") (description nil "<p dir=\"ltr\">Just got an email full of interesting questions, I hope the author will be ok with me answering them here so future searches will see them:</p>
<blockquote><p>I searched on internet and I don’t find some relevant info about gluster api support via tcmu-runner. Can you tell me please if this support will be added to the stable redhat targetcli in the near future? And I want to know also which targetcli is recommended for setup (targetcli or targetcli-fb) and what is the status for targetcli-3.0.</p></blockquote>
<p dir=\"ltr\"><a href=\"https://github.com/agrover/tcmu-runner\">tcmu-runner</a> is a userspace daemon add-on to <a href=\"http://linux-iscsi.org/wiki/Main_Page\">LIO</a> that allows requests for a device to be handled by a user process. tcmu-runner has early support for using glfs (via gfapi). Both tcmu-runner and its glfs plugin are beta-quality and will need further work before they are ready for stable Fedora, much less a RHEL release. tcmu-runner just landed in Rawhide, but this is really just to make it easier to test.</p>
<p dir=\"ltr\">RHEL &amp; Fedora use targetcli-fb, which is a fork of targetcli, and what I work on. Since I’m working on both tcmu-runner and targetcli-fb, targetcli-fb will see TCMU support very early.</p>
<p dir=\"ltr\">The -fb packages I maintain switched to a “fbXX” version scheme, so I think you must be referring to the other one <img alt=\":-)\" class=\"wp-smiley\" src=\"http://groveronline.com/wp-includes/images/smilies/simple-smile.png\" style=\"height: 1em;\" /> I don’t have any info about the RTS/Datera targetcli’s status, other than nobody likes having two versions, the targetcli maintainer and I have discussed unifying them into a common version, but the un-fun work of merging them has not happened yet.</p>") (pubDate nil "Wed, 21 Oct 2015 21:58:47 +0000")) (item nil (title nil "Rusty Russell: ccan/mem’s memeqzero iteration") (guid nil "http://rusty.ozlabs.org/?p=560") (link nil "http://rusty.ozlabs.org/?p=560") (description nil "<p>On Thursday I was writing some code, and I wanted to test if an array was all zero.  First I checked if ccan/mem had anything, in case I missed it, then jumped on IRC to ask the author (and overall CCAN co-maintainer) <a href=\"https://github.com/dgibson\">David Gibson</a> about it.</p>
<p>We bikeshedded around names: memallzero? memiszero? memeqz? memeqzero() won by analogy with the already-extant memeq and memeqstr. Then I asked:</p>
<blockquote><p><em>rusty: dwg: now, how much time do I waste optimizing?</em><br />
<em> dwg: rusty, in the first commit, none</em></p></blockquote>
<p>Exactly five minutes later I had it implemented and tested.</p>
<h3>The Naive Approach: Times: <em><strong>1/7/310/37064</strong></em> Bytes: <em><strong>50</strong></em></h3>
<pre>bool memeqzero(const void *data, size_t length)
{
    const unsigned char *p = data;

    while (length) {
        if (*p)
            return false;
        p++;
        length--;
    }
    return true;
}</pre>
<p>As a summary, I’ve give the nanoseconds for searching through 1,8,512 and 65536 bytes only.</p>
<p>Another 20 minutes, and I had written that benchmark, and an optimized version.</p>
<h3>128-byte Static Buffer: Times: <em><strong><span style=\"color: #ff0000;\">6</span>/8/<span style=\"color: #00ff00;\">48</span>/<span style=\"color: #00ff00;\">5872 </span></strong></em>Bytes: <em><strong>108</strong></em></h3>
<p>Here’s my first attempt at optimization; using a static array of 128 bytes of zeroes and assuming memcmp is well-optimized for fixed-length comparisons.  Worse for small sizes, much better for big.</p>
<pre> const unsigned char *p = data;
 static unsigned long zeroes[16];

 while (length &gt; sizeof(zeroes)) {
     if (memcmp(zeroes, p, sizeof(zeroes)))
         return false;
     p += sizeof(zeroes);
     length -= sizeof(zeroes);
 }
 return memcmp(zeroes, p, length) == 0;</pre>
<h3>Using a 64-bit Constant: Times: <em><strong><span style=\"color: #ff0000;\">12</span>/<span style=\"color: #ff0000;\">12</span>/<span style=\"color: #ff0000;\">84</span>/<span style=\"color: #ff0000;\">6418 </span></strong></em>Bytes: <em><strong>169</strong></em><span style=\"text-decoration: underline;\"><br />
</span></h3>
<p style=\"padding-left: 30px;\"><em>dwg: but blowing a cacheline (more or less) on zeroes for comparison, which isn’t necessarily a win</em></p>
<p>Using a single zero uint64_t for comparison is pretty messy:</p>
<pre>bool memeqzero(const void *data, size_t length)
{
    const unsigned char *p = data;
    const unsigned long zero = 0;
    size_t pre;
    pre = (size_t)p % sizeof(unsigned long);
    if (pre) {
        size_t n = sizeof(unsigned long) - pre;
        if (n &gt; length)
            n = length;
        if (memcmp(p, &amp;zero, n) != 0)
            return false;
        p += n;
        length -= n;
    }
    while (length &gt; sizeof(zero)) {
        if (*(unsigned long *)p != zero)
            return false;
        p += sizeof(zero);
        length -= sizeof(zero);
    }
    return memcmp(&amp;zero, p, length) == 0;
}</pre>
<p>And, worse in every way!</p>
<h3>Using a 64-bit Constant With Open-coded Ends: Times: <em><strong>4/9/68/6444 </strong></em>Bytes: <em><strong>165</strong></em></h3>
<blockquote><p><em>dwg: rusty, what colour is the bikeshed if you have an explicit char * loop for the pre and post?</em></p></blockquote>
<p>That’s slightly better, but memcmp still wins over large distances, perhaps due to prefetching or other tricks.</p>
<h3>Epiphany #1: We Already Have Zeroes: Times <em>3/5/92/5801</em> Bytes: <em>422</em></h3>
<p>Then I realized that we don’t need a static buffer: we know everything we’ve already tested is zero!  So I open coded the first 16 byte compare, then memcmp()ed against the previous bytes, doubling each time.  Then a final memcmp for the tail.  Clever huh?</p>
<p>But it no faster than the static buffer case on the high end, and much bigger.</p>
<blockquote><p><em>dwg: rusty, that is brilliant. but being brilliant isn’t enough to make things work, necessarily :p</em></p></blockquote>
<h3>Epiphany #2: memcmp can overlap: Times <em>3/5/<span style=\"color: #00ff00;\">37</span>/<span style=\"color: #00ff00;\">2823</span></em> Bytes: <em>307</em></h3>
<p>My doubling logic above was because my brain wasn’t completely in phase: unlike memcpy, memcmp arguments can happily overlap!  It’s still worth doing an open-coded loop to start (gcc unrolls it here with -O3), but after 16 it’s worth memcmping with the previous 16 bytes.  This is as fast as naive with as little as 2 bytes, and the fastest solution by far with larger numbers:</p>
<pre> const unsigned char *p = data;
 size_t len;

 /* Check first 16 bytes manually */
 for (len = 0; len &lt; 16; len++) {
     if (!length)
         return true;
     if (*p)
         return false;
     p++;
     length--;
 }

 /* Now we know that's zero, memcmp with self. */
 return memcmp(data, p, length) == 0;</pre>
<p>You can find the final code in <a class=\"broken_link\" href=\"http://git.ozlabs.org/?p=ccan;a=blob;f=ccan/mem/mem.c;h=5eb15070ed3c3f9f5bf8d2dd8b0d0f060ffa1766;hb=HEAD#l92\">CCAN</a> (or on <a href=\"https://github.com/rustyrussell/ccan/\">Github</a>) including the <a href=\"https://github.com/rustyrussell/ccan/blob/master/ccan/mem/bench/speed.c\">benchmark code</a>.</p>
<p>Finally, after about 4 hours of random yak shaving, it turns out lightning doesn’t even want to use memeqzero() any more!  Hopefully someone else will benefit.</p>") (pubDate nil "Tue, 20 Oct 2015 00:09:33 +0000")) (item nil (title nil "Paul E. Mc Kenney: Deep Blue vs. Watson Revisited") (guid nil "http://paulmck.livejournal.com/40911.html") (link nil "http://paulmck.livejournal.com/40911.html") (description nil "Some years back, I <a href=\"http://paulmck.livejournal.com/2011/02/10/\" rel=\"nofollow\">speculated</a> on the importance of IBM's <a href=\"http://www.ibm.com/smarterplanet/us/en/ibmwatson/\" rel=\"nofollow\">Watson</a>.  Much has happened since then: Watson won Jeopardy, has been applied to medical applications, and has been made available to numerous business partners to enable them to produce Watson-based offerings.  In short, it is long past time for a follow-up.<br /><br />However, The Economist beat me to the punch in their October 3rd print edition.  I doubt that I can improve on <a href=\"http://www.economist.com/news/science-and-technology/21669609-watson-ibms-attempt-crack-market-artificial-intelligence-starting\" rel=\"nofollow\">their article</a>, so I will confine myself to taking the fair-use liberty of quoting their last sentence:<br /><br /><blockquote>If it [Watson] can pull that off, a truly disturbing possibility looms: that the next TV show featuring Watson might be “America's Got Talent”.<br /></blockquote>") (pubDate nil "Fri, 09 Oct 2015 02:31:53 +0000")) (item nil (title nil "Matthew Garrett: Going my own way") (guid nil "tag:dreamwidth.org,2011-02-12:696190:38136") (link nil "http://mjg59.dreamwidth.org/38136.html") (description nil "Reaction to Sarah's post about <a href=\"http://sarah.thesharps.us/2015/10/05/closing-a-door/\">leaving the kernel community</a> was a mixture of terrible and touching, but it's still one of those things that almost certainly won't end up making any kind of significant difference. Linus has made it pretty clear that he's fine with the way he behaves, and nobody's going to depose him. That's unfortunate, because earlier today I was sitting in a presentation at Linuxcon and remembering how much I love the technical side of kernel development. \"Remembering\" is a deliberate choice of word - it's been increasingly difficult to remember that, because instead I remember having to deal with interminable arguments over the naming of an interface because Linus has an undying hatred of BSD securelevel, or having my name forever associated with the <a href=\"http://arstechnica.com/information-technology/2013/02/linus-torvalds-i-will-not-change-linux-to-deep-throat-microsoft/\">deepthroating of Microsoft</a> because Linus couldn't be bothered asking questions about the reasoning behind a design before trashing it.<br /><br />In the end it's a mixture of just being tired of dealing with the crap associated with Linux development and realising that by continuing to put up with it I'm tacitly encouraging its continuation, but I can't be bothered any more. And, thanks to the magic of free software, it turns out that I can avoid putting up with the bullshit in the kernel community <em>and</em> get to work on the things I'm interested in doing. So <a href=\"https://github.com/mjg59/linux\">here's a kernel tree</a> with patches that implement a BSD-style securelevel interface. Over time it'll pick up some of the power management code I'm still working on, and we'll see where it goes from there. But, until there's a significant shift in community norms on LKML, I'll only be there when I'm being paid to be there. And that's improved my mood immeasurably.<br /><br />(Edited to add a context link for the \"deepthroating of Microsoft\" reference)<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=38136\" style=\"vertical-align: middle;\" width=\"30\" /> comments") (pubDate nil "Thu, 08 Oct 2015 09:22:40 +0000")) (item nil (title nil "James Bottomley: Respect and the Linux Kernel Mailing Lists") (guid nil "http://blog.hansenpartnership.com/?p=299") (link nil "http://blog.hansenpartnership.com/respect-and-the-linux-kernel-mailing-lists/") (description nil "<p>I recently noticed that Sarah Sharp <a href=\"http://sarah.thesharps.us/2015/10/05/closing-a-door/\">resigned publicly</a> from the kernel giving a failure to impose a mandatory code of conduct as the reason and citing interaction problems, mainly on the mailing lists.  The net result of this posting, as <a href=\"http://lwn.net/Articles/659221/#Comments\">all these comments</a> demonstrate, is to imply directly that nothing has ever changed.  This implication is incredibly annoying, firstly because it is actually untrue, secondly because it does more to discourage participation than the behaviour that is being complained about and finally because it totally disrespects and ignores the efforts of hundreds of people who, over the last decade or so, have been striving to improve all interactions around Linux … a rather nice irony given that “respect” is listed as one of the issues for the resignation.  I’d just like to remind everyone of the history of these efforts and what the record shows they’ve achieved.</p>
<p>The issue of respect on the Mailing lists goes way back to the beginnings of Linux itself, but after the foundation of the OSDL (precursor to the Linux Foundation) Technical Advisory Board (TAB), one of its first issues from OSDL member companies was the imbalance between Asian and European/American contributions to the kernel.  The problems were partly to do with Management culture and partly because the lack of respect on the various mailing lists was directly counter to the culture of respect in a lot of Asian countries and disproportionately discouraged contributions from that region.  The TAB largely works behind the scenes, but some aspects of the effort filtered into the public domain as can be seen with a session on <a href=\"https://lwn.net/Articles/249104/\">developer relations at the 2007 kernel summit</a> (and, in fact, at a lot of other kernel summits since then).  Progress was gradual, and influenced by a large number of people, but the climate did improve.  I have to confess that I don’t follow LKML (not because of the flame war issues, simply because it’s too much of a firehose); however, the lists I do participate in (linux-scsi, linux-ide, linux-mm, linux-fsdevel, linux-efi, linux-arch, linux-parisc) haven’t seen any flagrantly disrespectful and personally insulting posts for several years now.  Indeed, when an individual came along who could almost have been flame bait for this with serial efforts to get incorrect and badly thought out patches into the kernel (I won’t give cites here to avoid stigmatising individuals) they met with a large reserve of patience and respectful and helpful advice before finally being banned from the lists for being incorrigible … no insults or flames at all.</p>
<p>Although I’d love to take credit for some of this, I’ve got to say that I think the biggest influencer towards civility is actually the “professionalisation”  of Linux: Employers pay people to work on Linux but the statements of those people become identified with their employers (no matter how many disclaimers they have) … in many ways, Open Source engineers are the new corporate spokespeople.  All employers bear this in mind when they hire and they certainly look over the mailing lists to see how people behave.  The net result is really that the only people who can afford to be rude or abusive are those who don’t think they have much chance of a long term career in Linux.</p>
<p>So, by and large, I’m proud of the achievements we’ve made in civility and the way we have improved over the years.  Are we perfect? by no means (but then perfection in such a large community isn’t a realistic goal).  However, we have passed our stress test: that an individual with bad patches to several mailing lists was met with courtesy and helpful advice, in spite of serially repeating the behaviour.</p>
<p>In conclusion, I’d just like to note that even the <a href=\"http://thread.gmane.org/gmane.linux.kernel/1525074\">thread that gave rise</a> to Sarah’s desire to pursue a code of conduct is now over two years old and try as they might, no-one’s managed to come up with a more recent example and no-one has actually invoked the voluntary <a href=\"https://lwn.net/Articles/635999/\">code of conflict</a>, which was the compromise for not having a mandatory code of conduct.  If it were me, I’d actually take that as a sign of success …</p>") (pubDate nil "Thu, 08 Oct 2015 03:47:18 +0000")) (item nil (title nil "Pete Zaitcev: Pics Up") (guid nil "http://zaitcev.livejournal.com/230032.html") (link nil "http://zaitcev.livejournal.com/230032.html") (description nil "<p>Чёт я под настроение выложил <a href=\"http://forums.airbase.ru/2015/10/t91955--puteshestvie-iz-albukyorki-v-rochester.html\" rel=\"nofollow\">картинки с этой недели на форумы Авиабазы</a>. Anglophones are welcome to pictures at least.</p>") (pubDate nil "Mon, 05 Oct 2015 19:31:02 +0000")) (item nil (title nil "Davidlohr Bueso: acquire/release semantics in the kernel") (guid nil "tag:blogger.com,1999:blog-5789291509148224079.post-3042473723192220095") (link nil "http://feedproxy.google.com/~r/stgolabs/eMGj/~3/YTmP41MhdhE/acquirerelease-semantics-in-kernel.html") (description nil "<div dir=\"ltr\" style=\"text-align: left;\"><div style=\"text-align: justify;\">With the need for better scaling on increasingly larger multi-core  systems, we've continued to extend our CPU barriers in the kernel. Two important variants to prevent CPU reordering for lock-free shared memory synchronization are pairs of <i>load/acquire</i> and <i>store/release</i> <a href=\"https://lwn.net/Articles/576486/\">barriers</a>; also known as <span>LOCK/UNLOCK</span> barriers. These enable threads to cooperate between each other.<br /><br />Multiple, yet pretty much equivalent, definitions of acquire/release semantics can be found all over the internet, but I like the version from the infamous <i>'Documentation/memory-barriers.txt'</i> file for three reasons: (i) it is clear and concise, (ii) it explicitly warns that they are the minimum operations and not to assume anything about reordering of loads and stores before or after the acquire or release, respectively. Finally, (iii) it strongly mentions the need for pairing and thus portability:</div><blockquote class=\"tr_bq\"><div style=\"text-align: justify;\"><span> <i>(5) ACQUIRE operations.<br /><br />     This acts as a one-way permeable barrier.  It guarantees that all memory operations after the ACQUIRE operation will appear to happen after the CQUIRE operation with respect to the other components of the system. ACQUIRE operations include LOCK operations and smp_load_acquire() operations.<br /><br />     Memory operations that occur before an ACQUIRE operation may appear tohappen after it completes.<br /><br />     An ACQUIRE operation should almost always be paired with a RELEASE operation.</i></span></div><div style=\"text-align: justify;\"><i><span><br /></span></i></div><i><span> (6) RELEASE operations.<br /><br />     This also acts as a one-way permeable barrier.  It guarantees that all   memory operations before the RELEASE operation will appear to happen before the RELEASE operation with respect to the other components of the system. RELEASE operations include UNLOCK operations and smp_store_release() operations.<br /><br />     Memory operations that occur after a RELEASE operation may appear to happen before it completes.<br /><br />     The use of ACQUIRE and RELEASE operations generally precludes the need for other sorts of memory barrier (but note the exceptions mentioned in the subsection \"MMIO write barrier\").  In addition, a RELEASE+ACQUIRE pair is -not- guaranteed to act as a full memory barrier.  However, after an ACQUIRE on a given variable, all memory accesses preceding any prior RELEASE on that same variable are guaranteed to be visible.  In other words, within a given variable's critical section, all accesses of all previous critical sections for that variable are guaranteed to have completed.<br /><br />     This means that ACQUIRE acts as a minimal \"acquire\" operation and    RELEASE acts as a minimal \"release\" operation.</span></i></blockquote><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"><tbody><tr><td style=\"text-align: center;\"><img border=\"0\" src=\"http://4.bp.blogspot.com/-dA8WtADATbU/Vg7JyQ_knbI/AAAAAAAABIo/eepSlojW2-c/s1600/acquire-release.png\" style=\"margin-left: auto; margin-right: auto;\" /></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Thread B's ACQUIRE pairs with Thread A's RELEASE. <a href=\"http://www.ibm.com/developerworks/library/j-jtp03304/\">Copyright</a> (C) IBM.</td><td class=\"tr-caption\" style=\"text-align: center;\"><br /></td><td class=\"tr-caption\" style=\"text-align: center;\"><br /></td><td class=\"tr-caption\" style=\"text-align: center;\"><br /></td></tr></tbody></table><br /><div style=\"text-align: justify;\">In lock-speak, all this means is that nothing leaks from the critical region that is protected by the primitive in question. A thread attempting to take a lock will synchronize/pair the load (ACQUIRE), for instance via <i>Rmw</i> (<span>cmpxchg</span>), when attempting to take the lock with the last store (RELEASE) when another thread is concurrently releasing the lock (for example, setting the counter to 0).</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">For v4.2, Will Deacon <a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=654672d4ba1a6001c365833be895f9477c4d5eab\">introduced</a> more relaxed extensions of traditional atomic operations (including <i>Rmw</i>) which allow finer grained control over, what used to be, full barriers semantics on both sides of the instruction. This is also true for just about all atomic functions that return a value to the caller, ie: <span>atomic_*_return()</span>. As such <a href=\"http://preshing.com/20120930/weak-vs-strong-memory-models/\">weakly ordered architectures</a> can make use of these -- currently only arm64 makes use of them, but <a href=\"https://lkml.org/lkml/2015/9/16/527\">efforts</a> for PPC are being made. </div><blockquote class=\"tr_bq\"><blockquote class=\"tr_bq\"><i>      - *_relaxed: No ordering guarantees. This is similar to what we have already for the non-return atomics (e.g. atomic_add).<br />   <br />      - *_acquire: ACQUIRE semantics, similar to smp_load_acquire.<br />   <br />      - *_release: RELEASE semantics, similar to smp_store_release.</i></blockquote></blockquote><div style=\"text-align: justify;\">So we now have goodies such as <span>atomic_cmpxchg_acquire()</span> or <span>atomic_add_return_relaxed()</span>. Most recently, aiming for v4.4, <a href=\"http://comments.gmane.org/gmane.linux.kernel/2050980\">I've ported all our locks</a> to make use of these optimizations, which can save almost half the  amount of barriers in the kernel's locking code -- which is specially nice under low or regular contention scenarios,  where the fastpaths are exercised. There are plenty of other examples of real world code making use of acquire/release semantics. Mostly by using <span style=\"font-family: inherit;\"><span>smp_load_acquire()/smp_store_release()</span> other primitives  <span style=\"font-family: inherit;\">also use these semantics for common building blocks </span></span><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\">(as esoteric as they can get, ie RCU).</span></span></span></div></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/stgolabs/eMGj/~4/YTmP41MhdhE\" width=\"1\" />") (pubDate nil "Mon, 05 Oct 2015 06:54:46 +0000")) (item nil (title nil "Eric Sandeen: No, XFS won’t steal your money") (guid nil "http://sandeen.net/wordpress/?p=1389") (link nil "http://sandeen.net/wordpress/computers/linux/no-xfs-wont-steal-your-money/?utm_source=rss&utm_medium=rss&utm_campaign=no-xfs-wont-steal-your-money") (description nil "<p><img alt=\"\" class=\"alignnone aligncenter\" height=\"400\" src=\"http://i.imgur.com/kDTAeGq.jpg\" width=\"400\" /></p>
<p>So, the Inquirer runs a story by <a href=\"http://www.theinquirer.net/inquirer/flame_author/2427498/greendispenser-malware-threatens-to-take-all-your-dosh-from-linux-atms\">Chris Merriman</a> today, titled “GreenDispenser malware threatens to take all your dosh from Linux ATMs” which includes this breathless little gem:</p>
<blockquote><p>GreenDispenser targets the XFS file system, a popular standard for ATMs, originally designed for IRIX but now widely used in Linux. ATMs that use Windows XP Embedded, which is still supported, are not thought to be at risk.</p></blockquote>
<p>Of course, I found this interesting, and a bit odd.  Could the XFS filesystem possibly be at fault here?  And is the “large and lots” filesystem really used in ATMS?  Let’s see what Proofpoint, the security firm who discovered it <a href=\"https://www.proofpoint.com/us/threat-insight/post/Meet-GreenDispenser\">has to say about the subject</a>:</p>
<blockquote><p>Specifically, GreenDispenser like its predecessors interacts with the <a href=\"https://en.wikipedia.org/wiki/CEN/XFS\">XFS middleware</a> [4], which is widely adopted by various ATM vendors.</p></blockquote>
<p>That handy link &amp; footnote leads us to Wikipedia, which explains that “XFS middleware” refers to CEN/XFS, which is not in any way related to the XFS filesystem, or Linux, and is in fact Microsoft specific:</p>
<blockquote><p><b>CEN/XFS</b> or <b>XFS</b> (e<b>X</b>tensions for <b>F</b>inancial <b>S</b>ervices) provides a client-server architecture for financial applications on the Microsoft Windows platform.</p></blockquote>
<p>Nice job, Inquirer!  Nice job, <a href=\"http://www.theinquirer.net/inquirer/flame_author/2427498/greendispenser-malware-threatens-to-take-all-your-dosh-from-linux-atms\">Chris Merriman</a>!</p>
<p>(As Jeff points out in the comments, The Inquirer has updated the article as of Sep 25, removing references to LInux and the XFS filesystem.)</p>") (pubDate nil "Thu, 24 Sep 2015 18:49:07 +0000")) (item nil (title nil "Matthew Garrett: Filling in the holes in Linux boot chain measurement, and the TPM measurement log") (guid nil "tag:dreamwidth.org,2011-02-12:696190:37656") (link nil "http://mjg59.dreamwidth.org/37656.html") (description nil "When I wrote about <a href=\"https://mjg59.dreamwidth.org/35742.html\">TPM attestation via 2FA</a>, I mentioned that you needed a bootloader that actually performed measurement. I've now written some patches for Shim and Grub that do so.<br /><br />The <a href=\"https://github.com/mjg59/shim/tree/tpm\">Shim code</a> does a couple of things. The obvious one is to measure the second-stage bootloader into PCR 9. The perhaps less expected one is to measure the contents of the MokList and MokSBState UEFI variables into PCR 14. This means that if you're happy simply running a system with your own set of signing keys and just want to ensure that your secure boot configuration hasn't been compromised, you can simply seal to PCR 7 (which will contain the UEFI Secure Boot state as defined by the UEFI spec) and PCR 14 (which will contain the additional state used by Shim) and ignore all the others.<br /><br />The grub code is a little more complicated because there's more ways to get it to execute code. Right now I've gone for a fairly extreme implementation. On BIOS systems, the grub stage 1 and 2 will be measured into PCR 9[1]. That's the only BIOS-specific part of things. From then on, any grub modules that are loaded will also be measured into PCR 9. The full kernel image will be measured into PCR10, and the full initramfs will be measured into PCR11. The command line passed to the kernel is in PCR12. Finally, each command executed by grub (including those in the config file) is measured into PCR 13.<br /><br />That's quite a lot of measurement, and there are probably fairly reasonable circumstances under which you won't want to pay attention to all of those PCRs. But you've probably also noticed that several different things may be measured into the same PCR, and that makes it more difficult to figure out what's going on. Thankfully, the spec designers have a solution to this in the form of the TPM measurement log.<br /><br />Rather than merely extending a PCR with a new hash, software can extend the measurement log at the same time. This is stored outside the TPM and so isn't directly cryptographically protected. In the simplest form, it contains a hash and some form of description of the event associated with that hash. If you replay those hashes you should end up with the same value that's in the TPM, so for attestation purposes you can perform that verification and then merely check that specific log values you care about are correct. This makes it possible to have a system perform an attestation to a remote server that contains a full list of the grub commands that it ran and for that server to make its attestation decision based on a subset of those.<br /><br />No promises as yet about PCR allocation being final or these patches ever going anywhere in their current form, but it seems reasonable to get them out there so people can play. Let me know if you end up using them!<br /><br />[1] The code for this is derived from the old <a href=\"http://sourceforge.net/projects/trustedgrub/\">Trusted Grub</a> patchset, by way of Sirrix AG's <a href=\"https://github.com/Sirrix-AG/TrustedGRUB2/\">Trusted Grub 2</a> tree.<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=37656\" style=\"vertical-align: middle;\" width=\"30\" /> comments") (pubDate nil "Thu, 24 Sep 2015 01:21:04 +0000")) (item nil (title nil "Matthew Garrett: The Internet of Incompatible Things") (guid nil "tag:dreamwidth.org,2011-02-12:696190:37522") (link nil "http://mjg59.dreamwidth.org/37522.html") (description nil "I have an <a href=\"http://www.amazon.com/Amazon-SK705DI-Echo/dp/B00X4WHP5E\">Amazon Echo</a>. I also have a <a href=\"http://www.lifx.com/products/the-original?variant=1190662175\">LIFX Smart Bulb</a>. The Echo can integrate with <a href=\"http://www2.meethue.com/en-us/\">Philips Hue</a> devices, letting you control your lights by voice. It has no integration with LIFX. Worse, the Echo developer program is fairly limited - while the device's built in code supports communicating with devices on your local network, the third party developer interface only allows you to make calls to remote sites[1]. It seemed like I was going to have to put up with either controlling my bedroom light by phone or actually getting out of bed to hit the switch.<br /><br />Then I found <a href=\"http://www.makermusings.com/2015/07/13/amazon-echo-and-home-automation/\">this article</a> describing the implementation of a bridge between the Echo and <a href=\"http://www.wemo.com\">Belkin Wemo</a> switches, cunningly called Fauxmo. The Echo already supports controlling Wemo switches, and the code in question simply implements enough of the Wemo API to convince the Echo that there's a bunch of Wemo switches on your network. When the Echo sends a command to them asking them to turn on or off, the code executes an arbitrary callback that integrates with whatever API you want.<br /><br />This seemed like a good starting point. There's a free implementation of the LIFX bulb API called <a href=\"https://github.com/mpapi/lazylights\">Lazylights</a>, and with a quick bit of hacking I could use the Echo to turn my bulb on or off. But the Echo's Hue support also allows dimming of lights, and that seemed like a nice feature to have. Tcpdump showed that asking the Echo to look for Hue devices resulted in similar UPnP discovery requests to it looking for Wemo devices, so extending the Fauxmo code seemed plausible. I signed up for the Philips developer program and then discovered that the terms and conditions explicitly forbade using any information on their site to implement any kind of Hue-compatible endpoint. So that was out. Thankfully enough people have written their own Hue code at various points that I could figure out enough of the protocol by searching Github instead, and now I have a branch of Fauxmo that <a href=\"https://github.com/mjg59/fauxmo\">supports searching for LIFX bulbs and presenting them as Hues</a>[2].<br /><br />Running this on a machine on my local network is enough to keep the Echo happy, and I can now dim my bedroom light in addition to turning it on or off. But it demonstrates a somewhat awkward situation. Right now vendors have no real incentive to offer any kind of compatibility with each other. Instead they're all trying to define their own ecosystems with their own incompatible protocols with the aim of forcing users to continue buying from them. Worse, they attempt to restrict developers from implementing any kind of compatibility layers. The inevitable outcome is going to be either stacks of discarded devices speaking abandoned protocols or a cottage industry of developers writing bridge code and trying to avoid DMCA takedowns.<br /><br />The dystopian future we're heading towards isn't Gibsonian giant megacorporations engaging in physical warfare, it's one where buying a new toaster means replacing all your lightbulbs or discovering that the code making your home alarm system work is now considered a copyright infringement. Is there a market where I can invest in IP lawyers?<br /><br />[1] It also requires an additional phrase at the beginning of a request to indicate which third party app you want your query to go to, so it's much more clumsy to make those requests compared to using a built-in app.<br />[2] I only have one bulb, so as yet I haven't added any support for groups.<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=37522\" style=\"vertical-align: middle;\" width=\"30\" /> comments") (pubDate nil "Sun, 20 Sep 2015 21:22:20 +0000")) (item nil (title nil "Daniel Vetter: XDC 2015: Atomic Modesetting for Drivers") (guid nil "tag:blogger.com,1999:blog-8047628228132312466.post-5289130486490976068") (link nil "http://blog.ffwll.ch/2015/09/xdc-2015-atomic-modesetting-for-drivers.html") (description nil "I've done a talk at <a href=\"http://www.x.org/wiki/Events/XDC2015/\">XDC 2015</a> about atomic modesetting with a focus for driver writers. Most of the talk is an overview of how an atomic modeset looks and how to implement the different parts in a driver backend. Anyway, for all those who missed it, there's a <a href=\"https://www.youtube.com/watch?v=kl9suFgbTc8\">video</a> and <a href=\"http://people.freedesktop.org/~danvet/presentations/xdc-2015.pdf\">slides</a>.") (pubDate nil "Fri, 18 Sep 2015 15:27:19 +0000")) (item nil (title nil "Pete Zaitcev: TLS Security In Firefox 40") (guid nil "http://zaitcev.livejournal.com/229817.html") (link nil "http://zaitcev.livejournal.com/229817.html") (description nil "<div align=\"center\"><img height=\"259\" src=\"http://www.zaitcev.us/things/lj/2015/20150911a1.jpg\" width=\"608\" /></div>
<p>What do people at Mozilla think is going to happen when I need to access a website and Firefox says that TLS parameters are insecure and thus I cannot? I'm going to use Chrome, that's what. Or maybe even a hacked Midori, where I can adjust build-time parameters of gcr.</p>
<p>That company went way downhill when they kicked Eich out.</p>") (pubDate nil "Fri, 11 Sep 2015 18:33:13 +0000")) (item nil (title nil "Daniel Vetter: Neat drm/i915 stuff for 4.3") (guid nil "tag:blogger.com,1999:blog-8047628228132312466.post-5631845111107853206") (link nil "http://blog.ffwll.ch/2015/09/neat-drmi915-stuff-for-43.html") (description nil "<a href=\"http://blog.ffwll.ch/2015/06/neat-drmi915-stuff-for-42.html\">Kernel 4.2</a> is released already and the 4.3 merge window in full swing, time to look at what's in it for the intel graphics driver.<br /><br /><a name=\"more\"></a><br /><br />Biggest thing for sure is that <b>Skylake is finally out of preliminary support</b> and enabled by default. The reason for the long hold-up was some ABI fumble - the hardware exposes the topmost plane both through the new universal plane registers and the legacy cursor registers and because we simply carried the legacy plane code around in the driver we ended up exposing both. This wasn't something big to take care of but somehow was dragged on forever.<br /><br />The other big thing is that now <b>legacy modesets are done with the new atomic modesetting code </b>driver-internally. Atomic support in i915.ko isn't ready for prime-time yet fully, but this is definitely a big step forward. Besides atomic there's also other cross-platform improvements in the modeset code: Ville fixed up the <b>12bpc support for HDMI</b>, which is now used by default if the screen supports it. Mika Kahola and Ville also implemented dynamic adjustment of the cdclk, which is the main clock source for display engines on intel graphics. And there's a big difference in the clock speeds needed between e.g. a 4k screen and a 720p TV.<br /><br />Continuing with power saving features Rodrigo again spent a lot of time <b>fixing up PSR</b> (panel self refresh). And Paulo did the same by writing patches to <b>improve FBC </b>(framebuffer compression). We have some really solid testcases by now, unfortunately neither feature is ready for enabling by default yet. Especially PSR is still plagued by screen freezes on some random systems. Also there's been <b>some fixes to DRRS</b> (dynamic refresh rate switching) from Ramalingam. DRRS is enabled by default already, where supported. And finally some improvements to make the frontbuffer rendering tracking more accurate, which is used by all three of these display power saving features.<br /><br />And of course there's also tons of improvements to platform code. <b>Display PLL code for Sklylake and Valleyview&amp;Cherryview was tuned</b> by Damien and Ville respectively. There's been <b>tons of work on Broxton and DSI support</b> by Imre, Gaurav and others.<br /><br />Moving on to the rendering side the big change is how tracking of rendering tasks is handled. In the past the driver just used raw sequence numbers emitted by the hardware, but for cross-driver synchronization and reordering tasks with an eventual gpu scheduler more abstraction is needed. A big step is <b>converting over to the i915 request structure</b> completely, done by John Harrison. The next step will be to switch the internal implementation for i915 requests to the cross-driver fences, but that's for future kernels. As a follow-up cleanup John also <b>removed the OLR</b>, which stands for outstanding lazy request. It was a neat little trick implemented years ago to simplify handling error recovery, but which causes tons of pain with subtle bugs. Making requests more explicit in the driver allowed us to finally remove this trick since.<br /><br />There's also been a pile of platform related features: <b>MOCS programming for Skylake/Broxton</b> (which is used for caching control). <b>Resource streamer support</b> from Abdiel, which is used to offload some of the buffer object tracking for shaders from the cpu to the gpu. And the command parser on Haswell was extended to <b>support atomic instructions</b> in shaders. And finally for Skylake Mika Kuoppala added code to avoid resetting the gpu - in certain cases the hardware would hard-hang the entire system trying to execute the reset. And a dead gpu is still better than a dead system.<br />") (pubDate nil "Mon, 07 Sep 2015 09:40:13 +0000")) (item nil (title nil "Andy Grover: RHEL 7.2 has an updated kernel target") (guid nil "http://groveronline.com/?p=528") (link nil "http://groveronline.com/2015/09/rhel-7-2-has-an-updated-kernel-target/") (description nil "<p>As mentioned in the beta release notes, the kernel in RHEL 7.2 contains a rebased LIO kernel target, to the equivalent of the Linux 4.0.stable series.</p>
<p>This is a big update. LIO has improved greatly since 3.10. It has added support for SCSI features that enable VMWare VAAI support, as well as data integrity (DIF), and significant iSER work, for those of you using Infiniband. (SRP is also supported, as well as iSCSI and FCoE, of course.)</p>
<p>Note that we still do not ship support for the Fibre Channel qla2xxx fabric. It still seems to be something storage vendors and integrators want, more than a feature our customers are telling us they want in RHEL.</p>
<p>(On a side note, Infiniband hardware is pretty affordable these days! For all you datacenter hobbyists who have a rack in the garage, I might suggest a cheap previous-gen IB setup and either SRP or iSER as the way to go and still get really high IOPs.)</p>
<p>Users of RHEL 7’s SCSI target should find RHEL 7.2 to be a very nice upgrade. Please try the beta out and report any issues you find of course, but it’s looking really good so far.</p>") (pubDate nil "Fri, 04 Sep 2015 21:50:17 +0000")) (item nil (title nil "Pavel Machek: Wifi fun and misc..") (guid nil "http://pavelmachek.livejournal.com/130043.html") (link nil "http://pavelmachek.livejournal.com/130043.html") (description nil "(And apology for the SSD entry some time back. Apparently yes, they can fail to retain data after less than a week... at the very end of their lifetime.)<br /><br />In the last weeks, learned that transfering real-time data over WIFI is way more fun than I thought. And that i<span style=\"line-height: 1.4;\">t is possible to communicate from inside of (closed) microwave</span><span style=\"line-height: 1.4; white-space: pre;\"> </span><span style=\"line-height: 1.4;\">oven </span><span style=\"line-height: 1.4;\">using 2.4GHz WIFI. I don't know about you, but it scares me a little.</span><br /><br /><div><u>N900 and not everything is a file</u><br /><br /><div><div>Pocket Computer. We had pocket computers before ... Sharp Zaurus lines <span style=\"line-height: 1.4;\">was prominent example. They had keyboards and resistive</span></div><div>touchscreens... Resistive touchscreen with stylus is accurate enough <span style=\"line-height: 1.4;\">to serve as mouse replacement. Unfortunately, such machines are slowly </span><span style=\"line-height: 1.4;\">going extinct. Sure, we have Quad-core Full-HD smartphones these </span><span style=\"line-height: 1.4;\">days... but they lack keyboards, making ssh from them impossible, they </span><span style=\"line-height: 1.4;\">lack accurate pointing device, and they are really phones, not small </span><span style=\"line-height: 1.4;\">computers. N900 can <i>almost</i> be used as a pocket computer...</span><br /><br /><div><div>New Mer is \"broken beyond repair\" for n900.. as it uses qt5.  qt4 <span style=\"line-height: 1.4;\">works well (well... little slow) on n900, but qt5 needs stable egl</span></div><div>drivers. Ok, so that was another nice-looking trap. I'm starting to <span style=\"line-height: 1.4;\">think that text-only user interface is right thing to do on n900 at</span></div><div>this point.</div></div></div></div></div><div><div>Baking n900 for 15minutes at 250C seems to have fixed the \"no sim <span style=\"line-height: 1.4;\">card\" problem... for a week. It now seems a bit flakey, but definitely better than before baking. Thanks for everyone at Czech BrmLab!</span></div></div><div>To backup mmc card on N900, I'd like to rsync root@maemo:/dev/mmcblk1 <span style=\"line-height: 1.4;\">mmcblk1.img ... but that does not work, as rsync is too clever and </span><span style=\"line-height: 1.4;\">refuses to transfer content of special files. Is there trick I'm </span><span style=\"line-height: 1.4;\">missing?</span></div><div><br /><div>On the n900 front... it has 256MiB RAM and 800x480 screen. What web <span style=\"line-height: 1.4;\">browser would you recommend for that? I tried links2, but its support </span><span style=\"line-height: 1.4;\">is not good enough for properly working m.mobilecity.com </span><span style=\"line-height: 1.4;\">pages... which I'd kind of like.</span></div><br /><u>Linus, please reconsider -rc0</u><br /><br /><div>Hmm. There's big difference between 4.1 (expected to be pretty stable <span style=\"line-height: 1.4;\">kernel) and 4.2-rc0 (which is probably going to be as unstable as it </span><span style=\"line-height: 1.4;\">gets. Unfortunately, Linus does not change makefile before merging, so it is quite tricky </span><span style=\"line-height: 1.4;\">to tell if</span></div><div>Linux amd 4.1.0 #25 SMP Wed Jul 1 11:20:22 CEST 2015 x86_64 GNU/Linux</div><div>is expected-to-be-stable 4.1, or expected-to-be-very-unstable 4.2-rc0...<br /><br /><div>Its tempting to name your branches simply \"v4.1\", \"v3.11\". Don't. When <span style=\"line-height: 1.4;\">-rc's are done, Linus will create \"v4.1\" tag, and you'll have fun</span></div><div>figuring out what whent wrong in your git.</div><br /><u>Google play bloatware</u></div><div><br /><div>I got very cheap LG optimus chic.. and android did improve from G1 <span style=\"line-height: 1.4;\">days. Its still Google's spying empire, but.. at least it is fluid and </span><span style=\"line-height: 1.4;\">mostly works.</span></div></div></div><div>Not sure what \"Google Play services\" are good for, but taking 50MB of <span style=\"line-height: 1.4;\">internal flash is not funny.. and when moved to SD card, the SD card </span><span style=\"line-height: 1.4;\">tends to disconnect. \"Google Play Store\" still works without them. \"My </span><span style=\"line-height: 1.4;\">Tracks\" need them, but 60MB of flash is not reasonable price to pay </span><span style=\"line-height: 1.4;\">for GPX recording. \"Pubtran\" got removed, too. MHDdroid has strange </span><span style=\"line-height: 1.4;\">interface, but perhaps it will not need that much storage.</span></div><div>Do you know a way to search czech public transport without Android and <span style=\"line-height: 1.4;\">without desktop browser or Opera Mini? m.idos.cz leads to \"full\" version.</span><br /><br /><div>And ...dear Android, \"force close\" dialog is last thing I want to see after <span style=\"line-height: 1.4;\">hearing ringtone. If you could at least add the number to call log...<br /><br /><u>Feeling cheated</u></span><br /><br /><div><div>Wed Jul  1 01:59:58 CEST 2015</div><div>Wed Jul  1 01:59:59 CEST 2015</div><div>Wed Jul  1 02:00:00 CEST 2015</div><div>Wed Jul  1 02:00:01 CEST 2015</div><div>Wed Jul  1 02:00:02 CEST 2015</div><div>Wed Jul  1 02:00:03 CEST 2015</div></div></div></div><div><u>Different power supply for X60</u><br /><br /><div>Thinkpad X60 is marked as 20V, 3.25A. I wonder if using 19V, 2.63A <span style=\"line-height: 1.4;\">power supply is a good idea. The power brick is way smaller, and 65W </span><span style=\"line-height: 1.4;\">seems to be a little high for a small notebook.</span></div></div>") (pubDate nil "Fri, 04 Sep 2015 10:04:06 +0000")) (item nil (title nil "Gustavo F. Padovan: Linux Kernel Engineer opportunity at Collabora!") (guid nil "http://padovan.org/blog/?p=425") (link nil "https://padovan.org/blog/2015/09/linux-kernel-engineer-opportunity-at-collabora/") (description nil "<p><a href=\"http://www.collabora.com\" target=\"_blank\">Collabora</a> is a software consultancy specialising in bringing companies and the open source software community together and it is currently looking for a Core Software Engineer, that works in the Linux kernel and/or all the plumbing around the kernel. In this role the engineer will be part of worldwide team who works with our clients to solve their Linux kernel and low level stack technical problems.</p>
<p>Collabora is well-known for its strong relationship to upstream development, so it is an important part of this role make significant contributions to upstream projects.</p>
<p>Visit our <a href=\"https://www.collabora.com/about-us/careers.html\" target=\"_blank\">jobs page</a> or talk me to put you in contact with our Hiring Team!</p>") (pubDate nil "Thu, 03 Sep 2015 20:44:31 +0000")) (item nil (title nil "Paul E. Mc Kenney: Stupid RCU Tricks: Hand-over-hand traversal of linked list using SRCU") (guid nil "http://paulmck.livejournal.com/40593.html") (link nil "http://paulmck.livejournal.com/40593.html") (description nil "Suppose that a very long linked list was to be protected with SRCU.  Let's also make the presumably unreasonable assumption that this list is so long that we don't want to stay in a single SRCU read-side critical section for the whole traversal.<br /><br />So why not try hand-over-hand SRCU protection, as shown in the following code fragment?<br /><br /><pre>  1 struct foo {
  2   struct list_head list;
  3   ...
  4 };
  5 
  6 LIST_HEAD(mylist);
  7 struct srcu_struct mysrcu;
  8 
  9 void process(void)
 10 {
 11   int i1, i2;
 12   struct foo *p;
 13 
 14   i1 = srcu_read_lock(&amp;mysrcu);
 15   list_for_each_entry_rcu(p, &amp;mylist, list) {
 16     do_something_with(p);
 17     i2 = srcu_read_lock(&amp;mysrcu);
 18     srcu_read_unlock(&amp;mysrcu, i1);
 19     i1 = i2;
 20   }
 21   srcu_read_unlock(&amp;mysrcu, i1);
 22 }
</pre><br /><br />The trick is that on each pass through the loop, we enter a new SRCU read-side critical section, then exit the old one.  That way the entire traversal is protected by SRCU, but each SRCU read-side critical section is quite short, covering traversal of but a single element of the list.<br /><br />As is customary with SRCU, the list is manipulated using <code>list_add_rcu()</code>, <code>list_del_rcu</code>, and   friends.<br /><br /><a href=\"https://www.kernel.org/pub/linux/kernel/people/paulmck/Answers/RCU/SRCUhoha.html\" rel=\"nofollow\">What are the advantages and disadvantages of this hand-over-hand SRCU list traversal?</a>") (pubDate nil "Thu, 03 Sep 2015 05:20:19 +0000")) (item nil (title nil "Matthew Garrett: Working with the kernel keyring") (guid nil "tag:dreamwidth.org,2011-02-12:696190:37333") (link nil "http://mjg59.dreamwidth.org/37333.html") (description nil "The <a href=\"http://man7.org/linux/man-pages/man7/keyrings.7.html\">Linux kernel keyring</a> is effectively a mechanism to allow shoving blobs of data into the kernel and then setting access controls on them. It's convenient for a couple of reasons: the first is that these blobs are available to the kernel itself (so it can use them for things like NFSv4 authentication or module signing keys), and the second is that once they're locked down there's no way for even root to modify them.<br /><br />But there's a corner case that can be somewhat confusing here, and it's one that I managed to crash into multiple times when I was implementing some code that works with this. Keys can be \"possessed\" by a process, and have permissions that are granted to the possessor orthogonally to any permissions granted to the user or group that owns the key. This is important because it allows for the creation of keyrings that are only visible to specific processes - if my userspace keyring manager is using the kernel keyring as a backing store for decrypted material, I don't want any arbitrary process running as me to be able to obtain those keys[1]. As described in keyrings(7), keyrings exist at the session, process and thread levels of granularity.<br /><br />This is absolutely fine in the normal case, but gets confusing when you start using sudo. sudo by default doesn't create a new login session - when you're working with sudo, you're still working with key posession that's tied to the original user. This makes sense when you consider that you often want applications you run with sudo to have access to the keys that you own, but it becomes a pain when you're trying to work with keys that need to be accessible to a user no matter whether that user owns the login session or not.<br /><br />I spent a while talking to David Howells about this and he explained the easiest way to handle this. If you do something like the following:<br /><tt>$ sudo keyctl add user testkey testdata @u</tt><br />a new key will be created and added to UID 0's user keyring (indicated by @u). This is possible because the keyring defaults to 0x3f3f0000 permissions, giving both the possessor <em>and</em> the user read/write access to the keyring. But if you then try to do something like:<br /><tt>$ sudo keyctl setperm 678913344 0x3f3f0000</tt><br />where 678913344 is the ID of the key we created in the previous command, you'll get permission denied. This is because the default permissions on a key are 0x3f010000, meaning that the possessor has permission to do anything to the key but the user only has permission to view its attributes. The cause of this confusion is that although we have permission to write to UID 0's keyring (because the permissions are 0x3f3f0000), we don't <em>possess</em> it - the only permissions we have for this key are the user ones, and the default state for user permissions on new keys only gives us permission to view the attributes, not change them.<br /><br />But! There's a way around this. If we instead do:<br /><tt>$ sudo keyctl add user testkey testdata @s</tt><br />then the key is added to the current session keyring (@s). Because the session keyring belongs to us, we possess any keys within it and so we have permission to modify the permissions further. We can then do:<br /><tt>$ sudo keyctl setperm 678913344 0x3f3f0000</tt><br />and it works. Hurrah! Except that if we log in as root, we'll be part of another session and won't be able to see that key. Boo. So, after setting the permissions, we should:<br /><tt>$ sudo keyctl link 678913344 @u</tt><br />which ties it to UID 0's user keyring. Someone who logs in as root will then be able to see the key, as will any processes running as root via sudo. But we probably also want to remove it from the unprivileged user's session keyring, because that's readable/writable by the unprivileged user - they'd be able to revoke the key from underneath us!<br /><tt>$ sudo keyctl unlink 678913344 @s</tt><br />will achieve this, and now the key is configured appropriately - UID 0 can read, modify and delete the key, other users can't.<br /><br />This is part of our ongoing work at <a href=\"http://www.coreos.com\">CoreOS</a> to make <a href=\"https://github.com/coreos/rkt\">rkt</a> more secure. Moving the signing keys into the kernel is the first step towards rkt no longer having to trust the local writable filesystem[2]. Once keys have been enrolled the keyring can be locked down - rkt will then refuse to run any images unless they're signed with one of these keys, and even root will be unable to alter them.<br /><br />[1] (obviously it should also be impossible to ptrace() my userspace keyring manager)<br />[2] Part of our Secure Boot work has been the integration of <a href=\"https://lwn.net/Articles/459420/\">dm-verity</a> into CoreOS. Once deployed this will mean that the /usr partition is cryptographically verified by the kernel at runtime, making it impossible for anybody to modify it underneath the kernel. / remains writable in order to permit local configuration and to act as a data store, and right now rkt stores its trusted keys there.<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=37333\" style=\"vertical-align: middle;\" width=\"30\" /> comments") (pubDate nil "Mon, 31 Aug 2015 17:18:52 +0000")) (item nil (title nil "James Morris: Linux Security Summit 2015 – Wrapup, slides") (guid nil "http://blog.namei.org/?p=619") (link nil "http://blog.namei.org/2015/08/27/linux-security-summit-2015-wrapup-slides/") (description nil "<p>The slides for all of the presentations at last week’s <a href=\"http://kernsec.org/wiki/index.php/Linux_Security_Summit_2015\">Linux Security Summit</a> are now available at the <a href=\"http://kernsec.org/wiki/index.php/Linux_Security_Summit_2015#Schedule\">schedule page</a>.</p>
<p>Thanks to all of those who participated, and to all the events folk at <a href=\"http://events.linuxfoundation.org/\">Linux Foundation</a>, who handle the logistics for us each year, so we can focus on the event itself.</p>
<p>As with the previous year, we followed a two-day format, with most of the refereed presentations on the first day, with more of a developer focus on the second day.  We had good attendance, and also this year had participants from a wider field than the more typical kernel security developer group.  We hope to continue expanding the scope of participation next year, as it’s a good opportunity for people from different areas of security, and FOSS, to get together and learn from each other.  This was the first year, for example, that we had a presentation on Incident Response, thanks to Sean Gillespie who presented on <a href=\"https://github.com/google/grr\">GRR</a>, a live remote forensics tool initially developed at Google.</p>
<p>The <a href=\"http://kernsec.org/files/lss2015/giant-bags-of-mostly-water.pdf\">keynote</a> by kernel.org sysadmin, <a href=\"https://www.linux.com/news/featured-blogs/200-libby-clark/814542-15-reddit-ama-questions-for-kernelorg-sysadmin-konstantin-ryabitsev\">Konstantin Ryabitsev</a>, was another highlight, one of the best talks I’ve seen at any conference.</p>
<p>Overall, it seems the adoption of Linux kernel security features is increasing rapidly, especially via mobile devices and IoT, where we now have <em>billions</em> of Linux deployments out there, connected to everything else.  It’s interesting to see SELinux increasingly play a role here, on the Android platform, in protecting user privacy, as highlighted in Jeffrey Vander Stoep’s presentation on <a href=\"http://kernsec.org/files/lss2015/vanderstoep.pdf\">whitelisting ioctls</a>.  Apparently, some major corporate app vendors, who were not named, have been secretly tracking users via hardware MAC addresses, obtained via <em>ioctl.</em></p>
<p>We’re also seeing a lot of deployment activity around platform Integrity, including TPMs, secure boot and other integrity management schemes.  It’s gratifying to see the work our community has been doing in the kernel security/ tree being used in so many different ways to help solve large scale security and privacy problems.  Many of us have been working for 10 years or more on our various projects  — it seems to take about that long for a major security feature to mature.</p>
<p>One area, though, that I feel we need significantly more work, is in kernel self-protection, to harden the kernel against coding flaws from being exploited.  I’m hoping that we can find ways to work with the security research community on incorporating more hardening into the mainline kernel.  I’ve <a href=\"http://lists.linuxfoundation.org/pipermail/ksummit-discuss/2015-August/002292.html\">proposed</a> this as a topic for the upcoming Kernel Summit, as we need buy-in from core kernel developers.  I hope we’ll have topics to cover on this, then, at next year’s LSS.</p>
<p>We overlapped with <a href=\"https://linuxplumbersconf.org/2015/\">Linux Plumbers</a>, so <a href=\"http://lwn.net/\">LWN</a> was not able to provide any coverage of the summit.  Paul Moore, however, has published an excellent<a href=\"http://www.paul-moore.com/blog/d/2015/08/linux_security_summit.html\"> write-up on his blog</a>. Thanks, Paul!</p>
<p>The committee would appreciate feedback on the event, so we can make it even better for next year.  We may be contacted via email per the contact info at the bottom of the <a href=\"http://kernsec.org/wiki/index.php/Linux_Security_Summit_2015\">event page</a>.</p>") (pubDate nil "Wed, 26 Aug 2015 19:09:48 +0000")) (item nil (title nil "Matt Domsch: Dell Desktop / Notebook Linux Engineering position available") (guid nil "https://domsch.com/blog/?p=677") (link nil "https://domsch.com/blog/?p=677") (description nil "<p>Come help Dell ensure Linux “just works!” on Dell notebooks, desktops, and devices!  The Dell Client Linux Engineering team has opening for a Senior Software Engineer.  This team works closely with the Linux community, device manufacturers, and Dell engineering teams to provide the best Linux experience across the entire client product line.</p>
<p><a href=\"http://jobs.dell.com/us/texas/engineering/jobid7393338-software-dev-senior-engineer-jobs\" target=\"_blank\">Visit the Dell Jobs site to apply</a>.  If you’re a friend of mine and are interested, drop me a line and I’ll make sure you get in front of the hiring manager quickly!</p>") (pubDate nil "Wed, 19 Aug 2015 21:31:14 +0000")) (item nil (title nil "Matthew Garrett: Canonical's deliberately obfuscated IP policy") (guid nil "tag:dreamwidth.org,2011-02-12:696190:37113") (link nil "http://mjg59.dreamwidth.org/37113.html") (description nil "I bumped into Mark Shuttleworth today at Linuxcon and we had a brief conversation about Canonical's IP policy. The short summary:<ul><li>Canonical assert that the act of compilation creates copyright over the binaries, and you may not redistribute those binaries unless (a) the license prevents Canonical from restricting redistribution (eg, the GPL), or (b) you follow the terms of their IP policy. This means that, <a href=\"http://blog.dustinkirkland.com/2015/07/appellation-of-origin-from-ubuntu.html\">no matter what Dustin's blogpost says</a>, Canonical's position is that you must ask for permission before distributing any custom container images that contain Ubuntu binaries, even if you use no Ubuntu trademarks in the process. Doing so without their permission is an infringement of their copyright.<br /></li><li>Canonical have no intention of clarifying their policy, because Canonical benefit from companies being legally uncertain as to whether they have permission to do something or not.<br /></li><li>Mark justifies maintaining this uncertainty by drawing an analogy between it and the perceived uncertainties that exist around certain aspects of the GPL. I disagree with this analogy pretty strongly. One of the main reasons for the creation of GPLv3 was to deal with some more ambiguous aspects of GPLv2 (such as what actually happened after license termination and how patents interacted with the GPL). The FSF publish a <a href=\"http://www.gnu.org/licenses/gpl-faq.en.html\">large FAQ</a> intended to provide further clarity. The major ambiguity is in what a derivative work actually is, which is something the FSF can't answer absolutely (that's going to be up to courts) but will give its opinion on when asked. The uncertainties in Canonical's IP policy aren't a result of a lack of legal clarity - they're a result of Canonical's refusal to answer questions.</li></ul><br />The even shorter summary: Canonical won't clarify their IP policy because they believe they can make more money if they don't.<br /><br />Why do I keep talking about this? Because Canonical are deliberately making it difficult to create derivative works, and that's one of the core tenets of the <a href=\"http://www.gnu.org/philosophy/free-sw.en.html\">definition of free software</a>. Their IP policy is fundamentally incompatible with our community norms, and that's something we <em>should</em> care about rather than ignoring.<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=37113\" style=\"vertical-align: middle;\" width=\"30\" /> comments") (pubDate nil "Tue, 18 Aug 2015 19:02:52 +0000")) (item nil (title nil "Andi Kleen: Announcing simple-pt — A simple Processor Trace implementation") (guid nil "http://halobates.de/blog/?p=344") (link nil "http://halobates.de/blog/p/344") (description nil "<p>Modern Intel Core CPUs (5th and 6th generation) have a Intel Processor Trace (PT) feature to trace branch execution with low overhead. This is useful for performance analysis and debugging.</p>
<p>simple-pt is a simple standalone driver and decoder tool to implement PT on Linux.</p>
<p>Starting with Linux 4.1 Linux already has a integrated PT implementation in perf (see <a href=\"https://lwn.net/Articles/648154/\">https://lwn.net/Articles/648154/</a> ). simple-pt is an alternative implementation. It has many disadvantages over the perf PT implementation, such as:<br />
- needs to run as root<br />
- no long term tracing or sampling with interrupts<br />
- no support for interactive debugging (use gdb 7.10 on perf for that)<br />
- no support for histograms<br />
- somewhat experimental<br />
- not as well supported as perf</p>
<p>On the positive side simple-pt is:<br />
- simple<br />
- standalone. No kernel changes needed. Could be ported to older kernels or other operating systems<br />
- easy to modify and experiment with<br />
- more ftrace like decoding tool<br />
- support for kprobes based triggers<br />
- modular “unix style” design with simple tools that do only one thing each<br />
- BSD licensed</p>
<p>Example output:</p>
<pre><code>
        % sptcmd  -c tcall taskset -c 0 ./tcall
        cpu   0 offset 1027688,  1003 KB, writing to ptout.0
        ...
        Wrote sideband to ptout.sideband
        % sptdecode --sideband ptout.sideband --pt ptout.0 | less
        TIME      DELTA  INSNs   OPERATION
        frequency 32
        0        [+0]     [+   1] _dl_aux_init+436
                          [+   6] __libc_start_main+455 -&gt; _dl_discover_osversion
        ...
                          [+  13] __libc_start_main+446 -&gt; main
                          [+   9]     main+22 -&gt; f1
                          [+   4]             f1+9 -&gt; f2
                          [+   2]             f1+19 -&gt; f2
                          [+   5]     main+22 -&gt; f1
                          [+   4]             f1+9 -&gt; f2
                          [+   2]             f1+19 -&gt; f2
                          [+   5]     main+22 -&gt; f1
        ...
</code>
</pre>
<p>Available from <a href=\"https://github.com/andikleen/simple-pt\">https://github.com/andikleen/simple-pt</a></p>") (pubDate nil "Mon, 17 Aug 2015 04:27:33 +0000")) (item nil (title nil "Daniel Vetter: Atomic Modesetting Design Overview") (guid nil "tag:blogger.com,1999:blog-8047628228132312466.post-2572132837736503140") (link nil "http://blog.ffwll.ch/2015/08/atomic-modesetting-design-overview.html") (description nil "After a few years of development the atomic display update IOCTL for drm drivers is finally ready for prime time with the <a href=\"http://mid.mail-archive.com/alpine.DEB.2.00.1506260158440.13786@skynet.skynet.ie\">4.2 pull request from Dave Airlie</a>. It's been a long road, with a lot of drivers <a href=\"http://blog.ffwll.ch/2014/11/atomic-modeset-support-for-kms-drivers.html\">already converted over to atomic</a> and even more in progress, the <a href=\"http://blog.ffwll.ch/2015/01/update-for-atomic-display-updates.html\">atomic helper libraries and support code in the drm subsystem</a> sufficiently polished. But what's really missing is a design overview of what the overall atomic infrastructure looks like and why some decisions and details are implemented like they are.<br /><br />That's now done and published on LWN: <a href=\"https://lwn.net/Articles/653071/\">Part 1 talks about the problem space, issues with the Android atomic display framework and the basic atomic IOCTL interface.</a> <a href=\"https://lwn.net/Articles/653466/\">Part 2 goes into more detail about a few specific things like locking, helper library design and the exact semantics of atomic modessetting updates.</a> Happy Reading!") (pubDate nil "Sun, 16 Aug 2015 13:52:37 +0000")) (item nil (title nil "Rusty Russell: Broadband Speeds, New Data") (guid nil "http://rusty.ozlabs.org/?p=551") (link nil "http://rusty.ozlabs.org/?p=551") (description nil "<p>Thanks to edmundedgar <a href=\"https://www.reddit.com/r/Bitcoin/comments/3goooc/remember_the_internet_speed_roughly_doubles_every/cu05dbm\">on reddit</a> I have some more accurate data to update my previous <a href=\"http://rusty.ozlabs.org/?p=493\">bandwidth growth estimation post</a>: OFCOM UK, who released their November 2014 report on <a href=\"http://stakeholders.ofcom.org.uk/market-data-research/other/telecoms-research/broadband-speeds/broadband-speeds-november2014/\">average broadband speeds</a>.  Whereas Akamai numbers could be lowered by the increase in mobile connections, this directly measures actual broadband speeds.</p>
<p>Extracting the figures gives:</p>
<ol>
<li>Average download speed in <a href=\"http://media.ofcom.org.uk/news/2013/average-uk-broadband-speeds-hit-double-figures/\">November 2008 was 3.6Mbit</a></li>
<li>Average download speed in November 2014 was 22.8Mbit</li>
<li>Average upload speed in November 2014 was 2.9Mbit</li>
<li>Average upload speed in <a href=\"http://stakeholders.ofcom.org.uk/binaries/research/telecoms-research/broadbandspeeds.pdf\">November 2008 to April 2009</a> was 0.43Mbit/s</li>
</ol>
<p>So in 6 years, downloads went up by 6.333 times, and uploads went up by 6.75 times.  That’s an annual increase of 36% for downloads and 37% for uploads; that’s good, as it <strong>implies we can use download speed factor increases as a proxy for upload speed increases</strong> (as upload speed is just as important for a peer-to-peer network).</p>
<p>This compares with my previous post’s <a href=\"https://www.akamai.com/us/en/our-thinking/state-of-the-internet-report/state-of-the-internet-map.jsp#stoi-graph\">Akamai’s UK numbers</a> of 3.526Mbit in Q4 2008 and 10.874Mbit in Q4 2014: only a factor of 3.08 (26% per annum).  Given how close Akamai’s numbers were to OFCOM’s in November 2008 (a year after the <a href=\"https://en.wikipedia.org/wiki/IPhone\">iPhone UK release</a>, but probably too early for mobile to have significant effect), it’s reasonable to assume that mobile plays a large part of this difference.</p>
<p>If we assume Akamai’s numbers reflected real broadband rates prior to November 2008, we can also use it to extend the OFCOM data back a year: this is important since there was almost no bandwidth growth according to Akamai from Q4 2007 to Q7 2008: ignoring that period gives a rosier picture than my last post, and smells of cherrypicking data.</p>
<p>So, let’s say the UK went from 3.265Mbit in Q4 2007 (Akamai numbers) to 22.8Mbit in Q4 2014 (OFCOM numbers).  That’s a factor of 6.98, or <strong>32% increase per annum for the UK</strong>. If we assume that the US Akamai data is under-representing Q4 2014 speeds by the same factor (6.333 / 3.08 = 2.056) as the UK data, that implies the US went from 3.644Mbit in Q4 2007 to 11.061 * 2.056 = 22.74Mbit in Q4 2014, giving a factor of 6.24, or <strong>30% increase per annum for the US.</strong></p>
<p>As stated previously, China is now where the US and UK were 7 years ago, suggesting they’re a reasonable model for future growth for that region.  Thus I revise my bandwidth estimates; <strong>instead of 17% per annum this suggests 30% per annum as a reasonable growth rate</strong>.</p>") (pubDate nil "Sat, 15 Aug 2015 04:54:38 +0000")) (item nil (title nil "Pete Zaitcev: Tablet Uber Alles Or Is It") (guid nil "http://zaitcev.livejournal.com/229212.html") (link nil "http://zaitcev.livejournal.com/229212.html") (description nil "<p>Given the trouble with modern laptops, I'm seriously thinking if I should make a jump to a gigantic tablet with a keyboard. You run \"make\" on VM. Not enough RAM? Order in the cloud! The idea was planted in my mind by that jerk Atwood, who penned an article claiming a death of PC. And a month ago I saw someone at Python meetup using Canopy. It kinda worked, actually. I expect Github Atom to be even better.</p>
<p>Unfortunately, there are problems in 3 broad categories still.</p>
<p>First, the hotspot Internet connectivity sucks. It is plain unreliable. VPN, ssh, and IRC are often blocked; it's necessary to remember \"Connectivity Through Anything\" lessons and tehcniques. When it works, it's often slow. These problems extend to venues such as Intel's Executive Briefing Center. If \"executives\" eating their awesome snacks cannot obtain a decent WiFi, what hope do I have? I do not have cellphone data, but I hear bitching about it.</p>
<p>Second, the usual questions about privacy and security apply. Non-proprietary tablets suck immensely, from what I heard.</p>
<p>Third, tablets top out at 10..11 inch. Sorry, but that is not enough to kill laptops while laptops continue to be made. Certainly, Atwood made an argument that as tablets absorb users, PC makers will stop. The day the last one quits, we'll have to use the least shitty tablet regardless of size. But today is not that day.</p>
<p>UPDATE: 3 weeks after this post, Apple unveiled a 12.9\" (2732 x 2048) iPad Pro, with a keyboard as a factory option.</p>") (pubDate nil "Fri, 14 Aug 2015 21:38:57 +0000")) (item nil (title nil "Pete Zaitcev: User-facing hardware") (guid nil "http://zaitcev.livejournal.com/229104.html") (link nil "http://zaitcev.livejournal.com/229104.html") (description nil "<p>New business trip, new hardware pictures.</p>
<img height=\"480\" src=\"http://www.zaitcev.us/things/lj/2015/20150814a2.jpg\" width=\"640\" />
<p>It was almost <a href=\"http://zaitcev.livejournal.com/224320.html\" rel=\"nofollow\">a year</a>, and I'm still looking for a decent laptop, same criteria. I saw a couple of guys using Lenovo X1 Carbon, which looks good. Most importantly, the left Ctrl is now extends to its proper position. Almost a winner, but unfortunately, there are issues. Apparently, the screen on the X1 is not touching the main frame flat when it's closed, so a bundle of clothing pressing in the middle between the hinges is capable to making a nasty crack in plastic. Not acceptable for what is a $1,400 laptop even with <a href=\"http://www.amazon.com/Lenovo-ThinkPad-Generation-20BS-Ultrabook/dp/B00W8W5DJQ/\" rel=\"nofollow\">Amazon's \"discount\"</a> of $900. Way to go, Lenovo. Almost had me this time.</p>
<p>Meanwhile, a $500 Dell Vostro continues to soldier on. It's showing its age: building Ceph with \"make -j${N}\" requires more RAM that it has for any reasonable N, and dialog windows started to outgrow its screen (notably, some of GNOME preferences). I still need a laptop, but can't find a suitable one. The Lenovo X1 tops out at 8GB, which was another strike against it.</p>
<img height=\"414\" src=\"http://www.zaitcev.us/things/lj/2015/20150814a1.jpg\" width=\"320\" />
<p>I was a little sad when Google stopped making Nexus 7. I have a 2013 version and it is quite good. In the same meeting, I bumped into a guy with a projected update to Nexus 7 that became orphaned when Google pulled the plug. ASUS continued to build them and market them as \"MemoPad 7\". However, taking the page from Microsoft playbook with their \"Surface\" and \"Surface Pro\", ASUS sell \"MemoPad 7\" versions ranging from worthless piece of junk with 1024x600 to actual Nexus 7 replacements with 1920x1200. Allegedly, the battery life and speed are much improved by using Intel's embedded Atom core. Some of the ARM-optimized apps may not work (example is some kind of music editing thing for podcasters).</p>") (pubDate nil "Fri, 14 Aug 2015 21:18:03 +0000")) (item nil (title nil "Dave Jones: The case of the mysterious disappearing I211") (guid nil "http://codemonkey.org.uk/?p=763") (link nil "http://codemonkey.org.uk/2015/08/13/case-mysterious-disappearing-i211/") (description nil "<p>Day one of unemployed life saw me finally getting around to the first of several hardware related maintenance items that I’ve been putting off until I’ve had the time.</p>
<p>I got a lot of life out of my desktop machine that I had been using since 2007. Earlier this year, I decided it was long overdue an upgrade, and ended up building a ridiculously over-specced machine in the hopes it too would last me a while.  After some research, I ended up with a 6-core Haswell-E i7-5820K, and a <a href=\"http://www.amazon.com/gp/product/B00TXBP1OW/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00TXBP1OW&amp;linkCode=as2&amp;tag=codemonkeyorg-20&amp;linkId=TOJP22CCMQZB5IFF\">frankly ridiculously over-featured motherboard</a><img alt=\"\" border=\"0\" height=\"1\" src=\"http://ir-na.amazon-adsystem.com/e/ir?t=codemonkeyorg-20&amp;l=as2&amp;o=1&amp;a=B00TXBP1OW\" style=\"border: none !important; margin: 0px !important;\" width=\"1\" />.<br />
Once I had delved through the absurd number of BIOS options to convince it that I *really* didn’t want to overclock my CPU or my RAM, or anything else, it was very stable.</p>
<p>It has exceeded all my expectations. In the time it took my old desktop to build one kernel, I can build kernel .deb’s for every machine I own, and still have time spare. It’s an absolute beast.</p>
<p>One of the features that sold me on this board was the two onboard ethernet ports.  I had been wanting to do a bunch of networking experiments, and the possibility of using bonding, without having to screw around with add-in cards was appealing.</p>
<p>So I was a little irked one evening after updating its BIOS, to notice that the bond only had one interface active. After some investigation, I noticed that the PCI ID of one of the onboard NICs had changed.</p>
<p>What was once</p>
<pre>00:19.0 Ethernet controller: Intel Corporation Ethernet Connection (2) I218-V (rev 05)
08:00.0 Ethernet controller: Intel Corporation I211 Gigabit Network Connection (rev 03)
</pre>
<p>Was now</p>
<pre>00:19.0 Ethernet controller: Intel Corporation Ethernet Connection (2) I218-V (rev 05)
08:00.0 Ethernet controller: Intel Corporation Device 1532 (rev 03)
</pre>
<p>My I211 had changed its PCI ID, and the e1000 driver wouldn’t bind to this new device.</p>
<p>At first I thought “Cool, some kind of NIC firmware update”, and assumed that e1000 hadn’t been updated yet to support this new feature. Googling for “i211 1532” told a much sadder story however.</p>
<p>If you read the <a href=\"https://www-ssl.intel.com/content/dam/www/public/us/en/documents/specification-updates/i211-ethernet-controller-spec-update.pdf\">spec update for the i211</a>, you find this interesting table:</p>
<table>
<tbody><tr>
<td>I211 Device ID Code</td>
<td>Vendor ID</td>
<td>Device ID</td>
<td>Revision ID1</td>
</tr>
<tr>
<td>WGI211AT (not programmed/factory default)</td>
<td>0x8086</td>
<td>0x1532</td>
<td>0x3</td>
</tr>
<tr>
<td>WGI211AT (programmed)</td>
<td>0x8086</td>
<td>0x1539</td>
<td>0x3</td>
</tr>
</tbody></table>
<p>Uh, not cool. Somehow the BIOS update procedure had wiped the NVRAM on the NIC.</p>
<p>A long protracted conversation with ASUS support followed, including such gems as “I understand you’re seeing blue screens” and “Have you tried removing the DIMMs, rubbing the contacts with an eraser and replacing them”.  Eventually I think they got to the end of their script, and agreed to RMA the board. Somewhat annoying, given there’s probably a tool somewhere that can rewrite the flash, but Intel only seems to make that available to integrators, not end-users, and the ASUS representatives denied all knowledge.</p>
<p>It was gone for about two weeks, and finally returned yesterday.  Its PCI ID is 0x1539 again, and it has its old MAC address once more. (I’m now hesitant to ever upgrade the BIOS on this machine again). So what happened ? Anyone’s guess, but this isn’t the first time I’ve seen this happen. We had a bunch of these NICs at Akamai too that occasionally had the same thing happen to them.</p>
<p>The whole thing is reminiscent of a painful old bug where <a href=\"https://lwn.net/Articles/304105/\">ftrace would corrupt the e1000e ROM</a>. Hopefully Linux isn’t to blame this time.</p>
<p>So, long story short: If you see an i211 with a PCI ID of 1532, you’re looking at an RMA.</p>
<p>The post <a href=\"http://codemonkey.org.uk/2015/08/13/case-mysterious-disappearing-i211/\" rel=\"nofollow\">The case of the mysterious disappearing I211</a> appeared first on <a href=\"http://codemonkey.org.uk\" rel=\"nofollow\">codemonkey.org.uk</a>.</p>
<div class=\"yarpp-related-rss\">
<p>Related posts:</p><ol>
<li><a href=\"http://codemonkey.org.uk/2015/02/22/backup-solutions/\" rel=\"bookmark\" title=\"backup solutions.\">backup solutions. </a> <small>For the longest time, my backup solution has been a...</small></li>
</ol><p></p>
</div>") (pubDate nil "Thu, 13 Aug 2015 16:09:00 +0000")) (item nil (title nil "Dave Jones: Moving on from Akamai.") (guid nil "http://codemonkey.org.uk/?p=762") (link nil "http://codemonkey.org.uk/2015/08/11/moving-on-from-akamai/") (description nil "<p>Today was my last day at Akamai.  It’s been brief (Just over seven months), but things weren’t really working out for me there for a number of reasons. I’ve mentioned to a number of people who have known about my decision for a while, that it’s not that it’s a bad place to work, but it never felt like a good fit for me, and I came to realize that I’ve spent most of this last year being in denial of just how unhappy I was, in the hope “things would get better”.</p>
<p>There are a lot of smart people working there, working on really difficult problems, but a lot of those problems just don’t align with my interests, especially when they don’t always involve contributing code back upstream. [clarification: There is some upstream work going on there, just not as much as I’d like].</p>
<p>Add to this my disdain for some of the proprietary tooling that’s prevalent there, and it was becoming clear it was not a matter of “if”, but “when” I was going to leave.  As an example; I joked a few months ago to co-workers “next time I’m looking for a job, the first question I ask is ‘do you use perforce’?”. Only it wasn’t really a joke, I was dead serious. User-hostile software has no place in my life.<br />
Even little things like “let’s use git” translating to “let’s license Atlassian stash” rather than “run a git-daemon somewhere” started getting me down.</p>
<p>The final project I worked on there was a continuous rebase strategy for the kernel, moving away from perforce to git. It’s a move in the right direction, but ultimately, not the sort of work that gets me excited, and it’s going to be a multi-year project before it starts really bearing fruit. Given how perforce is ingrained in so many of Akamai’s systems, it would also have been extremely unlikely I’d have been able to purge all knowledge of ever having used it.</p>
<p>The rebase work itself also started to bother me that many of the kernel changes we made had no chance of ever even being submitted, let alone accepted upstream. (In part because many of them are very unique to Akamai’s CDN — you won’t find any of the trickery employed there described in a Richard Stevens book, and they’re unlikely to ever be official RFC’s due to the competitive edge they gain from those changes).<br />
There are exceptions to all of this, and the kernel team is trying to do a better job there with upstreaming most of the newer changes, but many of the older legacy patches are under-documented, and/or understood well by few people, with the original authors no longer around, making it a frustrating exercise to get up to speed; especially when you’re trying to learn what the upstream code is doing at the same time.</p>
<p>Someone with less experience dealing exclusively with open-source for most of their career would probably find many of my reasons for leaving trivial. Those same people would probably find Akamai a great place to work. There are a lot of opportunities there if you have a higher tolerance for such things than I did.  It was eye-opening recently, mentoring some of the interns there. Optimism. The unjaded outlook that comes with youth. Not getting bent out of shape at crappy tooling because they don’t know different. It made me realize I wasn’t going to ever be like this here.</p>
<p>On a particularly bad day a few weeks back, a recruiter reached out to me, to find out if I was interested in a second chance at an offer I received last time I was looking for a new job.  It worked. Enduring an unhappy situation in the hopes things will get better isn’t a great strategy when there are other options.</p>
<p>So, I start at Facebook in September.</p>
<p>I have no delusions that things are going to be perfect there, but at least from the outside right now, the grass looks greener.  I feel bad walking away from problems unfinished, but going home miserable or angry or some other negative emotion every day was really starting to get take its toll. It’s not a healthy way to live.</p>
<p>When I was interviewing last December, I read <a href=\"http://www.amazon.com/gp/product/0596155409/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596155409&amp;linkCode=as2&amp;tag=codemonkeyorg-20&amp;linkId=OZPDBCDEUGM3OPQK\">Being Geek</a><img alt=\"\" border=\"0\" height=\"1\" src=\"http://ir-na.amazon-adsystem.com/e/ir?t=codemonkeyorg-20&amp;l=as2&amp;o=1&amp;a=0596155409\" style=\"border: none !important; margin: 0px !important;\" width=\"1\" /> to death, so it’s fitting that I’ve picked it up again recently. One paragraph in particular jumps out at me.</p>
<pre>My single worst gig was one where I got everything I wanted out the of the offer letter, but in my exuberance for being highly valued, I totally forgot that my gut read on the gig was \"meh\". Ninety days later, I couldn't care less that I got a 15% raise and a sign-on bonus. I couldn't stand the mundanity of the daily work, and I happily resigned a few months later, taking both a pay cut and returning my sign-on bonus for the opportunity to work at Netscape.</pre>
<p>Anachronisms and minor details aside, that paragraph played through my head this afternoon as I wrote the check to pay back the remainder of my sign-on bonus. I wasn’t quite thinking “meh”, but I knew I was making compromises on what I really valued from day one.</p>
<p>Walking away from unvested RSUs, giving up this months paycheck, and writing that check stings a little, but when I did my exit interview this morning, I knew that I too, was “happily resigning” for a great opportunity.</p>
<p>I’m feeling uncharacteristically optimistic right now. Hopefully it’ll last.</p>
<p>I’ll be in Seattle next week, but due to complications with my registration being transferred to another Akamai employee, I won’t actually be at the <a href=\"https://linuxplumbersconf.org/2015/\">Linux plumbers conf</a>. If you’re also going to be there and want to catch up, drop me a mail, or &lt;ahem&gt; hit me up on facebook.</p>
<p>The post <a href=\"http://codemonkey.org.uk/2015/08/11/moving-on-from-akamai/\" rel=\"nofollow\">Moving on from Akamai.</a> appeared first on <a href=\"http://codemonkey.org.uk\" rel=\"nofollow\">codemonkey.org.uk</a>.</p>
<div class=\"yarpp-related-rss\">
<p>Related posts:</p><ol>
<li><a href=\"http://codemonkey.org.uk/2014/12/19/moving-on-from-rht/\" rel=\"bookmark\" title=\"Moving on from Red Hat.\">Moving on from Red Hat. </a> <small>After eleven and a half years, today is my final...</small></li>
<li><a href=\"http://codemonkey.org.uk/2015/01/08/job-reveal/\" rel=\"bookmark\" title=\"the new job reveal.\">the new job reveal. </a> <small>I let the cat out of the bag earlier this...</small></li>
<li><a href=\"http://codemonkey.org.uk/2015/03/13/lsfmm-2015-recap/\" rel=\"bookmark\" title=\"LSF/MM 2015 recap.\">LSF/MM 2015 recap. </a> <small>It’s been a long week. Spent Monday/Tuesday at LSFMM. This...</small></li>
</ol><p></p>
</div>") (pubDate nil "Tue, 11 Aug 2015 22:33:41 +0000")) (item nil (title nil "Pete Zaitcev: git submodule") (guid nil "http://zaitcev.livejournal.com/228768.html") (link nil "http://zaitcev.livejournal.com/228768.html") (description nil "<p>It's a familiar sign to anyone dealing with a project that includes submodules: you run \"make\" and see something like this:</p>
<p><code>
rgw/rgw_main.cc: In member function ‘virtual int RGWMongooseFrontend::run()’:<br />
rgw/rgw_main.cc:993:8: error: ‘struct mg_callbacks’ has no member named ‘log_access’<br />
     cb.log_access = rgw_civetweb_log_access_callback;<br />
        ^<br />
</code></p>
<p>Ah, yes. Submodule civetweb is obviously out of date. Type \"git submodule init; git submodule update\" and... nothing happens. The goddamn submodules are <b>stuck</b>.</p>
<p>At this point, running \"git diff origin\" produces an output like:</p>
<p><code>
--- a/ceph-object-corpus<br />
+++ b/ceph-object-corpus<br />
@@ -1 +1 @@<br />
-Subproject commit <b>20351c6bae6dd4802936a5a9fd76e41b8ce2bad0</b><br />
+Subproject commit bb3cee6b85b93210af5fb2c65a33f3000e341a11<br />
</code></p>
<p>So yeah, obviously you fetched the right thing from the origin, but you cannot merge or rebase no matter what. You may spend a good part of a hackathon reading man pages for git subcommands, all for naught.</p>
<p>Fortunately, the stuck submodules can be worked around, by looking at the \"git diff origin\" above, then doing this:</p>
<p><code>
git update-index --replace --cacheinfo 160000,<b>20351c6bae6dd4802936a5a9fd76e41b8ce2bad0</b>,ceph-object-corpus<br />
</code></p>
<p>You get the idea: force the right commit from the origin into the local index. This allows \"git submodule update\" to clone and checkout the right thing and you're off to the races. The fixups in the index will stick out in \"git status\", so create an empty commit to get rid of them (but only after \"git submodule update\").</p>
<p>When you're done, you might want to kick in the nuts whoever chose to use submodules in your project.</p>
<p>P.S. \"git --version\" yields \"git version 2.4.3\".</p>
<p>P.P.S. You verify what you have in the index by running \"git ls-files -s ceph-object-corpus\" (or src/civetweb). The mode must be 160000 and the hash should match the upstream. Note that \"git diff origin\" continues to display a disparity until you've run the \"git submodules update\".</p>") (pubDate nil "Tue, 11 Aug 2015 03:08:55 +0000")) (item nil (title nil "Pete Zaitcev: the future is here") (guid nil "http://zaitcev.livejournal.com/228523.html") (link nil "http://zaitcev.livejournal.com/228523.html") (description nil "<p>Behold:</p>
<p></p><pre><code>
  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
10005 zaitcev   20   0  809920 755384  13220 R  99.7 12.5   0:20.47 cc1plus
 9894 zaitcev   20   0 1946748 <b>1.806g</b>  15800 R  99.3 31.4   1:46.60 cc1plus
 9956 zaitcev   20   0 1652076 <b>1.524g</b>  15832 R  99.0 26.5   1:30.64 cc1plus
   72 root      20   0       0      0      0 S   4.0  0.0   0:04.60 kswapd0
 9957 zaitcev   20   0   56648  43536   1436 S   2.7  0.7   0:00.49 as
 9895 zaitcev   20   0   79480  66368   1480 S   2.0  1.1   0:00.89 as
 2870 zaitcev   20   0 1989524 <b>533104</b> 160868 S   1.3  8.9  60:28.10 firefox
 2035 zaitcev   20   0 2018216 166872  20028 S   0.7  2.8  16:50.66 gnome-sh
</code></pre><p></p>
<p>That's right, boys and girls, a compiler with a bigger resident size than Firefox. Three times bigger.</p>") (pubDate nil "Tue, 11 Aug 2015 02:12:29 +0000")) (item nil (title nil "Lucas De Marchi: “Throw away” linux images in seconds") (guid nil "tag:www.politreco.com,2015-08-10:2015/08/10/throw-away-linux-images-in-seconds/") (link nil "http://www.politreco.com/2015/08/10/throw-away-linux-images-in-seconds/") (description nil "<p>Generating a new rootfs from scratch in order to test changes to early
parts of the software stack or just to have a pristine environment is
something I needed several times in the past.</p>
<p>Since I use Archlinux in my desktop something that I like is to have a
similar environment in the target test rootfs. I decided to re-use and
improve a script from Kay Sievers to create an installer that can be
booted as a <span class=\"caps\">VM</span>, as a container or in bare metal:
<a href=\"https://github.com/lucasdemarchi/toolbox/blob/master/arch-installer.sh\">arch-installer.sh</a>.
Originally  it was a script to bootstrap a Fedora image and I think that
with some small changes that would still be possible.</p>
<div class=\"highlight\"><pre><span class=\"nv\">$ </span><span class=\"nb\">time </span>sudo arch-installer.sh -l ~/vm/test.img
...
real 0m31.238s
user 0m22.277s
sys 0m2.473s
</pre></div>


<p>30 seconds later I have a complete pristine image that can be used as a
<span class=\"caps\">VM</span> with qemu, as a container with systemd-nspawn or just copied to a
pendrive/sdcard to boot for example a Minnow Board Max.</p>
<p>Container:</p>
<div class=\"highlight\"><pre><span class=\"nv\">$ </span>sudo systemd-nspawn -b -i ~/vm/test.img
</pre></div>


<p><span class=\"caps\">VM</span>:</p>
<div class=\"highlight\"><pre>sudo kvm-that ~/vm/test.img
</pre></div>


<p>Note: ‘kvm-that’ is also a script available in the same repository so I
don’t have to type all the options to qemu.</p>
<p>In order to boot another computer or a board like Minnow Board Max just
dd the image to a usb disk or sdcard. You can also generate the image
directly to the final destination:</p>
<div class=\"highlight\"><pre>$ sudo arch-installer.sh -l /dev/mmcblk0
</pre></div>


<p>The script has also some nice options to make it easy to customize the
final image.  One thing that I’m often doing is giving an overlay
directory with configuration files for wpa_supplicant. This way I can
already access my WiFi networks in the target image.</p>
<p>If you always need certain packages you can use the  example
<a href=\"https://github.com/lucasdemarchi/toolbox/blob/master/arch-installer-hooks/debug-tools\">debug-tools</a>
hook that is executed before the image is finalized. By mixing hooks
like that and the overlay directory mentioned above it’s possible to add
your local repository to pacman.conf and install packages not available
in Archlinux. Or packages that you’d like to maintain on your own. In my
use cases with Minnow Board Max I maintain my own kernel with
configurations suited to run ardupilot on it.</p>") (pubDate nil "Mon, 10 Aug 2015 15:44:00 +0000")))) ("Pavel Machek: N900: Found a way to do rotation in X" "<div>...which is needed for control by single hand. Unfortunately, xrandr <span style=\"line-height: 1.4;\">refuses to rotate on N900 for some reason, so I'm doing Xephyr and</span></div><div><i>then</i> xrandr.<br /><br /><b>...and looking for better ssh.</b><br /><br /><div>Sitting at the train, ssh-ing from laptop to phone, with second phone <span style=\"line-height: 1.4;\">providing hotspot (okay, I do feel a bit silly). Now... this does not work too well. First, I had to </span><span style=\"line-height: 1.4;\">manually copy the IP address, and second, I did not really verify the </span><span style=\"line-height: 1.4;\">ssh key. And as IP address changes, I'd have to do it each </span><span style=\"line-height: 1.4;\">time. Better solution would be welcome.</span></div><div>I want to connect to my phone, no matter what IP address it has. If possible, I'd like the keys to b<span style=\"line-height: 1.4;\">e checked during connection, too.</span></div><br /></div>" "http://pavelmachek.livejournal.com/130337.html" (22154 9783) old 5 nil nil ((title nil "Pavel Machek: N900: Found a way to do rotation in X") (guid nil "http://pavelmachek.livejournal.com/130337.html") (link nil "http://pavelmachek.livejournal.com/130337.html") (description nil "<div>...which is needed for control by single hand. Unfortunately, xrandr <span style=\"line-height: 1.4;\">refuses to rotate on N900 for some reason, so I'm doing Xephyr and</span></div><div><i>then</i> xrandr.<br /><br /><b>...and looking for better ssh.</b><br /><br /><div>Sitting at the train, ssh-ing from laptop to phone, with second phone <span style=\"line-height: 1.4;\">providing hotspot (okay, I do feel a bit silly). Now... this does not work too well. First, I had to </span><span style=\"line-height: 1.4;\">manually copy the IP address, and second, I did not really verify the </span><span style=\"line-height: 1.4;\">ssh key. And as IP address changes, I'd have to do it each </span><span style=\"line-height: 1.4;\">time. Better solution would be welcome.</span></div><div>I want to connect to my phone, no matter what IP address it has. If possible, I'd like the keys to b<span style=\"line-height: 1.4;\">e checked during connection, too.</span></div><br /></div>") (pubDate nil "Mon, 04 Jan 2016 07:58:47 +0000"))) ("Rusty Russell: Bitcoin And Stuck Transactions?" "<p>One problem of filling blocks is that transactions with too-low fees will get “stuck”; I’ve read about such things happening on Reddit.  Then one of my coworkers told me that those he looked at were simply never broadcast properly, and broadcasting them manually fixed it.  Which lead both of us to wonder how often it’s <strong>really</strong> happening…</p>
<p>My approach is to look at the last 2 years of block data, and make a simple model:</p>
<ol>
<li>I assume the tx is not a priority tx (some miners reserve space for these; default 50k).</li>
<li>I judge the “minimum feerate to get into a block” as the smallest feerate for any transaction after the first 50k beyond the coinbase (this is an artifact of how bitcoin core builds transactions; priority area first).</li>
<li>I assume the tx won’t be included in “empty” blocks with only a coinbase or a single non-coinbase tx (SPV mining); their feerate is “infinite”.</li>
</ol>
<p>Now, what feerate do we assume?  The default “dumb wallet” fee is 10000 satoshi per kilobyte: bitcoin-core doesn’t do this pro-rata, so a median 300-byte transaction still pays 10000 satoshi by default (fee-per-byte 33.33).  The worse case is a transaction of exactly 1000 bytes (or, a wallet which does pro-rata fees), which would have a fee-per-byte of 10.</p>
<p>So let’s consider the last two years (since block 277918).  How many blocks in a row we see with a fee-per-byte &gt; 33.33, and how many we see with a feerate of &gt; 10:</p>
<p><img alt=\"\" class=\"alignnone\" height=\"456\" src=\"http://ozlabs.org/~rusty/diagrams/feerate-33.33-blockdelay.png\" width=\"1184\" /></p>
<p><img alt=\"\" class=\"alignnone\" height=\"456\" src=\"http://ozlabs.org/~rusty/diagrams/feerate-10-blockdelay.png\" width=\"1184\" /></p>
<h2>Conclusion</h2>
<p>In the last two years you would <strong>never</strong> have experienced a delay of more than 10 blocks for a median-size transaction with a 10,000 satoshi fee.</p>
<p>For a 1000-byte transaction paying the same fee, you would have experienced a 10 block delay 0.7% of the time, with a 20+ block delay on eight occasions: the worse being a 26 block delay at block 382918 (just under 5 hours).  But note that this fee is insufficient to be included in 40% of blocks during the last two years, too; if your wallet is generating such things without warning you, it’s time to switch wallets!</p>
<p><strong>Stuck low-fee transactions are not a real user problem yet</strong>.  It’s good to see adoption of smarter wallets, though, because it’s expected that they will be in the near future…</p>" "http://rusty.ozlabs.org/?p=573" (22153 40875) old 6 nil nil ((title nil "Rusty Russell: Bitcoin And Stuck Transactions?") (guid nil "http://rusty.ozlabs.org/?p=573") (link nil "http://rusty.ozlabs.org/?p=573") (description nil "<p>One problem of filling blocks is that transactions with too-low fees will get “stuck”; I’ve read about such things happening on Reddit.  Then one of my coworkers told me that those he looked at were simply never broadcast properly, and broadcasting them manually fixed it.  Which lead both of us to wonder how often it’s <strong>really</strong> happening…</p>
<p>My approach is to look at the last 2 years of block data, and make a simple model:</p>
<ol>
<li>I assume the tx is not a priority tx (some miners reserve space for these; default 50k).</li>
<li>I judge the “minimum feerate to get into a block” as the smallest feerate for any transaction after the first 50k beyond the coinbase (this is an artifact of how bitcoin core builds transactions; priority area first).</li>
<li>I assume the tx won’t be included in “empty” blocks with only a coinbase or a single non-coinbase tx (SPV mining); their feerate is “infinite”.</li>
</ol>
<p>Now, what feerate do we assume?  The default “dumb wallet” fee is 10000 satoshi per kilobyte: bitcoin-core doesn’t do this pro-rata, so a median 300-byte transaction still pays 10000 satoshi by default (fee-per-byte 33.33).  The worse case is a transaction of exactly 1000 bytes (or, a wallet which does pro-rata fees), which would have a fee-per-byte of 10.</p>
<p>So let’s consider the last two years (since block 277918).  How many blocks in a row we see with a fee-per-byte &gt; 33.33, and how many we see with a feerate of &gt; 10:</p>
<p><img alt=\"\" class=\"alignnone\" height=\"456\" src=\"http://ozlabs.org/~rusty/diagrams/feerate-33.33-blockdelay.png\" width=\"1184\" /></p>
<p><img alt=\"\" class=\"alignnone\" height=\"456\" src=\"http://ozlabs.org/~rusty/diagrams/feerate-10-blockdelay.png\" width=\"1184\" /></p>
<h2>Conclusion</h2>
<p>In the last two years you would <strong>never</strong> have experienced a delay of more than 10 blocks for a median-size transaction with a 10,000 satoshi fee.</p>
<p>For a 1000-byte transaction paying the same fee, you would have experienced a 10 block delay 0.7% of the time, with a 20+ block delay on eight occasions: the worse being a 26 block delay at block 382918 (just under 5 hours).  But note that this fee is insufficient to be included in 40% of blocks during the last two years, too; if your wallet is generating such things without warning you, it’s time to switch wallets!</p>
<p><strong>Stuck low-fee transactions are not a real user problem yet</strong>.  It’s good to see adoption of smarter wallets, though, because it’s expected that they will be in the near future…</p>") (pubDate nil "Sun, 03 Jan 2016 22:24:43 +0000"))) ("James Bottomley: A Modest Proposal on the DCO" "<p>In <a href=\"http://blog.hansenpartnership.com/the-dco-patents-and-openstack\">this post</a>, I discussed why corporations are having trouble regarding the DCO as sufficient for contributions to projects using licences which require patent grants.  The fear being that rogue corporations could legitimately claim that under the DCO they were authorizing their developers as agents for copyrights but not for patents.  Rather than argue about the legality of this trick, I think it will be much more productive to move the environment forwards to a place where it simply won’t work.  The key to doing this is to change the expectations of the corporate players which moves them to the point where they expect that a corporate signoff under the DCO gives agency for both patents and copyrights because once this happens for most of them (the good actors), the usual estoppal rules would make it apply to all.</p>
<p>The fact is that even though corporate lawyers fear that agency might not exist for patent grants via DCO signoffs in contributions, all legitimate corporate entities who make bona fide code contributions wish to effect this anyway; that’s why they go to the additional lengths of setting up Contributor Licence Agreements and signing them.  The corollary here is that really only a bad actor in the ecosystem wishes to perpetuate the myth that patents aren’t handled by the DCO.  So if all good actors want the system to work correctly anyway, how do we make it so?</p>
<p>The lever that will help to make this move is a simple pledge, which can be published on a corporate website,  that allows corporations expecting to make legitimate contributions to patent binding licences under the DCO to do so properly without needing any additional Contributor Licence Agreements.  Essentially it would be an explicit statement that when their developers submit code to a project under the DCO using a corporate signoff, they’re acting as agents for the necessary patent and copyright grants, meaning you can always trust a DCO signoff from that corporation.  When enough corporations do this, it becomes standard practice and thus expectations on the DCO have moved to the point we originally assumed they were at, so here’s the proposal for what such a statement would look like.</p>
<hr />
<p> </p>
<h2>Corporate Contribution Pledge</h2>
<h3>Preamble</h3>
<p>It is our expectation that any <a href=\"http://developercertificate.org/\">DCO</a> signoff from a corporate email address binds that corporation to grant all necessary copyright and, where required, patent rights to satisfy the terms of the licence.  Accordingly, we are publishing this pledge to illustrate how, as a matter of best practice, we implement this expectation.</p>
<p>For the purposes of this pledge, our corporate email domain is <em>@bigcorp.com</em> and its subdomains.</p>
<h3>Limitations</h3>
<ol>
<li>This pledge only applies to projects which use an OSI accepted Open Source  licence and which also use a developer certificate of origin (DCO).</li>
<li>No authority is given under this pledge to sign contribution agreements on behalf of the company or otherwise bind it except by contributing code under an OSI approved licence and DCO process.</li>
<li>No authority is given under this pledge if a developer, who may be our employee, posts patches under an email address which is not our corporate email domain above.</li>
<li>No trademarks of this corporation may ever be bound under this pledge.</li>
<li>Except as stated below, no other warranty, express or implied, is made on behalf of the contribution, including, but not limited to, fitness of the code for a specific purpose or merchantability.  The entire risk of the quality and performance of this contribution rests with the recipient.</li>
</ol>
<h3>Warranties</h3>
<ol>
<li>Our corporation trains its Open Source contributors carefully to understand when they may and may not post patches from our corporate email domain and to obtain all necessary internal clearances according to our processes before making such a posting.</li>
<li>When one of our developers posts a patch to a project under an OSI approved licence with a DCO Signed-off-by: from our corporate email domain, we authorise that developer to be our agent in the minimum set of patent and copyright grants that are required to satisfy the terms of the OSI approved licence for the contribution.</li>
</ol>" "http://blog.hansenpartnership.com/a-modest-proposal-on-the-dco/" (22152 12906) old 7 nil nil ((title nil "James Bottomley: A Modest Proposal on the DCO") (guid nil "http://blog.hansenpartnership.com/?p=314") (link nil "http://blog.hansenpartnership.com/a-modest-proposal-on-the-dco/") (description nil "<p>In <a href=\"http://blog.hansenpartnership.com/the-dco-patents-and-openstack\">this post</a>, I discussed why corporations are having trouble regarding the DCO as sufficient for contributions to projects using licences which require patent grants.  The fear being that rogue corporations could legitimately claim that under the DCO they were authorizing their developers as agents for copyrights but not for patents.  Rather than argue about the legality of this trick, I think it will be much more productive to move the environment forwards to a place where it simply won’t work.  The key to doing this is to change the expectations of the corporate players which moves them to the point where they expect that a corporate signoff under the DCO gives agency for both patents and copyrights because once this happens for most of them (the good actors), the usual estoppal rules would make it apply to all.</p>
<p>The fact is that even though corporate lawyers fear that agency might not exist for patent grants via DCO signoffs in contributions, all legitimate corporate entities who make bona fide code contributions wish to effect this anyway; that’s why they go to the additional lengths of setting up Contributor Licence Agreements and signing them.  The corollary here is that really only a bad actor in the ecosystem wishes to perpetuate the myth that patents aren’t handled by the DCO.  So if all good actors want the system to work correctly anyway, how do we make it so?</p>
<p>The lever that will help to make this move is a simple pledge, which can be published on a corporate website,  that allows corporations expecting to make legitimate contributions to patent binding licences under the DCO to do so properly without needing any additional Contributor Licence Agreements.  Essentially it would be an explicit statement that when their developers submit code to a project under the DCO using a corporate signoff, they’re acting as agents for the necessary patent and copyright grants, meaning you can always trust a DCO signoff from that corporation.  When enough corporations do this, it becomes standard practice and thus expectations on the DCO have moved to the point we originally assumed they were at, so here’s the proposal for what such a statement would look like.</p>
<hr />
<p> </p>
<h2>Corporate Contribution Pledge</h2>
<h3>Preamble</h3>
<p>It is our expectation that any <a href=\"http://developercertificate.org/\">DCO</a> signoff from a corporate email address binds that corporation to grant all necessary copyright and, where required, patent rights to satisfy the terms of the licence.  Accordingly, we are publishing this pledge to illustrate how, as a matter of best practice, we implement this expectation.</p>
<p>For the purposes of this pledge, our corporate email domain is <em>@bigcorp.com</em> and its subdomains.</p>
<h3>Limitations</h3>
<ol>
<li>This pledge only applies to projects which use an OSI accepted Open Source  licence and which also use a developer certificate of origin (DCO).</li>
<li>No authority is given under this pledge to sign contribution agreements on behalf of the company or otherwise bind it except by contributing code under an OSI approved licence and DCO process.</li>
<li>No authority is given under this pledge if a developer, who may be our employee, posts patches under an email address which is not our corporate email domain above.</li>
<li>No trademarks of this corporation may ever be bound under this pledge.</li>
<li>Except as stated below, no other warranty, express or implied, is made on behalf of the contribution, including, but not limited to, fitness of the code for a specific purpose or merchantability.  The entire risk of the quality and performance of this contribution rests with the recipient.</li>
</ol>
<h3>Warranties</h3>
<ol>
<li>Our corporation trains its Open Source contributors carefully to understand when they may and may not post patches from our corporate email domain and to obtain all necessary internal clearances according to our processes before making such a posting.</li>
<li>When one of our developers posts a patch to a project under an OSI approved licence with a DCO Signed-off-by: from our corporate email domain, we authorise that developer to be our agent in the minimum set of patent and copyright grants that are required to satisfy the terms of the OSI approved licence for the contribution.</li>
</ol>") (pubDate nil "Sat, 02 Jan 2016 20:26:18 +0000"))) ("Pavel Machek: N900 progress... and roadblock" "Ok, developing directly on target is easy... and phone is now in much better shape. I added watchdogs, so I'm no longer afraid to let it run debian for extended periods of time. Voice calls work, but audio quality is awful/unusable.<br /><br />Developing directly on target also has problems:'<br /><br /><span style=\"line-height: 1.4;\">remote: error: object c86cce9eda127cd891a7cf2d23e007deaddf4d34: badTimezone: invalid author/committer line - bad time zone</span><div>remote: fatal: Error in object</div><div><br /><div>pavel@n900:/my/tui$ git show c86cce9eda127cd891a7cf2d23e007deaddf4d34</div><div>error: object directory /data/l/clean-cg/.git/objects does not exist; check .git/objects/info/alternates.</div><div>commit c86cce9eda127cd891a7cf2d23e007deaddf4d34</div><div>Author: Pavel &lt;pavel@ucw.cz&gt;</div><div>Date:   Wed Dec 31 23:59:43 1969 +35150858</div><div><br />Fun. I wonder what happened there, if it is going to happen again, and if I can fix it somehow...<br /><br />Happy New Year!</div></div>" "http://pavelmachek.livejournal.com/130187.html" (22151 53576) old 8 nil nil ((title nil "Pavel Machek: N900 progress... and roadblock") (guid nil "http://pavelmachek.livejournal.com/130187.html") (link nil "http://pavelmachek.livejournal.com/130187.html") (description nil "Ok, developing directly on target is easy... and phone is now in much better shape. I added watchdogs, so I'm no longer afraid to let it run debian for extended periods of time. Voice calls work, but audio quality is awful/unusable.<br /><br />Developing directly on target also has problems:'<br /><br /><span style=\"line-height: 1.4;\">remote: error: object c86cce9eda127cd891a7cf2d23e007deaddf4d34: badTimezone: invalid author/committer line - bad time zone</span><div>remote: fatal: Error in object</div><div><br /><div>pavel@n900:/my/tui$ git show c86cce9eda127cd891a7cf2d23e007deaddf4d34</div><div>error: object directory /data/l/clean-cg/.git/objects does not exist; check .git/objects/info/alternates.</div><div>commit c86cce9eda127cd891a7cf2d23e007deaddf4d34</div><div>Author: Pavel &lt;pavel@ucw.cz&gt;</div><div>Date:   Wed Dec 31 23:59:43 1969 +35150858</div><div><br />Fun. I wonder what happened there, if it is going to happen again, and if I can fix it somehow...<br /><br />Happy New Year!</div></div>") (pubDate nil "Sat, 02 Jan 2016 13:31:52 +0000"))) ("Matthew Garrett: The current state of boot security" "I gave a <a href=\"https://media.ccc.de/v/32c3-7343-beyond_anti_evil_maid\">presentation</a> at 32C3 this week. One of the things I said was \"If any of you are doing seriously confidential work on Apple laptops, stop. For the love of god, please stop.\" I didn't really have time to go into the details of that at the time, but right now I'm sitting on a plane with a ridiculous sinus headache and the pseudoephedrine hasn't kicked in yet so here we go.<br /><br />The basic premise of my presentation was that it's very difficult to determine whether your system is in a trustworthy state before you start typing your secrets (such as your disk decryption passphrase) into it. If it's easy for an attacker to modify your system such that it's not trustworthy at the point where you type in a password, it's easy for an attacker to obtain your password. So, if you actually care about your disk encryption being resistant to anybody who can get temporary physical possession of your laptop, you care about it being difficult for someone to compromise your early boot process without you noticing.<br /><br />There's two approaches to this. The first is UEFI Secure Boot. If you cryptographically verify each component of the boot process, it's not possible for a user to compromise the boot process. The second is a measured boot. If you measure each component of the boot process into the TPM, and if you use these measurements to control access to a secret that allows the laptop to prove that it's trustworthy (such as Joanna Rutkowska's <a href=\"http://theinvisiblethings.blogspot.co.uk/2011/09/anti-evil-maid.html\">Anti Evil Maid</a> or my <a href=\"https://mjg59.dreamwidth.org/35742.html\">variant on the theme</a>), an attacker can compromise the boot process but you'll know that they've done so before you start typing.<br /><br />So, how do current operating systems stack up here?<br /><br />Windows: Supports UEFI Secure Boot in a meaningful way. Supports measured boot, but provides no mechanism for the system to attest that it hasn't been compromised. Good, but not perfect.<br /><br />Linux: Supports UEFI Secure Boot[1], but doesn't verify signatures on the initrd[2]. This means that attacks such as <a href=\"https://github.com/GDSSecurity/EvilAbigail/\">Evil Abigail</a> are still possible. Measured boot isn't in a good state, but it's possible to incorporate with a bunch of manual work. Vulnerable out of the box, but can be configured to be better than Windows.<br /><br />Apple: Ha. Snare talked about attacking the Apple boot process <a href=\"http://ho.ax/downloads/De_Mysteriis_Dom_Jobsivs_Black_Hat_Slides.pdf\">in 2012</a> - basically everything he described then is still possible. Apple recently hired the people behind <a href=\"http://www.legbacore.com/\">Legbacore</a>, so there's hope - but right now all shipping Apple hardware has no firmware support for UEFI Secure Boot and no TPM. This makes it impossible to provide any kind of boot attestation, and there's no real way you can verify that your system hasn't been compromised.<br /><br />Now, to be fair, there's attacks that even Windows and properly configured Linux will still be vulnerable to. Firmware defects that permit modification of System Management Mode code can still be used to circumvent these protections, and the Management Engine is in a position to just do whatever it wants and fuck all of you. But that's really not an excuse to just ignore everything else. Improving the current state of boot security makes it more difficult for adversaries to compromise a system, and if we ever do get to the point of systems which aren't running any hidden proprietary code we'll still need this functionality. It's worth doing, and it's worth doing now.<br /><br />[1] Well, except Ubuntu's signed bootloader will happily boot unsigned kernels which kind of defeats the entire point of the exercise<br />[2] Initrds are built on the local machine, so we can't just ship signed images<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=39339\" style=\"vertical-align: middle;\" width=\"30\" /> comments" "http://mjg59.dreamwidth.org/39339.html" (22149 52448) old 9 nil nil ((title nil "Matthew Garrett: The current state of boot security") (guid nil "tag:dreamwidth.org,2011-02-12:696190:39339") (link nil "http://mjg59.dreamwidth.org/39339.html") (description nil "I gave a <a href=\"https://media.ccc.de/v/32c3-7343-beyond_anti_evil_maid\">presentation</a> at 32C3 this week. One of the things I said was \"If any of you are doing seriously confidential work on Apple laptops, stop. For the love of god, please stop.\" I didn't really have time to go into the details of that at the time, but right now I'm sitting on a plane with a ridiculous sinus headache and the pseudoephedrine hasn't kicked in yet so here we go.<br /><br />The basic premise of my presentation was that it's very difficult to determine whether your system is in a trustworthy state before you start typing your secrets (such as your disk decryption passphrase) into it. If it's easy for an attacker to modify your system such that it's not trustworthy at the point where you type in a password, it's easy for an attacker to obtain your password. So, if you actually care about your disk encryption being resistant to anybody who can get temporary physical possession of your laptop, you care about it being difficult for someone to compromise your early boot process without you noticing.<br /><br />There's two approaches to this. The first is UEFI Secure Boot. If you cryptographically verify each component of the boot process, it's not possible for a user to compromise the boot process. The second is a measured boot. If you measure each component of the boot process into the TPM, and if you use these measurements to control access to a secret that allows the laptop to prove that it's trustworthy (such as Joanna Rutkowska's <a href=\"http://theinvisiblethings.blogspot.co.uk/2011/09/anti-evil-maid.html\">Anti Evil Maid</a> or my <a href=\"https://mjg59.dreamwidth.org/35742.html\">variant on the theme</a>), an attacker can compromise the boot process but you'll know that they've done so before you start typing.<br /><br />So, how do current operating systems stack up here?<br /><br />Windows: Supports UEFI Secure Boot in a meaningful way. Supports measured boot, but provides no mechanism for the system to attest that it hasn't been compromised. Good, but not perfect.<br /><br />Linux: Supports UEFI Secure Boot[1], but doesn't verify signatures on the initrd[2]. This means that attacks such as <a href=\"https://github.com/GDSSecurity/EvilAbigail/\">Evil Abigail</a> are still possible. Measured boot isn't in a good state, but it's possible to incorporate with a bunch of manual work. Vulnerable out of the box, but can be configured to be better than Windows.<br /><br />Apple: Ha. Snare talked about attacking the Apple boot process <a href=\"http://ho.ax/downloads/De_Mysteriis_Dom_Jobsivs_Black_Hat_Slides.pdf\">in 2012</a> - basically everything he described then is still possible. Apple recently hired the people behind <a href=\"http://www.legbacore.com/\">Legbacore</a>, so there's hope - but right now all shipping Apple hardware has no firmware support for UEFI Secure Boot and no TPM. This makes it impossible to provide any kind of boot attestation, and there's no real way you can verify that your system hasn't been compromised.<br /><br />Now, to be fair, there's attacks that even Windows and properly configured Linux will still be vulnerable to. Firmware defects that permit modification of System Management Mode code can still be used to circumvent these protections, and the Management Engine is in a position to just do whatever it wants and fuck all of you. But that's really not an excuse to just ignore everything else. Improving the current state of boot security makes it more difficult for adversaries to compromise a system, and if we ever do get to the point of systems which aren't running any hidden proprietary code we'll still need this functionality. It's worth doing, and it's worth doing now.<br /><br />[1] Well, except Ubuntu's signed bootloader will happily boot unsigned kernels which kind of defeats the entire point of the exercise<br />[2] Initrds are built on the local machine, so we can't just ship signed images<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=39339\" style=\"vertical-align: middle;\" width=\"30\" /> comments") (pubDate nil "Fri, 01 Jan 2016 00:48:32 +0000"))) ("Davidlohr Bueso: LPC 2015: Performance and Scalability MC" "<div dir=\"ltr\" style=\"text-align: left;\"><div style=\"text-align: justify;\"><span style=\"font-family: inherit;\"><span style=\"font-size: small;\">This year I had the privilege of <span style=\"font-family: inherit;\">leading the<span style=\"font-family: inherit;\"> </span></span><a href=\"https://www.linuxplumbersconf.org/2015/ocw/events/LPC2015/tracks/453\">Performance and Scalability</a> micro-conference for Linux Plumbers. The goals and motivation behind <span style=\"font-family: inherit;\">organi<span style=\"font-family: inherit;\">zing</span></span> this track were threefold. First present relevant work-in-progress ideas that can improve performance in core kernel subsystems, and need some face to face discussion -- as such, this requires previous debate on lkml. Similarly, learn about real bottlenecks and issues people are running into. And finally, get to know more relevant academic (experimental) work going on in in both the kernel and system-level userland. As such, the sessions were grouped as follows:</span></span></div><div style=\"text-align: justify;\"><span style=\"font-family: inherit;\"><br /></span><span style=\"font-family: inherit;\"><span style=\"font-size: small;\"><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><i>(i)</i> <a href=\"http://backtrace.io/blog/blog/2015/03/13/workload-specialization/\">Fast Bounded-Concurrency Hash Tables</a>. </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">Samy <span style=\"font-family: inherit;\">B</span>ahra introduced a novel non-blocking multi-reader/single writer hash table with strong forward</span> <span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">progress guarantees for TSO. Because the common-case fastpath does not incur </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">in barriers or atomic operations</span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">, this technique </span></span></span><span style=\"font-family: inherit;\"><span style=\"font-size: small;\"><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><span style=\"font-family: inherit;\"><span style=\"font-size: small;\"><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">allows nearly </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">perfect scaling</span></span></span>. While his work is done in userspace, he sees potential </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">for it in the kernel, such as the networking subsystem. In such situations, the use of RCU (readers being the common case) might also be used.</span></span><br style=\"color: #2e3436; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\" /><span style=\"font-size: small;\"><br style=\"color: #2e3436; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\" /><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><i>(ii)</i> <a href=\"http://linuxplumbersconf.org/2015/ocw//system/presentations/2913/original/mcs_tsx.pdf\">Improving Transactional Memory Performance with Queued Locking</a>. </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">While transactional memory  works nicely in conflict-free setups, it ends up requiring common </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">serialization otherwise. An option is to ret<span style=\"font-family: inherit;\">r<span style=\"font-family: inherit;\">y, however, when <span style=\"font-family: inherit;\">the amount o<span style=\"font-family: inherit;\">f threads executing in the CR is larger than the<span style=\"font-family: inherit;\"> amount of completed threads, you can get pile<span style=\"font-family: inherit;\">ups. </span></span></span></span></span></span>Tim Chen <span style=\"font-family: inherit;\">p</span></span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">resented a solution based on applying a sort of 'aperture' and using </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">principles based on MCS for faired queuing, <span style=\"font-family: inherit;\">where </span>can be regulated based on </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">metrics such as the number of threads in the critical region a<span style=\"font-family: inherit;\">nd abort ra<span style=\"font-family: inherit;\">te</span></span>.</span><br style=\"color: #2e3436; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\" /><br style=\"color: #2e3436; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\" /><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><i>(iii)</i> <a href=\"https://linuxplumbersconf.org/2015/ocw/proposals/2751\">How to <span style=\"font-family: inherit;\">Apply Mutation Testing to RCU</span></a></span>. <span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">Iftekhar Ahmed from OSU<span style=\"font-family: inherit;\">, </span></span></span></span><span style=\"font-family: inherit;\"><span style=\"font-size: small;\"><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">summarized his research in overcoming limitations of mutation</span> <span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">testing to identify problems in RCU. As usual, working with Paul Mc<span style=\"font-family: inherit;\">Kenney</span>, they </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">have been able to identify a number of mutants along with making use of </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">rcutorture for specific periods of time. They generated ~3300 mutants </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">from rcu and rcutorture is doing a good job identifying them. It w<span style=\"font-family: inherit;\">ould be interesting to see this applied<span style=\"font-family: inherit;\"> along with f<span style=\"font-family: inherit;\">uzzy test<span style=\"font-family: inherit;\">ing which has <span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\">already<span style=\"font-family: inherit;\"> </span>uncovered several <span style=\"font-family: inherit;\">bugs in RCU<span style=\"font-family: inherit;\"> in the past.</span></span></span></span></span></span></span></span></span></span></span></span></div><div style=\"text-align: justify;\"><br /></div><table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://1.bp.blogspot.com/-lYTixqVUO68/VdlYfEsueBI/AAAAAAAABH0/90x6SbeQEnw/s1600/20805464645_410a3218b0_k.jpg\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"300\" src=\"http://1.bp.blogspot.com/-lYTixqVUO68/VdlYfEsueBI/AAAAAAAABH0/90x6SbeQEnw/s400/20805464645_410a3218b0_k.jpg\" width=\"400\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Scaling track -- LPC'15, Seattle.</td><td class=\"tr-caption\" style=\"text-align: center;\"><br /></td></tr></tbody></table><div class=\"separator\" style=\"clear: both; text-align: justify;\"><span style=\"font-size: small;\"><span style=\"font-family: inherit;\"></span></span></div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"font-family: inherit;\"> <span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><i>(iv)</i> <a href=\"https://linuxplumbersconf.org/2015/ocw/proposals/3291\">Unfair Qu</a><span style=\"font-family: inherit;\"><a href=\"https://linuxplumbersconf.org/2015/ocw/proposals/3291\">eued Spinlocks and Transactional Locks</a>.</span> </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">Waiman Long has been working on extending <span style=\"font-family: inherit;\">spinlocks</span> and apply <span style=\"font-family: inherit;\">them</span></span> <span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">to solve issues with <span style=\"font-family: inherit;\">transactional memory.</span> He presented experiments based on rwlocks and </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">transactional spinlock (new primitive) for transactional (reader) and </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">non-transactional (writer) executions. This talk <span style=\"font-family: inherit;\">nicely complemented</span> Tim Chen<span style=\"font-family: inherit;\">'s previous presenta<span style=\"font-family: inherit;\">tion</span>.</span></span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"> He also touched on the qspinlock performance in virtualized</span> <span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">environments and the challenges currently out there. <span style=\"font-family: inherit;\">As we<span style=\"font-family: inherit;\"> alrea<span style=\"font-family: inherit;\">dy have code for this,<span style=\"font-family: inherit;\"> it was much easier to discuss face to face. </span></span></span></span>Consensus in the </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">room was that kernel developers are not against improving pv spinlocks, </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">but what is determined is that we will not accept a 3rd primitive.</span><br style=\"color: #2e3436; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\" /><br style=\"color: #2e3436; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\" /><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><i>(v)</i> <a href=\"https://sslab.gtisc.gatech.edu/2015/cloud-scalability.html\">Do Virtual Machines Really Scale</a><span style=\"font-family: inherit;\">. </span></span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">Sanidhya Kashyap</span></span></span><span style=\"font-size: small;\"><span style=\"font-family: inherit;\"><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><a href=\"https://sslab.gtisc.gatech.edu/author/sanidhya-kashyap.html\"></a>from GA<span style=\"font-family: inherit;\"> Tech</span> showed us the state of scalability in the cloud where there is </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">a clear trend that services hit poor scalability after certain degrees </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">of contention/core-count. These are LHP issues and vmexits/enters cause </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">performance issues at high vcpu counts. He introduces oticket backed by </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">performing multiple wakeups at once when granting the lock. Good</span> <span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">feedback and suggestions to overcome some of the presented issues<span style=\"font-family: inherit;\"> with the approach<span style=\"font-family: inherit;\">. This was a<span style=\"font-family: inherit;\">n extra short BoF like of presentation, but <span style=\"font-family: inherit;\">there was quite a bi<span style=\"font-family: inherit;\">t of interest, and the <span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\">appropriate</span> people</span></span> were in the<span style=\"font-family: inherit;\"> room.</span></span></span></span></span></span></span></span></span></span></div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"font-family: inherit;\"><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\">Overall I would say that all thr<span style=\"font-family: inherit;\">e<span style=\"font-family: inherit;\">e </span></span></span><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\">objectives</span> were met and the quality of the sessions were high, thus <span style=\"font-family: inherit;\">meeting all expectations</span> <span style=\"font-family: inherit;\">(if not, please email me for feedback<span style=\"font-family: inherit;\"> ;-)</span></span>. <span style=\"font-family: inherit;\">In fact, there were some highly interesting and <span style=\"font-family: inherit;\">relevant </span>presentations t<span style=\"font-family: inherit;\">hat, due to t<span style=\"font-family: inherit;\">i<span style=\"font-family: inherit;\">me constraints<span style=\"font-family: inherit;\">, had to <span style=\"font-family: inherit;\">be left out<span style=\"font-family: inherit;\">.</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></div></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/stgolabs/eMGj/~4/RkpPevsVBpA\" width=\"1\" />" "http://feedproxy.google.com/~r/stgolabs/eMGj/~3/RkpPevsVBpA/lpc-2015-performance-and-scalability-mc.html" (22147 60117) old 10 nil nil ((title nil "Davidlohr Bueso: LPC 2015: Performance and Scalability MC") (guid nil "tag:blogger.com,1999:blog-5789291509148224079.post-7433466098575674607") (link nil "http://feedproxy.google.com/~r/stgolabs/eMGj/~3/RkpPevsVBpA/lpc-2015-performance-and-scalability-mc.html") (description nil "<div dir=\"ltr\" style=\"text-align: left;\"><div style=\"text-align: justify;\"><span style=\"font-family: inherit;\"><span style=\"font-size: small;\">This year I had the privilege of <span style=\"font-family: inherit;\">leading the<span style=\"font-family: inherit;\"> </span></span><a href=\"https://www.linuxplumbersconf.org/2015/ocw/events/LPC2015/tracks/453\">Performance and Scalability</a> micro-conference for Linux Plumbers. The goals and motivation behind <span style=\"font-family: inherit;\">organi<span style=\"font-family: inherit;\">zing</span></span> this track were threefold. First present relevant work-in-progress ideas that can improve performance in core kernel subsystems, and need some face to face discussion -- as such, this requires previous debate on lkml. Similarly, learn about real bottlenecks and issues people are running into. And finally, get to know more relevant academic (experimental) work going on in in both the kernel and system-level userland. As such, the sessions were grouped as follows:</span></span></div><div style=\"text-align: justify;\"><span style=\"font-family: inherit;\"><br /></span><span style=\"font-family: inherit;\"><span style=\"font-size: small;\"><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><i>(i)</i> <a href=\"http://backtrace.io/blog/blog/2015/03/13/workload-specialization/\">Fast Bounded-Concurrency Hash Tables</a>. </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">Samy <span style=\"font-family: inherit;\">B</span>ahra introduced a novel non-blocking multi-reader/single writer hash table with strong forward</span> <span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">progress guarantees for TSO. Because the common-case fastpath does not incur </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">in barriers or atomic operations</span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">, this technique </span></span></span><span style=\"font-family: inherit;\"><span style=\"font-size: small;\"><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><span style=\"font-family: inherit;\"><span style=\"font-size: small;\"><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">allows nearly </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">perfect scaling</span></span></span>. While his work is done in userspace, he sees potential </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">for it in the kernel, such as the networking subsystem. In such situations, the use of RCU (readers being the common case) might also be used.</span></span><br style=\"color: #2e3436; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\" /><span style=\"font-size: small;\"><br style=\"color: #2e3436; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\" /><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><i>(ii)</i> <a href=\"http://linuxplumbersconf.org/2015/ocw//system/presentations/2913/original/mcs_tsx.pdf\">Improving Transactional Memory Performance with Queued Locking</a>. </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">While transactional memory  works nicely in conflict-free setups, it ends up requiring common </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">serialization otherwise. An option is to ret<span style=\"font-family: inherit;\">r<span style=\"font-family: inherit;\">y, however, when <span style=\"font-family: inherit;\">the amount o<span style=\"font-family: inherit;\">f threads executing in the CR is larger than the<span style=\"font-family: inherit;\"> amount of completed threads, you can get pile<span style=\"font-family: inherit;\">ups. </span></span></span></span></span></span>Tim Chen <span style=\"font-family: inherit;\">p</span></span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">resented a solution based on applying a sort of 'aperture' and using </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">principles based on MCS for faired queuing, <span style=\"font-family: inherit;\">where </span>can be regulated based on </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">metrics such as the number of threads in the critical region a<span style=\"font-family: inherit;\">nd abort ra<span style=\"font-family: inherit;\">te</span></span>.</span><br style=\"color: #2e3436; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\" /><br style=\"color: #2e3436; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\" /><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><i>(iii)</i> <a href=\"https://linuxplumbersconf.org/2015/ocw/proposals/2751\">How to <span style=\"font-family: inherit;\">Apply Mutation Testing to RCU</span></a></span>. <span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">Iftekhar Ahmed from OSU<span style=\"font-family: inherit;\">, </span></span></span></span><span style=\"font-family: inherit;\"><span style=\"font-size: small;\"><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">summarized his research in overcoming limitations of mutation</span> <span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">testing to identify problems in RCU. As usual, working with Paul Mc<span style=\"font-family: inherit;\">Kenney</span>, they </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">have been able to identify a number of mutants along with making use of </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">rcutorture for specific periods of time. They generated ~3300 mutants </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">from rcu and rcutorture is doing a good job identifying them. It w<span style=\"font-family: inherit;\">ould be interesting to see this applied<span style=\"font-family: inherit;\"> along with f<span style=\"font-family: inherit;\">uzzy test<span style=\"font-family: inherit;\">ing which has <span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\">already<span style=\"font-family: inherit;\"> </span>uncovered several <span style=\"font-family: inherit;\">bugs in RCU<span style=\"font-family: inherit;\"> in the past.</span></span></span></span></span></span></span></span></span></span></span></span></div><div style=\"text-align: justify;\"><br /></div><table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://1.bp.blogspot.com/-lYTixqVUO68/VdlYfEsueBI/AAAAAAAABH0/90x6SbeQEnw/s1600/20805464645_410a3218b0_k.jpg\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"300\" src=\"http://1.bp.blogspot.com/-lYTixqVUO68/VdlYfEsueBI/AAAAAAAABH0/90x6SbeQEnw/s400/20805464645_410a3218b0_k.jpg\" width=\"400\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Scaling track -- LPC'15, Seattle.</td><td class=\"tr-caption\" style=\"text-align: center;\"><br /></td></tr></tbody></table><div class=\"separator\" style=\"clear: both; text-align: justify;\"><span style=\"font-size: small;\"><span style=\"font-family: inherit;\"></span></span></div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"font-family: inherit;\"> <span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><i>(iv)</i> <a href=\"https://linuxplumbersconf.org/2015/ocw/proposals/3291\">Unfair Qu</a><span style=\"font-family: inherit;\"><a href=\"https://linuxplumbersconf.org/2015/ocw/proposals/3291\">eued Spinlocks and Transactional Locks</a>.</span> </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">Waiman Long has been working on extending <span style=\"font-family: inherit;\">spinlocks</span> and apply <span style=\"font-family: inherit;\">them</span></span> <span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">to solve issues with <span style=\"font-family: inherit;\">transactional memory.</span> He presented experiments based on rwlocks and </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">transactional spinlock (new primitive) for transactional (reader) and </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">non-transactional (writer) executions. This talk <span style=\"font-family: inherit;\">nicely complemented</span> Tim Chen<span style=\"font-family: inherit;\">'s previous presenta<span style=\"font-family: inherit;\">tion</span>.</span></span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"> He also touched on the qspinlock performance in virtualized</span> <span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">environments and the challenges currently out there. <span style=\"font-family: inherit;\">As we<span style=\"font-family: inherit;\"> alrea<span style=\"font-family: inherit;\">dy have code for this,<span style=\"font-family: inherit;\"> it was much easier to discuss face to face. </span></span></span></span>Consensus in the </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">room was that kernel developers are not against improving pv spinlocks, </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">but what is determined is that we will not accept a 3rd primitive.</span><br style=\"color: #2e3436; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\" /><br style=\"color: #2e3436; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\" /><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><i>(v)</i> <a href=\"https://sslab.gtisc.gatech.edu/2015/cloud-scalability.html\">Do Virtual Machines Really Scale</a><span style=\"font-family: inherit;\">. </span></span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">Sanidhya Kashyap</span></span></span><span style=\"font-size: small;\"><span style=\"font-family: inherit;\"><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><a href=\"https://sslab.gtisc.gatech.edu/author/sanidhya-kashyap.html\"></a>from GA<span style=\"font-family: inherit;\"> Tech</span> showed us the state of scalability in the cloud where there is </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">a clear trend that services hit poor scalability after certain degrees </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">of contention/core-count. These are LHP issues and vmexits/enters cause </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">performance issues at high vcpu counts. He introduces oticket backed by </span><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">performing multiple wakeups at once when granting the lock. Good</span> <span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\">feedback and suggestions to overcome some of the presented issues<span style=\"font-family: inherit;\"> with the approach<span style=\"font-family: inherit;\">. This was a<span style=\"font-family: inherit;\">n extra short BoF like of presentation, but <span style=\"font-family: inherit;\">there was quite a bi<span style=\"font-family: inherit;\">t of interest, and the <span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\">appropriate</span> people</span></span> were in the<span style=\"font-family: inherit;\"> room.</span></span></span></span></span></span></span></span></span></span></div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\"><span style=\"font-size: small;\"><span style=\"font-family: inherit;\"><span style=\"background-color: white; color: #2e3436; display: inline ! important; float: none; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: start; text-indent: 0px; white-space: normal;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\">Overall I would say that all thr<span style=\"font-family: inherit;\">e<span style=\"font-family: inherit;\">e </span></span></span><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\">objectives</span> were met and the quality of the sessions were high, thus <span style=\"font-family: inherit;\">meeting all expectations</span> <span style=\"font-family: inherit;\">(if not, please email me for feedback<span style=\"font-family: inherit;\"> ;-)</span></span>. <span style=\"font-family: inherit;\">In fact, there were some highly interesting and <span style=\"font-family: inherit;\">relevant </span>presentations t<span style=\"font-family: inherit;\">hat, due to t<span style=\"font-family: inherit;\">i<span style=\"font-family: inherit;\">me constraints<span style=\"font-family: inherit;\">, had to <span style=\"font-family: inherit;\">be left out<span style=\"font-family: inherit;\">.</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></div></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/stgolabs/eMGj/~4/RkpPevsVBpA\" width=\"1\" />") (pubDate nil "Wed, 30 Dec 2015 14:31:49 +0000"))) ("Michael Kerrisk (manpages): man-pages-4.04 is released" "I've released <i>man-pages-4.04</i>. The release tarball is available on <a href=\"http://www.kernel.org/pub/linux/docs/man-pages/\">kernel.org</a>. The browsable online pages can be <a href=\"http://man7.org/linux/man-pages/index.html\">found on man7.org</a>. The Git repository for <i>man-pages</i> is <a href=\"http://www.kernel.org/doc/man-pages/download.html\">available on kernel.org</a>.<br /><br />This release resulted from patches, bug reports,and  comments from more than 30 contributors. As well as a large number of minor fixes to nearly 90 man pages, the more significant <a href=\"http://man7.org/linux/man-pages/changelog.html#release_4.04\">changes in <span style=\"font-style: italic;\">man-pages-4.04</span></a> include the following:<br /><ul><li>The <i><a href=\"http://man7.org/linux/man-pages/man2/futex.2.html\">futex(2)</a></i> man page was long in a sorry state, with many aspects of the system call undocumented in the man page. After more than a year working off and on (and more than 250 commits!), I've completed a major rewrite and expansion of the page (which is now nearly 6 times as long as it used to be). Some of the information was drawn from Ulrich Drepper's highly informative paper, <a href=\"http://www.akkadia.org/drepper/futex.pdf\"><i>Futexes are tricky</i></a>. A lot more information came from reading kernel and user-space source code, doing some experimenting (the revised man page even includes an example program!), and significant input from a number of reviewers (special thanks here to Thomas Gleixner and Torvald Riegel).</li><li>A new <i><a href=\"http://man7.org/linux/man-pages/man2/membarrier.2.html\">membarrier(2)</a></i> man page was added, contributed by <a href=\"https://www.efficios.com/\">Mathieu Desnoyers</a>, the developer of the new system call (added in Linux 4.3).</li><li>Eric Munson added documentation of the new <i>mlock2()</i> system call and the new <i>mlockall()</i> <span style=\"font-family: Courier New, Courier, monospace;\">MCL_ONFAULT</span> flag to the <i><a href=\"http://man7.org/linux/man-pages/man2/mlock.2.html\">mlock(2)</a></i> man page.</li></ul>" "http://linux-man-pages.blogspot.com/2015/12/man-pages-404-is-released.html" (22146 44768) old 11 nil nil ((title nil "Michael Kerrisk (manpages): man-pages-4.04 is released") (guid nil "tag:blogger.com,1999:blog-3174631896317411826.post-4574555021991462082") (link nil "http://linux-man-pages.blogspot.com/2015/12/man-pages-404-is-released.html") (description nil "I've released <i>man-pages-4.04</i>. The release tarball is available on <a href=\"http://www.kernel.org/pub/linux/docs/man-pages/\">kernel.org</a>. The browsable online pages can be <a href=\"http://man7.org/linux/man-pages/index.html\">found on man7.org</a>. The Git repository for <i>man-pages</i> is <a href=\"http://www.kernel.org/doc/man-pages/download.html\">available on kernel.org</a>.<br /><br />This release resulted from patches, bug reports,and  comments from more than 30 contributors. As well as a large number of minor fixes to nearly 90 man pages, the more significant <a href=\"http://man7.org/linux/man-pages/changelog.html#release_4.04\">changes in <span style=\"font-style: italic;\">man-pages-4.04</span></a> include the following:<br /><ul><li>The <i><a href=\"http://man7.org/linux/man-pages/man2/futex.2.html\">futex(2)</a></i> man page was long in a sorry state, with many aspects of the system call undocumented in the man page. After more than a year working off and on (and more than 250 commits!), I've completed a major rewrite and expansion of the page (which is now nearly 6 times as long as it used to be). Some of the information was drawn from Ulrich Drepper's highly informative paper, <a href=\"http://www.akkadia.org/drepper/futex.pdf\"><i>Futexes are tricky</i></a>. A lot more information came from reading kernel and user-space source code, doing some experimenting (the revised man page even includes an example program!), and significant input from a number of reviewers (special thanks here to Thomas Gleixner and Torvald Riegel).</li><li>A new <i><a href=\"http://man7.org/linux/man-pages/man2/membarrier.2.html\">membarrier(2)</a></i> man page was added, contributed by <a href=\"https://www.efficios.com/\">Mathieu Desnoyers</a>, the developer of the new system call (added in Linux 4.3).</li><li>Eric Munson added documentation of the new <i>mlock2()</i> system call and the new <i>mlockall()</i> <span style=\"font-family: Courier New, Courier, monospace;\">MCL_ONFAULT</span> flag to the <i><a href=\"http://man7.org/linux/man-pages/man2/mlock.2.html\">mlock(2)</a></i> man page.</li></ul>") (pubDate nil "Tue, 29 Dec 2015 16:03:44 +0000"))) ("Davidlohr Bueso: fu(zz)tex: targeted fuzzing of futexes" "<div dir=\"ltr\" style=\"text-align: left;\"><div style=\"text-align: justify;\">The complexity of futexes, their non-trivial interactions and semantics, very much serve as a good candidate for applying fuzzy testing techniques to them. In general futex code is poorly understood and audited, both at a kernel implementation level and by the respective userland callers, normally trying to implement some sort of locking primitive. Unsurprisingly, bugs related to this call will often be subtle and nasty, sometimes with <a href=\"http://www.cvedetails.com/google-search-results.php?q=futex&amp;sa=Search\">security</a> implications. Specifically for futexes, all system call fuzzers use generic and completely randomized inputs, which has only limited usefulness. This is even the case for Dave Jones' <a href=\"http://codemonkey.org.uk/projects/trinity\">trinity</a> program, which has been extremely good at finding kernel bugs (and ruining my weekends more than once ;). Much of the success and popularity of this program is because not all the inputs are random and meaningful parameters are passed for many of the exercised syscalls. This is called targeted fuzzing, and has been proven to find more bugs than blindly random inputs, which in turn is more likely to produce logic that makes the kernel actually do something related to the call, as opposed to quickly erroring out due to some trivial bogus scenario. A nice example is the <i>perf_event_open(2)</i> call, which was <a href=\"http://web.eece.maine.edu/~vweaver/projects/perf_events/fuzzer/2015_perf_fuzzer_tr.pdf\">studied</a> for targeted fuzzy testing with very good results.</div><h3 style=\"text-align: justify;\">Extending Trinity </h3><div style=\"text-align: justify;\">Reusing the already proven-to-work machinery of trinity. and extend it for futex ad-hoc work, is the obvious step for improving coverage, in the hope to tackle some of the issues previously described. While reading the code is always the definite answer, having a man-page that is <i>up-to-par</i> with the call is quite essential; if we want programmers to make correct use of the tools we provide, that is. Fortunately, Michael Kerrisk has been doing a nice job of <a href=\"https://git.kernel.org/cgit/docs/man-pages/man-pages.git/tree/man2/futex.2\">rewriting</a> the current <i>futex.2</i> page, which is so surprisingly crappy and incomplete, it's sad. This makes the task correctly setting the input parameters following a certain purpose a little less tedious and error-prone:<br /><br /><pre><span><code style=\"color: black;\"> </code></span><code style=\"color: black;\"><span>SYSCALL_DEFINE6(futex, u32 __user *, uaddr, int, op, u32, val,<br />     struct timespec __user *, utime, u32 __user *, uaddr2, u32, val3)</span><br /></code></pre><span></span><br /> -- just imagine if <i>mmap.2</i> were barely documented and stale.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">There are two immediately obvious op flags that are not being exercised at all (with the exception of randomly bumping into them, which is quite unlikey and badly controllable):</div><ul style=\"text-align: justify;\"><li><span>FUTEX_CLOCK_RT:</span> When set, the kernel treats the timeout as an absolute time based on <span>CLOCK_REALTIME</span> as opposed to <span>CLOCK_MONOTONIC.</span> This is only affected by <span>FUTEX_WAIT_BITSET</span> and <span>FUTEX_REQUEUE_PI</span> commands.</li></ul><ul style=\"text-align: justify;\"><li><span>FUTEX_PRIVATE_FLAG:</span> Refers to the user address space mapping, and applies to all operations. The main benefit is that kernel can directly use the virtual address without having to do any lookups or other overhead (vmas, gup, thp, etc.) imposed by shared mappings.</li></ul><h4 style=\"text-align: justify;\">Ever-changing task priorities</h4><div style=\"text-align: justify;\">The whole purpose of PI futexes are to address priority inheritance issues for systems with real time requirements. Randomly changing a processes priority will therefore better stress the system call instead of always using the default nice value, exercising priority boosting code in the kernel.</div><div style=\"text-align: left;\"><h4 style=\"text-align: left;\">Fault/error injections</h4><div style=\"text-align: justify;\">This year we <a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=ab51fbab39d864f3223e44a2600fd951df261f0b\">added</a> support for artificially triggering errors within the various futex paths faults and deadlock scenarios, via the <span>CONFIG_FAULT_INJECTION</span> kernel framework along with the <span>CONFIG_FAIL_FUTEX</span> option. Trinity can make use of this feature by randomly toggling the process' <a href=\"https://www.kernel.org/doc/Documentation/fault-injection/fault-injection.txt\">make-it-fail</a> file as well as selecting appropriate fault injection debugfs options.</div></div><h4 style=\"text-align: left;\">Feeding user-addresses</h4><div style=\"text-align: justify;\">Perhaps the single most important argument that we can pass to the syscall is the user address (uaddr, or 'the futex'), which will govern everything the kernel attempts to do with it, being private or shared address space. As such, it is not very useful to blindly feed it random addresses, even if trinity is setup by default, these inputs will sometimes be picked by previously <i>mmap-created</i> shared memory playgrounds. However, at a futex level, this does not matter unless we are doing blocking calls (WAIT).<br /><br />So this has been reworked such that trinity now creates a number of locks in shared memory at startup, which has the owner PID and the actual futex. Upon a call, both fields of uaddr get either a random lock or a random address from the mmap playground, each with a 50% chance. The locks follow very simple semantics, where a successful <i>cmpxchg</i> will allow the caller to acquire the lock without the kernel being involved (fastpath), otherwise we need to wait/block through the futex call.<br /><br />Because of how trinity is structured with callbacks for pre/post syscall invocation, there are a number of racy windows between when the lock is dealt (ie considered contended) with and when the fuzzer actually calls futex(2). As such, this must be taken with a grain of salt, but does exercise lots of real world situations, nonetheless.<br /><h4 style=\"text-align: left;\">Choosing operations</h4>The idea is to randomly perform different operations on the selected futex, such that combinations of wake, wait, requeue are done (both for regular and PI futexes). While passing informed, <i>not-so-random,</i> parameters to the system call reduces the chance of shallow fuzzing, choosing the futex operation will determine the kind of work to be done on the uaddress. As such this part can further determine the usefulness of trinity regarding futexes. However, one cannot get too strict here as reducing the randomness will also limit the usefulness. For now the layout is a 25% chance when performing lock operations. Oh the other hand, for the case of mmap selected uaddress, the operation is left up to trinity to decide.</div><div style=\"text-align: justify;\"></div><div style=\"text-align: justify;\"></div><div style=\"text-align: justify;\"><h3 style=\"text-align: justify;\">Evaluation and future work</h3><div style=\"text-align: justify;\">Evaluating software that purposely tries to mess up other software is always twofold. For one, any new futex bug that is found indicates that modifying trinity was a good step towards better testing coverage. But unfortunately this creates a new headache for futex hackers, and a bug needs to be fixed (including any corresponding Linux distribution backporting, security and <i>-stable</i> work). So any useful results which exhibit the presence of bugs can be bitter/sweet -- just think <a href=\"http://www.brainyquote.com/quotes/quotes/e/edsgerdijk201165.html\">Dijkstra</a>.<br /><br />One immediate way of evaluating the changes to trinity is to see the number of successful calls. While this can be a misleading metric, it does at least indicate whether or not many of the bogus parameter passing have been mitigated and replaced with smarter, more informed calls. Tests show that these changes have in fact boosted the amount of successful futex(2) returns; within a trinity run of 10,000 calls with 4 threads, we were able to go from ~470 to nearly ~4300, which is around a 10x improvement. This also means that it takes more time to run trinity as the kernel is doing actual work now with our futexes, not simply returning immediately due to bogus parameters and trivial error checks.<br /><br />In the future, it would be good to fuzz futexes with memory-back file (uaddress), instead of always relying on anonymous memory. While is perhaps not so interesting from a futex standpoint (with the exception of hashing), it would be good when combining with other memory related calls which actually do things with the file. Another useful direction would be to further investigate operation selection policies. Different models will fuzz different parts of the futex subsystem, and perhaps (very probably, actually) I have not found the best one yet.</div><div style=\"text-align: justify;\"><br /></div></div><div style=\"text-align: justify;\">This work was done as part of SUSE <a href=\"https://hackweek.suse.com/13/projects/1064\">Hackweek 13</a>, which allowed me to finally allocate some time to focus on this (although this writing is much overdue). So as always, lots of thanks to my employer.</div></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/stgolabs/eMGj/~4/GKDyqBrK-DU\" width=\"1\" />" "http://feedproxy.google.com/~r/stgolabs/eMGj/~3/GKDyqBrK-DU/fuzztex-targeted-fuzzing-of-futexes.html" (22146 35933) old 12 nil nil ((title nil "Davidlohr Bueso: fu(zz)tex: targeted fuzzing of futexes") (guid nil "tag:blogger.com,1999:blog-5789291509148224079.post-3926339682891681060") (link nil "http://feedproxy.google.com/~r/stgolabs/eMGj/~3/GKDyqBrK-DU/fuzztex-targeted-fuzzing-of-futexes.html") (description nil "<div dir=\"ltr\" style=\"text-align: left;\"><div style=\"text-align: justify;\">The complexity of futexes, their non-trivial interactions and semantics, very much serve as a good candidate for applying fuzzy testing techniques to them. In general futex code is poorly understood and audited, both at a kernel implementation level and by the respective userland callers, normally trying to implement some sort of locking primitive. Unsurprisingly, bugs related to this call will often be subtle and nasty, sometimes with <a href=\"http://www.cvedetails.com/google-search-results.php?q=futex&amp;sa=Search\">security</a> implications. Specifically for futexes, all system call fuzzers use generic and completely randomized inputs, which has only limited usefulness. This is even the case for Dave Jones' <a href=\"http://codemonkey.org.uk/projects/trinity\">trinity</a> program, which has been extremely good at finding kernel bugs (and ruining my weekends more than once ;). Much of the success and popularity of this program is because not all the inputs are random and meaningful parameters are passed for many of the exercised syscalls. This is called targeted fuzzing, and has been proven to find more bugs than blindly random inputs, which in turn is more likely to produce logic that makes the kernel actually do something related to the call, as opposed to quickly erroring out due to some trivial bogus scenario. A nice example is the <i>perf_event_open(2)</i> call, which was <a href=\"http://web.eece.maine.edu/~vweaver/projects/perf_events/fuzzer/2015_perf_fuzzer_tr.pdf\">studied</a> for targeted fuzzy testing with very good results.</div><h3 style=\"text-align: justify;\">Extending Trinity </h3><div style=\"text-align: justify;\">Reusing the already proven-to-work machinery of trinity. and extend it for futex ad-hoc work, is the obvious step for improving coverage, in the hope to tackle some of the issues previously described. While reading the code is always the definite answer, having a man-page that is <i>up-to-par</i> with the call is quite essential; if we want programmers to make correct use of the tools we provide, that is. Fortunately, Michael Kerrisk has been doing a nice job of <a href=\"https://git.kernel.org/cgit/docs/man-pages/man-pages.git/tree/man2/futex.2\">rewriting</a> the current <i>futex.2</i> page, which is so surprisingly crappy and incomplete, it's sad. This makes the task correctly setting the input parameters following a certain purpose a little less tedious and error-prone:<br /><br /><pre><span><code style=\"color: black;\"> </code></span><code style=\"color: black;\"><span>SYSCALL_DEFINE6(futex, u32 __user *, uaddr, int, op, u32, val,<br />     struct timespec __user *, utime, u32 __user *, uaddr2, u32, val3)</span><br /></code></pre><span></span><br /> -- just imagine if <i>mmap.2</i> were barely documented and stale.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">There are two immediately obvious op flags that are not being exercised at all (with the exception of randomly bumping into them, which is quite unlikey and badly controllable):</div><ul style=\"text-align: justify;\"><li><span>FUTEX_CLOCK_RT:</span> When set, the kernel treats the timeout as an absolute time based on <span>CLOCK_REALTIME</span> as opposed to <span>CLOCK_MONOTONIC.</span> This is only affected by <span>FUTEX_WAIT_BITSET</span> and <span>FUTEX_REQUEUE_PI</span> commands.</li></ul><ul style=\"text-align: justify;\"><li><span>FUTEX_PRIVATE_FLAG:</span> Refers to the user address space mapping, and applies to all operations. The main benefit is that kernel can directly use the virtual address without having to do any lookups or other overhead (vmas, gup, thp, etc.) imposed by shared mappings.</li></ul><h4 style=\"text-align: justify;\">Ever-changing task priorities</h4><div style=\"text-align: justify;\">The whole purpose of PI futexes are to address priority inheritance issues for systems with real time requirements. Randomly changing a processes priority will therefore better stress the system call instead of always using the default nice value, exercising priority boosting code in the kernel.</div><div style=\"text-align: left;\"><h4 style=\"text-align: left;\">Fault/error injections</h4><div style=\"text-align: justify;\">This year we <a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=ab51fbab39d864f3223e44a2600fd951df261f0b\">added</a> support for artificially triggering errors within the various futex paths faults and deadlock scenarios, via the <span>CONFIG_FAULT_INJECTION</span> kernel framework along with the <span>CONFIG_FAIL_FUTEX</span> option. Trinity can make use of this feature by randomly toggling the process' <a href=\"https://www.kernel.org/doc/Documentation/fault-injection/fault-injection.txt\">make-it-fail</a> file as well as selecting appropriate fault injection debugfs options.</div></div><h4 style=\"text-align: left;\">Feeding user-addresses</h4><div style=\"text-align: justify;\">Perhaps the single most important argument that we can pass to the syscall is the user address (uaddr, or 'the futex'), which will govern everything the kernel attempts to do with it, being private or shared address space. As such, it is not very useful to blindly feed it random addresses, even if trinity is setup by default, these inputs will sometimes be picked by previously <i>mmap-created</i> shared memory playgrounds. However, at a futex level, this does not matter unless we are doing blocking calls (WAIT).<br /><br />So this has been reworked such that trinity now creates a number of locks in shared memory at startup, which has the owner PID and the actual futex. Upon a call, both fields of uaddr get either a random lock or a random address from the mmap playground, each with a 50% chance. The locks follow very simple semantics, where a successful <i>cmpxchg</i> will allow the caller to acquire the lock without the kernel being involved (fastpath), otherwise we need to wait/block through the futex call.<br /><br />Because of how trinity is structured with callbacks for pre/post syscall invocation, there are a number of racy windows between when the lock is dealt (ie considered contended) with and when the fuzzer actually calls futex(2). As such, this must be taken with a grain of salt, but does exercise lots of real world situations, nonetheless.<br /><h4 style=\"text-align: left;\">Choosing operations</h4>The idea is to randomly perform different operations on the selected futex, such that combinations of wake, wait, requeue are done (both for regular and PI futexes). While passing informed, <i>not-so-random,</i> parameters to the system call reduces the chance of shallow fuzzing, choosing the futex operation will determine the kind of work to be done on the uaddress. As such this part can further determine the usefulness of trinity regarding futexes. However, one cannot get too strict here as reducing the randomness will also limit the usefulness. For now the layout is a 25% chance when performing lock operations. Oh the other hand, for the case of mmap selected uaddress, the operation is left up to trinity to decide.</div><div style=\"text-align: justify;\"></div><div style=\"text-align: justify;\"></div><div style=\"text-align: justify;\"><h3 style=\"text-align: justify;\">Evaluation and future work</h3><div style=\"text-align: justify;\">Evaluating software that purposely tries to mess up other software is always twofold. For one, any new futex bug that is found indicates that modifying trinity was a good step towards better testing coverage. But unfortunately this creates a new headache for futex hackers, and a bug needs to be fixed (including any corresponding Linux distribution backporting, security and <i>-stable</i> work). So any useful results which exhibit the presence of bugs can be bitter/sweet -- just think <a href=\"http://www.brainyquote.com/quotes/quotes/e/edsgerdijk201165.html\">Dijkstra</a>.<br /><br />One immediate way of evaluating the changes to trinity is to see the number of successful calls. While this can be a misleading metric, it does at least indicate whether or not many of the bogus parameter passing have been mitigated and replaced with smarter, more informed calls. Tests show that these changes have in fact boosted the amount of successful futex(2) returns; within a trinity run of 10,000 calls with 4 threads, we were able to go from ~470 to nearly ~4300, which is around a 10x improvement. This also means that it takes more time to run trinity as the kernel is doing actual work now with our futexes, not simply returning immediately due to bogus parameters and trivial error checks.<br /><br />In the future, it would be good to fuzz futexes with memory-back file (uaddress), instead of always relying on anonymous memory. While is perhaps not so interesting from a futex standpoint (with the exception of hashing), it would be good when combining with other memory related calls which actually do things with the file. Another useful direction would be to further investigate operation selection policies. Different models will fuzz different parts of the futex subsystem, and perhaps (very probably, actually) I have not found the best one yet.</div><div style=\"text-align: justify;\"><br /></div></div><div style=\"text-align: justify;\">This work was done as part of SUSE <a href=\"https://hackweek.suse.com/13/projects/1064\">Hackweek 13</a>, which allowed me to finally allocate some time to focus on this (although this writing is much overdue). So as always, lots of thanks to my employer.</div></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/stgolabs/eMGj/~4/GKDyqBrK-DU\" width=\"1\" />") (pubDate nil "Tue, 29 Dec 2015 13:36:29 +0000"))) ("Matthew Garrett: GPL enforcement is a social good" "The Software Freedom Conservancy is currently running a <a href=\"https://sfconservancy.org/supporter/\">fundraising program</a> in an attempt to raise enough money to continue funding GPL compliance work. If they don't gain enough supporters, the majority of their compliance work will cease. And, since SFC are one of the only groups currently actively involved in performing GPL compliance work, that basically means that there will be nobody working to ensure that users have the rights that copyright holders chose to give them.<br /><br />Why does this matter? More people are using GPLed software than at any point in history. Hundreds of millions of Android devices were sold this year, all including GPLed code. An unknowably vast number of IoT devices run Linux. Cameras, Blu Ray players, TVs, light switches, coffee machines. Software running in places that we would never have previously imagined. And much of it abandoned immediately after shipping, gently rotting, exposing an increasingly large number of widely known security vulnerabilities to an increasingly hostile internet. Devices that become useless because of protocol updates. Toys that have a \"Guaranteed to work until\" date, and then suddenly Barbie goes dead and you're forced to have an unexpected conversation about API mortality with your 5-year old child.<br /><br />We can't fix all of these things. Many of these devices have important functionality locked inside proprietary components, released under licenses that grant no permission for people to examine or improve them. But there are many that we can. Millions of devices are running modern and secure versions of Android despite being abandoned by their manufacturers, purely because the vendor released appropriate source code and a community grew up to maintain it. But this can only happen when the vendor plays by the rules.<br /><br />Vendors who don't release their code remove that freedom from their users, and the weapons users have to fight against that are limited. Most users hold no copyright over the software in the device and are unable to take direct action themselves. A vendor's failure to comply dooms them to having to choose between buying a new device in 12 months or no longer receiving security updates. When yet more examples of vendor-supplied malware are discovered, it's more difficult to produce new builds without them. The utility of the devices that the user purchased is curtailed significantly.<br /><br />The Software Freedom Conservancy is one of the only organisations actively fighting against this, and if they're forced to give up their enforcement work the pressure on vendors to comply with the GPL will be reduced even further. If we want users to control their devices, to be able to obtain security updates even after the vendor has given up, we need to keep that pressure up. Supporting the SFC's work has a real impact on the security of the internet and people's lives. Please consider giving them money.<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=38992\" style=\"vertical-align: middle;\" width=\"30\" /> comments" "http://mjg59.dreamwidth.org/38992.html" (22138 63530) old 13 nil nil ((title nil "Matthew Garrett: GPL enforcement is a social good") (guid nil "tag:dreamwidth.org,2011-02-12:696190:38992") (link nil "http://mjg59.dreamwidth.org/38992.html") (description nil "The Software Freedom Conservancy is currently running a <a href=\"https://sfconservancy.org/supporter/\">fundraising program</a> in an attempt to raise enough money to continue funding GPL compliance work. If they don't gain enough supporters, the majority of their compliance work will cease. And, since SFC are one of the only groups currently actively involved in performing GPL compliance work, that basically means that there will be nobody working to ensure that users have the rights that copyright holders chose to give them.<br /><br />Why does this matter? More people are using GPLed software than at any point in history. Hundreds of millions of Android devices were sold this year, all including GPLed code. An unknowably vast number of IoT devices run Linux. Cameras, Blu Ray players, TVs, light switches, coffee machines. Software running in places that we would never have previously imagined. And much of it abandoned immediately after shipping, gently rotting, exposing an increasingly large number of widely known security vulnerabilities to an increasingly hostile internet. Devices that become useless because of protocol updates. Toys that have a \"Guaranteed to work until\" date, and then suddenly Barbie goes dead and you're forced to have an unexpected conversation about API mortality with your 5-year old child.<br /><br />We can't fix all of these things. Many of these devices have important functionality locked inside proprietary components, released under licenses that grant no permission for people to examine or improve them. But there are many that we can. Millions of devices are running modern and secure versions of Android despite being abandoned by their manufacturers, purely because the vendor released appropriate source code and a community grew up to maintain it. But this can only happen when the vendor plays by the rules.<br /><br />Vendors who don't release their code remove that freedom from their users, and the weapons users have to fight against that are limited. Most users hold no copyright over the software in the device and are unable to take direct action themselves. A vendor's failure to comply dooms them to having to choose between buying a new device in 12 months or no longer receiving security updates. When yet more examples of vendor-supplied malware are discovered, it's more difficult to produce new builds without them. The utility of the devices that the user purchased is curtailed significantly.<br /><br />The Software Freedom Conservancy is one of the only organisations actively fighting against this, and if they're forced to give up their enforcement work the pressure on vendors to comply with the GPL will be reduced even further. If we want users to control their devices, to be able to obtain security updates even after the vendor has given up, we need to keep that pressure up. Supporting the SFC's work has a real impact on the security of the internet and people's lives. Please consider giving them money.<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=38992\" style=\"vertical-align: middle;\" width=\"30\" /> comments") (pubDate nil "Wed, 23 Dec 2015 19:38:18 +0000"))) ("LPC 2016: Planning has begun for LPC 2016" "<p>The planning committee for the 2016 edition of the Linux Plumbers Conference is happy to announce that planning for the conference has begun. LPC will be held November 2-4 in Santa Fe, New Mexico in conjunction with the Kernel Summit at the <a href=\"http://www.communityconventioncenter.com/\">Santa Fe Convention Center</a> in the historic downtown area. More information about LPC can be found at the <a href=\"http://linuxplumbersconf.org\">web site</a> and we will be posting additional bits and pieces here as they become available. We look forward to seeing you there!</p>" "https://www.linuxplumbersconf.org/2016/planning-has-begun-for-lpc-2016/" (22138 62510) old 14 nil nil ((title nil "LPC 2016: Planning has begun for LPC 2016") (guid nil "https://www.linuxplumbersconf.org/2016/?p=236") (link nil "https://www.linuxplumbersconf.org/2016/planning-has-begun-for-lpc-2016/") (description nil "<p>The planning committee for the 2016 edition of the Linux Plumbers Conference is happy to announce that planning for the conference has begun. LPC will be held November 2-4 in Santa Fe, New Mexico in conjunction with the Kernel Summit at the <a href=\"http://www.communityconventioncenter.com/\">Santa Fe Convention Center</a> in the historic downtown area. More information about LPC can be found at the <a href=\"http://linuxplumbersconf.org\">web site</a> and we will be posting additional bits and pieces here as they become available. We look forward to seeing you there!</p>") (pubDate nil "Wed, 23 Dec 2015 19:21:18 +0000"))) ("Rusty Russell: Bitcoin: Mixed Signs of A Fee Market" "<p>Six months ago in a <a href=\"http://rusty.ozlabs.org/?p=500\">previous post</a> I showed that 45% of transactions have an output of less that $1, and estimated that they would get squeezed out first as blocks filled.  It’s time to review that prediction, and also to see several things:</p>
<ol>
<li>Are fees rising?</li>
<li>Are fees detached from magic (default) numbers of satoshi?</li>
<li>Are low value transactions getting squeezed out?</li>
<li>Are transactions starting to shrink in response to fee pressure?</li>
</ol>
<p>Here are some scenarios: low-value transactions might be vanishing even if nothing else changes, because people’s expectations (“free global microtransactions!” are changing).  Fees might be rising but still on magic numbers, because miners and nodes increased their relayfee due to spam attacks (most commonly, the rate was increased from 1000 satoshi per kb to 5000 satoshi per kb).  Finally, we’d eventually expect wallets which produce large transactions (eg. using uncompressed signatures) to lose popularity, and wallets to get smarter about transaction generation (particularly once Segregated Witness makes it fairly easy).</p>
<h2>Fees For The Last 2 Years</h2>
<p>The <a href=\"http://ozlabs.org/~rusty/diagrams/feerate.png\">full 4 year graph</a> is very noisy, so I only plotted the mean txfee/kb for each day for the last two years, in Satoshi and USD (<a href=\"http://www.coindesk.com/price/bitcoin-price-index/\">thanks to the Coindesk BPI data</a> for the conversion):</p>
<p><img alt=\"\" class=\"alignnone\" height=\"937\" src=\"http://ozlabs.org/~rusty/diagrams/feerate-2-years.png\" width=\"1250\" /></p>
<p> </p>
<p><strong>Conclusion</strong>: Too noisy to be conclusive: they seem to be rising recently, but some of that reflects the exchange rate changes.</p>
<h2>Are Fees on Magic Boundaries?</h2>
<p>Wallets should be estimating fees: in a real fee market they’d need to.</p>
<p>Dumb wallets pay a fixed fee per kb: eg. the bitcoin-core wallet pays 1,000 (now 5,000) satoshi per kb by default; even if the transaction is 300 bytes, it will pay 5,000 satoshi.  Some wallets use (slightly more sensible) scaling-by-size, so they’d pay 1,500 satoshi.  So if a transaction fee ends in “000”, or the scaled transaction fee does (+/- 2) we can categorize them as “fixed fee”.  We assume others are using a variable fee (about 0.6% will be erroneously marked as fixed):</p>
<p><img alt=\"\" class=\"alignnone\" height=\"468\" src=\"http://ozlabs.org/~rusty/diagrams/var-or-fixed-rate.png\" width=\"1250\" /></p>
<p>This graph is a bit dense, so we thin it by grouping into weeks:</p>
<p><img alt=\"\" class=\"alignnone\" height=\"468\" src=\"http://ozlabs.org/~rusty/diagrams/var-or-fixed-rate-weekly.png\" width=\"1093\" /></p>
<p> </p>
<p><strong>Conclusion</strong>: Wallets are starting to adapt to fee pressure, though the majority are still using a fixed fee.</p>
<h2>Low Value Transactions For Last 4 Years</h2>
<p>We categorize 4 distinct types of transactions: ones which have an output below 25c, ones which have an output between 25c and $1, ones which have an output between $1 and $5, and ones which have no output below $5, and graph the trends for each for the last four years:</p>
<p><img alt=\"\" class=\"alignnone\" height=\"468\" src=\"http://ozlabs.org/~rusty/diagrams/tx-by-value.png\" width=\"1250\" /></p>
<p><strong>Conclusion: </strong>25c transactions are flat (ignoring those spam attack spikes).  &lt; $1 and &lt;$5 are growing, but most growth is coming from transactions &gt;= $5.</p>
<h2>Transaction Size For Last 4 Years</h2>
<p>Here are the transaction sizes for the last 4 years:</p>
<p><img alt=\"\" class=\"alignnone\" height=\"468\" src=\"http://ozlabs.org/~rusty/diagrams/txsize.png\" width=\"1250\" /></p>
<p><strong>Conclusion</strong>: There seems to be a slight decline in transaction sizes, but it’s not clear the cause, and it might be just noise.</p>
<h2>Conclusion</h2>
<p>There are signs of a nascent fee market, but it’s still very early. I’d expect something conclusive in the next 6 months.</p>
<p>The majority of fees should be variable, and they’re not: wallets remain poor, but users will migrate as blocks fill and more transactions get stuck.</p>
<p>A fee rate of over 10c per kb (2.5c per median transaction) hasn’t suppressed 25c transactions: perhaps it’s not high enough yet, or perhaps wallets aren’t making the relative fees clear enough (eg. my Trezor gives fees in BTC, as well as  only offering fixed fee rates).</p>
<p>The slight dip in mean transaction sizes and lack of growth in 25c transactions to may point to early market pressure, however.</p>
<p>Six months ago I <a href=\"http://rusty.ozlabs.org/?p=500\">showed that 45% of transactions were less than a dollar</a>.  In the last six months that has declined to 38%.  I previously estimated that we would want larger blocks within two years, and need them within three.  That still seems a reasonable estimate.</p>
<h3>Data</h3>
<p>I used <a href=\"https://github.com/rustyrussell/bitcoin-iterate\">bitcoin-iterate</a> and a really crappy Makefile to generate CSVs with the data.  You can <a href=\"https://github.com/rustyrussell/bitcoin-feemarket\">see the result on github</a> or go straight to downloading the <a href=\"https://github.com/rustyrussell/bitcoin-feemarket/blob/master/graphs.gnumeric?raw=true\">Gnumeric spreadsheet with the graphs</a>.</p>
<h3>Disclaimer: I Work For <a href=\"http://blockstream.com\">Blockstream</a></h3>
<p>On lightning.  Not on drawing pretty graphs.  But I wanted to see the data…</p>
<p> </p>" "http://rusty.ozlabs.org/?p=564" (22136 58715) old 15 nil nil ((title nil "Rusty Russell: Bitcoin: Mixed Signs of A Fee Market") (guid nil "http://rusty.ozlabs.org/?p=564") (link nil "http://rusty.ozlabs.org/?p=564") (description nil "<p>Six months ago in a <a href=\"http://rusty.ozlabs.org/?p=500\">previous post</a> I showed that 45% of transactions have an output of less that $1, and estimated that they would get squeezed out first as blocks filled.  It’s time to review that prediction, and also to see several things:</p>
<ol>
<li>Are fees rising?</li>
<li>Are fees detached from magic (default) numbers of satoshi?</li>
<li>Are low value transactions getting squeezed out?</li>
<li>Are transactions starting to shrink in response to fee pressure?</li>
</ol>
<p>Here are some scenarios: low-value transactions might be vanishing even if nothing else changes, because people’s expectations (“free global microtransactions!” are changing).  Fees might be rising but still on magic numbers, because miners and nodes increased their relayfee due to spam attacks (most commonly, the rate was increased from 1000 satoshi per kb to 5000 satoshi per kb).  Finally, we’d eventually expect wallets which produce large transactions (eg. using uncompressed signatures) to lose popularity, and wallets to get smarter about transaction generation (particularly once Segregated Witness makes it fairly easy).</p>
<h2>Fees For The Last 2 Years</h2>
<p>The <a href=\"http://ozlabs.org/~rusty/diagrams/feerate.png\">full 4 year graph</a> is very noisy, so I only plotted the mean txfee/kb for each day for the last two years, in Satoshi and USD (<a href=\"http://www.coindesk.com/price/bitcoin-price-index/\">thanks to the Coindesk BPI data</a> for the conversion):</p>
<p><img alt=\"\" class=\"alignnone\" height=\"937\" src=\"http://ozlabs.org/~rusty/diagrams/feerate-2-years.png\" width=\"1250\" /></p>
<p> </p>
<p><strong>Conclusion</strong>: Too noisy to be conclusive: they seem to be rising recently, but some of that reflects the exchange rate changes.</p>
<h2>Are Fees on Magic Boundaries?</h2>
<p>Wallets should be estimating fees: in a real fee market they’d need to.</p>
<p>Dumb wallets pay a fixed fee per kb: eg. the bitcoin-core wallet pays 1,000 (now 5,000) satoshi per kb by default; even if the transaction is 300 bytes, it will pay 5,000 satoshi.  Some wallets use (slightly more sensible) scaling-by-size, so they’d pay 1,500 satoshi.  So if a transaction fee ends in “000”, or the scaled transaction fee does (+/- 2) we can categorize them as “fixed fee”.  We assume others are using a variable fee (about 0.6% will be erroneously marked as fixed):</p>
<p><img alt=\"\" class=\"alignnone\" height=\"468\" src=\"http://ozlabs.org/~rusty/diagrams/var-or-fixed-rate.png\" width=\"1250\" /></p>
<p>This graph is a bit dense, so we thin it by grouping into weeks:</p>
<p><img alt=\"\" class=\"alignnone\" height=\"468\" src=\"http://ozlabs.org/~rusty/diagrams/var-or-fixed-rate-weekly.png\" width=\"1093\" /></p>
<p> </p>
<p><strong>Conclusion</strong>: Wallets are starting to adapt to fee pressure, though the majority are still using a fixed fee.</p>
<h2>Low Value Transactions For Last 4 Years</h2>
<p>We categorize 4 distinct types of transactions: ones which have an output below 25c, ones which have an output between 25c and $1, ones which have an output between $1 and $5, and ones which have no output below $5, and graph the trends for each for the last four years:</p>
<p><img alt=\"\" class=\"alignnone\" height=\"468\" src=\"http://ozlabs.org/~rusty/diagrams/tx-by-value.png\" width=\"1250\" /></p>
<p><strong>Conclusion: </strong>25c transactions are flat (ignoring those spam attack spikes).  &lt; $1 and &lt;$5 are growing, but most growth is coming from transactions &gt;= $5.</p>
<h2>Transaction Size For Last 4 Years</h2>
<p>Here are the transaction sizes for the last 4 years:</p>
<p><img alt=\"\" class=\"alignnone\" height=\"468\" src=\"http://ozlabs.org/~rusty/diagrams/txsize.png\" width=\"1250\" /></p>
<p><strong>Conclusion</strong>: There seems to be a slight decline in transaction sizes, but it’s not clear the cause, and it might be just noise.</p>
<h2>Conclusion</h2>
<p>There are signs of a nascent fee market, but it’s still very early. I’d expect something conclusive in the next 6 months.</p>
<p>The majority of fees should be variable, and they’re not: wallets remain poor, but users will migrate as blocks fill and more transactions get stuck.</p>
<p>A fee rate of over 10c per kb (2.5c per median transaction) hasn’t suppressed 25c transactions: perhaps it’s not high enough yet, or perhaps wallets aren’t making the relative fees clear enough (eg. my Trezor gives fees in BTC, as well as  only offering fixed fee rates).</p>
<p>The slight dip in mean transaction sizes and lack of growth in 25c transactions to may point to early market pressure, however.</p>
<p>Six months ago I <a href=\"http://rusty.ozlabs.org/?p=500\">showed that 45% of transactions were less than a dollar</a>.  In the last six months that has declined to 38%.  I previously estimated that we would want larger blocks within two years, and need them within three.  That still seems a reasonable estimate.</p>
<h3>Data</h3>
<p>I used <a href=\"https://github.com/rustyrussell/bitcoin-iterate\">bitcoin-iterate</a> and a really crappy Makefile to generate CSVs with the data.  You can <a href=\"https://github.com/rustyrussell/bitcoin-feemarket\">see the result on github</a> or go straight to downloading the <a href=\"https://github.com/rustyrussell/bitcoin-feemarket/blob/master/graphs.gnumeric?raw=true\">Gnumeric spreadsheet with the graphs</a>.</p>
<h3>Disclaimer: I Work For <a href=\"http://blockstream.com\">Blockstream</a></h3>
<p>On lightning.  Not on drawing pretty graphs.  But I wanted to see the data…</p>
<p> </p>") (pubDate nil "Tue, 22 Dec 2015 05:53:31 +0000"))) ("James Bottomley: The DCO, Patents and OpenStack" "<p>Historically, the <a href=\"http://developercertificate.org\">Developer Certificate of Origin</a> originally adopted by the Linux Kernel in 2005 has seen widespread use within a large variety of Open Source projects.  The DCO is designed to replace a Contributor Licence Agreement with a simple Signed-off-by attestation which is placed into the commit message of the source repository itself, thus meaning that all the necessary DCO attestations are automatically available to anyone who downloads the source code repository.  It also allows (again, through the use of a strong source control system) the identification of who changed any given line of code within the source tree and all their DCO signoffs.</p>
<p>The legal basis of the DCO is that it is an attestation by an individual developer that they have sufficient rights in the contribution to submit it under the project (or file) licence.</p>
<h2>The DCO and Corporate Contributions</h2>
<p>In certain jurisdictions, particularly the United States of America, when you work as a software developer for a Corporation, they actually own, exclusively, the copyright of any source code you produce under something called the Work for Hire doctrine.  So the question naturally arises: if the developer who makes the Signed-off-by attestation  doesn’t actually own any rights in the code, how is that attestation valid and how does the rights owning entity (the corporation) actually license the code correctly to make the contribution?</p>
<p>The answer to that question resides in something called the <a href=\"https://en.wikipedia.org/wiki/Law_of_agency\">theory of agency</a>.  Agency is the mechanism by which individuals give effect to actions of a corporation.  For example, being a nebulous entity with no actual arms or legs, a corporation cannot itself sign any documents.  Thus, when a salesman signs a contract to supply widgets on behalf of a corporation, he is acting as the agent of that corporation.  His signature on the sales contract becomes binding on the corporation as if the corporation itself had made it.  However, there’s a problem here: how does the person who paid for and is expecting the delivery of widgets know that the sales person is actually authorised to be an agent of the corporation?  The answer here is again in the theory of agency: as long as the person receiving the widgets had reasonable cause to think that the salesperson signing the contract is acting as an agent of the corporation.  Usually all that’s required is that the company gave the salesperson a business card and a title which would make someone think they were authorised to sign contracts (such as “Sales Manager”).</p>
<p>Thus, the same thing applies to developers submitting patches on behalf of a corporation.  They become agents of that corporation when making DCO attestations and thus, even if the contribution is a work for hire and the copyright owned by the corporation, the DCO attestation the developer makes is still binding on the corporation.</p>
<h2>Email addresses matter</h2>
<p>Under the<a href=\"https://en.wikipedia.org/wiki/Apparent_authority\"> theory of agency, it’s not sufficient</a> to state “I am an agent”, there must be some sign on behalf of the corporation that they’re granting agency (in the case of the salesperson, it was a business card and checkable title).  For developers making contributions with a Signed-off-by, the best indication of agency is to do the signoff using a corporate email address.  For this reason, the Linux kernel has adopted the habit of not accepting controversial patches without a corporate signoff.</p>
<h2>Patents and the DCO</h2>
<p>The Linux Kernel uses GPLv2 as its licence.  GPLv2 is solely a copyright licence and has nothing really to say about patents, except that if you assert against the project, you lose your right to distribute under GPLv2.  This is what is termed an implied patent licence, but it means that the DCO signoff for GPLv2 only concerns copyrights.  However, there are many open source licences (like Apache-2 or GPLv3) which require explicit patent grants as well as copyright ones, so can the DCO give all the necessary rights, including patent ones, to make the contribution on behalf of the corporation?  The common sense answer, which is if the developer is accepted as an agent for copyright, they should also be an agent for patent grants, isn’t as universally accepted as you might think.</p>
<h2>The OpenStack problem</h2>
<p>OpenStack has been <a href=\"https://wiki.openstack.org/wiki/OpenStackAndItsCLA\">trying for years</a> to drop its complex contributor licence infrastructure in favour of a simple DCO attestation.  Most recently, the Technical Committee <a href=\"http://git.openstack.org/cgit/openstack/governance/tree/resolutions/20140909-cla.rst\">made that request</a> of the board in 2014 and it was finally granted in a limited fashion on November 2015.  The <a href=\"https://wiki.openstack.org/w/images/2/26/263072653_2%28Individual_Contribution_LicenseAgreementStrategy%29.pdf\">recommendation</a> of the OpenStack counsel was accepted and the DCO was adopted for individuals only, keeping the contributor licence agreements for corporations.  The given reason for this is that the corporate members of OpenStack want more assurance that corporations are correctly granting their patents in their contributions than they believe the DCO gives (conversely, individuals aren’t expected to have any patents, so, for them, the DCO applies just fine since it’s effectively only a copyright attestation they’re giving).</p>
<h2>Why are Patents such an Issue?</h2>
<p>Or why do lots of people think developers aren’t agents for patents in contributions unlike for copyrights?  The essential argument (as shown <a href=\"https://twitter.com/jejb_/status/659960629134884864\">here</a>) is that corporations as a matter of practise, do not allow developers (or anyone else except specific title holders) to be agents for patent transactions and thus there should not be an expectation, even when they make a DCO attestation using a corporate email signoff, that they are.</p>
<p>One way to look at this is that corporations have no choice but to make developers agents for the copyright because without that, the DCO attestation is false since the developers themselves has no rights to a work for hire piece of code.  However, some corporations think they can get away with not making developers agents for patents because the contribution and the licence do not require this to happen.  The theory here is that the developer is making an agency grant for the copyright, but an individual grant of the patents (and, since developers don’t usually own patents, that’s no grant at all).  Effectively this is a get out of jail free card for corporations to cheat on the patent requirements of the licence.</p>
<p>Does this interpretation really hold water?  Well, I don’t think so, because it’s deceptive.  It’s deliberately trying to evade the responsibilities for patents that the licences require.  Usually under the theory of agency, deceptive practises are barred.  However, the fear that a court might be induced to accept this viewpoint is sufficient to get the OpenStack board to require that corporations sign a CLA to ensure that patents are well and truly bound.  The problem with this viewpoint is that, if it becomes common enough, it ends up being de facto what the legal situation actually is (because the question courts most often ask in cases about agency is what would the average person think, so a practise that becomes standard in the industry ipso facto becomes what the average reasonable person would think).  Effectively therefore, the very act of OpenStack acting on its fear causes the thing they fear eventually to become true.  The only way to reverse this now is to change the current state of how the industry views patents and the DCO … and that will be the subject of another post.</p>" "http://blog.hansenpartnership.com/the-dco-patents-and-openstack/" (22136 35013) old 16 nil nil ((title nil "James Bottomley: The DCO, Patents and OpenStack") (guid nil "http://blog.hansenpartnership.com/?p=312") (link nil "http://blog.hansenpartnership.com/the-dco-patents-and-openstack/") (description nil "<p>Historically, the <a href=\"http://developercertificate.org\">Developer Certificate of Origin</a> originally adopted by the Linux Kernel in 2005 has seen widespread use within a large variety of Open Source projects.  The DCO is designed to replace a Contributor Licence Agreement with a simple Signed-off-by attestation which is placed into the commit message of the source repository itself, thus meaning that all the necessary DCO attestations are automatically available to anyone who downloads the source code repository.  It also allows (again, through the use of a strong source control system) the identification of who changed any given line of code within the source tree and all their DCO signoffs.</p>
<p>The legal basis of the DCO is that it is an attestation by an individual developer that they have sufficient rights in the contribution to submit it under the project (or file) licence.</p>
<h2>The DCO and Corporate Contributions</h2>
<p>In certain jurisdictions, particularly the United States of America, when you work as a software developer for a Corporation, they actually own, exclusively, the copyright of any source code you produce under something called the Work for Hire doctrine.  So the question naturally arises: if the developer who makes the Signed-off-by attestation  doesn’t actually own any rights in the code, how is that attestation valid and how does the rights owning entity (the corporation) actually license the code correctly to make the contribution?</p>
<p>The answer to that question resides in something called the <a href=\"https://en.wikipedia.org/wiki/Law_of_agency\">theory of agency</a>.  Agency is the mechanism by which individuals give effect to actions of a corporation.  For example, being a nebulous entity with no actual arms or legs, a corporation cannot itself sign any documents.  Thus, when a salesman signs a contract to supply widgets on behalf of a corporation, he is acting as the agent of that corporation.  His signature on the sales contract becomes binding on the corporation as if the corporation itself had made it.  However, there’s a problem here: how does the person who paid for and is expecting the delivery of widgets know that the sales person is actually authorised to be an agent of the corporation?  The answer here is again in the theory of agency: as long as the person receiving the widgets had reasonable cause to think that the salesperson signing the contract is acting as an agent of the corporation.  Usually all that’s required is that the company gave the salesperson a business card and a title which would make someone think they were authorised to sign contracts (such as “Sales Manager”).</p>
<p>Thus, the same thing applies to developers submitting patches on behalf of a corporation.  They become agents of that corporation when making DCO attestations and thus, even if the contribution is a work for hire and the copyright owned by the corporation, the DCO attestation the developer makes is still binding on the corporation.</p>
<h2>Email addresses matter</h2>
<p>Under the<a href=\"https://en.wikipedia.org/wiki/Apparent_authority\"> theory of agency, it’s not sufficient</a> to state “I am an agent”, there must be some sign on behalf of the corporation that they’re granting agency (in the case of the salesperson, it was a business card and checkable title).  For developers making contributions with a Signed-off-by, the best indication of agency is to do the signoff using a corporate email address.  For this reason, the Linux kernel has adopted the habit of not accepting controversial patches without a corporate signoff.</p>
<h2>Patents and the DCO</h2>
<p>The Linux Kernel uses GPLv2 as its licence.  GPLv2 is solely a copyright licence and has nothing really to say about patents, except that if you assert against the project, you lose your right to distribute under GPLv2.  This is what is termed an implied patent licence, but it means that the DCO signoff for GPLv2 only concerns copyrights.  However, there are many open source licences (like Apache-2 or GPLv3) which require explicit patent grants as well as copyright ones, so can the DCO give all the necessary rights, including patent ones, to make the contribution on behalf of the corporation?  The common sense answer, which is if the developer is accepted as an agent for copyright, they should also be an agent for patent grants, isn’t as universally accepted as you might think.</p>
<h2>The OpenStack problem</h2>
<p>OpenStack has been <a href=\"https://wiki.openstack.org/wiki/OpenStackAndItsCLA\">trying for years</a> to drop its complex contributor licence infrastructure in favour of a simple DCO attestation.  Most recently, the Technical Committee <a href=\"http://git.openstack.org/cgit/openstack/governance/tree/resolutions/20140909-cla.rst\">made that request</a> of the board in 2014 and it was finally granted in a limited fashion on November 2015.  The <a href=\"https://wiki.openstack.org/w/images/2/26/263072653_2%28Individual_Contribution_LicenseAgreementStrategy%29.pdf\">recommendation</a> of the OpenStack counsel was accepted and the DCO was adopted for individuals only, keeping the contributor licence agreements for corporations.  The given reason for this is that the corporate members of OpenStack want more assurance that corporations are correctly granting their patents in their contributions than they believe the DCO gives (conversely, individuals aren’t expected to have any patents, so, for them, the DCO applies just fine since it’s effectively only a copyright attestation they’re giving).</p>
<h2>Why are Patents such an Issue?</h2>
<p>Or why do lots of people think developers aren’t agents for patents in contributions unlike for copyrights?  The essential argument (as shown <a href=\"https://twitter.com/jejb_/status/659960629134884864\">here</a>) is that corporations as a matter of practise, do not allow developers (or anyone else except specific title holders) to be agents for patent transactions and thus there should not be an expectation, even when they make a DCO attestation using a corporate email signoff, that they are.</p>
<p>One way to look at this is that corporations have no choice but to make developers agents for the copyright because without that, the DCO attestation is false since the developers themselves has no rights to a work for hire piece of code.  However, some corporations think they can get away with not making developers agents for patents because the contribution and the licence do not require this to happen.  The theory here is that the developer is making an agency grant for the copyright, but an individual grant of the patents (and, since developers don’t usually own patents, that’s no grant at all).  Effectively this is a get out of jail free card for corporations to cheat on the patent requirements of the licence.</p>
<p>Does this interpretation really hold water?  Well, I don’t think so, because it’s deceptive.  It’s deliberately trying to evade the responsibilities for patents that the licences require.  Usually under the theory of agency, deceptive practises are barred.  However, the fear that a court might be induced to accept this viewpoint is sufficient to get the OpenStack board to require that corporations sign a CLA to ensure that patents are well and truly bound.  The problem with this viewpoint is that, if it becomes common enough, it ends up being de facto what the legal situation actually is (because the question courts most often ask in cases about agency is what would the average person think, so a practise that becomes standard in the industry ipso facto becomes what the average reasonable person would think).  Effectively therefore, the very act of OpenStack acting on its fear causes the thing they fear eventually to become true.  The only way to reverse this now is to change the current state of how the industry views patents and the DCO … and that will be the subject of another post.</p>") (pubDate nil "Mon, 21 Dec 2015 23:18:29 +0000"))) ("James Morris: Bangalore Linux Kernel Meetup – Jan 2016" "<p><a href=\"https://twitter.com/allenpais\">Allen Pais</a>, who was one of the <a href=\"https://en.wikipedia.org/wiki/FOSS.IN\">FOSS.IN</a> organizers, and now works on my <a href=\"https://blogs.oracle.com/linuxkernel/\">team at Oracle</a>, has announced a new event, the <a href=\"https://kernelmeetup.wordpress.com/\">Bangalore Linux Kernel Meetup</a>.</p>
<p>This is a great idea!  There are many Linux kernel developers in Bangalore.</p>
<p>The first meetup will be on 16th Jan, 2016, at a location to be announced.</p>" "http://blog.namei.org/2015/12/18/bangalore-linux-kernel-meetup-jan-2016/" (22131 27236) old 17 nil nil ((title nil "James Morris: Bangalore Linux Kernel Meetup – Jan 2016") (guid nil "http://blog.namei.org/?p=629") (link nil "http://blog.namei.org/2015/12/18/bangalore-linux-kernel-meetup-jan-2016/") (description nil "<p><a href=\"https://twitter.com/allenpais\">Allen Pais</a>, who was one of the <a href=\"https://en.wikipedia.org/wiki/FOSS.IN\">FOSS.IN</a> organizers, and now works on my <a href=\"https://blogs.oracle.com/linuxkernel/\">team at Oracle</a>, has announced a new event, the <a href=\"https://kernelmeetup.wordpress.com/\">Bangalore Linux Kernel Meetup</a>.</p>
<p>This is a great idea!  There are many Linux kernel developers in Bangalore.</p>
<p>The first meetup will be on 16th Jan, 2016, at a location to be announced.</p>") (pubDate nil "Fri, 18 Dec 2015 02:07:32 +0000"))) ("Pete Zaitcev: HP Reconfigurable" "<p>I learned <a href=\"https://www.mirantis.com/blog/hpe-introduces-a-new-way-of-computing-but-will-it-work/\" rel=\"nofollow\">by way of Mirantis</a> today that an entity known as \"HP Enterprise\" or \"HPE\" introduced something described thus:</p>
<blockquote>
<p>It’s an architecture in which a large server acts as a “pool” of compute, storage, and networking resources, the same way a cloud might. When an application needs resources, they’re allocated from that hardware pool, and when the application goes away, they’re returned from the pool.  All of this happens via the composable architecture.</p>
</blockquote>
<p>That may explain the mysterious Intel computer that I saw <a href=\"http://zaitcev.livejournal.com/230683.html\" rel=\"nofollow\">in Tokyo</a>. So it's not quite NUMA taken to extremes, it's also hardware domains taken to extremes.</p>" "http://zaitcev.livejournal.com/231095.html" (22128 23999) old 18 nil nil ((title nil "Pete Zaitcev: HP Reconfigurable") (guid nil "http://zaitcev.livejournal.com/231095.html") (link nil "http://zaitcev.livejournal.com/231095.html") (description nil "<p>I learned <a href=\"https://www.mirantis.com/blog/hpe-introduces-a-new-way-of-computing-but-will-it-work/\" rel=\"nofollow\">by way of Mirantis</a> today that an entity known as \"HP Enterprise\" or \"HPE\" introduced something described thus:</p>
<blockquote>
<p>It’s an architecture in which a large server acts as a “pool” of compute, storage, and networking resources, the same way a cloud might. When an application needs resources, they’re allocated from that hardware pool, and when the application goes away, they’re returned from the pool.  All of this happens via the composable architecture.</p>
</blockquote>
<p>That may explain the mysterious Intel computer that I saw <a href=\"http://zaitcev.livejournal.com/230683.html\" rel=\"nofollow\">in Tokyo</a>. So it's not quite NUMA taken to extremes, it's also hardware domains taken to extremes.</p>") (pubDate nil "Tue, 15 Dec 2015 18:36:47 +0000"))) ("Daniel Vetter: Neat drm/i915 stuff for 4.4" "Due to vacations, conferences and other things I'm way later than usual and <a href=\"http://blog.ffwll.ch/2015/09/neat-drmi915-stuff-for-43.html\">4.3 has been released</a> a while ago. More than overdue to take a look at what's in store in the next kernel release.<br /><a name=\"more\"></a>First looking at overall infrastructure work on the display side there's a lot of <b>atomic conversion</b> progress again. One feature that's now on solid fundations is <b>fastboot, built on top of atomic infrastructure</b> with patches from Maarten. Unfortunately we had to disable it again due to some backligh issues early in 4.4-rc. The other big piece is reworking the watermark update code (Ville&amp;Matt), which unfortunately ran into regression roadblocks already in the development cycle and had to be reverted partially. Another piece of infrastructure building on top of atomic is <b>validation&amp;adjusting the display clock</b> - some ULT chips can't drive all DP screens and the driver now detects that, and it should also downclock when less bandwidth is needed. This was implemented by Mika Kahola and Ville.<br /><br />Again this round has seen a lot of improvements and <b>bug fixes to PSR code</b> (from Rodrigo) and for <b>FBC</b> (from Paulo). Unfortunately we're not yet done with those, but it looks really good that at least PSR can finally be enabled for 4.5. Still on the display side of the driver there was a pile of smaller improvements all over: Prep work for Broxton DSI support (Shashank Sharma). HDMI detection finally checks the hotplug sense, after some workaround from Sonika. And tons of cleanups all over. Fixing up DMC support (for new low-power display states) was also a topic, but we've only managed to fix it up for real in 4.5.<br /><br />On the GEM side the big thing for sure is support for the extended <b>48-bit GPU address space</b> on Broadwell and later chips, from Michel Thierry. And then there's the code for <b>GuC-based command submission</b> (Alex Dai and Dave Gordon), which is merged but not yet enabled by default. The idea behind that is to feed all command submission through an on-chip microcontroller, which can then react much faster to changing workloads and tune power states accordingly. It should also help long-term with better scheduling by supporting preemption. But none of that is implemented yet, so this is just fundations.<br /><br />For existing features there are <b>bugfixes for userptr and shrinker improvements</b> from Chris Wilson. And Tvrtko has extended the vma view code in prepartion of rotation support for NV12.<br /><br />Of course there's also been the usual enabling work for new platforms, this time around mostly consisting of workaround patches for Skylake and Broxton. But Zhiyuan Lv submitted support for the <b>virtualized XenGT gpu support on Broadwell</b>.<br /><br />Finally for driver internals there's the massive work from Ville to <b>make the register access functions type safe</b>. This is escpecially a problem for writing registers, where both the register and the value that needs to be written are of type <code>uin32_t</code>. That resulted in subtile bugs fairly often. Ville encapsulated the register offset into a struct and converted all the thousands of register #defines and users over to that, and now compilation will fail if we ever get this wrong again." "http://blog.ffwll.ch/2015/12/neat-drmi915-stuff-for-44.html" (22120 2048) old 19 nil nil ((title nil "Daniel Vetter: Neat drm/i915 stuff for 4.4") (guid nil "tag:blogger.com,1999:blog-8047628228132312466.post-64982716988550007") (link nil "http://blog.ffwll.ch/2015/12/neat-drmi915-stuff-for-44.html") (description nil "Due to vacations, conferences and other things I'm way later than usual and <a href=\"http://blog.ffwll.ch/2015/09/neat-drmi915-stuff-for-43.html\">4.3 has been released</a> a while ago. More than overdue to take a look at what's in store in the next kernel release.<br /><a name=\"more\"></a>First looking at overall infrastructure work on the display side there's a lot of <b>atomic conversion</b> progress again. One feature that's now on solid fundations is <b>fastboot, built on top of atomic infrastructure</b> with patches from Maarten. Unfortunately we had to disable it again due to some backligh issues early in 4.4-rc. The other big piece is reworking the watermark update code (Ville&amp;Matt), which unfortunately ran into regression roadblocks already in the development cycle and had to be reverted partially. Another piece of infrastructure building on top of atomic is <b>validation&amp;adjusting the display clock</b> - some ULT chips can't drive all DP screens and the driver now detects that, and it should also downclock when less bandwidth is needed. This was implemented by Mika Kahola and Ville.<br /><br />Again this round has seen a lot of improvements and <b>bug fixes to PSR code</b> (from Rodrigo) and for <b>FBC</b> (from Paulo). Unfortunately we're not yet done with those, but it looks really good that at least PSR can finally be enabled for 4.5. Still on the display side of the driver there was a pile of smaller improvements all over: Prep work for Broxton DSI support (Shashank Sharma). HDMI detection finally checks the hotplug sense, after some workaround from Sonika. And tons of cleanups all over. Fixing up DMC support (for new low-power display states) was also a topic, but we've only managed to fix it up for real in 4.5.<br /><br />On the GEM side the big thing for sure is support for the extended <b>48-bit GPU address space</b> on Broadwell and later chips, from Michel Thierry. And then there's the code for <b>GuC-based command submission</b> (Alex Dai and Dave Gordon), which is merged but not yet enabled by default. The idea behind that is to feed all command submission through an on-chip microcontroller, which can then react much faster to changing workloads and tune power states accordingly. It should also help long-term with better scheduling by supporting preemption. But none of that is implemented yet, so this is just fundations.<br /><br />For existing features there are <b>bugfixes for userptr and shrinker improvements</b> from Chris Wilson. And Tvrtko has extended the vma view code in prepartion of rotation support for NV12.<br /><br />Of course there's also been the usual enabling work for new platforms, this time around mostly consisting of workaround patches for Skylake and Broxton. But Zhiyuan Lv submitted support for the <b>virtualized XenGT gpu support on Broadwell</b>.<br /><br />Finally for driver internals there's the massive work from Ville to <b>make the register access functions type safe</b>. This is escpecially a problem for writing registers, where both the register and the value that needs to be written are of type <code>uin32_t</code>. That resulted in subtile bugs fairly often. Ville encapsulated the register offset into a struct and converted all the thousands of register #defines and users over to that, and now compilation will fail if we ever get this wrong again.") (pubDate nil "Wed, 09 Dec 2015 10:52:48 +0000"))) ("Michael Kerrisk (manpages): man-pages-4.03 is released" "I've released <i>man-pages-4.03</i>. The release tarball is available on <a href=\"http://www.kernel.org/pub/linux/docs/man-pages/\">kernel.org</a>. The browsable online pages can be <a href=\"http://man7.org/linux/man-pages/index.html\">found on man7.org</a>. The Git repository for <i>man-pages</i> is <a href=\"http://www.kernel.org/doc/man-pages/download.html\">available on kernel.org</a>.<br /><br />This release is relatively small, but nevertheless nearly 40 people contributed patches, bug reports,and comments. The more significant <a href=\"http://man7.org/linux/man-pages/changelog.html#release_4.03\">changes in <span style=\"font-style: italic;\">man-pages-4.03</span></a> include the following:<br /><ul><li>Vince Weaver has once again been very active on the <a href=\"http://man7.org/linux/man-pages/man2/perf_event_open.2.html\"><i>perf_event_open(2)</i></a> page, making many updates related to recent kernel changes.</li><li>Documentation of the ambient capabilities feature that was added in Linux 4.3 has been added to the <i><a href=\"http://man7.org/linux/man-pages/man7/capabilities.7.html\">capabilities(7)</a></i> and <i><a href=\"http://man7.org/linux/man-pages/man2/prctl.2.html\">prctl(2)</a></i> pages.</li></ul>" "http://linux-man-pages.blogspot.com/2015/12/man-pages-403-is-released.html" (22114 55342) old 20 nil nil ((title nil "Michael Kerrisk (manpages): man-pages-4.03 is released") (guid nil "tag:blogger.com,1999:blog-3174631896317411826.post-3309684743588243307") (link nil "http://linux-man-pages.blogspot.com/2015/12/man-pages-403-is-released.html") (description nil "I've released <i>man-pages-4.03</i>. The release tarball is available on <a href=\"http://www.kernel.org/pub/linux/docs/man-pages/\">kernel.org</a>. The browsable online pages can be <a href=\"http://man7.org/linux/man-pages/index.html\">found on man7.org</a>. The Git repository for <i>man-pages</i> is <a href=\"http://www.kernel.org/doc/man-pages/download.html\">available on kernel.org</a>.<br /><br />This release is relatively small, but nevertheless nearly 40 people contributed patches, bug reports,and comments. The more significant <a href=\"http://man7.org/linux/man-pages/changelog.html#release_4.03\">changes in <span style=\"font-style: italic;\">man-pages-4.03</span></a> include the following:<br /><ul><li>Vince Weaver has once again been very active on the <a href=\"http://man7.org/linux/man-pages/man2/perf_event_open.2.html\"><i>perf_event_open(2)</i></a> page, making many updates related to recent kernel changes.</li><li>Documentation of the ambient capabilities feature that was added in Linux 4.3 has been added to the <i><a href=\"http://man7.org/linux/man-pages/man7/capabilities.7.html\">capabilities(7)</a></i> and <i><a href=\"http://man7.org/linux/man-pages/man2/prctl.2.html\">prctl(2)</a></i> pages.</li></ul>") (pubDate nil "Sat, 05 Dec 2015 12:27:26 +0000"))) ("Matthew Garrett: What is hacker culture?" "Eric Raymond, author of <a href=\"http://www.catb.org/esr/writings/cathedral-bazaar/\">The Cathedral and the Bazaar</a> (an important work describing the effectiveness of open collaboration and development), recently wrote a piece <a href=\"http://esr.ibiblio.org/?p=6918\">calling for \"Social Justice Warriors\" to be ejected from the hacker community</a>. The primary thrust of his argument is that by calling for a removal of the \"cult of meritocracy\", these SJWs are attacking the central aspect of hacker culture - that the quality of code is all that matters.<br /><br />This argument is simply wrong.<br /><br />Eric's been involved in software development for a long time. In that time he's seen a number of significant changes. We've gone from computers being the playthings of the privileged few to being nearly ubiquitous. We've moved from the internet being something you found in universities to something you carry around in your pocket. You can now own a computer whose CPU executes only free software from the moment you press the power button. And, as Eric wrote almost 20 years ago, we've identified that the \"Bazaar\" model of open collaborative development works better than the \"Cathedral\" model of closed centralised development.<br /><br />These are huge shifts in how computers are used, how available they are, how important they are in people's lives, and, as a consequence, how we develop software. It's not a surprise that the rise of Linux and the victory of the bazaar model coincided with internet access becoming more widely available. As the potential pool of developers grew larger, development methods had to be altered. It was no longer possible to insist that somebody spend a significant period of time winning the trust of the core developers before being permitted to give feedback on code. Communities had to change in order to accept these offers of work, and the communities were better for that change.<br /><br />The increasing ubiquity of computing has had another outcome. People are much more aware of the role of computing in their lives. They are more likely to understand how proprietary software can restrict them, how not having the freedom to share software can impair people's lives, how not being able to involve themselves in software development means software doesn't meet their needs. The largest triumph of free software has not been amongst people from a traditional software development background - it's been the fact that we've grown our communities to include people from a huge number of different walks of life. Free software has helped bring computing to under-served populations all over the world. It's aided circumvention of censorship. It's inspired people who would never have considered software development as something they could be involved in to develop entire careers in the field. We will not win because we are better developers. We will win because our software meets the needs of many more people, needs the proprietary software industry either can not or will not satisfy. We will win because our software is shaped not only by people who have a university degree and a six figure salary in San Francisco, but because our contributors include people whose native language is spoken by so few people that proprietary operating system vendors won't support it, people who live in a heavily censored regime and rely on free software for free communication, people who rely on free software because they can't otherwise afford the tools they would need to participate in development.<br /><br />In other words, we will win because free software is accessible to more of society than proprietary software. And for that to be true, it must be possible for our communities to be accessible to anybody who can contribute, regardless of their background.<br /><br />Up until this point, I don't think I've made any controversial claims. In fact, I suspect that Eric would agree. He would argue that because hacker culture defines itself through the quality of contributions, the background of the contributor is irrelevant. On the internet, nobody knows that you're contributing from a basement in an active warzone, or from a refuge shelter after escaping an abusive relationship, or with the aid of assistive technology. If you can write the code, you can participate.<br /><br />Of course, this kind of viewpoint is overly naive. Humans are wonderful at noticing indications of \"otherness\". Eric even <a href=\"http://esr.ibiblio.org/?p=5001\">wrote</a> about his struggle to stop having a viscerally negative reaction to people of a particular race. This happened within the past few years, so before then we can assume that he was less aware of the issue. If Eric received a patch from someone whose name indicated membership of this group, would there have been part of his subconscious that reacted negatively? Would he have rationalised this into a more critical analysis of the patch, increasing the probability of rejection? We don't know, and it's unlikely that Eric does either.<br /><br />Hacker culture has long been concerned with good design, and a core concept of good design is that code should fail safe - ie, if something unexpected happens or an assumption turns out to be untrue, the desirable outcome is the one that does least harm. A command that fails to receive a filename as an argument shouldn't assume that it should modify <em>all</em> files. A network transfer that fails a checksum shouldn't be permitted to overwrite the existing data. An authentication server that receives an unexpected error shouldn't default to granting access. And a development process that may be subject to unconscious bias should have processes in place that make it less likely that said bias will result in the rejection of useful contributions.<br /><br />When people criticise meritocracy, they're not criticising the concept of treating contributions based on their merit. They're criticising the idea that humans are sufficiently self-aware that they will be able to identify and reject every subconscious prejudice that will affect their treatment of others. It's not a criticism of a desirable goal, it's a criticism of a flawed implementation. There's <a href=\"http://asq.sagepub.com/content/55/4/543.short\">evidence that organisations that claim to embody meritocratic principles are more likely to reward men than women even when everything else is equal</a>. The \"cult of meritocracy\" isn't the belief that meritocracy is a good thing, it's the belief that a project founded on meritocracy will automatically be free of bias.<br /><br />Projects like the <a href=\"http://contributor-covenant.org/\">Contributor Covenant</a> that Eric finds so objectionable exist to help create processes that (at least partially) compensate for our flaws. Review of our processes to determine whether we're making poor social decisions is just as important as review of our code to determine whether we're making poor technical decisions. Just as the bazaar overtook the cathedral by making it easier for developers to be involved, inclusive communities will overtake \"pure meritocracies\" because, in the long run, these communities will produce better output - not just in terms of the quality of the code, but also in terms of the ability of the project to meet the needs of a wider range of people.<br /><br />The fight between the cathedral and the bazaar came from people who were outside the cathedral. Those fighting against the assumption that meritocracies work may be outside what Eric considers to be hacker culture, but they're already part of our communities, already making contributions to our projects, already bringing free software to more people than ever before. This time it's Eric building a cathedral and decrying the decadent hordes in their bazaar, Eric who's failed to notice the shift in the culture that surrounds him. And, like those who continued building their cathedrals in the 90s, it's Eric who's now irrelevant to hacker culture.<br /><br />(Edited to add: for two quite different perspectives on why Eric's wrong, see <a href=\"https://tim.dreamwidth.org/1986615.html\">Tim's</a> and <a href=\"https://medium.com/@coralineada/why-hackers-must-welcome-social-justice-advocates-1f8d7e216b00#.jyd01hyyi\">Coraline's</a> posts)<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=38746\" style=\"vertical-align: middle;\" width=\"30\" /> comments" "http://mjg59.dreamwidth.org/38746.html" (22107 32560) old 21 nil nil ((title nil "Matthew Garrett: What is hacker culture?") (guid nil "tag:dreamwidth.org,2011-02-12:696190:38746") (link nil "http://mjg59.dreamwidth.org/38746.html") (description nil "Eric Raymond, author of <a href=\"http://www.catb.org/esr/writings/cathedral-bazaar/\">The Cathedral and the Bazaar</a> (an important work describing the effectiveness of open collaboration and development), recently wrote a piece <a href=\"http://esr.ibiblio.org/?p=6918\">calling for \"Social Justice Warriors\" to be ejected from the hacker community</a>. The primary thrust of his argument is that by calling for a removal of the \"cult of meritocracy\", these SJWs are attacking the central aspect of hacker culture - that the quality of code is all that matters.<br /><br />This argument is simply wrong.<br /><br />Eric's been involved in software development for a long time. In that time he's seen a number of significant changes. We've gone from computers being the playthings of the privileged few to being nearly ubiquitous. We've moved from the internet being something you found in universities to something you carry around in your pocket. You can now own a computer whose CPU executes only free software from the moment you press the power button. And, as Eric wrote almost 20 years ago, we've identified that the \"Bazaar\" model of open collaborative development works better than the \"Cathedral\" model of closed centralised development.<br /><br />These are huge shifts in how computers are used, how available they are, how important they are in people's lives, and, as a consequence, how we develop software. It's not a surprise that the rise of Linux and the victory of the bazaar model coincided with internet access becoming more widely available. As the potential pool of developers grew larger, development methods had to be altered. It was no longer possible to insist that somebody spend a significant period of time winning the trust of the core developers before being permitted to give feedback on code. Communities had to change in order to accept these offers of work, and the communities were better for that change.<br /><br />The increasing ubiquity of computing has had another outcome. People are much more aware of the role of computing in their lives. They are more likely to understand how proprietary software can restrict them, how not having the freedom to share software can impair people's lives, how not being able to involve themselves in software development means software doesn't meet their needs. The largest triumph of free software has not been amongst people from a traditional software development background - it's been the fact that we've grown our communities to include people from a huge number of different walks of life. Free software has helped bring computing to under-served populations all over the world. It's aided circumvention of censorship. It's inspired people who would never have considered software development as something they could be involved in to develop entire careers in the field. We will not win because we are better developers. We will win because our software meets the needs of many more people, needs the proprietary software industry either can not or will not satisfy. We will win because our software is shaped not only by people who have a university degree and a six figure salary in San Francisco, but because our contributors include people whose native language is spoken by so few people that proprietary operating system vendors won't support it, people who live in a heavily censored regime and rely on free software for free communication, people who rely on free software because they can't otherwise afford the tools they would need to participate in development.<br /><br />In other words, we will win because free software is accessible to more of society than proprietary software. And for that to be true, it must be possible for our communities to be accessible to anybody who can contribute, regardless of their background.<br /><br />Up until this point, I don't think I've made any controversial claims. In fact, I suspect that Eric would agree. He would argue that because hacker culture defines itself through the quality of contributions, the background of the contributor is irrelevant. On the internet, nobody knows that you're contributing from a basement in an active warzone, or from a refuge shelter after escaping an abusive relationship, or with the aid of assistive technology. If you can write the code, you can participate.<br /><br />Of course, this kind of viewpoint is overly naive. Humans are wonderful at noticing indications of \"otherness\". Eric even <a href=\"http://esr.ibiblio.org/?p=5001\">wrote</a> about his struggle to stop having a viscerally negative reaction to people of a particular race. This happened within the past few years, so before then we can assume that he was less aware of the issue. If Eric received a patch from someone whose name indicated membership of this group, would there have been part of his subconscious that reacted negatively? Would he have rationalised this into a more critical analysis of the patch, increasing the probability of rejection? We don't know, and it's unlikely that Eric does either.<br /><br />Hacker culture has long been concerned with good design, and a core concept of good design is that code should fail safe - ie, if something unexpected happens or an assumption turns out to be untrue, the desirable outcome is the one that does least harm. A command that fails to receive a filename as an argument shouldn't assume that it should modify <em>all</em> files. A network transfer that fails a checksum shouldn't be permitted to overwrite the existing data. An authentication server that receives an unexpected error shouldn't default to granting access. And a development process that may be subject to unconscious bias should have processes in place that make it less likely that said bias will result in the rejection of useful contributions.<br /><br />When people criticise meritocracy, they're not criticising the concept of treating contributions based on their merit. They're criticising the idea that humans are sufficiently self-aware that they will be able to identify and reject every subconscious prejudice that will affect their treatment of others. It's not a criticism of a desirable goal, it's a criticism of a flawed implementation. There's <a href=\"http://asq.sagepub.com/content/55/4/543.short\">evidence that organisations that claim to embody meritocratic principles are more likely to reward men than women even when everything else is equal</a>. The \"cult of meritocracy\" isn't the belief that meritocracy is a good thing, it's the belief that a project founded on meritocracy will automatically be free of bias.<br /><br />Projects like the <a href=\"http://contributor-covenant.org/\">Contributor Covenant</a> that Eric finds so objectionable exist to help create processes that (at least partially) compensate for our flaws. Review of our processes to determine whether we're making poor social decisions is just as important as review of our code to determine whether we're making poor technical decisions. Just as the bazaar overtook the cathedral by making it easier for developers to be involved, inclusive communities will overtake \"pure meritocracies\" because, in the long run, these communities will produce better output - not just in terms of the quality of the code, but also in terms of the ability of the project to meet the needs of a wider range of people.<br /><br />The fight between the cathedral and the bazaar came from people who were outside the cathedral. Those fighting against the assumption that meritocracies work may be outside what Eric considers to be hacker culture, but they're already part of our communities, already making contributions to our projects, already bringing free software to more people than ever before. This time it's Eric building a cathedral and decrying the decadent hordes in their bazaar, Eric who's failed to notice the shift in the culture that surrounds him. And, like those who continued building their cathedrals in the 90s, it's Eric who's now irrelevant to hacker culture.<br /><br />(Edited to add: for two quite different perspectives on why Eric's wrong, see <a href=\"https://tim.dreamwidth.org/1986615.html\">Tim's</a> and <a href=\"https://medium.com/@coralineada/why-hackers-must-welcome-social-justice-advocates-1f8d7e216b00#.jyd01hyyi\">Coraline's</a> posts)<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=38746\" style=\"vertical-align: middle;\" width=\"30\" /> comments") (pubDate nil "Sun, 29 Nov 2015 22:41:52 +0000"))) ("Matthew Garrett: If it's not practical to redistribute free software, it's not free software in practice" "I've previously written about Canonical's <a href=\"https://mjg59.dreamwidth.org/35969.html\">obnoxious IP policy</a> and how <a href=\"https://mjg59.dreamwidth.org/37113.html\">Mark Shuttleworth admits it's deliberately vague</a>. After spending some time discussing specific examples with Canonical, I've been explicitly told that while Canonical will gladly give me a cost-free trademark license permitting me to redistribute unmodified Ubuntu binaries, they will not tell me what <q>Any redistribution of modified versions of Ubuntu must be approved, certified or provided by Canonical if you are going to associate it with the Trademarks. Otherwise you must remove and replace the Trademarks and will need to recompile the source code to create your own binaries</q> actually <em>means</em>.<br /><br />Why does this matter? The <a href=\"http://www.gnu.org/philosophy/free-sw.en.html\">free software definition</a> requires that you be able to redistribute software to other people in either unmodified or modified form without needing to ask for permission first. This makes it clear that Ubuntu itself isn't free software - distributing the individual binary packages without permission is forbidden, even if they wouldn't contain any infringing trademarks[1]. This is obnoxious, but not inherently toxic. The source packages for Ubuntu could still be free software, making it fairly straightforward to build a free software equivalent.<br /><br />Unfortunately, while true in theory, this isn't true in practice. The issue here is the apparently simple phrase <q>you must remove and replace the Trademarks and will need to recompile the source code</q>. \"Trademarks\" is defined later as being the words \"Ubuntu\", \"Kubuntu\", \"Juju\", \"Landscape\", \"Edubuntu\" and \"Xubuntu\" in either textual or logo form. The naive interpretation of this is that you have to remove trademarks where they'd be infringing - for instance, shipping the Ubuntu bootsplash as part of a modified product would almost certainly be clear trademark infringement, so you shouldn't do that. But that's not what the policy actually says. It insists that all trademarks be removed, whether they would embody an infringement or not. If a README says \"To build this software under Ubuntu, install the following packages\", a literal reading of Canonical's policy would require you to remove or replace the word \"Ubuntu\" even though failing to do so wouldn't be a trademark infringement. If an @ubuntu.com email address is present in a changelog, you'd have to change it. You wouldn't be able to ship the juju-core package without renaming it and the application within. If this is what the policy means, it's so impractical to be able to rebuild Ubuntu that it's not free software in any meaningful way.<br /><br />This seems like a pretty ludicrous interpretation, but it's one that Canonical refuse to explicitly rule out. Compare this to <a href=\"https://fedoraproject.org/wiki/Legal:Trademark_guidelines#Distributing_combinations_of_Fedora_software_with_non-Fedora_or_modified_Fedora_software\">Red Hat's requirements around Fedora</a> - if you replace the fedora-logos, fedora-release and fedora-release-notes packages with your own content, you're good. A policy like this satisfies the concerns that <a href=\"http://blog.dustinkirkland.com/2015/07/appellation-of-origin-from-ubuntu.html\">Dustin raised</a> over people misrepresenting their products, but still makes it easy for users to distribute modified code to other users. There's nothing whatsoever stopping Canonical from adopting a similarly unambiguous policy.<br /><br />Mark has repeatedly asserted that attempts to raise this issue are mere FUD, but he won't answer you if you ask him direct questions about this policy and will insist that it's necessary to protect Ubuntu's brand. The reality is that if Debian had had an identical policy in 2004, Ubuntu wouldn't exist. The effort required to strip all Debian trademarks from the source packages would have been immense[2], and this would have had to be repeated for every release. While this policy is in place, nobody's going to be able to take Ubuntu and build something better. It's grotesquely hypocritical, especially when the Ubuntu website still <a href=\"http://www.ubuntu.com/about/about-ubuntu/our-philosophy\">talks about their belief that people should be able to distribute modifications without licensing fees</a>.<br /><br />All that's required for Canonical to deal with this problem is to follow Fedora's lead and isolate their trademarks in a small set of packages, then tell users that those packages must be replaced if distributing a modified version of Ubuntu. If they're serious about this being a branding issue, they'll do it. And if I'm right that <a href=\"https://mjg59.dreamwidth.org/37113.html\">the policy is deliberately obfuscated so Canonical can encourage people to buy licenses</a>, they won't. It's easy for them to prove me wrong, and I'll be delighted if they do. Let's see what happens.<br /><br />[1] The policy is quite clear on this. If you want to distribute something other than an unmodified Ubuntu image, you have two choices:<ol><li>Gain approval or certification from Canonical</li><li>Remove all trademarks and recompile the source code</li></ol> Note that option 2 requires you to rebuild even if there are no trademarks to remove.<br /><br />[2] Especially when every source package contains a directory called \"debian\"…<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=38467\" style=\"vertical-align: middle;\" width=\"30\" /> comments" "http://mjg59.dreamwidth.org/38467.html" (22094 19006) old 22 nil nil ((title nil "Matthew Garrett: If it's not practical to redistribute free software, it's not free software in practice") (guid nil "tag:dreamwidth.org,2011-02-12:696190:38467") (link nil "http://mjg59.dreamwidth.org/38467.html") (description nil "I've previously written about Canonical's <a href=\"https://mjg59.dreamwidth.org/35969.html\">obnoxious IP policy</a> and how <a href=\"https://mjg59.dreamwidth.org/37113.html\">Mark Shuttleworth admits it's deliberately vague</a>. After spending some time discussing specific examples with Canonical, I've been explicitly told that while Canonical will gladly give me a cost-free trademark license permitting me to redistribute unmodified Ubuntu binaries, they will not tell me what <q>Any redistribution of modified versions of Ubuntu must be approved, certified or provided by Canonical if you are going to associate it with the Trademarks. Otherwise you must remove and replace the Trademarks and will need to recompile the source code to create your own binaries</q> actually <em>means</em>.<br /><br />Why does this matter? The <a href=\"http://www.gnu.org/philosophy/free-sw.en.html\">free software definition</a> requires that you be able to redistribute software to other people in either unmodified or modified form without needing to ask for permission first. This makes it clear that Ubuntu itself isn't free software - distributing the individual binary packages without permission is forbidden, even if they wouldn't contain any infringing trademarks[1]. This is obnoxious, but not inherently toxic. The source packages for Ubuntu could still be free software, making it fairly straightforward to build a free software equivalent.<br /><br />Unfortunately, while true in theory, this isn't true in practice. The issue here is the apparently simple phrase <q>you must remove and replace the Trademarks and will need to recompile the source code</q>. \"Trademarks\" is defined later as being the words \"Ubuntu\", \"Kubuntu\", \"Juju\", \"Landscape\", \"Edubuntu\" and \"Xubuntu\" in either textual or logo form. The naive interpretation of this is that you have to remove trademarks where they'd be infringing - for instance, shipping the Ubuntu bootsplash as part of a modified product would almost certainly be clear trademark infringement, so you shouldn't do that. But that's not what the policy actually says. It insists that all trademarks be removed, whether they would embody an infringement or not. If a README says \"To build this software under Ubuntu, install the following packages\", a literal reading of Canonical's policy would require you to remove or replace the word \"Ubuntu\" even though failing to do so wouldn't be a trademark infringement. If an @ubuntu.com email address is present in a changelog, you'd have to change it. You wouldn't be able to ship the juju-core package without renaming it and the application within. If this is what the policy means, it's so impractical to be able to rebuild Ubuntu that it's not free software in any meaningful way.<br /><br />This seems like a pretty ludicrous interpretation, but it's one that Canonical refuse to explicitly rule out. Compare this to <a href=\"https://fedoraproject.org/wiki/Legal:Trademark_guidelines#Distributing_combinations_of_Fedora_software_with_non-Fedora_or_modified_Fedora_software\">Red Hat's requirements around Fedora</a> - if you replace the fedora-logos, fedora-release and fedora-release-notes packages with your own content, you're good. A policy like this satisfies the concerns that <a href=\"http://blog.dustinkirkland.com/2015/07/appellation-of-origin-from-ubuntu.html\">Dustin raised</a> over people misrepresenting their products, but still makes it easy for users to distribute modified code to other users. There's nothing whatsoever stopping Canonical from adopting a similarly unambiguous policy.<br /><br />Mark has repeatedly asserted that attempts to raise this issue are mere FUD, but he won't answer you if you ask him direct questions about this policy and will insist that it's necessary to protect Ubuntu's brand. The reality is that if Debian had had an identical policy in 2004, Ubuntu wouldn't exist. The effort required to strip all Debian trademarks from the source packages would have been immense[2], and this would have had to be repeated for every release. While this policy is in place, nobody's going to be able to take Ubuntu and build something better. It's grotesquely hypocritical, especially when the Ubuntu website still <a href=\"http://www.ubuntu.com/about/about-ubuntu/our-philosophy\">talks about their belief that people should be able to distribute modifications without licensing fees</a>.<br /><br />All that's required for Canonical to deal with this problem is to follow Fedora's lead and isolate their trademarks in a small set of packages, then tell users that those packages must be replaced if distributing a modified version of Ubuntu. If they're serious about this being a branding issue, they'll do it. And if I'm right that <a href=\"https://mjg59.dreamwidth.org/37113.html\">the policy is deliberately obfuscated so Canonical can encourage people to buy licenses</a>, they won't. It's easy for them to prove me wrong, and I'll be delighted if they do. Let's see what happens.<br /><br />[1] The policy is quite clear on this. If you want to distribute something other than an unmodified Ubuntu image, you have two choices:<ol><li>Gain approval or certification from Canonical</li><li>Remove all trademarks and recompile the source code</li></ol> Note that option 2 requires you to rebuild even if there are no trademarks to remove.<br /><br />[2] Especially when every source package contains a directory called \"debian\"…<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=38467\" style=\"vertical-align: middle;\" width=\"30\" /> comments") (pubDate nil "Thu, 19 Nov 2015 22:16:30 +0000"))) ("Gustavo F. Padovan: Collabora contributions to Linux Kernel 4.2" "<p>A total of 63 patches were contributed upsteam by <a href=\"http://www.collabora.com\" target=\"_blank\">Collabora</a> engineers as part of our current projects.</p>
<p>In the ARM multi_v7_defconfig we have the addition of support for <a href=\"https://lkml.org/lkml/2015/5/14/460\" target=\"_blank\">Exynos Chromebooks</a>, all options that had a tristate Kconfig option were added as module. After this change it was found that a few drivers weren’t working  properly when built as module, so this was fixed. This work was done by Javier Martinez.</p>
<p>Javier also added <a href=\"https://lkml.org/lkml/2015/6/4/144\" target=\"_blank\">multi EC support</a> as newer Chromebooks have more than one Embedded Controller in the system.</p>
<p>Tomeu Vizoso added <a href=\"https://lkml.org/lkml/2015/3/11/160\" target=\"_blank\">EMC (External Memory Controller) support</a> to the Tegra124 platform.</p>
<p>On the DRM side initial support for Atomic Modesetting was added to Exynos devices by Gustavo Padovan. The Atomic Modesetting interface allows all screen updates such as changing modes, pageflip and set planes/cursors to happen in the same IOCTL. Thus everything can be updated atomically. More on that can be found at Daniel Vetter’s post at <a href=\"https://lwn.net/Articles/653071/\" target=\"_blank\">LWN.net</a>. Another contribution, from Daniel Stone, to Atomic Modesetting was the addition of the <a href=\"http://comments.gmane.org/gmane.comp.video.dri.devel/129629\" target=\"_blank\">CRTC state mode property</a>, it is through this property that userspace configure a modeset that will be updated via an Atomic Modesetting ioctl.</p>
<p>Following is a list of all patches submitted by Collabora for this kernel release:</p>
<p style=\"margin-bottom: 0;\">Daniel Stone (17):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=9b0adc29d203116cadd81b663518104cfb19b48c\">drm/atomic: Don’t open-code CRTC state destroy</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=4339ed82b2fe11689353ab1955c8ee1af8b5c385\">drm: Don’t leak path blob property when updating</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d2ed34362a52c9f0c4d77325fb25bb729704be45\">drm: Introduce helper for replacing blob properties</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=8fb6e7a579670d5b71fc0d5641c1523b3df612e8\">drm: Introduce blob_lock</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=6bcacf51d050d412e5c302e0dd5e582212c5f7be\">drm: Add reference counting to blob properties</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=f102c16ebbeb40ba2f2a7ba4703ed3e2fc013c68\">drm: kerneldoc fixes for blob properties</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=9f658b7b62e7aefc1ee067136126eca3f58cabfd\">drm/crtc_helper: Replace open-coded CRTC state helpers</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=7dec9a9648f825a0698fd875d2834b597f122bd6\">drm/mode: Validate modes inside drm_crtc_convert_umode</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=934a8a899a7275ed187810fe9a15a93397e88c6b\">drm/mode: Unstatic kernel-userspace mode conversion</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=99531d9bb76c649df15311c717deefdff7cc5b7b\">drm: Allow creating blob properties without copy</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=10e8cb7e79391071b950a28a4d85790dd38fb714\">drm: Return error value from blob creation</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=e2f5d2ea479b9b2619965d43db70939589afe43a\">drm/mode: Add user blob-creation ioctl</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=da9b2a381a32c2a287f99e4be2f372587c53ef14\">drm: Retain reference to blob properties in lookup</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=819364da20fd914aba2fd03e95ee0467286752f5\">drm: Add drm_atomic_set_mode_for_crtc</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=99cf4a29fa24461bbfe22125967188a18383eb5c\">drm/atomic: Add current-mode blob to CRTC state</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=955f3c334f0fb2b843efad5cc6d3b7e141e9d666\">drm/atomic: Add MODE_ID property</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=8b72ce158cf0dba443e36fc66e0bb29c2580e0b6\">drm: Always enable atomic API</a></li>
</ul>
<p style=\"margin-bottom: 0;\">Gustavo Padovan (17):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=744b058827b3db9a4f6027522dd9c73a208c2d31\">drm/atomic: remove duplicated assignment of old_plane_state</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=43dbdad2a9a6c64e3ce8339107d8666006ca2b5d\">drm/exynos: atomic phase 1: use drm_plane_helper_update()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=b744868cd2372c3783e460ec3c5b026a69c39332\">drm/exynos: atomic phase 1: use drm_plane_helper_disable()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=199329cb3713c93c9e96831398a2e17a1e170e95\">drm/exynos: atomic phase 1: add .mode_set_nofb() callback</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=4ea9526b09d337b36852989c6cebf252824c867f\">drm/exynos: atomic phase 2: wire up state reset(), duplicate() and destroy()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=7cf1ff2571215fbd32967ec465a79d3f1528cc19\">drm/exynos: atomic phase 2: keep track of framebuffer pointer</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=910874a8bd2b4a09c6abb963926e076fe1471863\">drm/exynos: atomic phase 3: atomic updates of planes</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=47a7deff3606c4455f0abf0cdb1a9c89ba722a6b\">drm/exynos: atomic phase 3: use atomic .set_config helper</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=9d5ab6a0ff7bb9565e8e1bcce5648964b6434470\">drm/exynos: atomic phase 3: convert page flips</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d5f5223c464110919bb5439888eaaa72ece6ddb8\">drm/exynos: remove exported functions from exynos_drm_plane</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=bbcf7bd6406e4aee0379ecca4f160215fefec7e2\">drm/exynos: don’t disable unused functions at init</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=3fc4867c5dc4565992533b03ce02e47cb430d789\">drm/exynos: move exynos_drm_crtc_disable()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d6562a291ed0b48db520f2da83faee48d1216cab\">drm/exynos: add exynos specific .atomic_commit()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=63498e30652ee9b1c16b66129080749e2fa0d79e\">drm/exynos: atomic dpms support</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c4d96f1689226a2342962f2c70b16b0a3b8343ff\">drm/exynos: remove unnecessary calls to disable_plane()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=3cecda030f03efe5ce064f0263cd8ad2dc1e21ac\">drm/exynos: split exynos_crtc-&gt;dpms in enable() and disable()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=38000dbb71ded4121b27338a2d41ad060001592a\">drm/exynos: add error messages if clks failed to get enabled</a></li>
</ul>
<p style=\"margin-bottom: 0;\">Javier Martinez Canillas (19):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=394e5b6d8651db92fd55eac78747a3b13d40f7b7\">drm/bridge: ptn3460: Fix I2C ID table to match the reported modalias</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=cccb94543c8299e0bc7564cc6f8b26e0f15bafde\">pwm: samsung: Use MODULE_DEVICE_TABLE() to include OF modalias</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=eb2209b4a97ab5d751f0feaa223f222a7c4dc3e1\">ARM: multi_v7_defconfig: Enable support for Samsung S3C64XX SPI</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=f3caa529c6f5db9a6f10891cfc6231ba6fe461ab\">ARM: multi_v7_defconfig: Enable max77802 regulator, rtc and clock drivers</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=7de7c6717f2c80ba64292cfc537c893947115cae\">ARM: multi_v7_defconfig: Enable Exynos USB PHY drivers support</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c3e4b72db160c79b36a95b77da5956a1b7d7750c\">ARM: multi_v7_defconfig: Enable support for missing ChromeOS EC drivers</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=1cbdc6c1bd76618d16bc33f127414fb7364f4849\">ARM: multi_v7_defconfig: Enable Samsung PWM support</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=aaf8977ff417aeea05a7dae2bb3bd6e24feb7dfe\">ARM: multi_v7_defconfig: Enable Samsung S3C SoC RTC</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=56579f52aa37206d211263c253274896e99c6c28\">ARM: multi_v7_defconfig: Enable options for Exynos display support</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=50bc2ad87c693e7fa1945ad0de91659c772858f0\">ARM: multi_v7_defconfig: Enable GPIO-based I2C arbitration support</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=1dbba598b5c7128e50e2ed30398452f80f746448\">ARM: multi_v7_defconfig: Enable Cypress APA I2C Trackpad support</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=a841178445bb72a3d566b4e6ab9d19e9b002eb47\">mfd: cros_ec: Use a zero-length array for command data</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=062476f24aa7cf714169342cc50626fd9bbb93da\">mfd: cros_ec: Move protocol helpers out of the MFD driver</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=6fd4899a54a522ccd6a24fea2318d3b515b95945\">irqchip: exynos-combiner: Save IRQ enable set on suspend</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=8be4efad81d814b607cbdad47176f426be83ba75\">mfd: max77686: Remove unused struct max77686_opmode_data</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=2d0cca0db4134712c7a67694c5aab57a49e228f2\">rtc: max77686: Report platform modalias to fix module autoload</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=9bde31df56bdd8950e31ae409af5276cb324058c\">rtc: max77802: Report platform modalias to fix module autoload</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d12bbcd3ea4402704d13f687601dc5af1361a548\">platform/chrome: Don’t make CHROME_PLATFORMS depends on X86 || ARM</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=fb9caeedafe61599371d057696bff3baef01f455\">mfd: Remove MFD_CROS_EC_SPI depends on OF</a></li>
</ul>
<p style=\"margin-bottom: 0;\">Tomeu Vizoso (11):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=405990c7e834913554482538321f16f457dda50e\">of: Document long-ram-code property in nvidia,tegra20-apbmisc</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=6f0a4d0c26f17e93f296e43c7b9f44733ea188ae\">memory: tegra: Disable ARBITRATION_EMEM interrupt</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=101197c39b459b6ab0045089b514f3ce8c0d8250\">of: Document timings subnode of nvidia,tegra-mc</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=42c86547f4e5c2e81616c76ce9a2badce515c41f\">clk: Expose clk_hw_reparent() to providers</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=e34812c5bac8de641a2551b5ccb601627c10e772\">of: document new emc-timings subnode in nvidia,tegra124-car</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=ef03b35a9a2cadd6b3abc758dab4c580a454760c\">of: document external-memory-controller property in tegra124-car</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=ac67477f8f4163a6e7678f252030051f4eef2d5f\">clk: tegra: Set the EMC clock as the parent of the MC clock</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=890d6a54ead9dafdfdeebe65cbb10056e14c835a\">clk: tegra: Have EMC clock implement determine_rate()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d1ed0d21695f632f8ec7bf8588abcf6a8da2b105\">ARM: dts: Add syscon property to the MIPI phy in exynos5420</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=35068ce8cbf1749ef1a4b9b1493af83b8488c37b\">of: constify drv arg of of_driver_match_device stub</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=e984a1791ac6a7c944911207e8a9c344763f0003\">memory: omap-gpmc: Don’t try to save uninitialized GPMC context</a></li>
</ul>" "https://padovan.org/blog/2015/08/collabora-contributions-to-linux-kernel-4-2/" (22085 44967) old 23 nil nil ((title nil "Gustavo F. Padovan: Collabora contributions to Linux Kernel 4.2") (guid nil "http://padovan.org/blog/?p=412") (link nil "https://padovan.org/blog/2015/08/collabora-contributions-to-linux-kernel-4-2/") (description nil "<p>A total of 63 patches were contributed upsteam by <a href=\"http://www.collabora.com\" target=\"_blank\">Collabora</a> engineers as part of our current projects.</p>
<p>In the ARM multi_v7_defconfig we have the addition of support for <a href=\"https://lkml.org/lkml/2015/5/14/460\" target=\"_blank\">Exynos Chromebooks</a>, all options that had a tristate Kconfig option were added as module. After this change it was found that a few drivers weren’t working  properly when built as module, so this was fixed. This work was done by Javier Martinez.</p>
<p>Javier also added <a href=\"https://lkml.org/lkml/2015/6/4/144\" target=\"_blank\">multi EC support</a> as newer Chromebooks have more than one Embedded Controller in the system.</p>
<p>Tomeu Vizoso added <a href=\"https://lkml.org/lkml/2015/3/11/160\" target=\"_blank\">EMC (External Memory Controller) support</a> to the Tegra124 platform.</p>
<p>On the DRM side initial support for Atomic Modesetting was added to Exynos devices by Gustavo Padovan. The Atomic Modesetting interface allows all screen updates such as changing modes, pageflip and set planes/cursors to happen in the same IOCTL. Thus everything can be updated atomically. More on that can be found at Daniel Vetter’s post at <a href=\"https://lwn.net/Articles/653071/\" target=\"_blank\">LWN.net</a>. Another contribution, from Daniel Stone, to Atomic Modesetting was the addition of the <a href=\"http://comments.gmane.org/gmane.comp.video.dri.devel/129629\" target=\"_blank\">CRTC state mode property</a>, it is through this property that userspace configure a modeset that will be updated via an Atomic Modesetting ioctl.</p>
<p>Following is a list of all patches submitted by Collabora for this kernel release:</p>
<p style=\"margin-bottom: 0;\">Daniel Stone (17):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=9b0adc29d203116cadd81b663518104cfb19b48c\">drm/atomic: Don’t open-code CRTC state destroy</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=4339ed82b2fe11689353ab1955c8ee1af8b5c385\">drm: Don’t leak path blob property when updating</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d2ed34362a52c9f0c4d77325fb25bb729704be45\">drm: Introduce helper for replacing blob properties</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=8fb6e7a579670d5b71fc0d5641c1523b3df612e8\">drm: Introduce blob_lock</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=6bcacf51d050d412e5c302e0dd5e582212c5f7be\">drm: Add reference counting to blob properties</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=f102c16ebbeb40ba2f2a7ba4703ed3e2fc013c68\">drm: kerneldoc fixes for blob properties</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=9f658b7b62e7aefc1ee067136126eca3f58cabfd\">drm/crtc_helper: Replace open-coded CRTC state helpers</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=7dec9a9648f825a0698fd875d2834b597f122bd6\">drm/mode: Validate modes inside drm_crtc_convert_umode</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=934a8a899a7275ed187810fe9a15a93397e88c6b\">drm/mode: Unstatic kernel-userspace mode conversion</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=99531d9bb76c649df15311c717deefdff7cc5b7b\">drm: Allow creating blob properties without copy</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=10e8cb7e79391071b950a28a4d85790dd38fb714\">drm: Return error value from blob creation</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=e2f5d2ea479b9b2619965d43db70939589afe43a\">drm/mode: Add user blob-creation ioctl</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=da9b2a381a32c2a287f99e4be2f372587c53ef14\">drm: Retain reference to blob properties in lookup</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=819364da20fd914aba2fd03e95ee0467286752f5\">drm: Add drm_atomic_set_mode_for_crtc</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=99cf4a29fa24461bbfe22125967188a18383eb5c\">drm/atomic: Add current-mode blob to CRTC state</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=955f3c334f0fb2b843efad5cc6d3b7e141e9d666\">drm/atomic: Add MODE_ID property</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=8b72ce158cf0dba443e36fc66e0bb29c2580e0b6\">drm: Always enable atomic API</a></li>
</ul>
<p style=\"margin-bottom: 0;\">Gustavo Padovan (17):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=744b058827b3db9a4f6027522dd9c73a208c2d31\">drm/atomic: remove duplicated assignment of old_plane_state</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=43dbdad2a9a6c64e3ce8339107d8666006ca2b5d\">drm/exynos: atomic phase 1: use drm_plane_helper_update()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=b744868cd2372c3783e460ec3c5b026a69c39332\">drm/exynos: atomic phase 1: use drm_plane_helper_disable()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=199329cb3713c93c9e96831398a2e17a1e170e95\">drm/exynos: atomic phase 1: add .mode_set_nofb() callback</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=4ea9526b09d337b36852989c6cebf252824c867f\">drm/exynos: atomic phase 2: wire up state reset(), duplicate() and destroy()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=7cf1ff2571215fbd32967ec465a79d3f1528cc19\">drm/exynos: atomic phase 2: keep track of framebuffer pointer</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=910874a8bd2b4a09c6abb963926e076fe1471863\">drm/exynos: atomic phase 3: atomic updates of planes</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=47a7deff3606c4455f0abf0cdb1a9c89ba722a6b\">drm/exynos: atomic phase 3: use atomic .set_config helper</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=9d5ab6a0ff7bb9565e8e1bcce5648964b6434470\">drm/exynos: atomic phase 3: convert page flips</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d5f5223c464110919bb5439888eaaa72ece6ddb8\">drm/exynos: remove exported functions from exynos_drm_plane</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=bbcf7bd6406e4aee0379ecca4f160215fefec7e2\">drm/exynos: don’t disable unused functions at init</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=3fc4867c5dc4565992533b03ce02e47cb430d789\">drm/exynos: move exynos_drm_crtc_disable()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d6562a291ed0b48db520f2da83faee48d1216cab\">drm/exynos: add exynos specific .atomic_commit()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=63498e30652ee9b1c16b66129080749e2fa0d79e\">drm/exynos: atomic dpms support</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c4d96f1689226a2342962f2c70b16b0a3b8343ff\">drm/exynos: remove unnecessary calls to disable_plane()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=3cecda030f03efe5ce064f0263cd8ad2dc1e21ac\">drm/exynos: split exynos_crtc-&gt;dpms in enable() and disable()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=38000dbb71ded4121b27338a2d41ad060001592a\">drm/exynos: add error messages if clks failed to get enabled</a></li>
</ul>
<p style=\"margin-bottom: 0;\">Javier Martinez Canillas (19):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=394e5b6d8651db92fd55eac78747a3b13d40f7b7\">drm/bridge: ptn3460: Fix I2C ID table to match the reported modalias</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=cccb94543c8299e0bc7564cc6f8b26e0f15bafde\">pwm: samsung: Use MODULE_DEVICE_TABLE() to include OF modalias</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=eb2209b4a97ab5d751f0feaa223f222a7c4dc3e1\">ARM: multi_v7_defconfig: Enable support for Samsung S3C64XX SPI</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=f3caa529c6f5db9a6f10891cfc6231ba6fe461ab\">ARM: multi_v7_defconfig: Enable max77802 regulator, rtc and clock drivers</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=7de7c6717f2c80ba64292cfc537c893947115cae\">ARM: multi_v7_defconfig: Enable Exynos USB PHY drivers support</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c3e4b72db160c79b36a95b77da5956a1b7d7750c\">ARM: multi_v7_defconfig: Enable support for missing ChromeOS EC drivers</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=1cbdc6c1bd76618d16bc33f127414fb7364f4849\">ARM: multi_v7_defconfig: Enable Samsung PWM support</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=aaf8977ff417aeea05a7dae2bb3bd6e24feb7dfe\">ARM: multi_v7_defconfig: Enable Samsung S3C SoC RTC</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=56579f52aa37206d211263c253274896e99c6c28\">ARM: multi_v7_defconfig: Enable options for Exynos display support</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=50bc2ad87c693e7fa1945ad0de91659c772858f0\">ARM: multi_v7_defconfig: Enable GPIO-based I2C arbitration support</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=1dbba598b5c7128e50e2ed30398452f80f746448\">ARM: multi_v7_defconfig: Enable Cypress APA I2C Trackpad support</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=a841178445bb72a3d566b4e6ab9d19e9b002eb47\">mfd: cros_ec: Use a zero-length array for command data</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=062476f24aa7cf714169342cc50626fd9bbb93da\">mfd: cros_ec: Move protocol helpers out of the MFD driver</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=6fd4899a54a522ccd6a24fea2318d3b515b95945\">irqchip: exynos-combiner: Save IRQ enable set on suspend</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=8be4efad81d814b607cbdad47176f426be83ba75\">mfd: max77686: Remove unused struct max77686_opmode_data</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=2d0cca0db4134712c7a67694c5aab57a49e228f2\">rtc: max77686: Report platform modalias to fix module autoload</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=9bde31df56bdd8950e31ae409af5276cb324058c\">rtc: max77802: Report platform modalias to fix module autoload</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d12bbcd3ea4402704d13f687601dc5af1361a548\">platform/chrome: Don’t make CHROME_PLATFORMS depends on X86 || ARM</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=fb9caeedafe61599371d057696bff3baef01f455\">mfd: Remove MFD_CROS_EC_SPI depends on OF</a></li>
</ul>
<p style=\"margin-bottom: 0;\">Tomeu Vizoso (11):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=405990c7e834913554482538321f16f457dda50e\">of: Document long-ram-code property in nvidia,tegra20-apbmisc</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=6f0a4d0c26f17e93f296e43c7b9f44733ea188ae\">memory: tegra: Disable ARBITRATION_EMEM interrupt</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=101197c39b459b6ab0045089b514f3ce8c0d8250\">of: Document timings subnode of nvidia,tegra-mc</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=42c86547f4e5c2e81616c76ce9a2badce515c41f\">clk: Expose clk_hw_reparent() to providers</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=e34812c5bac8de641a2551b5ccb601627c10e772\">of: document new emc-timings subnode in nvidia,tegra124-car</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=ef03b35a9a2cadd6b3abc758dab4c580a454760c\">of: document external-memory-controller property in tegra124-car</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=ac67477f8f4163a6e7678f252030051f4eef2d5f\">clk: tegra: Set the EMC clock as the parent of the MC clock</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=890d6a54ead9dafdfdeebe65cbb10056e14c835a\">clk: tegra: Have EMC clock implement determine_rate()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d1ed0d21695f632f8ec7bf8588abcf6a8da2b105\">ARM: dts: Add syscon property to the MIPI phy in exynos5420</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=35068ce8cbf1749ef1a4b9b1493af83b8488c37b\">of: constify drv arg of of_driver_match_device stub</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=e984a1791ac6a7c944911207e8a9c344763f0003\">memory: omap-gpmc: Don’t try to save uninitialized GPMC context</a></li>
</ul>") (pubDate nil "Fri, 13 Nov 2015 09:38:47 +0000"))) ("Gustavo F. Padovan: Collabora contributions to Linux Kernel 4.3" "<p><a href=\"http://www.collabora.com\" target=\"_blank\">Collabora</a> developers contributed 48 patches to kernel 4.3 as part of our current projects.</p>
<p>Danilo worked on the kernel doc scripts to add  cross-reference links to html documentation and arguments documentation in struct body. While Sjoerd Simons fixed a clock definition in rockchip and a incorrect udelay usage for the stmmac phy reset delay.</p>
<p>Tomeu fixed gpiolib to defer probe if the pin controller isn’t available, added another fix to chipidea USB to defer probe of usbmisc hasn’t been probed yet. On Tegra Tomeu worked to support to gpio-ranges property. Still on Tegra cpuidle_state.enter_freeze() was added.</p>
<p>Gustavo Padovan did a lot of exynos DRM work, with the most important changes being improvements to atomic modesetting, including the asynchronous atomic commit in exynos, in async mode we just schedule the atomic update and return right away to the userspace, in a similar way that PageFlips works in the old API. In this release the exynos atomic modesetting interface was enabled for userspace usage. Another important set of patches was the removal of structs exynos_drm_display and exynos_drm_encoder layers which greatly improved the code making it cleaner and easier to use. Apart from that there is also a few cleanup and fixes.</p>
<p>Danilo Cesar Lemes de Paula (2):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=a4c6ebede2f99fc3aaa5a42228a16747d0aa2504\">scripts/kernel-doc Allow struct arguments documentation in struct body</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=5699f871d2d51ce40012501378670613d4d49214\">scripts/kernel-doc: Adding cross-reference links to html documentation.</a></li>
</ul>
<p>Gustavo Padovan (36):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=451a8c0c59b3feebb5bf6a1ce1335e9f3e428355\">drm/exynos: pass the correct pipe number</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=eafd540aeaae6f1c4d04fdf3959419716d23cdc5\">drm/exynos: use KMS version of DRM vblanks functions</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=f59a89d05f1290d0cdaa588d29871e05cdec159b\">drm/exynos: remove duplicated check for suspend</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=9cc7610a2375a94ec967f771ce74b51db0d43d1c\">drm/exynos: rename win_commit/disable to atomic-like names</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=1e1d13932283419ddfdb60c73319cc0e753ded5b\">drm/exynos: pass struct exynos_drm_plane in update/enable</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=2eeb2e5e6634dbb97bdda81f65f70e4b037028d5\">drm/exynos: use drm atomic state directly</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=a1bcc9da90ab44d29c38fc6e4a8dba633e97f3f3\">drm/exynos: remove unused fields from struct exynos_drm_plane</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d88d2463fecb13c67d8eec78c4b61671900deb94\">drm/exynos: unify exynos_drm_plane names with drm core</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=08dd20099f3ce55a2ded0045b5a087aefea38cd8\">drm/exynos: return return value of exynos_crtc-&gt;enable_vblank</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=b6595dc7e1ccc0964862a5bd436a8f004b36c02f\">drm/exynos: split display’s .dpms() into .enable() and .disable()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=b6f3c36183470bbbee9da1c0a8cc892e69f88c4f\">drm/exynos: remove wrappers for phy_power_{on,off}</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=a090f45ff0acae51aa0363a72e5c3b47332af9f9\">drm/exynos: remove unused .remove() and .check_mode() ops from display</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d1fa72d0a6e70057f6aa0d0f6187e4a49e261fa8\">drm/exynos: simplify calculation of possible CRTCs</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=cf67cc9a29ac19c98bc4fa0e6d14b0c1f592d322\">drm/exynos: remove struct exynos_drm_display</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c2c099f2d97a039c5e1714c803dd9d20458c388f\">drm/exynos: remove extra call to hdmi_commit()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=07fd6e1f9985399f08af0f7981eaed362512a5af\">drm/exynos: remove extra call to exynos_dp_commit()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=af8be3f6fe80262f29b5e353421392196ff626f0\">drm/exynos: remove exynos_encoder’s .commit() op</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=a2986e8032bddbe237ed16e2e26c71f5416cd5fd\">drm/exynos: remove exynos_drm_create_enc_conn()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=6cf272751be22a9ae6a6a9550854156dd812ff66\">drm/exynos: fold encoder setup into exynos_drm_load()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=2b8376c803c4c1c02446520527b31161e8a3c066\">drm/exynos: remove struct exynos_drm_encoder layer</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=bb0fa93523b8d7f89b6ee61ab8e9b926ff7a9779\">drm/exynos: don’t track enabled state at exynos_crtc</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=fc75f7107a8de47e135cf3b9fec62f99c184a2c8\">drm/exynos: fimd: unify call to exynos_drm_crtc_finish_pageflip()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d9220d4733d1ea1ae375bd76dd2c961969a6795c\">drm/exynos: add prepare and cleanup phases for planes</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=ce3ff36be91a85d87f138794dbbd704fb99320c2\">drm/exynos: fimd: move window protect code to prepare/cleanup_plane</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=822f6dfd714c961e3c5648b1d4a5ac10f807d592\">drm/exynos: check for pending fb before finish update</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=44205083751cdcfdbd3f8607694ee1a5a9b161c7\">drm/exynos: add macro to get the address of START_S reg</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=cb11b3f18957f90f8adeb95adf694f52581416b3\">drm/exynos: fimd: only finish update if START == START_S</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=a379df19356de97afdca37c4e8f5e8729215d6ea\">drm/exynos: add atomic asynchronous commit</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c4533665d819271dad890440b887776ac3d5f265\">drm/exynos: wait all planes updates to finish</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=7cf23eaf0d8e6f34f3bc89141efc96b2502b290c\">drm/exynos: remove wait queue for pending page flip</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c8c38ccff9308a706b5314ca1cf157713a40f6b5\">drm/exynos: Enable atomic modesetting feature</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=e7fefb1d5af5d90baec5204d9096e8c4db8c93bd\">drm/exynos: remove legacy -&gt;suspend()/resume()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=50bbfbffa5c894def440ce8157dfe53e60960d35\">drm/exynos: remove fimd_mode_fixup()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=208d7ee3c89e5e94627aa33331b15dd4df814707\">drm/exynos: remove decon_mode_fixup()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=10d97d5869f9a50eb3142c7ee562ecc5b5b33f5b\">drm/exynos: remove unused mode_fixup() code</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=3c79fb8c9424a24bf812b9a8cb4f19b781052b0b\">drm/exynos: fimd: actually disable dp clock</a></li>
</ul>
<p>Javier Martinez Canillas (1):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=acdecb04e2115747f260700384f2c403c8e9693e\">mfd: Remove MFD_CROS_EC_SPI depends on OF</a></li>
</ul>
<p>Sjoerd Simons (2):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=bea047e075784471461c4338d0ffa45cb1378d67\">clk: rockchip: Fix SPIF special clock definition</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=892aa01df2ad67237f213c8f9d9b491e908aa910\">net: stmmac: Use msleep rather then udelay for reset delay</a></li>
</ul>
<p>Tomeu Vizoso (7):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d32651f68785bd8d73b24481b62e428ca30a2546\">gpiolib: Fix docs for gpiochip_add_pingroup_range</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=28355f81969962cf01aef5b13d7de5b4ab0c5f13\">gpio: defer probe if pinctrl cannot be found</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=82b2c3c5b838b4fac9471eab320670aff5a822e0\">driver core: fix docbook for device_private.device</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=9462510ce31e2b91156bdcc33e4c737e6768e5f8\">pinctrl: tegra: Only set the gpio range if needed</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=1ec0e115f8604940491861d207cc1e1478db97b3\">ARM: tegra: cpuidle: implement cpuidle_state.enter_freeze()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=ef12da914ed696745b495bea22aea137e88cffb6\">usb: chipidea: imx: properly check for usbmisc</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=17cdddf0fb684f5456c1af3aa2c10aca3b68b8de\">ARM: tegra: Add gpio-ranges property</a></li>
</ul>" "https://padovan.org/blog/2015/11/collabora-contributions-to-linux-kernel-4-3/" (22084 33777) old 24 nil nil ((title nil "Gustavo F. Padovan: Collabora contributions to Linux Kernel 4.3") (guid nil "http://padovan.org/blog/?p=429") (link nil "https://padovan.org/blog/2015/11/collabora-contributions-to-linux-kernel-4-3/") (description nil "<p><a href=\"http://www.collabora.com\" target=\"_blank\">Collabora</a> developers contributed 48 patches to kernel 4.3 as part of our current projects.</p>
<p>Danilo worked on the kernel doc scripts to add  cross-reference links to html documentation and arguments documentation in struct body. While Sjoerd Simons fixed a clock definition in rockchip and a incorrect udelay usage for the stmmac phy reset delay.</p>
<p>Tomeu fixed gpiolib to defer probe if the pin controller isn’t available, added another fix to chipidea USB to defer probe of usbmisc hasn’t been probed yet. On Tegra Tomeu worked to support to gpio-ranges property. Still on Tegra cpuidle_state.enter_freeze() was added.</p>
<p>Gustavo Padovan did a lot of exynos DRM work, with the most important changes being improvements to atomic modesetting, including the asynchronous atomic commit in exynos, in async mode we just schedule the atomic update and return right away to the userspace, in a similar way that PageFlips works in the old API. In this release the exynos atomic modesetting interface was enabled for userspace usage. Another important set of patches was the removal of structs exynos_drm_display and exynos_drm_encoder layers which greatly improved the code making it cleaner and easier to use. Apart from that there is also a few cleanup and fixes.</p>
<p>Danilo Cesar Lemes de Paula (2):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=a4c6ebede2f99fc3aaa5a42228a16747d0aa2504\">scripts/kernel-doc Allow struct arguments documentation in struct body</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=5699f871d2d51ce40012501378670613d4d49214\">scripts/kernel-doc: Adding cross-reference links to html documentation.</a></li>
</ul>
<p>Gustavo Padovan (36):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=451a8c0c59b3feebb5bf6a1ce1335e9f3e428355\">drm/exynos: pass the correct pipe number</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=eafd540aeaae6f1c4d04fdf3959419716d23cdc5\">drm/exynos: use KMS version of DRM vblanks functions</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=f59a89d05f1290d0cdaa588d29871e05cdec159b\">drm/exynos: remove duplicated check for suspend</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=9cc7610a2375a94ec967f771ce74b51db0d43d1c\">drm/exynos: rename win_commit/disable to atomic-like names</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=1e1d13932283419ddfdb60c73319cc0e753ded5b\">drm/exynos: pass struct exynos_drm_plane in update/enable</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=2eeb2e5e6634dbb97bdda81f65f70e4b037028d5\">drm/exynos: use drm atomic state directly</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=a1bcc9da90ab44d29c38fc6e4a8dba633e97f3f3\">drm/exynos: remove unused fields from struct exynos_drm_plane</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d88d2463fecb13c67d8eec78c4b61671900deb94\">drm/exynos: unify exynos_drm_plane names with drm core</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=08dd20099f3ce55a2ded0045b5a087aefea38cd8\">drm/exynos: return return value of exynos_crtc-&gt;enable_vblank</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=b6595dc7e1ccc0964862a5bd436a8f004b36c02f\">drm/exynos: split display’s .dpms() into .enable() and .disable()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=b6f3c36183470bbbee9da1c0a8cc892e69f88c4f\">drm/exynos: remove wrappers for phy_power_{on,off}</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=a090f45ff0acae51aa0363a72e5c3b47332af9f9\">drm/exynos: remove unused .remove() and .check_mode() ops from display</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d1fa72d0a6e70057f6aa0d0f6187e4a49e261fa8\">drm/exynos: simplify calculation of possible CRTCs</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=cf67cc9a29ac19c98bc4fa0e6d14b0c1f592d322\">drm/exynos: remove struct exynos_drm_display</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c2c099f2d97a039c5e1714c803dd9d20458c388f\">drm/exynos: remove extra call to hdmi_commit()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=07fd6e1f9985399f08af0f7981eaed362512a5af\">drm/exynos: remove extra call to exynos_dp_commit()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=af8be3f6fe80262f29b5e353421392196ff626f0\">drm/exynos: remove exynos_encoder’s .commit() op</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=a2986e8032bddbe237ed16e2e26c71f5416cd5fd\">drm/exynos: remove exynos_drm_create_enc_conn()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=6cf272751be22a9ae6a6a9550854156dd812ff66\">drm/exynos: fold encoder setup into exynos_drm_load()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=2b8376c803c4c1c02446520527b31161e8a3c066\">drm/exynos: remove struct exynos_drm_encoder layer</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=bb0fa93523b8d7f89b6ee61ab8e9b926ff7a9779\">drm/exynos: don’t track enabled state at exynos_crtc</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=fc75f7107a8de47e135cf3b9fec62f99c184a2c8\">drm/exynos: fimd: unify call to exynos_drm_crtc_finish_pageflip()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d9220d4733d1ea1ae375bd76dd2c961969a6795c\">drm/exynos: add prepare and cleanup phases for planes</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=ce3ff36be91a85d87f138794dbbd704fb99320c2\">drm/exynos: fimd: move window protect code to prepare/cleanup_plane</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=822f6dfd714c961e3c5648b1d4a5ac10f807d592\">drm/exynos: check for pending fb before finish update</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=44205083751cdcfdbd3f8607694ee1a5a9b161c7\">drm/exynos: add macro to get the address of START_S reg</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=cb11b3f18957f90f8adeb95adf694f52581416b3\">drm/exynos: fimd: only finish update if START == START_S</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=a379df19356de97afdca37c4e8f5e8729215d6ea\">drm/exynos: add atomic asynchronous commit</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c4533665d819271dad890440b887776ac3d5f265\">drm/exynos: wait all planes updates to finish</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=7cf23eaf0d8e6f34f3bc89141efc96b2502b290c\">drm/exynos: remove wait queue for pending page flip</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c8c38ccff9308a706b5314ca1cf157713a40f6b5\">drm/exynos: Enable atomic modesetting feature</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=e7fefb1d5af5d90baec5204d9096e8c4db8c93bd\">drm/exynos: remove legacy -&gt;suspend()/resume()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=50bbfbffa5c894def440ce8157dfe53e60960d35\">drm/exynos: remove fimd_mode_fixup()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=208d7ee3c89e5e94627aa33331b15dd4df814707\">drm/exynos: remove decon_mode_fixup()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=10d97d5869f9a50eb3142c7ee562ecc5b5b33f5b\">drm/exynos: remove unused mode_fixup() code</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=3c79fb8c9424a24bf812b9a8cb4f19b781052b0b\">drm/exynos: fimd: actually disable dp clock</a></li>
</ul>
<p>Javier Martinez Canillas (1):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=acdecb04e2115747f260700384f2c403c8e9693e\">mfd: Remove MFD_CROS_EC_SPI depends on OF</a></li>
</ul>
<p>Sjoerd Simons (2):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=bea047e075784471461c4338d0ffa45cb1378d67\">clk: rockchip: Fix SPIF special clock definition</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=892aa01df2ad67237f213c8f9d9b491e908aa910\">net: stmmac: Use msleep rather then udelay for reset delay</a></li>
</ul>
<p>Tomeu Vizoso (7):</p>
<ul>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=d32651f68785bd8d73b24481b62e428ca30a2546\">gpiolib: Fix docs for gpiochip_add_pingroup_range</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=28355f81969962cf01aef5b13d7de5b4ab0c5f13\">gpio: defer probe if pinctrl cannot be found</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=82b2c3c5b838b4fac9471eab320670aff5a822e0\">driver core: fix docbook for device_private.device</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=9462510ce31e2b91156bdcc33e4c737e6768e5f8\">pinctrl: tegra: Only set the gpio range if needed</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=1ec0e115f8604940491861d207cc1e1478db97b3\">ARM: tegra: cpuidle: implement cpuidle_state.enter_freeze()</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=ef12da914ed696745b495bea22aea137e88cffb6\">usb: chipidea: imx: properly check for usbmisc</a></li>
<li><a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=17cdddf0fb684f5456c1af3aa2c10aca3b68b8de\">ARM: tegra: Add gpio-ranges property</a></li>
</ul>") (pubDate nil "Thu, 12 Nov 2015 12:20:01 +0000"))) ("Kees Cook: evolution of seccomp" "<p>I’m excited to see other people thinking about userspace-to-kernel attack surface reduction ideas. Theo de Raadt recently published slides describing <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00001.html\">Pledge</a>. This uses the same ideas that seccomp implements, but with less granularity. While seccomp works at the individual syscall level and in addition to killing processes, it allows for signaling, tracing, and errno spoofing. As de Raadt mentions, Pledge could be implemented with seccomp very easily: libseccomp would just categorize syscalls.</p>
<p>I don’t really understand the presentation’s mention of <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00005.html\">“Optional Security”</a>, though. Pledge, like seccomp, is an opt-in feature. Nothing in the kernel refuses to run “unpledged” programs. I assume his point was that when it gets ubiquitously built into programs (like stack protector), it’s effectively not optional (which is alluded to later as <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00031.html\">“comprehensive applicability ~= mandatory mitigation”</a>). Regardless, this sensible (though optional) design gets me back to his <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00011.html\">slide on seccomp</a>, which seems to have a number of misunderstandings:</p>
<ul>
<li><strong>A Turing complete eBPF program watches your program</strong> Strictly speaking, seccomp is implemented using a subset of BPF, not eBPF. And since BPF (and eBPF) programs are guaranteed to halt, it makes seccomp filters not Turing complete.</li>
<li><strong>Who watches the watcher?</strong> I don’t even understand this. It’s in the kernel. The kernel watches your program. Just like always. If this is a question of BPF program verification, there is literally a program verifier that checks various properties of the BPF program.</li>
<li><strong>seccomp program is stored elsewhere</strong> This, with the next statement, is just totally misunderstood. Programs using seccomp define their program in their own code. It’s used the same way as the Pledge examples are shown doing.</li>
<li><strong>Easy to get desyncronized either program is updated</strong> As above, this just isn’t the case. The only place where this might be true is when using seccomp on programs that were not written natively with seccomp. In that case, yes, desync is possible. But that’s one of the advantages of seccomp’s design: a program launcher (like minijail or systemd) can declare a seccomp filter for a program that hasn’t yet been ported to use one natively.</li>
<li><strong>eBPF watcher has no real idea what the program under observation is doing…</strong> I don’t understand this statement. I don’t see how Pledge would “have a real idea” either: they’re both doing filtering. If we get AI out of our syscall filters, we’re in serious trouble. :)</li>
</ul>
<p>OpenBSD has some <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00019.html\">interesting advantages</a> in the syscall filtering department, especially around sockets. Right now, it’s hard for Linux syscall filtering to understand why a given socket is being used. Something like SOCK_DNS seems like it could be quite handy.</p>
<p>Another nice feature of Pledge is the <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00030.html\">path whitelist feature</a>. As it’s still under development, I hope they expand this to include more things than just paths. Argument inspection is a weak point for seccomp, but under Linux, most of the arguments are ultimately exposed to the LSM layer. Last year I experimented with creating a <a href=\"http://git.kernel.org/cgit/linux/kernel/git/kees/linux.git/log/?h=seccomp/lsm\">“seccomp LSM”</a> for path matching where programs could declare whitelists, similar to standard LSMs.</p>
<p>So, yes, Linux <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00034.html\">“could match this API on seccomp”</a>. It’d just take some extensions to libseccomp to implement <code>pledge()</code>, as I described at the top. With OpenBSD doing a bunch of <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00032.html\">analysis</a> <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00033.html\">work</a> on common programs, it’d be excellent to see this usable on Linux too. So far on Linux, only a few programs (e.g. Chrome, vsftpd) have bothered to do this using seccomp, and it could be argued that this is ultimately due to how fine grained it is.</p>
<p style=\"clear: both; text-align: left;\">© 2015, <a href=\"https://outflux.net/blog/\">Kees Cook</a>. This work is licensed under a <a href=\"http://creativecommons.org/licenses/by-sa/3.0/us/\" rel=\"license\">Creative Commons Attribution-ShareAlike 3.0 License</a>.<br /><a href=\"http://creativecommons.org/licenses/by-sa/3.0/us/\" rel=\"license\"><img alt=\"Creative Commons License\" src=\"https://outflux.net/illustrations/cc-88x31.png\" style=\"border-width: 0;\" /></a> </p>" "https://outflux.net/blog/archives/2015/11/11/evolution-of-seccomp/" (22083 33426) old 25 nil nil ((title nil "Kees Cook: evolution of seccomp") (guid nil "https://outflux.net/blog/?p=873") (link nil "https://outflux.net/blog/archives/2015/11/11/evolution-of-seccomp/") (description nil "<p>I’m excited to see other people thinking about userspace-to-kernel attack surface reduction ideas. Theo de Raadt recently published slides describing <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00001.html\">Pledge</a>. This uses the same ideas that seccomp implements, but with less granularity. While seccomp works at the individual syscall level and in addition to killing processes, it allows for signaling, tracing, and errno spoofing. As de Raadt mentions, Pledge could be implemented with seccomp very easily: libseccomp would just categorize syscalls.</p>
<p>I don’t really understand the presentation’s mention of <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00005.html\">“Optional Security”</a>, though. Pledge, like seccomp, is an opt-in feature. Nothing in the kernel refuses to run “unpledged” programs. I assume his point was that when it gets ubiquitously built into programs (like stack protector), it’s effectively not optional (which is alluded to later as <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00031.html\">“comprehensive applicability ~= mandatory mitigation”</a>). Regardless, this sensible (though optional) design gets me back to his <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00011.html\">slide on seccomp</a>, which seems to have a number of misunderstandings:</p>
<ul>
<li><strong>A Turing complete eBPF program watches your program</strong> Strictly speaking, seccomp is implemented using a subset of BPF, not eBPF. And since BPF (and eBPF) programs are guaranteed to halt, it makes seccomp filters not Turing complete.</li>
<li><strong>Who watches the watcher?</strong> I don’t even understand this. It’s in the kernel. The kernel watches your program. Just like always. If this is a question of BPF program verification, there is literally a program verifier that checks various properties of the BPF program.</li>
<li><strong>seccomp program is stored elsewhere</strong> This, with the next statement, is just totally misunderstood. Programs using seccomp define their program in their own code. It’s used the same way as the Pledge examples are shown doing.</li>
<li><strong>Easy to get desyncronized either program is updated</strong> As above, this just isn’t the case. The only place where this might be true is when using seccomp on programs that were not written natively with seccomp. In that case, yes, desync is possible. But that’s one of the advantages of seccomp’s design: a program launcher (like minijail or systemd) can declare a seccomp filter for a program that hasn’t yet been ported to use one natively.</li>
<li><strong>eBPF watcher has no real idea what the program under observation is doing…</strong> I don’t understand this statement. I don’t see how Pledge would “have a real idea” either: they’re both doing filtering. If we get AI out of our syscall filters, we’re in serious trouble. :)</li>
</ul>
<p>OpenBSD has some <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00019.html\">interesting advantages</a> in the syscall filtering department, especially around sockets. Right now, it’s hard for Linux syscall filtering to understand why a given socket is being used. Something like SOCK_DNS seems like it could be quite handy.</p>
<p>Another nice feature of Pledge is the <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00030.html\">path whitelist feature</a>. As it’s still under development, I hope they expand this to include more things than just paths. Argument inspection is a weak point for seccomp, but under Linux, most of the arguments are ultimately exposed to the LSM layer. Last year I experimented with creating a <a href=\"http://git.kernel.org/cgit/linux/kernel/git/kees/linux.git/log/?h=seccomp/lsm\">“seccomp LSM”</a> for path matching where programs could declare whitelists, similar to standard LSMs.</p>
<p>So, yes, Linux <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00034.html\">“could match this API on seccomp”</a>. It’d just take some extensions to libseccomp to implement <code>pledge()</code>, as I described at the top. With OpenBSD doing a bunch of <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00032.html\">analysis</a> <a href=\"http://www.openbsd.org/papers/hackfest2015-pledge/mgp00033.html\">work</a> on common programs, it’d be excellent to see this usable on Linux too. So far on Linux, only a few programs (e.g. Chrome, vsftpd) have bothered to do this using seccomp, and it could be argued that this is ultimately due to how fine grained it is.</p>
<p style=\"clear: both; text-align: left;\">© 2015, <a href=\"https://outflux.net/blog/\">Kees Cook</a>. This work is licensed under a <a href=\"http://creativecommons.org/licenses/by-sa/3.0/us/\" rel=\"license\">Creative Commons Attribution-ShareAlike 3.0 License</a>.<br /><a href=\"http://creativecommons.org/licenses/by-sa/3.0/us/\" rel=\"license\"><img alt=\"Creative Commons License\" src=\"https://outflux.net/illustrations/cc-88x31.png\" style=\"border-width: 0;\" /></a> </p>") (pubDate nil "Wed, 11 Nov 2015 18:01:54 +0000"))) ("Dave Jones: Trinity 1.6" "<p>As alluded to in my last post, a few days ago I released a new version of <a href=\"http://codemonkey.org.uk/projects/trinity/\">Trinity</a>.<br />
The bulk of the work in this release happened prior to my <a href=\"http://codemonkey.org.uk/2015/07/12/future-trinity/\">burn out</a> back in July.  The combination of everything described in that post, and general unhappiness in my last job etc led to me just wanting to walk away from everything for an indeterminate amount of time.</p>
<p>Distance is good. I’ve continued to poke at trinity in small amounts since then. At last weeks kernel summit, a number of people expressed just how useful they find Trinity and how much they were bummed to find out I wasn’t working on it any more.  With that feedback, I felt motivated to clean the decks and get 1.6 out.  There’s a short description of most of the bigger changes below, but there were probably a whole bunch more changes made that I forgot to highlight in the shortlog.</p>
<p>With that release wrapped up, and with the fresh perspective of having been ‘away’ from the project for a while, when I was travelling last week, I started work on some new features, starting with implementing a generic object cache instead of hard coding a “remember this” set of functionality for every single object type a syscall could return. A relatively small amount of code, which should make life easier to support recycling syscall results for syscalls other than mmap (which is all that’s implemented right now).</p>
<p>So,.. while I’m working on this stuff again, it’s not the <a href=\"https://www.youtube.com/watch?v=vimZj8HW0Kg\">comeback</a> many would like. I don’t know just how much time I’m going to have to devote to working on Trinity.  From time to time, I suspect I’ll find some intersection between my work at Facebook and the sort of targeted testing that Trinity is useful for, but it’s not my primary focus, and probably won’t be again. Additionally, I’ve got a bunch of ideas for new projects I’m itching to work on that spawned from discussions last week, so “spare time” hacking effort might be devoted more to them in future. </p>
<p>tl;dr: Don’t send me feature requests. I’ve got more than enough ideas for stuff *I* want to implement. Diffs speak louder than words.</p>
<h3>Summary of some of the bigger changes to Trinity since the last (1.5) tarball release include:</h3>
<ul>
<li>Assorted improvements to the tuned random number generation.<br />
(Including one particularly stupid bug where sometimes all child processes would get the same seed, and end up doing the same syscalls. oops)
</li>
<li>Various networking related improvements/fixes:
<ul>
<li>tcp: add TCP_TIMESTAMP, TCP_NOTSENT_LOWAT &amp; TCP_CC_INFO socket options.
</li>
<li>ipv6: Improved generation of random addresses. (No longer just localhost)
</li>
<li>ipv6: Added 14 missing socket options.
</li>
<li>ipv6: Now passes correct lengths for socket options. (Note: This change may break older glibcs: See <a href=\"https://patchwork.ozlabs.org/patch/425881/\">this patch</a>.)
</li>
<li>Beginnings of some better proto-alg sockaddr generation.
</li>
<li>Recognise PF_IB and PF_MPLS network protocols
</li>
<li>Socket generation improvements. (Picks right socket type to go with protocol)
</li>
<li>Now supports an ARG_SOCKETINFO for syscalls that operate primarily on sockets. (Still occasionally passes random fd’s)
</li>
<li>accept,accept4,bind,connect,getpeername,getsockname,recv,setsockopt,send converted to use ARG_SOCKETINFO.
</li>
<li>setsockopt now also matches the protocol of the socket passed to the right setsockopt args.
</li>
<li>netlink socket generation fix (pid is a portid, not a process id)
</li>
<li>The -P parameter no longer accepts the incomprehensible numeric form of arguments, just names.
</li>
<li>The PF_ prefix to the -P parameter is now optional, so you can just say ‘UNIX’ instead of ‘PF_UNIX’.
</li>
</ul>
</li>
<li>Updates to keep up with new upstream kernel changes.
<ul>
<li>Updated perf_event_open syscall to include 4.1 changes
</li>
<li>Updated syscall lists<br />
alpha: execveat, getrandom, memfd_create<br />
s390[x]: execveat, NUMA related syscalls<br />
parisc: execveat
</li>
<li>mips: add new prctls for PR_SET_FP_MODE / PR_GET_FP_MODE
</li>
<li>Support for new fallocate flags (FALLOC_FL_INSERT_RANGE)
</li>
</ul>
</li>
<li>Watchdog:
<ul>
<li>Remove some false-positive triggering checks from the watchdog.
</li>
<li>Watchdog process is now nice’d to -19
</li>
<li>Monitor how many processes are currently stalled.
</li>
<li>If all child processes are stalled, send SIGKILLs to 50%
</li>
</ul>
</li>
<li>Misc:
<ul>
<li>New fd generators for drm dumb buffers &amp; inotify watches.
</li>
<li>blacklist /dev/sd* from the fd list, so we can be a bit safer when running as root with –dropprivs
</li>
<li>Fixed the ‘bind process to CPU’ code to only pick online CPUs.
</li>
<li>Self-corruption checks added to child processes, like the watchdog code already did.
</li>
<li>Remove guard pages around shm.
</li>
<li>In debug mode, write protect the shm before making syscalls.
</li>
<li>Refactoring of logging code.
</li>
<li>Various code cleanups as usual.
</li>
<li>No longer tries to mmap 1GB pages if running with less than 8GB free.
</li>
</ul>
</li>
</ul>
<p>The post <a href=\"http://codemonkey.org.uk/2015/11/06/trinity-16/\" rel=\"nofollow\">Trinity 1.6</a> appeared first on <a href=\"http://codemonkey.org.uk\" rel=\"nofollow\">codemonkey.org.uk</a>.</p>
<div class=\"yarpp-related-rss\">
<p>Related posts:</p><ol>
<li><a href=\"http://codemonkey.org.uk/2015/05/01/trinity-socket-improvements/\" rel=\"bookmark\" title=\"Trinity socket improvements\">Trinity socket improvements </a> <small>I’ve been wanting to get back to working on the...</small></li>
<li><a href=\"http://codemonkey.org.uk/2015/03/02/trinity-15-release/\" rel=\"bookmark\" title=\"Trinity 1.5 release.\">Trinity 1.5 release. </a> <small>As announced this morning, today I decided that things had...</small></li>
<li><a href=\"http://codemonkey.org.uk/2015/07/12/future-trinity/\" rel=\"bookmark\" title=\"Future development of Trinity.\">Future development of Trinity. </a> <small>It’s been an odd few weeks regarding Trinity based things....</small></li>
</ol><p></p>
</div>" "http://codemonkey.org.uk/2015/11/06/trinity-16/" (22076 53392) old 26 nil nil ((title nil "Dave Jones: Trinity 1.6") (guid nil "http://codemonkey.org.uk/?p=766") (link nil "http://codemonkey.org.uk/2015/11/06/trinity-16/") (description nil "<p>As alluded to in my last post, a few days ago I released a new version of <a href=\"http://codemonkey.org.uk/projects/trinity/\">Trinity</a>.<br />
The bulk of the work in this release happened prior to my <a href=\"http://codemonkey.org.uk/2015/07/12/future-trinity/\">burn out</a> back in July.  The combination of everything described in that post, and general unhappiness in my last job etc led to me just wanting to walk away from everything for an indeterminate amount of time.</p>
<p>Distance is good. I’ve continued to poke at trinity in small amounts since then. At last weeks kernel summit, a number of people expressed just how useful they find Trinity and how much they were bummed to find out I wasn’t working on it any more.  With that feedback, I felt motivated to clean the decks and get 1.6 out.  There’s a short description of most of the bigger changes below, but there were probably a whole bunch more changes made that I forgot to highlight in the shortlog.</p>
<p>With that release wrapped up, and with the fresh perspective of having been ‘away’ from the project for a while, when I was travelling last week, I started work on some new features, starting with implementing a generic object cache instead of hard coding a “remember this” set of functionality for every single object type a syscall could return. A relatively small amount of code, which should make life easier to support recycling syscall results for syscalls other than mmap (which is all that’s implemented right now).</p>
<p>So,.. while I’m working on this stuff again, it’s not the <a href=\"https://www.youtube.com/watch?v=vimZj8HW0Kg\">comeback</a> many would like. I don’t know just how much time I’m going to have to devote to working on Trinity.  From time to time, I suspect I’ll find some intersection between my work at Facebook and the sort of targeted testing that Trinity is useful for, but it’s not my primary focus, and probably won’t be again. Additionally, I’ve got a bunch of ideas for new projects I’m itching to work on that spawned from discussions last week, so “spare time” hacking effort might be devoted more to them in future. </p>
<p>tl;dr: Don’t send me feature requests. I’ve got more than enough ideas for stuff *I* want to implement. Diffs speak louder than words.</p>
<h3>Summary of some of the bigger changes to Trinity since the last (1.5) tarball release include:</h3>
<ul>
<li>Assorted improvements to the tuned random number generation.<br />
 (Including one particularly stupid bug where sometimes all child processes would get the same seed, and end up doing the same syscalls. oops)
</li>
<li>Various networking related improvements/fixes:
<ul>
<li>tcp: add TCP_TIMESTAMP, TCP_NOTSENT_LOWAT &amp; TCP_CC_INFO socket options.
 </li>
<li>ipv6: Improved generation of random addresses. (No longer just localhost)
 </li>
<li>ipv6: Added 14 missing socket options.
 </li>
<li>ipv6: Now passes correct lengths for socket options. (Note: This change may break older glibcs: See <a href=\"https://patchwork.ozlabs.org/patch/425881/\">this patch</a>.)
 </li>
<li>Beginnings of some better proto-alg sockaddr generation.
 </li>
<li>Recognise PF_IB and PF_MPLS network protocols
 </li>
<li>Socket generation improvements. (Picks right socket type to go with protocol)
 </li>
<li>Now supports an ARG_SOCKETINFO for syscalls that operate primarily on sockets. (Still occasionally passes random fd’s)
 </li>
<li>accept,accept4,bind,connect,getpeername,getsockname,recv,setsockopt,send converted to use ARG_SOCKETINFO.
 </li>
<li>setsockopt now also matches the protocol of the socket passed to the right setsockopt args.
 </li>
<li>netlink socket generation fix (pid is a portid, not a process id)
 </li>
<li>The -P parameter no longer accepts the incomprehensible numeric form of arguments, just names.
 </li>
<li>The PF_ prefix to the -P parameter is now optional, so you can just say ‘UNIX’ instead of ‘PF_UNIX’.
</li>
</ul>
</li>
<li>Updates to keep up with new upstream kernel changes.
<ul>
<li>Updated perf_event_open syscall to include 4.1 changes
</li>
<li>Updated syscall lists<br />
 alpha: execveat, getrandom, memfd_create<br />
 s390[x]: execveat, NUMA related syscalls<br />
 parisc: execveat
 </li>
<li>mips: add new prctls for PR_SET_FP_MODE / PR_GET_FP_MODE
 </li>
<li>Support for new fallocate flags (FALLOC_FL_INSERT_RANGE)
</li>
</ul>
</li>
<li>Watchdog:
<ul>
<li>Remove some false-positive triggering checks from the watchdog.
 </li>
<li>Watchdog process is now nice’d to -19
 </li>
<li>Monitor how many processes are currently stalled.
 </li>
<li>If all child processes are stalled, send SIGKILLs to 50%
</li>
</ul>
</li>
<li>Misc:
<ul>
<li>New fd generators for drm dumb buffers &amp; inotify watches.
 </li>
<li>blacklist /dev/sd* from the fd list, so we can be a bit safer when running as root with –dropprivs
 </li>
<li>Fixed the ‘bind process to CPU’ code to only pick online CPUs.
 </li>
<li>Self-corruption checks added to child processes, like the watchdog code already did.
 </li>
<li>Remove guard pages around shm.
 </li>
<li>In debug mode, write protect the shm before making syscalls.
 </li>
<li>Refactoring of logging code.
 </li>
<li>Various code cleanups as usual.
 </li>
<li>No longer tries to mmap 1GB pages if running with less than 8GB free.
</li>
</ul>
</li>
</ul>
<p>The post <a href=\"http://codemonkey.org.uk/2015/11/06/trinity-16/\" rel=\"nofollow\">Trinity 1.6</a> appeared first on <a href=\"http://codemonkey.org.uk\" rel=\"nofollow\">codemonkey.org.uk</a>.</p>
<div class=\"yarpp-related-rss\">
<p>Related posts:</p><ol>
<li><a href=\"http://codemonkey.org.uk/2015/05/01/trinity-socket-improvements/\" rel=\"bookmark\" title=\"Trinity socket improvements\">Trinity socket improvements </a> <small>I’ve been wanting to get back to working on the...</small></li>
<li><a href=\"http://codemonkey.org.uk/2015/03/02/trinity-15-release/\" rel=\"bookmark\" title=\"Trinity 1.5 release.\">Trinity 1.5 release. </a> <small>As announced this morning, today I decided that things had...</small></li>
<li><a href=\"http://codemonkey.org.uk/2015/07/12/future-trinity/\" rel=\"bookmark\" title=\"Future development of Trinity.\">Future development of Trinity. </a> <small>It’s been an odd few weeks regarding Trinity based things....</small></li>
</ol><p></p>
</div>") (pubDate nil "Fri, 06 Nov 2015 16:08:48 +0000"))) ("Matthew Garrett: Why improving kernel security is important" "The Washington Post published <a href=\"http://www.washingtonpost.com/sf/business/2015/11/05/net-of-insecurity-the-kernel-of-the-argument/\">an article</a> today which describes the ongoing tension between the security community and Linux kernel developers. This has been roundly denounced as FUD, with Rob Graham going so far as to claim that <a href=\"https://twitter.com/ErrataRob/status/662427924545593348\">nobody ever attacks the kernel</a>.<br /><br />Unfortunately he's entirely and demonstrably wrong, it's not FUD and the state of security in the kernel is currently far short of where it should be.<br /><br />An example. Recent versions of Android use SELinux to confine applications. Even if you have full control over an application running on Android, the SELinux rules make it very difficult to do anything especially user-hostile. Hacking Team, the GPL-violating Italian company who sells surveillance software to human rights abusers, found that this impeded their ability to drop their spyware onto targets' devices. So they took advantage of the fact that many Android devices shipped a kernel with a flawed copy_from_user() implementation that allowed them to copy arbitrary userspace data over arbitrary kernel code, thus allowing them to disable SELinux.<br /><br />If we could trust userspace applications, we wouldn't need SELinux. But we assume that userspace code may be buggy, misconfigured or actively hostile, and we use technologies such as SELinux or AppArmor to restrict its behaviour. There's simply too much userspace code for us to guarantee that it's all correct, so we do our best to prevent it from doing harm anyway.<br /><br />This is significantly less true in the kernel. The model up until now has largely been \"Fix security bugs as we find them\", an approach that fails on two levels:<br /><br />1) Once we find them and fix them, there's still a window between the fixed version being available and it actually being deployed<br />2) The forces of good may not be the first ones to find them<br /><br />This reactive approach is fine for a world where it's possible to push out software updates without having to perform extensive testing first, a world where the only people hunting for interesting kernel vulnerabilities are nice people. This isn't that world, and this approach isn't fine.<br /><br />Just as features like SELinux allow us to reduce the harm that can occur if a new userspace vulnerability is found, we can add features to the kernel that make it more difficult (or impossible) for attackers to turn a kernel bug into an exploitable vulnerability. The number of people using Linux systems is increasing every day, and many of these users depend on the security of these systems in critical ways. It's vital that we do what we can to avoid their trust being misplaced.<br /><br />Many useful mitigation features already exist in the <a href=\"http://www.grsecurity.net\">Grsecurity</a> patchset, but a combination of technical disagreements around certain features, personality conflicts and an apparent lack of enthusiasm on the side of upstream kernel developers has resulted in almost none of it landing in the kernels that most people use. Kees Cook has proposed a <a href=\"http://www.openwall.com/lists/kernel-hardening/2015/11/05/1\">new project</a> to start making a more concerted effort to migrate components of Grsecurity to upstream. If you rely on the kernel being a secure component, either because you ship a product based on it or because you use it yourself, you should probably be doing what you can to support this.<br /><br />Microsoft received entirely justifiable criticism for the terrible state of security on their platform. They responded by introducing cutting-edge security features across the OS, including the kernel. Accusing anyone who says we need to do the same of spreading FUD is risking free software being sidelined in favour of proprietary software providing more real-world security. That doesn't seem like a good outcome.<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=38158\" style=\"vertical-align: middle;\" width=\"30\" /> comments" "http://mjg59.dreamwidth.org/38158.html" (22076 28811) old 27 nil nil ((title nil "Matthew Garrett: Why improving kernel security is important") (guid nil "tag:dreamwidth.org,2011-02-12:696190:38158") (link nil "http://mjg59.dreamwidth.org/38158.html") (description nil "The Washington Post published <a href=\"http://www.washingtonpost.com/sf/business/2015/11/05/net-of-insecurity-the-kernel-of-the-argument/\">an article</a> today which describes the ongoing tension between the security community and Linux kernel developers. This has been roundly denounced as FUD, with Rob Graham going so far as to claim that <a href=\"https://twitter.com/ErrataRob/status/662427924545593348\">nobody ever attacks the kernel</a>.<br /><br />Unfortunately he's entirely and demonstrably wrong, it's not FUD and the state of security in the kernel is currently far short of where it should be.<br /><br />An example. Recent versions of Android use SELinux to confine applications. Even if you have full control over an application running on Android, the SELinux rules make it very difficult to do anything especially user-hostile. Hacking Team, the GPL-violating Italian company who sells surveillance software to human rights abusers, found that this impeded their ability to drop their spyware onto targets' devices. So they took advantage of the fact that many Android devices shipped a kernel with a flawed copy_from_user() implementation that allowed them to copy arbitrary userspace data over arbitrary kernel code, thus allowing them to disable SELinux.<br /><br />If we could trust userspace applications, we wouldn't need SELinux. But we assume that userspace code may be buggy, misconfigured or actively hostile, and we use technologies such as SELinux or AppArmor to restrict its behaviour. There's simply too much userspace code for us to guarantee that it's all correct, so we do our best to prevent it from doing harm anyway.<br /><br />This is significantly less true in the kernel. The model up until now has largely been \"Fix security bugs as we find them\", an approach that fails on two levels:<br /><br />1) Once we find them and fix them, there's still a window between the fixed version being available and it actually being deployed<br />2) The forces of good may not be the first ones to find them<br /><br />This reactive approach is fine for a world where it's possible to push out software updates without having to perform extensive testing first, a world where the only people hunting for interesting kernel vulnerabilities are nice people. This isn't that world, and this approach isn't fine.<br /><br />Just as features like SELinux allow us to reduce the harm that can occur if a new userspace vulnerability is found, we can add features to the kernel that make it more difficult (or impossible) for attackers to turn a kernel bug into an exploitable vulnerability. The number of people using Linux systems is increasing every day, and many of these users depend on the security of these systems in critical ways. It's vital that we do what we can to avoid their trust being misplaced.<br /><br />Many useful mitigation features already exist in the <a href=\"http://www.grsecurity.net\">Grsecurity</a> patchset, but a combination of technical disagreements around certain features, personality conflicts and an apparent lack of enthusiasm on the side of upstream kernel developers has resulted in almost none of it landing in the kernels that most people use. Kees Cook has proposed a <a href=\"http://www.openwall.com/lists/kernel-hardening/2015/11/05/1\">new project</a> to start making a more concerted effort to migrate components of Grsecurity to upstream. If you rely on the kernel being a secure component, either because you ship a product based on it or because you use it yourself, you should probably be doing what you can to support this.<br /><br />Microsoft received entirely justifiable criticism for the terrible state of security on their platform. They responded by introducing cutting-edge security features across the OS, including the kernel. Accusing anyone who says we need to do the same of spreading FUD is risking free software being sidelined in favour of proprietary software providing more real-world security. That doesn't seem like a good outcome.<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=38158\" style=\"vertical-align: middle;\" width=\"30\" /> comments") (pubDate nil "Fri, 06 Nov 2015 09:19:07 +0000"))) ("Pete Zaitcev: Cool hardware in Tokyo" "<p>At the Mitaka Summit, we finally got some interesting kit exhibited, after the relatively lean summits in <a href=\"http://zaitcev.livejournal.com/223667.html\" rel=\"nofollow\">Atlanta</a> and <a href=\"http://zaitcev.livejournal.com/227321.html\" rel=\"nofollow\">Vancouver</a>. Unfortunately, the lightning in the Marketplace was very weird and pictures came out poorly.</p>
<div align=\"center\"><p><img height=\"480\" src=\"http://www.zaitcev.us/things/lj/2015/20151104a1.jpg\" width=\"640\" /></p></div>
<div align=\"center\"><p><img height=\"480\" src=\"http://www.zaitcev.us/things/lj/2015/20151104a2.jpg\" width=\"640\" /></p></div>
<p>My personal favourite is probably the flash array by SanDisk. It's nothing but JBOF, the host connection is SAS. You'd think any idiot could slap a few flash chips on cards and plug them into backplane... But just look how elegant it is. The capacity of the 2U box is 512 TB, but the whole thing only consumes 700 W maximum. It's brilliant, really.</p>
<p>Unfortunately, I don't have a good picture, but the second best was Ericksson's passive optical backplane. It promises to make your cables last forever: just swap out optronics when new bit rates come along. Even a terabit! Now it may actually be a misguided product. If they cannot get 3rd party vendors to build modules for it, the whole things comes crashing to the ground. Ditto if they build, but overprice. But the audacity of making something that's different is to be acknowledged. And frankly I'm not a fan of re-cabling when new servers come about.</p>
<div align=\"center\"><p><img height=\"480\" src=\"http://www.zaitcev.us/things/lj/2015/20151104a3.jpg\" width=\"640\" /></p></div>
<p>Intel wins a consolation prize for preservance. They quietly presented some kind of next-generation multiblock computer, with pieces connected by serial cables. Finally, the future dreamed by the creators of Infiniband is here - only 15 years late, and still we don't know if it is viable.</p>
<p>There was also a bunch of fairly mundane boxes. Various also-run flash vendors were present, of course. Interestingly, SolidFire had a booth, but without anything eye-catching. Resting on the laurels? IBM brought their newest PowerPC, which was mostly remarkable for still existing. That sort of thing.</p>" "http://zaitcev.livejournal.com/230683.html" (22074 49931) old 28 nil nil ((title nil "Pete Zaitcev: Cool hardware in Tokyo") (guid nil "http://zaitcev.livejournal.com/230683.html") (link nil "http://zaitcev.livejournal.com/230683.html") (description nil "<p>At the Mitaka Summit, we finally got some interesting kit exhibited, after the relatively lean summits in <a href=\"http://zaitcev.livejournal.com/223667.html\" rel=\"nofollow\">Atlanta</a> and <a href=\"http://zaitcev.livejournal.com/227321.html\" rel=\"nofollow\">Vancouver</a>. Unfortunately, the lightning in the Marketplace was very weird and pictures came out poorly.</p>
<div align=\"center\"><p><img height=\"480\" src=\"http://www.zaitcev.us/things/lj/2015/20151104a1.jpg\" width=\"640\" /></p></div>
<div align=\"center\"><p><img height=\"480\" src=\"http://www.zaitcev.us/things/lj/2015/20151104a2.jpg\" width=\"640\" /></p></div>
<p>My personal favourite is probably the flash array by SanDisk. It's nothing but JBOF, the host connection is SAS. You'd think any idiot could slap a few flash chips on cards and plug them into backplane... But just look how elegant it is. The capacity of the 2U box is 512 TB, but the whole thing only consumes 700 W maximum. It's brilliant, really.</p>
<p>Unfortunately, I don't have a good picture, but the second best was Ericksson's passive optical backplane. It promises to make your cables last forever: just swap out optronics when new bit rates come along. Even a terabit! Now it may actually be a misguided product. If they cannot get 3rd party vendors to build modules for it, the whole things comes crashing to the ground. Ditto if they build, but overprice. But the audacity of making something that's different is to be acknowledged. And frankly I'm not a fan of re-cabling when new servers come about.</p>
<div align=\"center\"><p><img height=\"480\" src=\"http://www.zaitcev.us/things/lj/2015/20151104a3.jpg\" width=\"640\" /></p></div>
<p>Intel wins a consolation prize for preservance. They quietly presented some kind of next-generation multiblock computer, with pieces connected by serial cables. Finally, the future dreamed by the creators of Infiniband is here - only 15 years late, and still we don't know if it is viable.</p>
<p>There was also a bunch of fairly mundane boxes. Various also-run flash vendors were present, of course. Interestingly, SolidFire had a booth, but without anything eye-catching. Resting on the laurels? IBM brought their newest PowerPC, which was mostly remarkable for still existing. That sort of thing.</p>") (pubDate nil "Thu, 05 Nov 2015 02:46:35 +0000"))) ("Dave Jones: kernel summit 2015 wrap-up" "<p>Exhausting travel aside, kernel summit in Seoul was a good use of time.<br />
Most of the sessions didn’t feel as interactive as prior years, in part I think because there really wasn’t a lot of objection, even to some<br />
of the more controversial things.  Kees’ security talk went over pretty well even if it did depress most the people in the room. Hopefully something good will come of it.  The restartable sequences feature got talked about but didn’t get much (if any) real pushback.</p>
<p>There were a few hallway discussions surrounding various upcoming<br />
kernel functionality that didn’t get ‘airtime’ in the sessions.<br />
The kernel TLS stuff was probably discussed more in depth at netconf, and assorted VM features were covered more at LSFMM<br />
earlier this year. Quite a few people talking excitedly about eBPF, both from a networking point of view, and soon.. tracing.<br />
Quite a few people still seem concerned (rightly) about the upcoming unpriveledged bpf syscall.</p>
<p>It seems by fracturing the kernel summit into lots of smaller events the deep-dives into new features/problems happens there, leaving the kernel summit more for executive summary type talks, and as has been the general push over the last decade more and more process related discussions.</p>
<p>On process, Sasha’s discussion on stable was probably the most interesting to me personally. GregKH agreed to make 4.4 the next LTS starting a new tradition of “the next LTS is the one after the kernel summit”. We’ll see how that works out.</p>
<p>Chris Mason gave a “what went good/bad when facebook moved to 4.0” talk. Which for the most part, was all good. There are a few small things that are still being shaken out, but it’s by no means awful.</p>
<p>I had a lot of hallway conversations that began “so, trinity..”<br />
The short answer there is that I’m still working on it, though at a much reduced pace than I was a year ago. It was good to hear feedback<br />
from pretty much everyone I talked to that it was something that people value, which was a good motivator. More on that later.</p>
<p>I also had a lot of people asking a lot of questions about my Facebook bootcamp experience.  I’ll do a longer write-up of that soon.</p>
<p>The post <a href=\"http://codemonkey.org.uk/2015/11/04/kernel-summit-2015-wrapup/\" rel=\"nofollow\">kernel summit 2015 wrap-up</a> appeared first on <a href=\"http://codemonkey.org.uk\" rel=\"nofollow\">codemonkey.org.uk</a>.</p>
<div class=\"yarpp-related-rss\">
<p>Related posts:</p><ol>
<li><a href=\"http://codemonkey.org.uk/2015/03/13/lsfmm-2015-recap/\" rel=\"bookmark\" title=\"LSF/MM 2015 recap.\">LSF/MM 2015 recap. </a> <small>It’s been a long week. Spent Monday/Tuesday at LSFMM. This...</small></li>
<li><a href=\"http://codemonkey.org.uk/2015/03/02/trinity-15-release/\" rel=\"bookmark\" title=\"Trinity 1.5 release.\">Trinity 1.5 release. </a> <small>As announced this morning, today I decided that things had...</small></li>
<li><a href=\"http://codemonkey.org.uk/2015/05/04/kernel-code-coverage-brain-dump/\" rel=\"bookmark\" title=\"kernel code coverage brain dump.\">kernel code coverage brain dump. </a> <small>Someone at work recently asked me about code coverage tooling...</small></li>
</ol><p></p>
</div>" "http://codemonkey.org.uk/2015/11/04/kernel-summit-2015-wrapup/" (22074 21976) old 29 nil nil ((title nil "Dave Jones: kernel summit 2015 wrap-up") (guid nil "http://codemonkey.org.uk/?p=764") (link nil "http://codemonkey.org.uk/2015/11/04/kernel-summit-2015-wrapup/") (description nil "<p>Exhausting travel aside, kernel summit in Seoul was a good use of time.<br />
Most of the sessions didn’t feel as interactive as prior years, in part I think because there really wasn’t a lot of objection, even to some<br />
of the more controversial things.  Kees’ security talk went over pretty well even if it did depress most the people in the room. Hopefully something good will come of it.  The restartable sequences feature got talked about but didn’t get much (if any) real pushback.</p>
<p>There were a few hallway discussions surrounding various upcoming<br />
kernel functionality that didn’t get ‘airtime’ in the sessions.<br />
The kernel TLS stuff was probably discussed more in depth at netconf, and assorted VM features were covered more at LSFMM<br />
earlier this year. Quite a few people talking excitedly about eBPF, both from a networking point of view, and soon.. tracing.<br />
Quite a few people still seem concerned (rightly) about the upcoming unpriveledged bpf syscall.</p>
<p>It seems by fracturing the kernel summit into lots of smaller events the deep-dives into new features/problems happens there, leaving the kernel summit more for executive summary type talks, and as has been the general push over the last decade more and more process related discussions.</p>
<p>On process, Sasha’s discussion on stable was probably the most interesting to me personally. GregKH agreed to make 4.4 the next LTS starting a new tradition of “the next LTS is the one after the kernel summit”. We’ll see how that works out.</p>
<p>Chris Mason gave a “what went good/bad when facebook moved to 4.0” talk. Which for the most part, was all good. There are a few small things that are still being shaken out, but it’s by no means awful.</p>
<p>I had a lot of hallway conversations that began “so, trinity..”<br />
The short answer there is that I’m still working on it, though at a much reduced pace than I was a year ago. It was good to hear feedback<br />
from pretty much everyone I talked to that it was something that people value, which was a good motivator. More on that later.</p>
<p>I also had a lot of people asking a lot of questions about my Facebook bootcamp experience.  I’ll do a longer write-up of that soon.</p>
<p>The post <a href=\"http://codemonkey.org.uk/2015/11/04/kernel-summit-2015-wrapup/\" rel=\"nofollow\">kernel summit 2015 wrap-up</a> appeared first on <a href=\"http://codemonkey.org.uk\" rel=\"nofollow\">codemonkey.org.uk</a>.</p>
<div class=\"yarpp-related-rss\">
<p>Related posts:</p><ol>
<li><a href=\"http://codemonkey.org.uk/2015/03/13/lsfmm-2015-recap/\" rel=\"bookmark\" title=\"LSF/MM 2015 recap.\">LSF/MM 2015 recap. </a> <small>It’s been a long week. Spent Monday/Tuesday at LSFMM. This...</small></li>
<li><a href=\"http://codemonkey.org.uk/2015/03/02/trinity-15-release/\" rel=\"bookmark\" title=\"Trinity 1.5 release.\">Trinity 1.5 release. </a> <small>As announced this morning, today I decided that things had...</small></li>
<li><a href=\"http://codemonkey.org.uk/2015/05/04/kernel-code-coverage-brain-dump/\" rel=\"bookmark\" title=\"kernel code coverage brain dump.\">kernel code coverage brain dump. </a> <small>Someone at work recently asked me about code coverage tooling...</small></li>
</ol><p></p>
</div>") (pubDate nil "Wed, 04 Nov 2015 19:00:40 +0000"))) ("Grant Likely: Debugging 96Boards I2C" "<p>I was originally just going to post this to one of the 96boards mailing list, but it got sufficiently interesting that I thought I’d make it a blog post instead. I’ve been working on making i2c on the 96Boards sensors adapter work properly and I’ve made some progress. The problem that user have run into is that the Grove RGB LCD module won’t work when connected to one of the baseboard’s I2C busses. I pulled out the oscilloscope today to investigate.</p>
<p>The LCD module is particularly useful for testing because it actually has 2 i2c devices embedded in it; an LCD controller at address 0x3e, and an RGB controller at 0x62. The two devices operate independently with different electrical properties.</p>
<p>​On Hikey+sensors (TXS0108 level shifter), the RGB device will work, but only after pulling the ribbon cable apart to reduce crosstalk due to insufficient pullups. However, the LCD causes the entire bus to lock up, and no further transactions will work.</p>
<p>On Hikey+pca9306 the LCD isn’t detected and the RGB works correctly (undetermined if there are crosstalk issues)</p>
<p>​The traces below show both sides of the level shifter. Green and blue on the top for the data line. Orange and purple on the bottom with the clock.​</p>
<p>First, what I saw on using Hikey+pca9306+RGB:</p>
<figure class=\"wp-caption aligncenter\" id=\"attachment_168\" style=\"width: 300px;\"><a href=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-pca9306-rgb.jpg\"><img alt=\"Screen Capture\" class=\"size-medium wp-image-168\" height=\"225\" src=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-pca9306-rgb-300x225.jpg\" width=\"300\" /></a>RGB transaction via PCA9306</figure>
<p>And with the LCD:</p>
<figure class=\"wp-caption aligncenter\" id=\"attachment_167\" style=\"width: 300px;\"><a href=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-pca9306-lcd.jpg\"><img alt=\"Screen Capture\" class=\"size-medium wp-image-167\" height=\"225\" src=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-pca9306-lcd-300x225.jpg\" width=\"300\" /></a>LCD transaction via PCA9306</figure>
<p>In both traces you can see the start condition (data goes low while clock is high), the 7 bits of address (7 rising clock edges), the R/W bit (1 rising clock), and then the acknowledgement bit driven by the device. If the controller doesn’t see the device drive the data line low on the 9th clock, then it decides the device isn’t there and it terminates the transaction. It is easy to recognize the ack bit because the device has a different drive strength and the voltage level is different.</p>
<div>
<p>The RGB controller is a happy little device and it jumps at the chance to drive the data line low. It goes down pretty close to 0V. The LCD on the other hand is sulky and doesn’t drive the line quite as low as the controller can. About to 1V. 1V is recognized fine as logic low on a 5V device, but with 1.8V it is not even less than half. The way the pca9306 level shifter works is there are pull-up resistors on either side of the device that draws each side up to its respective high level. In this case, 1.8V and 5V. When either side gets driven low, the level shifter begins to conduct and the other side also gets drawn down to the same voltage, but it can only go as low as the voltage it is driven to. If it only gets driven down to 1V, then it will never get low enough for a 1.8V controller to recognize it as a low state.</p>
<p class=\"gmail_default\">It may be that with weaker pull-ups the LCD will be able to drive to a lower voltage level. I’ll need to experiment more, but in the mean time let’s move onto the Sensors board. Back to the traces:</p>
<p class=\"gmail_default\">First, here is a transaction to address 0x63 with no device present:</p>
</div>
<div>
<figure class=\"wp-caption aligncenter\" id=\"attachment_170\" style=\"width: 300px;\"><a href=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-sensors-nodev.jpg\"><img alt=\"Screen Capture\" class=\"size-medium wp-image-170\" height=\"225\" src=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-sensors-nodev-300x225.jpg\" width=\"300\" /></a>No device</figure>
</div>
<p>​Looks perfectly normal so far. Next, the RGB device at address 0x62:</p>
<div>
<figure class=\"wp-caption aligncenter\" id=\"attachment_171\" style=\"width: 300px;\"><a href=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-sensors-rgb.jpg\"><img alt=\"Screen Capture\" class=\"size-medium wp-image-171\" height=\"225\" src=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-sensors-rgb-300x225.jpg\" width=\"300\" /></a>RGB</figure>
<p class=\"gmail_default\">Also behaving the same way as it did with the pca9306. Finally, an LCD transaction:</p>
</div>
<div>
<figure class=\"wp-caption aligncenter\" id=\"attachment_169\" style=\"width: 300px;\"><a href=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-sensors-lcd.jpg\"><img alt=\"Screen Capture\" class=\"size-medium wp-image-169\" height=\"225\" src=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-sensors-lcd-300x225.jpg\" width=\"300\" /></a>LCD</figure>
<p class=\"gmail_default\">Again we see the start condition, the 7 data bits and 1 r/w bit, but the ack bit looks weird. The LCD successfully drives the data bit low enough to be recognized, but then something weird happens. The data line stays low and the clock stops running. I don’t know actually know what is happening here, but I’ve got my suspicions. The LCD is continuing to drive the data line low, (you can tell by the slightly different voltage level) but keeping data low should not stop the clock. I suspect the txs0108 is getting confused and driving the clock line high. I’ve come across reports from others having trouble with the txs010x series on i2c. It has ‘one-shot’ accelerators to reduce rise time by driving the line high. I don’t know for sure though.</p>
<p class=\"gmail_default\">On the plus side, I now know that the Hikey I2C busses are working correctly. Now I need to decide what to do next. Aside from the i2c problem, Rev B of the sensors board ready for manufacturing. I either need to make the txs part work, or rework the design to use a pair of pca9306s. I think I’ll try weaker pull-ups on the pca9306 breakout board first and see how that goes. Sadly, I blew up the i2c drives on my Hikey board while experimenting today, so I need to do the same experiments with my Dragonboard 410c.</p>
<p class=\"gmail_default\">Dear lazyweb, do you have any other suggestions on things to try?</p>
</div>" "http://www.secretlab.ca/archives/164" (22072 320) old 30 nil nil ((title nil "Grant Likely: Debugging 96Boards I2C") (guid nil "http://www.secretlab.ca/?p=164") (link nil "http://www.secretlab.ca/archives/164") (description nil "<p>I was originally just going to post this to one of the 96boards mailing list, but it got sufficiently interesting that I thought I’d make it a blog post instead. I’ve been working on making i2c on the 96Boards sensors adapter work properly and I’ve made some progress. The problem that user have run into is that the Grove RGB LCD module won’t work when connected to one of the baseboard’s I2C busses. I pulled out the oscilloscope today to investigate.</p>
<p>The LCD module is particularly useful for testing because it actually has 2 i2c devices embedded in it; an LCD controller at address 0x3e, and an RGB controller at 0x62. The two devices operate independently with different electrical properties.</p>
<p>​On Hikey+sensors (TXS0108 level shifter), the RGB device will work, but only after pulling the ribbon cable apart to reduce crosstalk due to insufficient pullups. However, the LCD causes the entire bus to lock up, and no further transactions will work.</p>
<p>On Hikey+pca9306 the LCD isn’t detected and the RGB works correctly (undetermined if there are crosstalk issues)</p>
<p>​The traces below show both sides of the level shifter. Green and blue on the top for the data line. Orange and purple on the bottom with the clock.​</p>
<p>First, what I saw on using Hikey+pca9306+RGB:</p>
<figure class=\"wp-caption aligncenter\" id=\"attachment_168\" style=\"width: 300px;\"><a href=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-pca9306-rgb.jpg\"><img alt=\"Screen Capture\" class=\"size-medium wp-image-168\" height=\"225\" src=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-pca9306-rgb-300x225.jpg\" width=\"300\" /></a>RGB transaction via PCA9306</figure>
<p>And with the LCD:</p>
<figure class=\"wp-caption aligncenter\" id=\"attachment_167\" style=\"width: 300px;\"><a href=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-pca9306-lcd.jpg\"><img alt=\"Screen Capture\" class=\"size-medium wp-image-167\" height=\"225\" src=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-pca9306-lcd-300x225.jpg\" width=\"300\" /></a>LCD transaction via PCA9306</figure>
<p>In both traces you can see the start condition (data goes low while clock is high), the 7 bits of address (7 rising clock edges), the R/W bit (1 rising clock), and then the acknowledgement bit driven by the device. If the controller doesn’t see the device drive the data line low on the 9th clock, then it decides the device isn’t there and it terminates the transaction. It is easy to recognize the ack bit because the device has a different drive strength and the voltage level is different.</p>
<div>
<p>The RGB controller is a happy little device and it jumps at the chance to drive the data line low. It goes down pretty close to 0V. The LCD on the other hand is sulky and doesn’t drive the line quite as low as the controller can. About to 1V. 1V is recognized fine as logic low on a 5V device, but with 1.8V it is not even less than half. The way the pca9306 level shifter works is there are pull-up resistors on either side of the device that draws each side up to its respective high level. In this case, 1.8V and 5V. When either side gets driven low, the level shifter begins to conduct and the other side also gets drawn down to the same voltage, but it can only go as low as the voltage it is driven to. If it only gets driven down to 1V, then it will never get low enough for a 1.8V controller to recognize it as a low state.</p>
<p class=\"gmail_default\">It may be that with weaker pull-ups the LCD will be able to drive to a lower voltage level. I’ll need to experiment more, but in the mean time let’s move onto the Sensors board. Back to the traces:</p>
<p class=\"gmail_default\">First, here is a transaction to address 0x63 with no device present:</p>
</div>
<div>
<figure class=\"wp-caption aligncenter\" id=\"attachment_170\" style=\"width: 300px;\"><a href=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-sensors-nodev.jpg\"><img alt=\"Screen Capture\" class=\"size-medium wp-image-170\" height=\"225\" src=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-sensors-nodev-300x225.jpg\" width=\"300\" /></a>No device</figure>
</div>
<p>​Looks perfectly normal so far. Next, the RGB device at address 0x62:</p>
<div>
<figure class=\"wp-caption aligncenter\" id=\"attachment_171\" style=\"width: 300px;\"><a href=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-sensors-rgb.jpg\"><img alt=\"Screen Capture\" class=\"size-medium wp-image-171\" height=\"225\" src=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-sensors-rgb-300x225.jpg\" width=\"300\" /></a>RGB</figure>
<p class=\"gmail_default\">Also behaving the same way as it did with the pca9306. Finally, an LCD transaction:</p>
</div>
<div>
<figure class=\"wp-caption aligncenter\" id=\"attachment_169\" style=\"width: 300px;\"><a href=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-sensors-lcd.jpg\"><img alt=\"Screen Capture\" class=\"size-medium wp-image-169\" height=\"225\" src=\"http://www.secretlab.ca/www.secretlab.ca/wp-content/uploads/2015/11/hikey-sensors-lcd-300x225.jpg\" width=\"300\" /></a>LCD</figure>
<p class=\"gmail_default\">Again we see the start condition, the 7 data bits and 1 r/w bit, but the ack bit looks weird. The LCD successfully drives the data bit low enough to be recognized, but then something weird happens. The data line stays low and the clock stops running. I don’t know actually know what is happening here, but I’ve got my suspicions. The LCD is continuing to drive the data line low, (you can tell by the slightly different voltage level) but keeping data low should not stop the clock. I suspect the txs0108 is getting confused and driving the clock line high. I’ve come across reports from others having trouble with the txs010x series on i2c. It has ‘one-shot’ accelerators to reduce rise time by driving the line high. I don’t know for sure though.</p>
<p class=\"gmail_default\">On the plus side, I now know that the Hikey I2C busses are working correctly. Now I need to decide what to do next. Aside from the i2c problem, Rev B of the sensors board ready for manufacturing. I either need to make the txs part work, or rework the design to use a pair of pca9306s. I think I’ll try weaker pull-ups on the pca9306 breakout board first and see how that goes. Sadly, I blew up the i2c drives on my Hikey board while experimenting today, so I need to do the same experiments with my Dragonboard 410c.</p>
<p class=\"gmail_default\">Dear lazyweb, do you have any other suggestions on things to try?</p>
</div>") (pubDate nil "Tue, 03 Nov 2015 00:35:12 +0000"))) ("Pete Zaitcev: Darcy on the future of storage" "<p>Quick <a href=\"http://pl.atyp.us/2015-10-nibble-on-storage.html\" rel=\"nofollow\">comment on the following</a>:</p>
<blockquote>
<blockquote> Good morning, madam. What kind of storage system would you like me to build for you today? </blockquote>
<p>Scary thought. That means that selling storage products is going to be hard for all of us. We'll be selling components, both hardware and software, or we'll be selling integration and support services. Somebody will always pay to have somebody else assemble the parts, maybe add some light customization, and support the result. There's a nice living to be made there... but no empires.</p>
</blockquote>
<p>Why is it a problem that no empires are to be built? It's only a problem for an empire-builder like I dunno... Sam Altman or something. Darcy is an old engineer, not a startup founder. A good one, too. His kids aren't going to go to bed hungry.</p>
<p>We've been at this dance before with Linux. People have been asking if Red Hat was going to be like Microsoft, and I told everyone: nope. We're transfering the wealth that the proprietary lock-in vendors were collecting <i>back to the users</i>. That was the whole idea. In the process, we're collecting less - a more reasonable amount, necessary to put stuff together and make it run. <i>Therefore</i>, we're not going to be as wealthy off users' backs. But the society as a whole benefits.</p>
<p>So cry me a river. Not scary at all. But RTWT, I think he's drawing a truthful outline overall.</p>
<p>P.S. Another thing, what's magical about storage? Why, I can go build spacecraft when storage goes bust. Or whatever. Of course it's a pity for all the storage-specific techniques and skills that I accumulated, but eh. As long as we leave behind the good code (and docs), it's all good.</p>" "http://zaitcev.livejournal.com/230538.html" (22064 10200) old 31 nil nil ((title nil "Pete Zaitcev: Darcy on the future of storage") (guid nil "http://zaitcev.livejournal.com/230538.html") (link nil "http://zaitcev.livejournal.com/230538.html") (description nil "<p>Quick <a href=\"http://pl.atyp.us/2015-10-nibble-on-storage.html\" rel=\"nofollow\">comment on the following</a>:</p>
<blockquote>
<blockquote> Good morning, madam. What kind of storage system would you like me to build for you today? </blockquote>
<p>Scary thought. That means that selling storage products is going to be hard for all of us. We'll be selling components, both hardware and software, or we'll be selling integration and support services. Somebody will always pay to have somebody else assemble the parts, maybe add some light customization, and support the result. There's a nice living to be made there... but no empires.</p>
</blockquote>
<p>Why is it a problem that no empires are to be built? It's only a problem for an empire-builder like I dunno... Sam Altman or something. Darcy is an old engineer, not a startup founder. A good one, too. His kids aren't going to go to bed hungry.</p>
<p>We've been at this dance before with Linux. People have been asking if Red Hat was going to be like Microsoft, and I told everyone: nope. We're transfering the wealth that the proprietary lock-in vendors were collecting <i>back to the users</i>. That was the whole idea. In the process, we're collecting less - a more reasonable amount, necessary to put stuff together and make it run. <i>Therefore</i>, we're not going to be as wealthy off users' backs. But the society as a whole benefits.</p>
<p>So cry me a river. Not scary at all. But RTWT, I think he's drawing a truthful outline overall.</p>
<p>P.S. Another thing, what's magical about storage? Why, I can go build spacecraft when storage goes bust. Or whatever. Of course it's a pity for all the storage-specific techniques and skills that I accumulated, but eh. As long as we leave behind the good code (and docs), it's all good.</p>") (pubDate nil "Wed, 28 Oct 2015 01:41:44 +0000"))) ("James Morris: LSM Mailing List Being Archived Again" "<p>Several folks noticed that all of the known <a href=\"https://en.wikipedia.org/wiki/Linux_Security_Modules\">LSM</a> <a href=\"http://vger.kernel.org/vger-lists.html#linux-security-module\">mailing list</a> archives stopped archiving earlier this year.  We don’t know why and generally have not had any luck contacting the owners of several archives, including <a href=\"http://marc.info/?l=linux-security-module\">marc</a> and <a href=\"http://news.gmane.org/gmane.linux.kernel.lsm\">gmane</a>.  This is a concern, because the list is generally where Linux kernel security takes place and it’s important to have a public record of it.</p>
<p>The good news is that <a href=\"http://www.paul-moore.com/blog/\">Paul Moore</a> was finally able to re-register the list with <a href=\"https://www.mail-archive.com/\">mail-archive.com</a>, and there is once again an active archive here: <a href=\"http://www.mail-archive.com/linux-security-module@vger.kernel.org/\">http://www.mail-archive.com/linux-security-module@vger.kernel.org/</a></p>
<p>Please update any links you may have!</p>" "http://blog.namei.org/2015/10/22/lsm-mailing-list-being-archived-again/" (22056 27921) old 32 nil nil ((title nil "James Morris: LSM Mailing List Being Archived Again") (guid nil "http://blog.namei.org/?p=627") (link nil "http://blog.namei.org/2015/10/22/lsm-mailing-list-being-archived-again/") (description nil "<p>Several folks noticed that all of the known <a href=\"https://en.wikipedia.org/wiki/Linux_Security_Modules\">LSM</a> <a href=\"http://vger.kernel.org/vger-lists.html#linux-security-module\">mailing list</a> archives stopped archiving earlier this year.  We don’t know why and generally have not had any luck contacting the owners of several archives, including <a href=\"http://marc.info/?l=linux-security-module\">marc</a> and <a href=\"http://news.gmane.org/gmane.linux.kernel.lsm\">gmane</a>.  This is a concern, because the list is generally where Linux kernel security takes place and it’s important to have a public record of it.</p>
<p>The good news is that <a href=\"http://www.paul-moore.com/blog/\">Paul Moore</a> was finally able to re-register the list with <a href=\"https://www.mail-archive.com/\">mail-archive.com</a>, and there is once again an active archive here: <a href=\"http://www.mail-archive.com/linux-security-module@vger.kernel.org/\">http://www.mail-archive.com/linux-security-module@vger.kernel.org/</a></p>
<p>Please update any links you may have!</p>") (pubDate nil "Thu, 22 Oct 2015 04:58:57 +0000"))) ("Andy Grover: iSNS support coming soon for LIO in Fedora" "<p><a href=\"https://github.com/cvubrugier/target-isns\">target-isns</a> recently was added to Rawhide, and will be in a future Fedora release. This add-on to LIO allows it to register with an iSNS server, which potential initiators can then query for available targets. (On Fedora, see <code>isns-utils</code> for both the server, and client query tools.) This removes one of the few remaining areas that other target implementations have been ahead of LIO.</p>
<p>Kudos and thanks to <span class=\"vcard-fullname\"><a href=\"https://github.com/cvubrugier\">Christophe Vu-Brugier</a> for writing this useful program!</span></p>" "http://groveronline.com/2015/10/isns-support-coming-soon-for-lio-in-fedora/" (22056 11765) old 33 nil nil ((title nil "Andy Grover: iSNS support coming soon for LIO in Fedora") (guid nil "http://groveronline.com/?p=542") (link nil "http://groveronline.com/2015/10/isns-support-coming-soon-for-lio-in-fedora/") (description nil "<p><a href=\"https://github.com/cvubrugier/target-isns\">target-isns</a> recently was added to Rawhide, and will be in a future Fedora release. This add-on to LIO allows it to register with an iSNS server, which potential initiators can then query for available targets. (On Fedora, see <code>isns-utils</code> for both the server, and client query tools.) This removes one of the few remaining areas that other target implementations have been ahead of LIO.</p>
<p>Kudos and thanks to <span class=\"vcard-fullname\"><a href=\"https://github.com/cvubrugier\">Christophe Vu-Brugier</a> for writing this useful program!</span></p>") (pubDate nil "Thu, 22 Oct 2015 00:29:41 +0000"))) ("Andy Grover: Some targetcli and TCMU questions" "<p dir=\"ltr\">Just got an email full of interesting questions, I hope the author will be ok with me answering them here so future searches will see them:</p>
<blockquote><p>I searched on internet and I don’t find some relevant info about gluster api support via tcmu-runner. Can you tell me please if this support will be added to the stable redhat targetcli in the near future? And I want to know also which targetcli is recommended for setup (targetcli or targetcli-fb) and what is the status for targetcli-3.0.</p></blockquote>
<p dir=\"ltr\"><a href=\"https://github.com/agrover/tcmu-runner\">tcmu-runner</a> is a userspace daemon add-on to <a href=\"http://linux-iscsi.org/wiki/Main_Page\">LIO</a> that allows requests for a device to be handled by a user process. tcmu-runner has early support for using glfs (via gfapi). Both tcmu-runner and its glfs plugin are beta-quality and will need further work before they are ready for stable Fedora, much less a RHEL release. tcmu-runner just landed in Rawhide, but this is really just to make it easier to test.</p>
<p dir=\"ltr\">RHEL &amp; Fedora use targetcli-fb, which is a fork of targetcli, and what I work on. Since I’m working on both tcmu-runner and targetcli-fb, targetcli-fb will see TCMU support very early.</p>
<p dir=\"ltr\">The -fb packages I maintain switched to a “fbXX” version scheme, so I think you must be referring to the other one <img alt=\":-)\" class=\"wp-smiley\" src=\"http://groveronline.com/wp-includes/images/smilies/simple-smile.png\" style=\"height: 1em;\" /> I don’t have any info about the RTS/Datera targetcli’s status, other than nobody likes having two versions, the targetcli maintainer and I have discussed unifying them into a common version, but the un-fun work of merging them has not happened yet.</p>" "http://groveronline.com/2015/10/targetcli-tcmu-questions/" (22056 2711) old 34 nil nil ((title nil "Andy Grover: Some targetcli and TCMU questions") (guid nil "http://groveronline.com/?p=536") (link nil "http://groveronline.com/2015/10/targetcli-tcmu-questions/") (description nil "<p dir=\"ltr\">Just got an email full of interesting questions, I hope the author will be ok with me answering them here so future searches will see them:</p>
<blockquote><p>I searched on internet and I don’t find some relevant info about gluster api support via tcmu-runner. Can you tell me please if this support will be added to the stable redhat targetcli in the near future? And I want to know also which targetcli is recommended for setup (targetcli or targetcli-fb) and what is the status for targetcli-3.0.</p></blockquote>
<p dir=\"ltr\"><a href=\"https://github.com/agrover/tcmu-runner\">tcmu-runner</a> is a userspace daemon add-on to <a href=\"http://linux-iscsi.org/wiki/Main_Page\">LIO</a> that allows requests for a device to be handled by a user process. tcmu-runner has early support for using glfs (via gfapi). Both tcmu-runner and its glfs plugin are beta-quality and will need further work before they are ready for stable Fedora, much less a RHEL release. tcmu-runner just landed in Rawhide, but this is really just to make it easier to test.</p>
<p dir=\"ltr\">RHEL &amp; Fedora use targetcli-fb, which is a fork of targetcli, and what I work on. Since I’m working on both tcmu-runner and targetcli-fb, targetcli-fb will see TCMU support very early.</p>
<p dir=\"ltr\">The -fb packages I maintain switched to a “fbXX” version scheme, so I think you must be referring to the other one <img alt=\":-)\" class=\"wp-smiley\" src=\"http://groveronline.com/wp-includes/images/smilies/simple-smile.png\" style=\"height: 1em;\" /> I don’t have any info about the RTS/Datera targetcli’s status, other than nobody likes having two versions, the targetcli maintainer and I have discussed unifying them into a common version, but the un-fun work of merging them has not happened yet.</p>") (pubDate nil "Wed, 21 Oct 2015 21:58:47 +0000"))) ("Rusty Russell: ccan/mem’s memeqzero iteration" "<p>On Thursday I was writing some code, and I wanted to test if an array was all zero.  First I checked if ccan/mem had anything, in case I missed it, then jumped on IRC to ask the author (and overall CCAN co-maintainer) <a href=\"https://github.com/dgibson\">David Gibson</a> about it.</p>
<p>We bikeshedded around names: memallzero? memiszero? memeqz? memeqzero() won by analogy with the already-extant memeq and memeqstr. Then I asked:</p>
<blockquote><p><em>rusty: dwg: now, how much time do I waste optimizing?</em><br />
<em> dwg: rusty, in the first commit, none</em></p></blockquote>
<p>Exactly five minutes later I had it implemented and tested.</p>
<h3>The Naive Approach: Times: <em><strong>1/7/310/37064</strong></em> Bytes: <em><strong>50</strong></em></h3>
<pre>bool memeqzero(const void *data, size_t length)
{
const unsigned char *p = data;
while (length) {
if (*p)
return false;
p++;
length--;
}
return true;
}</pre>
<p>As a summary, I’ve give the nanoseconds for searching through 1,8,512 and 65536 bytes only.</p>
<p>Another 20 minutes, and I had written that benchmark, and an optimized version.</p>
<h3>128-byte Static Buffer: Times: <em><strong><span style=\"color: #ff0000;\">6</span>/8/<span style=\"color: #00ff00;\">48</span>/<span style=\"color: #00ff00;\">5872 </span></strong></em>Bytes: <em><strong>108</strong></em></h3>
<p>Here’s my first attempt at optimization; using a static array of 128 bytes of zeroes and assuming memcmp is well-optimized for fixed-length comparisons.  Worse for small sizes, much better for big.</p>
<pre> const unsigned char *p = data;
static unsigned long zeroes[16];
while (length &gt; sizeof(zeroes)) {
if (memcmp(zeroes, p, sizeof(zeroes)))
return false;
p += sizeof(zeroes);
length -= sizeof(zeroes);
}
return memcmp(zeroes, p, length) == 0;</pre>
<h3>Using a 64-bit Constant: Times: <em><strong><span style=\"color: #ff0000;\">12</span>/<span style=\"color: #ff0000;\">12</span>/<span style=\"color: #ff0000;\">84</span>/<span style=\"color: #ff0000;\">6418 </span></strong></em>Bytes: <em><strong>169</strong></em><span style=\"text-decoration: underline;\"><br />
</span></h3>
<p style=\"padding-left: 30px;\"><em>dwg: but blowing a cacheline (more or less) on zeroes for comparison, which isn’t necessarily a win</em></p>
<p>Using a single zero uint64_t for comparison is pretty messy:</p>
<pre>bool memeqzero(const void *data, size_t length)
{
    const unsigned char *p = data;
    const unsigned long zero = 0;
    size_t pre;
    pre = (size_t)p % sizeof(unsigned long);
    if (pre) {
        size_t n = sizeof(unsigned long) - pre;
        if (n &gt; length)
            n = length;
        if (memcmp(p, &amp;zero, n) != 0)
            return false;
        p += n;
        length -= n;
    }
    while (length &gt; sizeof(zero)) {
        if (*(unsigned long *)p != zero)
            return false;
        p += sizeof(zero);
        length -= sizeof(zero);
    }
    return memcmp(&amp;zero, p, length) == 0;
}</pre>
<p>And, worse in every way!</p>
<h3>Using a 64-bit Constant With Open-coded Ends: Times: <em><strong>4/9/68/6444 </strong></em>Bytes: <em><strong>165</strong></em></h3>
<blockquote><p><em>dwg: rusty, what colour is the bikeshed if you have an explicit char * loop for the pre and post?</em></p></blockquote>
<p>That’s slightly better, but memcmp still wins over large distances, perhaps due to prefetching or other tricks.</p>
<h3>Epiphany #1: We Already Have Zeroes: Times <em>3/5/92/5801</em> Bytes: <em>422</em></h3>
<p>Then I realized that we don’t need a static buffer: we know everything we’ve already tested is zero!  So I open coded the first 16 byte compare, then memcmp()ed against the previous bytes, doubling each time.  Then a final memcmp for the tail.  Clever huh?</p>
<p>But it no faster than the static buffer case on the high end, and much bigger.</p>
<blockquote><p><em>dwg: rusty, that is brilliant. but being brilliant isn’t enough to make things work, necessarily :p</em></p></blockquote>
<h3>Epiphany #2: memcmp can overlap: Times <em>3/5/<span style=\"color: #00ff00;\">37</span>/<span style=\"color: #00ff00;\">2823</span></em> Bytes: <em>307</em></h3>
<p>My doubling logic above was because my brain wasn’t completely in phase: unlike memcpy, memcmp arguments can happily overlap!  It’s still worth doing an open-coded loop to start (gcc unrolls it here with -O3), but after 16 it’s worth memcmping with the previous 16 bytes.  This is as fast as naive with as little as 2 bytes, and the fastest solution by far with larger numbers:</p>
<pre> const unsigned char *p = data;
size_t len;
/* Check first 16 bytes manually */
for (len = 0; len &lt; 16; len++) {
if (!length)
return true;
if (*p)
return false;
p++;
length--;
}
/* Now we know that's zero, memcmp with self. */
return memcmp(data, p, length) == 0;</pre>
<p>You can find the final code in <a class=\"broken_link\" href=\"http://git.ozlabs.org/?p=ccan;a=blob;f=ccan/mem/mem.c;h=5eb15070ed3c3f9f5bf8d2dd8b0d0f060ffa1766;hb=HEAD#l92\">CCAN</a> (or on <a href=\"https://github.com/rustyrussell/ccan/\">Github</a>) including the <a href=\"https://github.com/rustyrussell/ccan/blob/master/ccan/mem/bench/speed.c\">benchmark code</a>.</p>
<p>Finally, after about 4 hours of random yak shaving, it turns out lightning doesn’t even want to use memeqzero() any more!  Hopefully someone else will benefit.</p>" "http://rusty.ozlabs.org/?p=560" (22053 34365) old 35 nil nil ((title nil "Rusty Russell: ccan/mem’s memeqzero iteration") (guid nil "http://rusty.ozlabs.org/?p=560") (link nil "http://rusty.ozlabs.org/?p=560") (description nil "<p>On Thursday I was writing some code, and I wanted to test if an array was all zero.  First I checked if ccan/mem had anything, in case I missed it, then jumped on IRC to ask the author (and overall CCAN co-maintainer) <a href=\"https://github.com/dgibson\">David Gibson</a> about it.</p>
<p>We bikeshedded around names: memallzero? memiszero? memeqz? memeqzero() won by analogy with the already-extant memeq and memeqstr. Then I asked:</p>
<blockquote><p><em>rusty: dwg: now, how much time do I waste optimizing?</em><br />
<em> dwg: rusty, in the first commit, none</em></p></blockquote>
<p>Exactly five minutes later I had it implemented and tested.</p>
<h3>The Naive Approach: Times: <em><strong>1/7/310/37064</strong></em> Bytes: <em><strong>50</strong></em></h3>
<pre>bool memeqzero(const void *data, size_t length)
{
    const unsigned char *p = data;

    while (length) {
        if (*p)
            return false;
        p++;
        length--;
    }
    return true;
}</pre>
<p>As a summary, I’ve give the nanoseconds for searching through 1,8,512 and 65536 bytes only.</p>
<p>Another 20 minutes, and I had written that benchmark, and an optimized version.</p>
<h3>128-byte Static Buffer: Times: <em><strong><span style=\"color: #ff0000;\">6</span>/8/<span style=\"color: #00ff00;\">48</span>/<span style=\"color: #00ff00;\">5872 </span></strong></em>Bytes: <em><strong>108</strong></em></h3>
<p>Here’s my first attempt at optimization; using a static array of 128 bytes of zeroes and assuming memcmp is well-optimized for fixed-length comparisons.  Worse for small sizes, much better for big.</p>
<pre> const unsigned char *p = data;
 static unsigned long zeroes[16];

 while (length &gt; sizeof(zeroes)) {
     if (memcmp(zeroes, p, sizeof(zeroes)))
         return false;
     p += sizeof(zeroes);
     length -= sizeof(zeroes);
 }
 return memcmp(zeroes, p, length) == 0;</pre>
<h3>Using a 64-bit Constant: Times: <em><strong><span style=\"color: #ff0000;\">12</span>/<span style=\"color: #ff0000;\">12</span>/<span style=\"color: #ff0000;\">84</span>/<span style=\"color: #ff0000;\">6418 </span></strong></em>Bytes: <em><strong>169</strong></em><span style=\"text-decoration: underline;\"><br />
</span></h3>
<p style=\"padding-left: 30px;\"><em>dwg: but blowing a cacheline (more or less) on zeroes for comparison, which isn’t necessarily a win</em></p>
<p>Using a single zero uint64_t for comparison is pretty messy:</p>
<pre>bool memeqzero(const void *data, size_t length)
{
    const unsigned char *p = data;
    const unsigned long zero = 0;
    size_t pre;
    pre = (size_t)p % sizeof(unsigned long);
    if (pre) {
        size_t n = sizeof(unsigned long) - pre;
        if (n &gt; length)
            n = length;
        if (memcmp(p, &amp;zero, n) != 0)
            return false;
        p += n;
        length -= n;
    }
    while (length &gt; sizeof(zero)) {
        if (*(unsigned long *)p != zero)
            return false;
        p += sizeof(zero);
        length -= sizeof(zero);
    }
    return memcmp(&amp;zero, p, length) == 0;
}</pre>
<p>And, worse in every way!</p>
<h3>Using a 64-bit Constant With Open-coded Ends: Times: <em><strong>4/9/68/6444 </strong></em>Bytes: <em><strong>165</strong></em></h3>
<blockquote><p><em>dwg: rusty, what colour is the bikeshed if you have an explicit char * loop for the pre and post?</em></p></blockquote>
<p>That’s slightly better, but memcmp still wins over large distances, perhaps due to prefetching or other tricks.</p>
<h3>Epiphany #1: We Already Have Zeroes: Times <em>3/5/92/5801</em> Bytes: <em>422</em></h3>
<p>Then I realized that we don’t need a static buffer: we know everything we’ve already tested is zero!  So I open coded the first 16 byte compare, then memcmp()ed against the previous bytes, doubling each time.  Then a final memcmp for the tail.  Clever huh?</p>
<p>But it no faster than the static buffer case on the high end, and much bigger.</p>
<blockquote><p><em>dwg: rusty, that is brilliant. but being brilliant isn’t enough to make things work, necessarily :p</em></p></blockquote>
<h3>Epiphany #2: memcmp can overlap: Times <em>3/5/<span style=\"color: #00ff00;\">37</span>/<span style=\"color: #00ff00;\">2823</span></em> Bytes: <em>307</em></h3>
<p>My doubling logic above was because my brain wasn’t completely in phase: unlike memcpy, memcmp arguments can happily overlap!  It’s still worth doing an open-coded loop to start (gcc unrolls it here with -O3), but after 16 it’s worth memcmping with the previous 16 bytes.  This is as fast as naive with as little as 2 bytes, and the fastest solution by far with larger numbers:</p>
<pre> const unsigned char *p = data;
 size_t len;

 /* Check first 16 bytes manually */
 for (len = 0; len &lt; 16; len++) {
     if (!length)
         return true;
     if (*p)
         return false;
     p++;
     length--;
 }

 /* Now we know that's zero, memcmp with self. */
 return memcmp(data, p, length) == 0;</pre>
<p>You can find the final code in <a class=\"broken_link\" href=\"http://git.ozlabs.org/?p=ccan;a=blob;f=ccan/mem/mem.c;h=5eb15070ed3c3f9f5bf8d2dd8b0d0f060ffa1766;hb=HEAD#l92\">CCAN</a> (or on <a href=\"https://github.com/rustyrussell/ccan/\">Github</a>) including the <a href=\"https://github.com/rustyrussell/ccan/blob/master/ccan/mem/bench/speed.c\">benchmark code</a>.</p>
<p>Finally, after about 4 hours of random yak shaving, it turns out lightning doesn’t even want to use memeqzero() any more!  Hopefully someone else will benefit.</p>") (pubDate nil "Tue, 20 Oct 2015 00:09:33 +0000"))) ("Paul E. Mc Kenney: Deep Blue vs. Watson Revisited" "Some years back, I <a href=\"http://paulmck.livejournal.com/2011/02/10/\" rel=\"nofollow\">speculated</a> on the importance of IBM's <a href=\"http://www.ibm.com/smarterplanet/us/en/ibmwatson/\" rel=\"nofollow\">Watson</a>.  Much has happened since then: Watson won Jeopardy, has been applied to medical applications, and has been made available to numerous business partners to enable them to produce Watson-based offerings.  In short, it is long past time for a follow-up.<br /><br />However, The Economist beat me to the punch in their October 3rd print edition.  I doubt that I can improve on <a href=\"http://www.economist.com/news/science-and-technology/21669609-watson-ibms-attempt-crack-market-artificial-intelligence-starting\" rel=\"nofollow\">their article</a>, so I will confine myself to taking the fair-use liberty of quoting their last sentence:<br /><br /><blockquote>If it [Watson] can pull that off, a truly disturbing possibility looms: that the next TV show featuring Watson might be “America's Got Talent”.<br /></blockquote>" "http://paulmck.livejournal.com/40911.html" (22039 10009) old 36 nil nil ((title nil "Paul E. Mc Kenney: Deep Blue vs. Watson Revisited") (guid nil "http://paulmck.livejournal.com/40911.html") (link nil "http://paulmck.livejournal.com/40911.html") (description nil "Some years back, I <a href=\"http://paulmck.livejournal.com/2011/02/10/\" rel=\"nofollow\">speculated</a> on the importance of IBM's <a href=\"http://www.ibm.com/smarterplanet/us/en/ibmwatson/\" rel=\"nofollow\">Watson</a>.  Much has happened since then: Watson won Jeopardy, has been applied to medical applications, and has been made available to numerous business partners to enable them to produce Watson-based offerings.  In short, it is long past time for a follow-up.<br /><br />However, The Economist beat me to the punch in their October 3rd print edition.  I doubt that I can improve on <a href=\"http://www.economist.com/news/science-and-technology/21669609-watson-ibms-attempt-crack-market-artificial-intelligence-starting\" rel=\"nofollow\">their article</a>, so I will confine myself to taking the fair-use liberty of quoting their last sentence:<br /><br /><blockquote>If it [Watson] can pull that off, a truly disturbing possibility looms: that the next TV show featuring Watson might be “America's Got Talent”.<br /></blockquote>") (pubDate nil "Fri, 09 Oct 2015 02:31:53 +0000"))) ("Matthew Garrett: Going my own way" "Reaction to Sarah's post about <a href=\"http://sarah.thesharps.us/2015/10/05/closing-a-door/\">leaving the kernel community</a> was a mixture of terrible and touching, but it's still one of those things that almost certainly won't end up making any kind of significant difference. Linus has made it pretty clear that he's fine with the way he behaves, and nobody's going to depose him. That's unfortunate, because earlier today I was sitting in a presentation at Linuxcon and remembering how much I love the technical side of kernel development. \"Remembering\" is a deliberate choice of word - it's been increasingly difficult to remember that, because instead I remember having to deal with interminable arguments over the naming of an interface because Linus has an undying hatred of BSD securelevel, or having my name forever associated with the <a href=\"http://arstechnica.com/information-technology/2013/02/linus-torvalds-i-will-not-change-linux-to-deep-throat-microsoft/\">deepthroating of Microsoft</a> because Linus couldn't be bothered asking questions about the reasoning behind a design before trashing it.<br /><br />In the end it's a mixture of just being tired of dealing with the crap associated with Linux development and realising that by continuing to put up with it I'm tacitly encouraging its continuation, but I can't be bothered any more. And, thanks to the magic of free software, it turns out that I can avoid putting up with the bullshit in the kernel community <em>and</em> get to work on the things I'm interested in doing. So <a href=\"https://github.com/mjg59/linux\">here's a kernel tree</a> with patches that implement a BSD-style securelevel interface. Over time it'll pick up some of the power management code I'm still working on, and we'll see where it goes from there. But, until there's a significant shift in community norms on LKML, I'll only be there when I'm being paid to be there. And that's improved my mood immeasurably.<br /><br />(Edited to add a context link for the \"deepthroating of Microsoft\" reference)<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=38136\" style=\"vertical-align: middle;\" width=\"30\" /> comments" "http://mjg59.dreamwidth.org/38136.html" (22038 13792) old 37 nil nil ((title nil "Matthew Garrett: Going my own way") (guid nil "tag:dreamwidth.org,2011-02-12:696190:38136") (link nil "http://mjg59.dreamwidth.org/38136.html") (description nil "Reaction to Sarah's post about <a href=\"http://sarah.thesharps.us/2015/10/05/closing-a-door/\">leaving the kernel community</a> was a mixture of terrible and touching, but it's still one of those things that almost certainly won't end up making any kind of significant difference. Linus has made it pretty clear that he's fine with the way he behaves, and nobody's going to depose him. That's unfortunate, because earlier today I was sitting in a presentation at Linuxcon and remembering how much I love the technical side of kernel development. \"Remembering\" is a deliberate choice of word - it's been increasingly difficult to remember that, because instead I remember having to deal with interminable arguments over the naming of an interface because Linus has an undying hatred of BSD securelevel, or having my name forever associated with the <a href=\"http://arstechnica.com/information-technology/2013/02/linus-torvalds-i-will-not-change-linux-to-deep-throat-microsoft/\">deepthroating of Microsoft</a> because Linus couldn't be bothered asking questions about the reasoning behind a design before trashing it.<br /><br />In the end it's a mixture of just being tired of dealing with the crap associated with Linux development and realising that by continuing to put up with it I'm tacitly encouraging its continuation, but I can't be bothered any more. And, thanks to the magic of free software, it turns out that I can avoid putting up with the bullshit in the kernel community <em>and</em> get to work on the things I'm interested in doing. So <a href=\"https://github.com/mjg59/linux\">here's a kernel tree</a> with patches that implement a BSD-style securelevel interface. Over time it'll pick up some of the power management code I'm still working on, and we'll see where it goes from there. But, until there's a significant shift in community norms on LKML, I'll only be there when I'm being paid to be there. And that's improved my mood immeasurably.<br /><br />(Edited to add a context link for the \"deepthroating of Microsoft\" reference)<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=38136\" style=\"vertical-align: middle;\" width=\"30\" /> comments") (pubDate nil "Thu, 08 Oct 2015 09:22:40 +0000"))) ("James Bottomley: Respect and the Linux Kernel Mailing Lists" "<p>I recently noticed that Sarah Sharp <a href=\"http://sarah.thesharps.us/2015/10/05/closing-a-door/\">resigned publicly</a> from the kernel giving a failure to impose a mandatory code of conduct as the reason and citing interaction problems, mainly on the mailing lists.  The net result of this posting, as <a href=\"http://lwn.net/Articles/659221/#Comments\">all these comments</a> demonstrate, is to imply directly that nothing has ever changed.  This implication is incredibly annoying, firstly because it is actually untrue, secondly because it does more to discourage participation than the behaviour that is being complained about and finally because it totally disrespects and ignores the efforts of hundreds of people who, over the last decade or so, have been striving to improve all interactions around Linux … a rather nice irony given that “respect” is listed as one of the issues for the resignation.  I’d just like to remind everyone of the history of these efforts and what the record shows they’ve achieved.</p>
<p>The issue of respect on the Mailing lists goes way back to the beginnings of Linux itself, but after the foundation of the OSDL (precursor to the Linux Foundation) Technical Advisory Board (TAB), one of its first issues from OSDL member companies was the imbalance between Asian and European/American contributions to the kernel.  The problems were partly to do with Management culture and partly because the lack of respect on the various mailing lists was directly counter to the culture of respect in a lot of Asian countries and disproportionately discouraged contributions from that region.  The TAB largely works behind the scenes, but some aspects of the effort filtered into the public domain as can be seen with a session on <a href=\"https://lwn.net/Articles/249104/\">developer relations at the 2007 kernel summit</a> (and, in fact, at a lot of other kernel summits since then).  Progress was gradual, and influenced by a large number of people, but the climate did improve.  I have to confess that I don’t follow LKML (not because of the flame war issues, simply because it’s too much of a firehose); however, the lists I do participate in (linux-scsi, linux-ide, linux-mm, linux-fsdevel, linux-efi, linux-arch, linux-parisc) haven’t seen any flagrantly disrespectful and personally insulting posts for several years now.  Indeed, when an individual came along who could almost have been flame bait for this with serial efforts to get incorrect and badly thought out patches into the kernel (I won’t give cites here to avoid stigmatising individuals) they met with a large reserve of patience and respectful and helpful advice before finally being banned from the lists for being incorrigible … no insults or flames at all.</p>
<p>Although I’d love to take credit for some of this, I’ve got to say that I think the biggest influencer towards civility is actually the “professionalisation”  of Linux: Employers pay people to work on Linux but the statements of those people become identified with their employers (no matter how many disclaimers they have) … in many ways, Open Source engineers are the new corporate spokespeople.  All employers bear this in mind when they hire and they certainly look over the mailing lists to see how people behave.  The net result is really that the only people who can afford to be rude or abusive are those who don’t think they have much chance of a long term career in Linux.</p>
<p>So, by and large, I’m proud of the achievements we’ve made in civility and the way we have improved over the years.  Are we perfect? by no means (but then perfection in such a large community isn’t a realistic goal).  However, we have passed our stress test: that an individual with bad patches to several mailing lists was met with courtesy and helpful advice, in spite of serially repeating the behaviour.</p>
<p>In conclusion, I’d just like to note that even the <a href=\"http://thread.gmane.org/gmane.linux.kernel/1525074\">thread that gave rise</a> to Sarah’s desire to pursue a code of conduct is now over two years old and try as they might, no-one’s managed to come up with a more recent example and no-one has actually invoked the voluntary <a href=\"https://lwn.net/Articles/635999/\">code of conflict</a>, which was the compromise for not having a mandatory code of conduct.  If it were me, I’d actually take that as a sign of success …</p>" "http://blog.hansenpartnership.com/respect-and-the-linux-kernel-mailing-lists/" (22037 59206) old 38 nil nil ((title nil "James Bottomley: Respect and the Linux Kernel Mailing Lists") (guid nil "http://blog.hansenpartnership.com/?p=299") (link nil "http://blog.hansenpartnership.com/respect-and-the-linux-kernel-mailing-lists/") (description nil "<p>I recently noticed that Sarah Sharp <a href=\"http://sarah.thesharps.us/2015/10/05/closing-a-door/\">resigned publicly</a> from the kernel giving a failure to impose a mandatory code of conduct as the reason and citing interaction problems, mainly on the mailing lists.  The net result of this posting, as <a href=\"http://lwn.net/Articles/659221/#Comments\">all these comments</a> demonstrate, is to imply directly that nothing has ever changed.  This implication is incredibly annoying, firstly because it is actually untrue, secondly because it does more to discourage participation than the behaviour that is being complained about and finally because it totally disrespects and ignores the efforts of hundreds of people who, over the last decade or so, have been striving to improve all interactions around Linux … a rather nice irony given that “respect” is listed as one of the issues for the resignation.  I’d just like to remind everyone of the history of these efforts and what the record shows they’ve achieved.</p>
<p>The issue of respect on the Mailing lists goes way back to the beginnings of Linux itself, but after the foundation of the OSDL (precursor to the Linux Foundation) Technical Advisory Board (TAB), one of its first issues from OSDL member companies was the imbalance between Asian and European/American contributions to the kernel.  The problems were partly to do with Management culture and partly because the lack of respect on the various mailing lists was directly counter to the culture of respect in a lot of Asian countries and disproportionately discouraged contributions from that region.  The TAB largely works behind the scenes, but some aspects of the effort filtered into the public domain as can be seen with a session on <a href=\"https://lwn.net/Articles/249104/\">developer relations at the 2007 kernel summit</a> (and, in fact, at a lot of other kernel summits since then).  Progress was gradual, and influenced by a large number of people, but the climate did improve.  I have to confess that I don’t follow LKML (not because of the flame war issues, simply because it’s too much of a firehose); however, the lists I do participate in (linux-scsi, linux-ide, linux-mm, linux-fsdevel, linux-efi, linux-arch, linux-parisc) haven’t seen any flagrantly disrespectful and personally insulting posts for several years now.  Indeed, when an individual came along who could almost have been flame bait for this with serial efforts to get incorrect and badly thought out patches into the kernel (I won’t give cites here to avoid stigmatising individuals) they met with a large reserve of patience and respectful and helpful advice before finally being banned from the lists for being incorrigible … no insults or flames at all.</p>
<p>Although I’d love to take credit for some of this, I’ve got to say that I think the biggest influencer towards civility is actually the “professionalisation”  of Linux: Employers pay people to work on Linux but the statements of those people become identified with their employers (no matter how many disclaimers they have) … in many ways, Open Source engineers are the new corporate spokespeople.  All employers bear this in mind when they hire and they certainly look over the mailing lists to see how people behave.  The net result is really that the only people who can afford to be rude or abusive are those who don’t think they have much chance of a long term career in Linux.</p>
<p>So, by and large, I’m proud of the achievements we’ve made in civility and the way we have improved over the years.  Are we perfect? by no means (but then perfection in such a large community isn’t a realistic goal).  However, we have passed our stress test: that an individual with bad patches to several mailing lists was met with courtesy and helpful advice, in spite of serially repeating the behaviour.</p>
<p>In conclusion, I’d just like to note that even the <a href=\"http://thread.gmane.org/gmane.linux.kernel/1525074\">thread that gave rise</a> to Sarah’s desire to pursue a code of conduct is now over two years old and try as they might, no-one’s managed to come up with a more recent example and no-one has actually invoked the voluntary <a href=\"https://lwn.net/Articles/635999/\">code of conflict</a>, which was the compromise for not having a mandatory code of conduct.  If it were me, I’d actually take that as a sign of success …</p>") (pubDate nil "Thu, 08 Oct 2015 03:47:18 +0000"))) ("Pete Zaitcev: Pics Up" "<p>Чёт я под настроение выложил <a href=\"http://forums.airbase.ru/2015/10/t91955--puteshestvie-iz-albukyorki-v-rochester.html\" rel=\"nofollow\">картинки с этой недели на форумы Авиабазы</a>. Anglophones are welcome to pictures at least.</p>" "http://zaitcev.livejournal.com/230032.html" (22034 53238) old 39 nil nil ((title nil "Pete Zaitcev: Pics Up") (guid nil "http://zaitcev.livejournal.com/230032.html") (link nil "http://zaitcev.livejournal.com/230032.html") (description nil "<p>Чёт я под настроение выложил <a href=\"http://forums.airbase.ru/2015/10/t91955--puteshestvie-iz-albukyorki-v-rochester.html\" rel=\"nofollow\">картинки с этой недели на форумы Авиабазы</a>. Anglophones are welcome to pictures at least.</p>") (pubDate nil "Mon, 05 Oct 2015 19:31:02 +0000"))) ("Davidlohr Bueso: acquire/release semantics in the kernel" "<div dir=\"ltr\" style=\"text-align: left;\"><div style=\"text-align: justify;\">With the need for better scaling on increasingly larger multi-core  systems, we've continued to extend our CPU barriers in the kernel. Two important variants to prevent CPU reordering for lock-free shared memory synchronization are pairs of <i>load/acquire</i> and <i>store/release</i> <a href=\"https://lwn.net/Articles/576486/\">barriers</a>; also known as <span>LOCK/UNLOCK</span> barriers. These enable threads to cooperate between each other.<br /><br />Multiple, yet pretty much equivalent, definitions of acquire/release semantics can be found all over the internet, but I like the version from the infamous <i>'Documentation/memory-barriers.txt'</i> file for three reasons: (i) it is clear and concise, (ii) it explicitly warns that they are the minimum operations and not to assume anything about reordering of loads and stores before or after the acquire or release, respectively. Finally, (iii) it strongly mentions the need for pairing and thus portability:</div><blockquote class=\"tr_bq\"><div style=\"text-align: justify;\"><span> <i>(5) ACQUIRE operations.<br /><br />     This acts as a one-way permeable barrier.  It guarantees that all memory operations after the ACQUIRE operation will appear to happen after the CQUIRE operation with respect to the other components of the system. ACQUIRE operations include LOCK operations and smp_load_acquire() operations.<br /><br />     Memory operations that occur before an ACQUIRE operation may appear tohappen after it completes.<br /><br />     An ACQUIRE operation should almost always be paired with a RELEASE operation.</i></span></div><div style=\"text-align: justify;\"><i><span><br /></span></i></div><i><span> (6) RELEASE operations.<br /><br />     This also acts as a one-way permeable barrier.  It guarantees that all   memory operations before the RELEASE operation will appear to happen before the RELEASE operation with respect to the other components of the system. RELEASE operations include UNLOCK operations and smp_store_release() operations.<br /><br />     Memory operations that occur after a RELEASE operation may appear to happen before it completes.<br /><br />     The use of ACQUIRE and RELEASE operations generally precludes the need for other sorts of memory barrier (but note the exceptions mentioned in the subsection \"MMIO write barrier\").  In addition, a RELEASE+ACQUIRE pair is -not- guaranteed to act as a full memory barrier.  However, after an ACQUIRE on a given variable, all memory accesses preceding any prior RELEASE on that same variable are guaranteed to be visible.  In other words, within a given variable's critical section, all accesses of all previous critical sections for that variable are guaranteed to have completed.<br /><br />     This means that ACQUIRE acts as a minimal \"acquire\" operation and    RELEASE acts as a minimal \"release\" operation.</span></i></blockquote><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"><tbody><tr><td style=\"text-align: center;\"><img border=\"0\" src=\"http://4.bp.blogspot.com/-dA8WtADATbU/Vg7JyQ_knbI/AAAAAAAABIo/eepSlojW2-c/s1600/acquire-release.png\" style=\"margin-left: auto; margin-right: auto;\" /></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Thread B's ACQUIRE pairs with Thread A's RELEASE. <a href=\"http://www.ibm.com/developerworks/library/j-jtp03304/\">Copyright</a> (C) IBM.</td><td class=\"tr-caption\" style=\"text-align: center;\"><br /></td><td class=\"tr-caption\" style=\"text-align: center;\"><br /></td><td class=\"tr-caption\" style=\"text-align: center;\"><br /></td></tr></tbody></table><br /><div style=\"text-align: justify;\">In lock-speak, all this means is that nothing leaks from the critical region that is protected by the primitive in question. A thread attempting to take a lock will synchronize/pair the load (ACQUIRE), for instance via <i>Rmw</i> (<span>cmpxchg</span>), when attempting to take the lock with the last store (RELEASE) when another thread is concurrently releasing the lock (for example, setting the counter to 0).</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">For v4.2, Will Deacon <a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=654672d4ba1a6001c365833be895f9477c4d5eab\">introduced</a> more relaxed extensions of traditional atomic operations (including <i>Rmw</i>) which allow finer grained control over, what used to be, full barriers semantics on both sides of the instruction. This is also true for just about all atomic functions that return a value to the caller, ie: <span>atomic_*_return()</span>. As such <a href=\"http://preshing.com/20120930/weak-vs-strong-memory-models/\">weakly ordered architectures</a> can make use of these -- currently only arm64 makes use of them, but <a href=\"https://lkml.org/lkml/2015/9/16/527\">efforts</a> for PPC are being made. </div><blockquote class=\"tr_bq\"><blockquote class=\"tr_bq\"><i>      - *_relaxed: No ordering guarantees. This is similar to what we have already for the non-return atomics (e.g. atomic_add).<br />   <br />      - *_acquire: ACQUIRE semantics, similar to smp_load_acquire.<br />   <br />      - *_release: RELEASE semantics, similar to smp_store_release.</i></blockquote></blockquote><div style=\"text-align: justify;\">So we now have goodies such as <span>atomic_cmpxchg_acquire()</span> or <span>atomic_add_return_relaxed()</span>. Most recently, aiming for v4.4, <a href=\"http://comments.gmane.org/gmane.linux.kernel/2050980\">I've ported all our locks</a> to make use of these optimizations, which can save almost half the  amount of barriers in the kernel's locking code -- which is specially nice under low or regular contention scenarios,  where the fastpaths are exercised. There are plenty of other examples of real world code making use of acquire/release semantics. Mostly by using <span style=\"font-family: inherit;\"><span>smp_load_acquire()/smp_store_release()</span> other primitives  <span style=\"font-family: inherit;\">also use these semantics for common building blocks </span></span><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\">(as esoteric as they can get, ie RCU).</span></span></span></div></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/stgolabs/eMGj/~4/YTmP41MhdhE\" width=\"1\" />" "http://feedproxy.google.com/~r/stgolabs/eMGj/~3/YTmP41MhdhE/acquirerelease-semantics-in-kernel.html" (22034 7862) old 40 nil nil ((title nil "Davidlohr Bueso: acquire/release semantics in the kernel") (guid nil "tag:blogger.com,1999:blog-5789291509148224079.post-3042473723192220095") (link nil "http://feedproxy.google.com/~r/stgolabs/eMGj/~3/YTmP41MhdhE/acquirerelease-semantics-in-kernel.html") (description nil "<div dir=\"ltr\" style=\"text-align: left;\"><div style=\"text-align: justify;\">With the need for better scaling on increasingly larger multi-core  systems, we've continued to extend our CPU barriers in the kernel. Two important variants to prevent CPU reordering for lock-free shared memory synchronization are pairs of <i>load/acquire</i> and <i>store/release</i> <a href=\"https://lwn.net/Articles/576486/\">barriers</a>; also known as <span>LOCK/UNLOCK</span> barriers. These enable threads to cooperate between each other.<br /><br />Multiple, yet pretty much equivalent, definitions of acquire/release semantics can be found all over the internet, but I like the version from the infamous <i>'Documentation/memory-barriers.txt'</i> file for three reasons: (i) it is clear and concise, (ii) it explicitly warns that they are the minimum operations and not to assume anything about reordering of loads and stores before or after the acquire or release, respectively. Finally, (iii) it strongly mentions the need for pairing and thus portability:</div><blockquote class=\"tr_bq\"><div style=\"text-align: justify;\"><span> <i>(5) ACQUIRE operations.<br /><br />     This acts as a one-way permeable barrier.  It guarantees that all memory operations after the ACQUIRE operation will appear to happen after the CQUIRE operation with respect to the other components of the system. ACQUIRE operations include LOCK operations and smp_load_acquire() operations.<br /><br />     Memory operations that occur before an ACQUIRE operation may appear tohappen after it completes.<br /><br />     An ACQUIRE operation should almost always be paired with a RELEASE operation.</i></span></div><div style=\"text-align: justify;\"><i><span><br /></span></i></div><i><span> (6) RELEASE operations.<br /><br />     This also acts as a one-way permeable barrier.  It guarantees that all   memory operations before the RELEASE operation will appear to happen before the RELEASE operation with respect to the other components of the system. RELEASE operations include UNLOCK operations and smp_store_release() operations.<br /><br />     Memory operations that occur after a RELEASE operation may appear to happen before it completes.<br /><br />     The use of ACQUIRE and RELEASE operations generally precludes the need for other sorts of memory barrier (but note the exceptions mentioned in the subsection \"MMIO write barrier\").  In addition, a RELEASE+ACQUIRE pair is -not- guaranteed to act as a full memory barrier.  However, after an ACQUIRE on a given variable, all memory accesses preceding any prior RELEASE on that same variable are guaranteed to be visible.  In other words, within a given variable's critical section, all accesses of all previous critical sections for that variable are guaranteed to have completed.<br /><br />     This means that ACQUIRE acts as a minimal \"acquire\" operation and    RELEASE acts as a minimal \"release\" operation.</span></i></blockquote><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"><tbody><tr><td style=\"text-align: center;\"><img border=\"0\" src=\"http://4.bp.blogspot.com/-dA8WtADATbU/Vg7JyQ_knbI/AAAAAAAABIo/eepSlojW2-c/s1600/acquire-release.png\" style=\"margin-left: auto; margin-right: auto;\" /></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Thread B's ACQUIRE pairs with Thread A's RELEASE. <a href=\"http://www.ibm.com/developerworks/library/j-jtp03304/\">Copyright</a> (C) IBM.</td><td class=\"tr-caption\" style=\"text-align: center;\"><br /></td><td class=\"tr-caption\" style=\"text-align: center;\"><br /></td><td class=\"tr-caption\" style=\"text-align: center;\"><br /></td></tr></tbody></table><br /><div style=\"text-align: justify;\">In lock-speak, all this means is that nothing leaks from the critical region that is protected by the primitive in question. A thread attempting to take a lock will synchronize/pair the load (ACQUIRE), for instance via <i>Rmw</i> (<span>cmpxchg</span>), when attempting to take the lock with the last store (RELEASE) when another thread is concurrently releasing the lock (for example, setting the counter to 0).</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">For v4.2, Will Deacon <a href=\"https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=654672d4ba1a6001c365833be895f9477c4d5eab\">introduced</a> more relaxed extensions of traditional atomic operations (including <i>Rmw</i>) which allow finer grained control over, what used to be, full barriers semantics on both sides of the instruction. This is also true for just about all atomic functions that return a value to the caller, ie: <span>atomic_*_return()</span>. As such <a href=\"http://preshing.com/20120930/weak-vs-strong-memory-models/\">weakly ordered architectures</a> can make use of these -- currently only arm64 makes use of them, but <a href=\"https://lkml.org/lkml/2015/9/16/527\">efforts</a> for PPC are being made. </div><blockquote class=\"tr_bq\"><blockquote class=\"tr_bq\"><i>      - *_relaxed: No ordering guarantees. This is similar to what we have already for the non-return atomics (e.g. atomic_add).<br />   <br />      - *_acquire: ACQUIRE semantics, similar to smp_load_acquire.<br />   <br />      - *_release: RELEASE semantics, similar to smp_store_release.</i></blockquote></blockquote><div style=\"text-align: justify;\">So we now have goodies such as <span>atomic_cmpxchg_acquire()</span> or <span>atomic_add_return_relaxed()</span>. Most recently, aiming for v4.4, <a href=\"http://comments.gmane.org/gmane.linux.kernel/2050980\">I've ported all our locks</a> to make use of these optimizations, which can save almost half the  amount of barriers in the kernel's locking code -- which is specially nice under low or regular contention scenarios,  where the fastpaths are exercised. There are plenty of other examples of real world code making use of acquire/release semantics. Mostly by using <span style=\"font-family: inherit;\"><span>smp_load_acquire()/smp_store_release()</span> other primitives  <span style=\"font-family: inherit;\">also use these semantics for common building blocks </span></span><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\"><span style=\"font-family: inherit;\">(as esoteric as they can get, ie RCU).</span></span></span></div></div><img alt=\"\" height=\"1\" src=\"http://feeds.feedburner.com/~r/stgolabs/eMGj/~4/YTmP41MhdhE\" width=\"1\" />") (pubDate nil "Mon, 05 Oct 2015 06:54:46 +0000"))) ("Eric Sandeen: No, XFS won’t steal your money" "<p><img alt=\"\" class=\"alignnone aligncenter\" height=\"400\" src=\"http://i.imgur.com/kDTAeGq.jpg\" width=\"400\" /></p>
<p>So, the Inquirer runs a story by <a href=\"http://www.theinquirer.net/inquirer/flame_author/2427498/greendispenser-malware-threatens-to-take-all-your-dosh-from-linux-atms\">Chris Merriman</a> today, titled “GreenDispenser malware threatens to take all your dosh from Linux ATMs” which includes this breathless little gem:</p>
<blockquote><p>GreenDispenser targets the XFS file system, a popular standard for ATMs, originally designed for IRIX but now widely used in Linux. ATMs that use Windows XP Embedded, which is still supported, are not thought to be at risk.</p></blockquote>
<p>Of course, I found this interesting, and a bit odd.  Could the XFS filesystem possibly be at fault here?  And is the “large and lots” filesystem really used in ATMS?  Let’s see what Proofpoint, the security firm who discovered it <a href=\"https://www.proofpoint.com/us/threat-insight/post/Meet-GreenDispenser\">has to say about the subject</a>:</p>
<blockquote><p>Specifically, GreenDispenser like its predecessors interacts with the <a href=\"https://en.wikipedia.org/wiki/CEN/XFS\">XFS middleware</a> [4], which is widely adopted by various ATM vendors.</p></blockquote>
<p>That handy link &amp; footnote leads us to Wikipedia, which explains that “XFS middleware” refers to CEN/XFS, which is not in any way related to the XFS filesystem, or Linux, and is in fact Microsoft specific:</p>
<blockquote><p><b>CEN/XFS</b> or <b>XFS</b> (e<b>X</b>tensions for <b>F</b>inancial <b>S</b>ervices) provides a client-server architecture for financial applications on the Microsoft Windows platform.</p></blockquote>
<p>Nice job, Inquirer!  Nice job, <a href=\"http://www.theinquirer.net/inquirer/flame_author/2427498/greendispenser-malware-threatens-to-take-all-your-dosh-from-linux-atms\">Chris Merriman</a>!</p>
<p>(As Jeff points out in the comments, The Inquirer has updated the article as of Sep 25, removing references to LInux and the XFS filesystem.)</p>" "http://sandeen.net/wordpress/computers/linux/no-xfs-wont-steal-your-money/?utm_source=rss&utm_medium=rss&utm_campaign=no-xfs-wont-steal-your-money" (22020 17827) old 41 nil nil ((title nil "Eric Sandeen: No, XFS won’t steal your money") (guid nil "http://sandeen.net/wordpress/?p=1389") (link nil "http://sandeen.net/wordpress/computers/linux/no-xfs-wont-steal-your-money/?utm_source=rss&utm_medium=rss&utm_campaign=no-xfs-wont-steal-your-money") (description nil "<p><img alt=\"\" class=\"alignnone aligncenter\" height=\"400\" src=\"http://i.imgur.com/kDTAeGq.jpg\" width=\"400\" /></p>
<p>So, the Inquirer runs a story by <a href=\"http://www.theinquirer.net/inquirer/flame_author/2427498/greendispenser-malware-threatens-to-take-all-your-dosh-from-linux-atms\">Chris Merriman</a> today, titled “GreenDispenser malware threatens to take all your dosh from Linux ATMs” which includes this breathless little gem:</p>
<blockquote><p>GreenDispenser targets the XFS file system, a popular standard for ATMs, originally designed for IRIX but now widely used in Linux. ATMs that use Windows XP Embedded, which is still supported, are not thought to be at risk.</p></blockquote>
<p>Of course, I found this interesting, and a bit odd.  Could the XFS filesystem possibly be at fault here?  And is the “large and lots” filesystem really used in ATMS?  Let’s see what Proofpoint, the security firm who discovered it <a href=\"https://www.proofpoint.com/us/threat-insight/post/Meet-GreenDispenser\">has to say about the subject</a>:</p>
<blockquote><p>Specifically, GreenDispenser like its predecessors interacts with the <a href=\"https://en.wikipedia.org/wiki/CEN/XFS\">XFS middleware</a> [4], which is widely adopted by various ATM vendors.</p></blockquote>
<p>That handy link &amp; footnote leads us to Wikipedia, which explains that “XFS middleware” refers to CEN/XFS, which is not in any way related to the XFS filesystem, or Linux, and is in fact Microsoft specific:</p>
<blockquote><p><b>CEN/XFS</b> or <b>XFS</b> (e<b>X</b>tensions for <b>F</b>inancial <b>S</b>ervices) provides a client-server architecture for financial applications on the Microsoft Windows platform.</p></blockquote>
<p>Nice job, Inquirer!  Nice job, <a href=\"http://www.theinquirer.net/inquirer/flame_author/2427498/greendispenser-malware-threatens-to-take-all-your-dosh-from-linux-atms\">Chris Merriman</a>!</p>
<p>(As Jeff points out in the comments, The Inquirer has updated the article as of Sep 25, removing references to LInux and the XFS filesystem.)</p>") (pubDate nil "Thu, 24 Sep 2015 18:49:07 +0000"))) ("Matthew Garrett: Filling in the holes in Linux boot chain measurement, and the TPM measurement log" "When I wrote about <a href=\"https://mjg59.dreamwidth.org/35742.html\">TPM attestation via 2FA</a>, I mentioned that you needed a bootloader that actually performed measurement. I've now written some patches for Shim and Grub that do so.<br /><br />The <a href=\"https://github.com/mjg59/shim/tree/tpm\">Shim code</a> does a couple of things. The obvious one is to measure the second-stage bootloader into PCR 9. The perhaps less expected one is to measure the contents of the MokList and MokSBState UEFI variables into PCR 14. This means that if you're happy simply running a system with your own set of signing keys and just want to ensure that your secure boot configuration hasn't been compromised, you can simply seal to PCR 7 (which will contain the UEFI Secure Boot state as defined by the UEFI spec) and PCR 14 (which will contain the additional state used by Shim) and ignore all the others.<br /><br />The grub code is a little more complicated because there's more ways to get it to execute code. Right now I've gone for a fairly extreme implementation. On BIOS systems, the grub stage 1 and 2 will be measured into PCR 9[1]. That's the only BIOS-specific part of things. From then on, any grub modules that are loaded will also be measured into PCR 9. The full kernel image will be measured into PCR10, and the full initramfs will be measured into PCR11. The command line passed to the kernel is in PCR12. Finally, each command executed by grub (including those in the config file) is measured into PCR 13.<br /><br />That's quite a lot of measurement, and there are probably fairly reasonable circumstances under which you won't want to pay attention to all of those PCRs. But you've probably also noticed that several different things may be measured into the same PCR, and that makes it more difficult to figure out what's going on. Thankfully, the spec designers have a solution to this in the form of the TPM measurement log.<br /><br />Rather than merely extending a PCR with a new hash, software can extend the measurement log at the same time. This is stored outside the TPM and so isn't directly cryptographically protected. In the simplest form, it contains a hash and some form of description of the event associated with that hash. If you replay those hashes you should end up with the same value that's in the TPM, so for attestation purposes you can perform that verification and then merely check that specific log values you care about are correct. This makes it possible to have a system perform an attestation to a remote server that contains a full list of the grub commands that it ran and for that server to make its attestation decision based on a subset of those.<br /><br />No promises as yet about PCR allocation being final or these patches ever going anywhere in their current form, but it seems reasonable to get them out there so people can play. Let me know if you end up using them!<br /><br />[1] The code for this is derived from the old <a href=\"http://sourceforge.net/projects/trustedgrub/\">Trusted Grub</a> patchset, by way of Sirrix AG's <a href=\"https://github.com/Sirrix-AG/TrustedGRUB2/\">Trusted Grub 2</a> tree.<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=37656\" style=\"vertical-align: middle;\" width=\"30\" /> comments" "http://mjg59.dreamwidth.org/37656.html" (22019 20480) old 42 nil nil ((title nil "Matthew Garrett: Filling in the holes in Linux boot chain measurement, and the TPM measurement log") (guid nil "tag:dreamwidth.org,2011-02-12:696190:37656") (link nil "http://mjg59.dreamwidth.org/37656.html") (description nil "When I wrote about <a href=\"https://mjg59.dreamwidth.org/35742.html\">TPM attestation via 2FA</a>, I mentioned that you needed a bootloader that actually performed measurement. I've now written some patches for Shim and Grub that do so.<br /><br />The <a href=\"https://github.com/mjg59/shim/tree/tpm\">Shim code</a> does a couple of things. The obvious one is to measure the second-stage bootloader into PCR 9. The perhaps less expected one is to measure the contents of the MokList and MokSBState UEFI variables into PCR 14. This means that if you're happy simply running a system with your own set of signing keys and just want to ensure that your secure boot configuration hasn't been compromised, you can simply seal to PCR 7 (which will contain the UEFI Secure Boot state as defined by the UEFI spec) and PCR 14 (which will contain the additional state used by Shim) and ignore all the others.<br /><br />The grub code is a little more complicated because there's more ways to get it to execute code. Right now I've gone for a fairly extreme implementation. On BIOS systems, the grub stage 1 and 2 will be measured into PCR 9[1]. That's the only BIOS-specific part of things. From then on, any grub modules that are loaded will also be measured into PCR 9. The full kernel image will be measured into PCR10, and the full initramfs will be measured into PCR11. The command line passed to the kernel is in PCR12. Finally, each command executed by grub (including those in the config file) is measured into PCR 13.<br /><br />That's quite a lot of measurement, and there are probably fairly reasonable circumstances under which you won't want to pay attention to all of those PCRs. But you've probably also noticed that several different things may be measured into the same PCR, and that makes it more difficult to figure out what's going on. Thankfully, the spec designers have a solution to this in the form of the TPM measurement log.<br /><br />Rather than merely extending a PCR with a new hash, software can extend the measurement log at the same time. This is stored outside the TPM and so isn't directly cryptographically protected. In the simplest form, it contains a hash and some form of description of the event associated with that hash. If you replay those hashes you should end up with the same value that's in the TPM, so for attestation purposes you can perform that verification and then merely check that specific log values you care about are correct. This makes it possible to have a system perform an attestation to a remote server that contains a full list of the grub commands that it ran and for that server to make its attestation decision based on a subset of those.<br /><br />No promises as yet about PCR allocation being final or these patches ever going anywhere in their current form, but it seems reasonable to get them out there so people can play. Let me know if you end up using them!<br /><br />[1] The code for this is derived from the old <a href=\"http://sourceforge.net/projects/trustedgrub/\">Trusted Grub</a> patchset, by way of Sirrix AG's <a href=\"https://github.com/Sirrix-AG/TrustedGRUB2/\">Trusted Grub 2</a> tree.<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=37656\" style=\"vertical-align: middle;\" width=\"30\" /> comments") (pubDate nil "Thu, 24 Sep 2015 01:21:04 +0000"))) ("Matthew Garrett: The Internet of Incompatible Things" "I have an <a href=\"http://www.amazon.com/Amazon-SK705DI-Echo/dp/B00X4WHP5E\">Amazon Echo</a>. I also have a <a href=\"http://www.lifx.com/products/the-original?variant=1190662175\">LIFX Smart Bulb</a>. The Echo can integrate with <a href=\"http://www2.meethue.com/en-us/\">Philips Hue</a> devices, letting you control your lights by voice. It has no integration with LIFX. Worse, the Echo developer program is fairly limited - while the device's built in code supports communicating with devices on your local network, the third party developer interface only allows you to make calls to remote sites[1]. It seemed like I was going to have to put up with either controlling my bedroom light by phone or actually getting out of bed to hit the switch.<br /><br />Then I found <a href=\"http://www.makermusings.com/2015/07/13/amazon-echo-and-home-automation/\">this article</a> describing the implementation of a bridge between the Echo and <a href=\"http://www.wemo.com\">Belkin Wemo</a> switches, cunningly called Fauxmo. The Echo already supports controlling Wemo switches, and the code in question simply implements enough of the Wemo API to convince the Echo that there's a bunch of Wemo switches on your network. When the Echo sends a command to them asking them to turn on or off, the code executes an arbitrary callback that integrates with whatever API you want.<br /><br />This seemed like a good starting point. There's a free implementation of the LIFX bulb API called <a href=\"https://github.com/mpapi/lazylights\">Lazylights</a>, and with a quick bit of hacking I could use the Echo to turn my bulb on or off. But the Echo's Hue support also allows dimming of lights, and that seemed like a nice feature to have. Tcpdump showed that asking the Echo to look for Hue devices resulted in similar UPnP discovery requests to it looking for Wemo devices, so extending the Fauxmo code seemed plausible. I signed up for the Philips developer program and then discovered that the terms and conditions explicitly forbade using any information on their site to implement any kind of Hue-compatible endpoint. So that was out. Thankfully enough people have written their own Hue code at various points that I could figure out enough of the protocol by searching Github instead, and now I have a branch of Fauxmo that <a href=\"https://github.com/mjg59/fauxmo\">supports searching for LIFX bulbs and presenting them as Hues</a>[2].<br /><br />Running this on a machine on my local network is enough to keep the Echo happy, and I can now dim my bedroom light in addition to turning it on or off. But it demonstrates a somewhat awkward situation. Right now vendors have no real incentive to offer any kind of compatibility with each other. Instead they're all trying to define their own ecosystems with their own incompatible protocols with the aim of forcing users to continue buying from them. Worse, they attempt to restrict developers from implementing any kind of compatibility layers. The inevitable outcome is going to be either stacks of discarded devices speaking abandoned protocols or a cottage industry of developers writing bridge code and trying to avoid DMCA takedowns.<br /><br />The dystopian future we're heading towards isn't Gibsonian giant megacorporations engaging in physical warfare, it's one where buying a new toaster means replacing all your lightbulbs or discovering that the code making your home alarm system work is now considered a copyright infringement. Is there a market where I can invest in IP lawyers?<br /><br />[1] It also requires an additional phrase at the beginning of a request to indicate which third party app you want your query to go to, so it's much more clumsy to make those requests compared to using a built-in app.<br />[2] I only have one bulb, so as yet I haven't added any support for groups.<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=37522\" style=\"vertical-align: middle;\" width=\"30\" /> comments" "http://mjg59.dreamwidth.org/37522.html" (22015 9100) old 43 nil nil ((title nil "Matthew Garrett: The Internet of Incompatible Things") (guid nil "tag:dreamwidth.org,2011-02-12:696190:37522") (link nil "http://mjg59.dreamwidth.org/37522.html") (description nil "I have an <a href=\"http://www.amazon.com/Amazon-SK705DI-Echo/dp/B00X4WHP5E\">Amazon Echo</a>. I also have a <a href=\"http://www.lifx.com/products/the-original?variant=1190662175\">LIFX Smart Bulb</a>. The Echo can integrate with <a href=\"http://www2.meethue.com/en-us/\">Philips Hue</a> devices, letting you control your lights by voice. It has no integration with LIFX. Worse, the Echo developer program is fairly limited - while the device's built in code supports communicating with devices on your local network, the third party developer interface only allows you to make calls to remote sites[1]. It seemed like I was going to have to put up with either controlling my bedroom light by phone or actually getting out of bed to hit the switch.<br /><br />Then I found <a href=\"http://www.makermusings.com/2015/07/13/amazon-echo-and-home-automation/\">this article</a> describing the implementation of a bridge between the Echo and <a href=\"http://www.wemo.com\">Belkin Wemo</a> switches, cunningly called Fauxmo. The Echo already supports controlling Wemo switches, and the code in question simply implements enough of the Wemo API to convince the Echo that there's a bunch of Wemo switches on your network. When the Echo sends a command to them asking them to turn on or off, the code executes an arbitrary callback that integrates with whatever API you want.<br /><br />This seemed like a good starting point. There's a free implementation of the LIFX bulb API called <a href=\"https://github.com/mpapi/lazylights\">Lazylights</a>, and with a quick bit of hacking I could use the Echo to turn my bulb on or off. But the Echo's Hue support also allows dimming of lights, and that seemed like a nice feature to have. Tcpdump showed that asking the Echo to look for Hue devices resulted in similar UPnP discovery requests to it looking for Wemo devices, so extending the Fauxmo code seemed plausible. I signed up for the Philips developer program and then discovered that the terms and conditions explicitly forbade using any information on their site to implement any kind of Hue-compatible endpoint. So that was out. Thankfully enough people have written their own Hue code at various points that I could figure out enough of the protocol by searching Github instead, and now I have a branch of Fauxmo that <a href=\"https://github.com/mjg59/fauxmo\">supports searching for LIFX bulbs and presenting them as Hues</a>[2].<br /><br />Running this on a machine on my local network is enough to keep the Echo happy, and I can now dim my bedroom light in addition to turning it on or off. But it demonstrates a somewhat awkward situation. Right now vendors have no real incentive to offer any kind of compatibility with each other. Instead they're all trying to define their own ecosystems with their own incompatible protocols with the aim of forcing users to continue buying from them. Worse, they attempt to restrict developers from implementing any kind of compatibility layers. The inevitable outcome is going to be either stacks of discarded devices speaking abandoned protocols or a cottage industry of developers writing bridge code and trying to avoid DMCA takedowns.<br /><br />The dystopian future we're heading towards isn't Gibsonian giant megacorporations engaging in physical warfare, it's one where buying a new toaster means replacing all your lightbulbs or discovering that the code making your home alarm system work is now considered a copyright infringement. Is there a market where I can invest in IP lawyers?<br /><br />[1] It also requires an additional phrase at the beginning of a request to indicate which third party app you want your query to go to, so it's much more clumsy to make those requests compared to using a built-in app.<br />[2] I only have one bulb, so as yet I haven't added any support for groups.<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=37522\" style=\"vertical-align: middle;\" width=\"30\" /> comments") (pubDate nil "Sun, 20 Sep 2015 21:22:20 +0000"))) ("Daniel Vetter: XDC 2015: Atomic Modesetting for Drivers" "I've done a talk at <a href=\"http://www.x.org/wiki/Events/XDC2015/\">XDC 2015</a> about atomic modesetting with a focus for driver writers. Most of the talk is an overview of how an atomic modeset looks and how to implement the different parts in a driver backend. Anyway, for all those who missed it, there's a <a href=\"https://www.youtube.com/watch?v=kl9suFgbTc8\">video</a> and <a href=\"http://people.freedesktop.org/~danvet/presentations/xdc-2015.pdf\">slides</a>." "http://blog.ffwll.ch/2015/09/xdc-2015-atomic-modesetting-for-drivers.html" (22012 11607) old 44 nil nil ((title nil "Daniel Vetter: XDC 2015: Atomic Modesetting for Drivers") (guid nil "tag:blogger.com,1999:blog-8047628228132312466.post-5289130486490976068") (link nil "http://blog.ffwll.ch/2015/09/xdc-2015-atomic-modesetting-for-drivers.html") (description nil "I've done a talk at <a href=\"http://www.x.org/wiki/Events/XDC2015/\">XDC 2015</a> about atomic modesetting with a focus for driver writers. Most of the talk is an overview of how an atomic modeset looks and how to implement the different parts in a driver backend. Anyway, for all those who missed it, there's a <a href=\"https://www.youtube.com/watch?v=kl9suFgbTc8\">video</a> and <a href=\"http://people.freedesktop.org/~danvet/presentations/xdc-2015.pdf\">slides</a>.") (pubDate nil "Fri, 18 Sep 2015 15:27:19 +0000"))) ("Pete Zaitcev: TLS Security In Firefox 40" "<div align=\"center\"><img height=\"259\" src=\"http://www.zaitcev.us/things/lj/2015/20150911a1.jpg\" width=\"608\" /></div>
<p>What do people at Mozilla think is going to happen when I need to access a website and Firefox says that TLS parameters are insecure and thus I cannot? I'm going to use Chrome, that's what. Or maybe even a hacked Midori, where I can adjust build-time parameters of gcr.</p>
<p>That company went way downhill when they kicked Eich out.</p>" "http://zaitcev.livejournal.com/229817.html" (22003 7785) old 45 nil nil ((title nil "Pete Zaitcev: TLS Security In Firefox 40") (guid nil "http://zaitcev.livejournal.com/229817.html") (link nil "http://zaitcev.livejournal.com/229817.html") (description nil "<div align=\"center\"><img height=\"259\" src=\"http://www.zaitcev.us/things/lj/2015/20150911a1.jpg\" width=\"608\" /></div>
<p>What do people at Mozilla think is going to happen when I need to access a website and Firefox says that TLS parameters are insecure and thus I cannot? I'm going to use Chrome, that's what. Or maybe even a hacked Midori, where I can adjust build-time parameters of gcr.</p>
<p>That company went way downhill when they kicked Eich out.</p>") (pubDate nil "Fri, 11 Sep 2015 18:33:13 +0000"))) ("Daniel Vetter: Neat drm/i915 stuff for 4.3" "<a href=\"http://blog.ffwll.ch/2015/06/neat-drmi915-stuff-for-42.html\">Kernel 4.2</a> is released already and the 4.3 merge window in full swing, time to look at what's in it for the intel graphics driver.<br /><br /><a name=\"more\"></a><br /><br />Biggest thing for sure is that <b>Skylake is finally out of preliminary support</b> and enabled by default. The reason for the long hold-up was some ABI fumble - the hardware exposes the topmost plane both through the new universal plane registers and the legacy cursor registers and because we simply carried the legacy plane code around in the driver we ended up exposing both. This wasn't something big to take care of but somehow was dragged on forever.<br /><br />The other big thing is that now <b>legacy modesets are done with the new atomic modesetting code </b>driver-internally. Atomic support in i915.ko isn't ready for prime-time yet fully, but this is definitely a big step forward. Besides atomic there's also other cross-platform improvements in the modeset code: Ville fixed up the <b>12bpc support for HDMI</b>, which is now used by default if the screen supports it. Mika Kahola and Ville also implemented dynamic adjustment of the cdclk, which is the main clock source for display engines on intel graphics. And there's a big difference in the clock speeds needed between e.g. a 4k screen and a 720p TV.<br /><br />Continuing with power saving features Rodrigo again spent a lot of time <b>fixing up PSR</b> (panel self refresh). And Paulo did the same by writing patches to <b>improve FBC </b>(framebuffer compression). We have some really solid testcases by now, unfortunately neither feature is ready for enabling by default yet. Especially PSR is still plagued by screen freezes on some random systems. Also there's been <b>some fixes to DRRS</b> (dynamic refresh rate switching) from Ramalingam. DRRS is enabled by default already, where supported. And finally some improvements to make the frontbuffer rendering tracking more accurate, which is used by all three of these display power saving features.<br /><br />And of course there's also tons of improvements to platform code. <b>Display PLL code for Sklylake and Valleyview&amp;Cherryview was tuned</b> by Damien and Ville respectively. There's been <b>tons of work on Broxton and DSI support</b> by Imre, Gaurav and others.<br /><br />Moving on to the rendering side the big change is how tracking of rendering tasks is handled. In the past the driver just used raw sequence numbers emitted by the hardware, but for cross-driver synchronization and reordering tasks with an eventual gpu scheduler more abstraction is needed. A big step is <b>converting over to the i915 request structure</b> completely, done by John Harrison. The next step will be to switch the internal implementation for i915 requests to the cross-driver fences, but that's for future kernels. As a follow-up cleanup John also <b>removed the OLR</b>, which stands for outstanding lazy request. It was a neat little trick implemented years ago to simplify handling error recovery, but which causes tons of pain with subtle bugs. Making requests more explicit in the driver allowed us to finally remove this trick since.<br /><br />There's also been a pile of platform related features: <b>MOCS programming for Skylake/Broxton</b> (which is used for caching control). <b>Resource streamer support</b> from Abdiel, which is used to offload some of the buffer object tracking for shaders from the cpu to the gpu. And the command parser on Haswell was extended to <b>support atomic instructions</b> in shaders. And finally for Skylake Mika Kuoppala added code to avoid resetting the gpu - in certain cases the hardware would hard-hang the entire system trying to execute the reset. And a dead gpu is still better than a dead system.<br />" "http://blog.ffwll.ch/2015/09/neat-drmi915-stuff-for-43.html" (21997 23421) old 46 nil nil ((title nil "Daniel Vetter: Neat drm/i915 stuff for 4.3") (guid nil "tag:blogger.com,1999:blog-8047628228132312466.post-5631845111107853206") (link nil "http://blog.ffwll.ch/2015/09/neat-drmi915-stuff-for-43.html") (description nil "<a href=\"http://blog.ffwll.ch/2015/06/neat-drmi915-stuff-for-42.html\">Kernel 4.2</a> is released already and the 4.3 merge window in full swing, time to look at what's in it for the intel graphics driver.<br /><br /><a name=\"more\"></a><br /><br />Biggest thing for sure is that <b>Skylake is finally out of preliminary support</b> and enabled by default. The reason for the long hold-up was some ABI fumble - the hardware exposes the topmost plane both through the new universal plane registers and the legacy cursor registers and because we simply carried the legacy plane code around in the driver we ended up exposing both. This wasn't something big to take care of but somehow was dragged on forever.<br /><br />The other big thing is that now <b>legacy modesets are done with the new atomic modesetting code </b>driver-internally. Atomic support in i915.ko isn't ready for prime-time yet fully, but this is definitely a big step forward. Besides atomic there's also other cross-platform improvements in the modeset code: Ville fixed up the <b>12bpc support for HDMI</b>, which is now used by default if the screen supports it. Mika Kahola and Ville also implemented dynamic adjustment of the cdclk, which is the main clock source for display engines on intel graphics. And there's a big difference in the clock speeds needed between e.g. a 4k screen and a 720p TV.<br /><br />Continuing with power saving features Rodrigo again spent a lot of time <b>fixing up PSR</b> (panel self refresh). And Paulo did the same by writing patches to <b>improve FBC </b>(framebuffer compression). We have some really solid testcases by now, unfortunately neither feature is ready for enabling by default yet. Especially PSR is still plagued by screen freezes on some random systems. Also there's been <b>some fixes to DRRS</b> (dynamic refresh rate switching) from Ramalingam. DRRS is enabled by default already, where supported. And finally some improvements to make the frontbuffer rendering tracking more accurate, which is used by all three of these display power saving features.<br /><br />And of course there's also tons of improvements to platform code. <b>Display PLL code for Sklylake and Valleyview&amp;Cherryview was tuned</b> by Damien and Ville respectively. There's been <b>tons of work on Broxton and DSI support</b> by Imre, Gaurav and others.<br /><br />Moving on to the rendering side the big change is how tracking of rendering tasks is handled. In the past the driver just used raw sequence numbers emitted by the hardware, but for cross-driver synchronization and reordering tasks with an eventual gpu scheduler more abstraction is needed. A big step is <b>converting over to the i915 request structure</b> completely, done by John Harrison. The next step will be to switch the internal implementation for i915 requests to the cross-driver fences, but that's for future kernels. As a follow-up cleanup John also <b>removed the OLR</b>, which stands for outstanding lazy request. It was a neat little trick implemented years ago to simplify handling error recovery, but which causes tons of pain with subtle bugs. Making requests more explicit in the driver allowed us to finally remove this trick since.<br /><br />There's also been a pile of platform related features: <b>MOCS programming for Skylake/Broxton</b> (which is used for caching control). <b>Resource streamer support</b> from Abdiel, which is used to offload some of the buffer object tracking for shaders from the cpu to the gpu. And the command parser on Haswell was extended to <b>support atomic instructions</b> in shaders. And finally for Skylake Mika Kuoppala added code to avoid resetting the gpu - in certain cases the hardware would hard-hang the entire system trying to execute the reset. And a dead gpu is still better than a dead system.<br />") (pubDate nil "Mon, 07 Sep 2015 09:40:13 +0000"))) ("Andy Grover: RHEL 7.2 has an updated kernel target" "<p>As mentioned in the beta release notes, the kernel in RHEL 7.2 contains a rebased LIO kernel target, to the equivalent of the Linux 4.0.stable series.</p>
<p>This is a big update. LIO has improved greatly since 3.10. It has added support for SCSI features that enable VMWare VAAI support, as well as data integrity (DIF), and significant iSER work, for those of you using Infiniband. (SRP is also supported, as well as iSCSI and FCoE, of course.)</p>
<p>Note that we still do not ship support for the Fibre Channel qla2xxx fabric. It still seems to be something storage vendors and integrators want, more than a feature our customers are telling us they want in RHEL.</p>
<p>(On a side note, Infiniband hardware is pretty affordable these days! For all you datacenter hobbyists who have a rack in the garage, I might suggest a cheap previous-gen IB setup and either SRP or iSER as the way to go and still get really high IOPs.)</p>
<p>Users of RHEL 7’s SCSI target should find RHEL 7.2 to be a very nice upgrade. Please try the beta out and report any issues you find of course, but it’s looking really good so far.</p>" "http://groveronline.com/2015/09/rhel-7-2-has-an-updated-kernel-target/" (21994 4633) old 47 nil nil ((title nil "Andy Grover: RHEL 7.2 has an updated kernel target") (guid nil "http://groveronline.com/?p=528") (link nil "http://groveronline.com/2015/09/rhel-7-2-has-an-updated-kernel-target/") (description nil "<p>As mentioned in the beta release notes, the kernel in RHEL 7.2 contains a rebased LIO kernel target, to the equivalent of the Linux 4.0.stable series.</p>
<p>This is a big update. LIO has improved greatly since 3.10. It has added support for SCSI features that enable VMWare VAAI support, as well as data integrity (DIF), and significant iSER work, for those of you using Infiniband. (SRP is also supported, as well as iSCSI and FCoE, of course.)</p>
<p>Note that we still do not ship support for the Fibre Channel qla2xxx fabric. It still seems to be something storage vendors and integrators want, more than a feature our customers are telling us they want in RHEL.</p>
<p>(On a side note, Infiniband hardware is pretty affordable these days! For all you datacenter hobbyists who have a rack in the garage, I might suggest a cheap previous-gen IB setup and either SRP or iSER as the way to go and still get really high IOPs.)</p>
<p>Users of RHEL 7’s SCSI target should find RHEL 7.2 to be a very nice upgrade. Please try the beta out and report any issues you find of course, but it’s looking really good so far.</p>") (pubDate nil "Fri, 04 Sep 2015 21:50:17 +0000"))) ("Pavel Machek: Wifi fun and misc.." "(And apology for the SSD entry some time back. Apparently yes, they can fail to retain data after less than a week... at the very end of their lifetime.)<br /><br />In the last weeks, learned that transfering real-time data over WIFI is way more fun than I thought. And that i<span style=\"line-height: 1.4;\">t is possible to communicate from inside of (closed) microwave</span><span style=\"line-height: 1.4; white-space: pre;\"> </span><span style=\"line-height: 1.4;\">oven </span><span style=\"line-height: 1.4;\">using 2.4GHz WIFI. I don't know about you, but it scares me a little.</span><br /><br /><div><u>N900 and not everything is a file</u><br /><br /><div><div>Pocket Computer. We had pocket computers before ... Sharp Zaurus lines <span style=\"line-height: 1.4;\">was prominent example. They had keyboards and resistive</span></div><div>touchscreens... Resistive touchscreen with stylus is accurate enough <span style=\"line-height: 1.4;\">to serve as mouse replacement. Unfortunately, such machines are slowly </span><span style=\"line-height: 1.4;\">going extinct. Sure, we have Quad-core Full-HD smartphones these </span><span style=\"line-height: 1.4;\">days... but they lack keyboards, making ssh from them impossible, they </span><span style=\"line-height: 1.4;\">lack accurate pointing device, and they are really phones, not small </span><span style=\"line-height: 1.4;\">computers. N900 can <i>almost</i> be used as a pocket computer...</span><br /><br /><div><div>New Mer is \"broken beyond repair\" for n900.. as it uses qt5.  qt4 <span style=\"line-height: 1.4;\">works well (well... little slow) on n900, but qt5 needs stable egl</span></div><div>drivers. Ok, so that was another nice-looking trap. I'm starting to <span style=\"line-height: 1.4;\">think that text-only user interface is right thing to do on n900 at</span></div><div>this point.</div></div></div></div></div><div><div>Baking n900 for 15minutes at 250C seems to have fixed the \"no sim <span style=\"line-height: 1.4;\">card\" problem... for a week. It now seems a bit flakey, but definitely better than before baking. Thanks for everyone at Czech BrmLab!</span></div></div><div>To backup mmc card on N900, I'd like to rsync root@maemo:/dev/mmcblk1 <span style=\"line-height: 1.4;\">mmcblk1.img ... but that does not work, as rsync is too clever and </span><span style=\"line-height: 1.4;\">refuses to transfer content of special files. Is there trick I'm </span><span style=\"line-height: 1.4;\">missing?</span></div><div><br /><div>On the n900 front... it has 256MiB RAM and 800x480 screen. What web <span style=\"line-height: 1.4;\">browser would you recommend for that? I tried links2, but its support </span><span style=\"line-height: 1.4;\">is not good enough for properly working m.mobilecity.com </span><span style=\"line-height: 1.4;\">pages... which I'd kind of like.</span></div><br /><u>Linus, please reconsider -rc0</u><br /><br /><div>Hmm. There's big difference between 4.1 (expected to be pretty stable <span style=\"line-height: 1.4;\">kernel) and 4.2-rc0 (which is probably going to be as unstable as it </span><span style=\"line-height: 1.4;\">gets. Unfortunately, Linus does not change makefile before merging, so it is quite tricky </span><span style=\"line-height: 1.4;\">to tell if</span></div><div>Linux amd 4.1.0 #25 SMP Wed Jul 1 11:20:22 CEST 2015 x86_64 GNU/Linux</div><div>is expected-to-be-stable 4.1, or expected-to-be-very-unstable 4.2-rc0...<br /><br /><div>Its tempting to name your branches simply \"v4.1\", \"v3.11\". Don't. When <span style=\"line-height: 1.4;\">-rc's are done, Linus will create \"v4.1\" tag, and you'll have fun</span></div><div>figuring out what whent wrong in your git.</div><br /><u>Google play bloatware</u></div><div><br /><div>I got very cheap LG optimus chic.. and android did improve from G1 <span style=\"line-height: 1.4;\">days. Its still Google's spying empire, but.. at least it is fluid and </span><span style=\"line-height: 1.4;\">mostly works.</span></div></div></div><div>Not sure what \"Google Play services\" are good for, but taking 50MB of <span style=\"line-height: 1.4;\">internal flash is not funny.. and when moved to SD card, the SD card </span><span style=\"line-height: 1.4;\">tends to disconnect. \"Google Play Store\" still works without them. \"My </span><span style=\"line-height: 1.4;\">Tracks\" need them, but 60MB of flash is not reasonable price to pay </span><span style=\"line-height: 1.4;\">for GPX recording. \"Pubtran\" got removed, too. MHDdroid has strange </span><span style=\"line-height: 1.4;\">interface, but perhaps it will not need that much storage.</span></div><div>Do you know a way to search czech public transport without Android and <span style=\"line-height: 1.4;\">without desktop browser or Opera Mini? m.idos.cz leads to \"full\" version.</span><br /><br /><div>And ...dear Android, \"force close\" dialog is last thing I want to see after <span style=\"line-height: 1.4;\">hearing ringtone. If you could at least add the number to call log...<br /><br /><u>Feeling cheated</u></span><br /><br /><div><div>Wed Jul  1 01:59:58 CEST 2015</div><div>Wed Jul  1 01:59:59 CEST 2015</div><div>Wed Jul  1 02:00:00 CEST 2015</div><div>Wed Jul  1 02:00:01 CEST 2015</div><div>Wed Jul  1 02:00:02 CEST 2015</div><div>Wed Jul  1 02:00:03 CEST 2015</div></div></div></div><div><u>Different power supply for X60</u><br /><br /><div>Thinkpad X60 is marked as 20V, 3.25A. I wonder if using 19V, 2.63A <span style=\"line-height: 1.4;\">power supply is a good idea. The power brick is way smaller, and 65W </span><span style=\"line-height: 1.4;\">seems to be a little high for a small notebook.</span></div></div>" "http://pavelmachek.livejournal.com/130043.html" (21993 27798) old 48 nil nil ((title nil "Pavel Machek: Wifi fun and misc..") (guid nil "http://pavelmachek.livejournal.com/130043.html") (link nil "http://pavelmachek.livejournal.com/130043.html") (description nil "(And apology for the SSD entry some time back. Apparently yes, they can fail to retain data after less than a week... at the very end of their lifetime.)<br /><br />In the last weeks, learned that transfering real-time data over WIFI is way more fun than I thought. And that i<span style=\"line-height: 1.4;\">t is possible to communicate from inside of (closed) microwave</span><span style=\"line-height: 1.4; white-space: pre;\"> </span><span style=\"line-height: 1.4;\">oven </span><span style=\"line-height: 1.4;\">using 2.4GHz WIFI. I don't know about you, but it scares me a little.</span><br /><br /><div><u>N900 and not everything is a file</u><br /><br /><div><div>Pocket Computer. We had pocket computers before ... Sharp Zaurus lines <span style=\"line-height: 1.4;\">was prominent example. They had keyboards and resistive</span></div><div>touchscreens... Resistive touchscreen with stylus is accurate enough <span style=\"line-height: 1.4;\">to serve as mouse replacement. Unfortunately, such machines are slowly </span><span style=\"line-height: 1.4;\">going extinct. Sure, we have Quad-core Full-HD smartphones these </span><span style=\"line-height: 1.4;\">days... but they lack keyboards, making ssh from them impossible, they </span><span style=\"line-height: 1.4;\">lack accurate pointing device, and they are really phones, not small </span><span style=\"line-height: 1.4;\">computers. N900 can <i>almost</i> be used as a pocket computer...</span><br /><br /><div><div>New Mer is \"broken beyond repair\" for n900.. as it uses qt5.  qt4 <span style=\"line-height: 1.4;\">works well (well... little slow) on n900, but qt5 needs stable egl</span></div><div>drivers. Ok, so that was another nice-looking trap. I'm starting to <span style=\"line-height: 1.4;\">think that text-only user interface is right thing to do on n900 at</span></div><div>this point.</div></div></div></div></div><div><div>Baking n900 for 15minutes at 250C seems to have fixed the \"no sim <span style=\"line-height: 1.4;\">card\" problem... for a week. It now seems a bit flakey, but definitely better than before baking. Thanks for everyone at Czech BrmLab!</span></div></div><div>To backup mmc card on N900, I'd like to rsync root@maemo:/dev/mmcblk1 <span style=\"line-height: 1.4;\">mmcblk1.img ... but that does not work, as rsync is too clever and </span><span style=\"line-height: 1.4;\">refuses to transfer content of special files. Is there trick I'm </span><span style=\"line-height: 1.4;\">missing?</span></div><div><br /><div>On the n900 front... it has 256MiB RAM and 800x480 screen. What web <span style=\"line-height: 1.4;\">browser would you recommend for that? I tried links2, but its support </span><span style=\"line-height: 1.4;\">is not good enough for properly working m.mobilecity.com </span><span style=\"line-height: 1.4;\">pages... which I'd kind of like.</span></div><br /><u>Linus, please reconsider -rc0</u><br /><br /><div>Hmm. There's big difference between 4.1 (expected to be pretty stable <span style=\"line-height: 1.4;\">kernel) and 4.2-rc0 (which is probably going to be as unstable as it </span><span style=\"line-height: 1.4;\">gets. Unfortunately, Linus does not change makefile before merging, so it is quite tricky </span><span style=\"line-height: 1.4;\">to tell if</span></div><div>Linux amd 4.1.0 #25 SMP Wed Jul 1 11:20:22 CEST 2015 x86_64 GNU/Linux</div><div>is expected-to-be-stable 4.1, or expected-to-be-very-unstable 4.2-rc0...<br /><br /><div>Its tempting to name your branches simply \"v4.1\", \"v3.11\". Don't. When <span style=\"line-height: 1.4;\">-rc's are done, Linus will create \"v4.1\" tag, and you'll have fun</span></div><div>figuring out what whent wrong in your git.</div><br /><u>Google play bloatware</u></div><div><br /><div>I got very cheap LG optimus chic.. and android did improve from G1 <span style=\"line-height: 1.4;\">days. Its still Google's spying empire, but.. at least it is fluid and </span><span style=\"line-height: 1.4;\">mostly works.</span></div></div></div><div>Not sure what \"Google Play services\" are good for, but taking 50MB of <span style=\"line-height: 1.4;\">internal flash is not funny.. and when moved to SD card, the SD card </span><span style=\"line-height: 1.4;\">tends to disconnect. \"Google Play Store\" still works without them. \"My </span><span style=\"line-height: 1.4;\">Tracks\" need them, but 60MB of flash is not reasonable price to pay </span><span style=\"line-height: 1.4;\">for GPX recording. \"Pubtran\" got removed, too. MHDdroid has strange </span><span style=\"line-height: 1.4;\">interface, but perhaps it will not need that much storage.</span></div><div>Do you know a way to search czech public transport without Android and <span style=\"line-height: 1.4;\">without desktop browser or Opera Mini? m.idos.cz leads to \"full\" version.</span><br /><br /><div>And ...dear Android, \"force close\" dialog is last thing I want to see after <span style=\"line-height: 1.4;\">hearing ringtone. If you could at least add the number to call log...<br /><br /><u>Feeling cheated</u></span><br /><br /><div><div>Wed Jul  1 01:59:58 CEST 2015</div><div>Wed Jul  1 01:59:59 CEST 2015</div><div>Wed Jul  1 02:00:00 CEST 2015</div><div>Wed Jul  1 02:00:01 CEST 2015</div><div>Wed Jul  1 02:00:02 CEST 2015</div><div>Wed Jul  1 02:00:03 CEST 2015</div></div></div></div><div><u>Different power supply for X60</u><br /><br /><div>Thinkpad X60 is marked as 20V, 3.25A. I wonder if using 19V, 2.63A <span style=\"line-height: 1.4;\">power supply is a good idea. The power brick is way smaller, and 65W </span><span style=\"line-height: 1.4;\">seems to be a little high for a small notebook.</span></div></div>") (pubDate nil "Fri, 04 Sep 2015 10:04:06 +0000"))) ("Gustavo F. Padovan: Linux Kernel Engineer opportunity at Collabora!" "<p><a href=\"http://www.collabora.com\" target=\"_blank\">Collabora</a> is a software consultancy specialising in bringing companies and the open source software community together and it is currently looking for a Core Software Engineer, that works in the Linux kernel and/or all the plumbing around the kernel. In this role the engineer will be part of worldwide team who works with our clients to solve their Linux kernel and low level stack technical problems.</p>
<p>Collabora is well-known for its strong relationship to upstream development, so it is an important part of this role make significant contributions to upstream projects.</p>
<p>Visit our <a href=\"https://www.collabora.com/about-us/careers.html\" target=\"_blank\">jobs page</a> or talk me to put you in contact with our Hiring Team!</p>" "https://padovan.org/blog/2015/09/linux-kernel-engineer-opportunity-at-collabora/" (21992 45359) old 49 nil nil ((title nil "Gustavo F. Padovan: Linux Kernel Engineer opportunity at Collabora!") (guid nil "http://padovan.org/blog/?p=425") (link nil "https://padovan.org/blog/2015/09/linux-kernel-engineer-opportunity-at-collabora/") (description nil "<p><a href=\"http://www.collabora.com\" target=\"_blank\">Collabora</a> is a software consultancy specialising in bringing companies and the open source software community together and it is currently looking for a Core Software Engineer, that works in the Linux kernel and/or all the plumbing around the kernel. In this role the engineer will be part of worldwide team who works with our clients to solve their Linux kernel and low level stack technical problems.</p>
<p>Collabora is well-known for its strong relationship to upstream development, so it is an important part of this role make significant contributions to upstream projects.</p>
<p>Visit our <a href=\"https://www.collabora.com/about-us/careers.html\" target=\"_blank\">jobs page</a> or talk me to put you in contact with our Hiring Team!</p>") (pubDate nil "Thu, 03 Sep 2015 20:44:31 +0000"))) ("Paul E. Mc Kenney: Stupid RCU Tricks: Hand-over-hand traversal of linked list using SRCU" "Suppose that a very long linked list was to be protected with SRCU.  Let's also make the presumably unreasonable assumption that this list is so long that we don't want to stay in a single SRCU read-side critical section for the whole traversal.<br /><br />So why not try hand-over-hand SRCU protection, as shown in the following code fragment?<br /><br /><pre>  1 struct foo {
2   struct list_head list;
3   ...
4 };
5
6 LIST_HEAD(mylist);
7 struct srcu_struct mysrcu;
8
9 void process(void)
10 {
11   int i1, i2;
12   struct foo *p;
13
14   i1 = srcu_read_lock(&amp;mysrcu);
15   list_for_each_entry_rcu(p, &amp;mylist, list) {
16     do_something_with(p);
17     i2 = srcu_read_lock(&amp;mysrcu);
18     srcu_read_unlock(&amp;mysrcu, i1);
19     i1 = i2;
20   }
21   srcu_read_unlock(&amp;mysrcu, i1);
22 }
</pre><br /><br />The trick is that on each pass through the loop, we enter a new SRCU read-side critical section, then exit the old one.  That way the entire traversal is protected by SRCU, but each SRCU read-side critical section is quite short, covering traversal of but a single element of the list.<br /><br />As is customary with SRCU, the list is manipulated using <code>list_add_rcu()</code>, <code>list_del_rcu</code>, and   friends.<br /><br /><a href=\"https://www.kernel.org/pub/linux/kernel/people/paulmck/Answers/RCU/SRCUhoha.html\" rel=\"nofollow\">What are the advantages and disadvantages of this hand-over-hand SRCU list traversal?</a>" "http://paulmck.livejournal.com/40593.html" (21991 55443) old 50 nil nil ((title nil "Paul E. Mc Kenney: Stupid RCU Tricks: Hand-over-hand traversal of linked list using SRCU") (guid nil "http://paulmck.livejournal.com/40593.html") (link nil "http://paulmck.livejournal.com/40593.html") (description nil "Suppose that a very long linked list was to be protected with SRCU.  Let's also make the presumably unreasonable assumption that this list is so long that we don't want to stay in a single SRCU read-side critical section for the whole traversal.<br /><br />So why not try hand-over-hand SRCU protection, as shown in the following code fragment?<br /><br /><pre>  1 struct foo {
  2   struct list_head list;
  3   ...
  4 };
  5 
  6 LIST_HEAD(mylist);
  7 struct srcu_struct mysrcu;
  8 
  9 void process(void)
 10 {
 11   int i1, i2;
 12   struct foo *p;
 13 
 14   i1 = srcu_read_lock(&amp;mysrcu);
 15   list_for_each_entry_rcu(p, &amp;mylist, list) {
 16     do_something_with(p);
 17     i2 = srcu_read_lock(&amp;mysrcu);
 18     srcu_read_unlock(&amp;mysrcu, i1);
 19     i1 = i2;
 20   }
 21   srcu_read_unlock(&amp;mysrcu, i1);
 22 }
</pre><br /><br />The trick is that on each pass through the loop, we enter a new SRCU read-side critical section, then exit the old one.  That way the entire traversal is protected by SRCU, but each SRCU read-side critical section is quite short, covering traversal of but a single element of the list.<br /><br />As is customary with SRCU, the list is manipulated using <code>list_add_rcu()</code>, <code>list_del_rcu</code>, and   friends.<br /><br /><a href=\"https://www.kernel.org/pub/linux/kernel/people/paulmck/Answers/RCU/SRCUhoha.html\" rel=\"nofollow\">What are the advantages and disadvantages of this hand-over-hand SRCU list traversal?</a>") (pubDate nil "Thu, 03 Sep 2015 05:20:19 +0000"))) ("Matthew Garrett: Working with the kernel keyring" "The <a href=\"http://man7.org/linux/man-pages/man7/keyrings.7.html\">Linux kernel keyring</a> is effectively a mechanism to allow shoving blobs of data into the kernel and then setting access controls on them. It's convenient for a couple of reasons: the first is that these blobs are available to the kernel itself (so it can use them for things like NFSv4 authentication or module signing keys), and the second is that once they're locked down there's no way for even root to modify them.<br /><br />But there's a corner case that can be somewhat confusing here, and it's one that I managed to crash into multiple times when I was implementing some code that works with this. Keys can be \"possessed\" by a process, and have permissions that are granted to the possessor orthogonally to any permissions granted to the user or group that owns the key. This is important because it allows for the creation of keyrings that are only visible to specific processes - if my userspace keyring manager is using the kernel keyring as a backing store for decrypted material, I don't want any arbitrary process running as me to be able to obtain those keys[1]. As described in keyrings(7), keyrings exist at the session, process and thread levels of granularity.<br /><br />This is absolutely fine in the normal case, but gets confusing when you start using sudo. sudo by default doesn't create a new login session - when you're working with sudo, you're still working with key posession that's tied to the original user. This makes sense when you consider that you often want applications you run with sudo to have access to the keys that you own, but it becomes a pain when you're trying to work with keys that need to be accessible to a user no matter whether that user owns the login session or not.<br /><br />I spent a while talking to David Howells about this and he explained the easiest way to handle this. If you do something like the following:<br /><tt>$ sudo keyctl add user testkey testdata @u</tt><br />a new key will be created and added to UID 0's user keyring (indicated by @u). This is possible because the keyring defaults to 0x3f3f0000 permissions, giving both the possessor <em>and</em> the user read/write access to the keyring. But if you then try to do something like:<br /><tt>$ sudo keyctl setperm 678913344 0x3f3f0000</tt><br />where 678913344 is the ID of the key we created in the previous command, you'll get permission denied. This is because the default permissions on a key are 0x3f010000, meaning that the possessor has permission to do anything to the key but the user only has permission to view its attributes. The cause of this confusion is that although we have permission to write to UID 0's keyring (because the permissions are 0x3f3f0000), we don't <em>possess</em> it - the only permissions we have for this key are the user ones, and the default state for user permissions on new keys only gives us permission to view the attributes, not change them.<br /><br />But! There's a way around this. If we instead do:<br /><tt>$ sudo keyctl add user testkey testdata @s</tt><br />then the key is added to the current session keyring (@s). Because the session keyring belongs to us, we possess any keys within it and so we have permission to modify the permissions further. We can then do:<br /><tt>$ sudo keyctl setperm 678913344 0x3f3f0000</tt><br />and it works. Hurrah! Except that if we log in as root, we'll be part of another session and won't be able to see that key. Boo. So, after setting the permissions, we should:<br /><tt>$ sudo keyctl link 678913344 @u</tt><br />which ties it to UID 0's user keyring. Someone who logs in as root will then be able to see the key, as will any processes running as root via sudo. But we probably also want to remove it from the unprivileged user's session keyring, because that's readable/writable by the unprivileged user - they'd be able to revoke the key from underneath us!<br /><tt>$ sudo keyctl unlink 678913344 @s</tt><br />will achieve this, and now the key is configured appropriately - UID 0 can read, modify and delete the key, other users can't.<br /><br />This is part of our ongoing work at <a href=\"http://www.coreos.com\">CoreOS</a> to make <a href=\"https://github.com/coreos/rkt\">rkt</a> more secure. Moving the signing keys into the kernel is the first step towards rkt no longer having to trust the local writable filesystem[2]. Once keys have been enrolled the keyring can be locked down - rkt will then refuse to run any images unless they're signed with one of these keys, and even root will be unable to alter them.<br /><br />[1] (obviously it should also be impossible to ptrace() my userspace keyring manager)<br />[2] Part of our Secure Boot work has been the integration of <a href=\"https://lwn.net/Articles/459420/\">dm-verity</a> into CoreOS. Once deployed this will mean that the /usr partition is cryptographically verified by the kernel at runtime, making it impossible for anybody to modify it underneath the kernel. / remains writable in order to permit local configuration and to act as a data store, and right now rkt stores its trusted keys there.<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=37333\" style=\"vertical-align: middle;\" width=\"30\" /> comments" "http://mjg59.dreamwidth.org/37333.html" (21988 35964) old 51 nil nil ((title nil "Matthew Garrett: Working with the kernel keyring") (guid nil "tag:dreamwidth.org,2011-02-12:696190:37333") (link nil "http://mjg59.dreamwidth.org/37333.html") (description nil "The <a href=\"http://man7.org/linux/man-pages/man7/keyrings.7.html\">Linux kernel keyring</a> is effectively a mechanism to allow shoving blobs of data into the kernel and then setting access controls on them. It's convenient for a couple of reasons: the first is that these blobs are available to the kernel itself (so it can use them for things like NFSv4 authentication or module signing keys), and the second is that once they're locked down there's no way for even root to modify them.<br /><br />But there's a corner case that can be somewhat confusing here, and it's one that I managed to crash into multiple times when I was implementing some code that works with this. Keys can be \"possessed\" by a process, and have permissions that are granted to the possessor orthogonally to any permissions granted to the user or group that owns the key. This is important because it allows for the creation of keyrings that are only visible to specific processes - if my userspace keyring manager is using the kernel keyring as a backing store for decrypted material, I don't want any arbitrary process running as me to be able to obtain those keys[1]. As described in keyrings(7), keyrings exist at the session, process and thread levels of granularity.<br /><br />This is absolutely fine in the normal case, but gets confusing when you start using sudo. sudo by default doesn't create a new login session - when you're working with sudo, you're still working with key posession that's tied to the original user. This makes sense when you consider that you often want applications you run with sudo to have access to the keys that you own, but it becomes a pain when you're trying to work with keys that need to be accessible to a user no matter whether that user owns the login session or not.<br /><br />I spent a while talking to David Howells about this and he explained the easiest way to handle this. If you do something like the following:<br /><tt>$ sudo keyctl add user testkey testdata @u</tt><br />a new key will be created and added to UID 0's user keyring (indicated by @u). This is possible because the keyring defaults to 0x3f3f0000 permissions, giving both the possessor <em>and</em> the user read/write access to the keyring. But if you then try to do something like:<br /><tt>$ sudo keyctl setperm 678913344 0x3f3f0000</tt><br />where 678913344 is the ID of the key we created in the previous command, you'll get permission denied. This is because the default permissions on a key are 0x3f010000, meaning that the possessor has permission to do anything to the key but the user only has permission to view its attributes. The cause of this confusion is that although we have permission to write to UID 0's keyring (because the permissions are 0x3f3f0000), we don't <em>possess</em> it - the only permissions we have for this key are the user ones, and the default state for user permissions on new keys only gives us permission to view the attributes, not change them.<br /><br />But! There's a way around this. If we instead do:<br /><tt>$ sudo keyctl add user testkey testdata @s</tt><br />then the key is added to the current session keyring (@s). Because the session keyring belongs to us, we possess any keys within it and so we have permission to modify the permissions further. We can then do:<br /><tt>$ sudo keyctl setperm 678913344 0x3f3f0000</tt><br />and it works. Hurrah! Except that if we log in as root, we'll be part of another session and won't be able to see that key. Boo. So, after setting the permissions, we should:<br /><tt>$ sudo keyctl link 678913344 @u</tt><br />which ties it to UID 0's user keyring. Someone who logs in as root will then be able to see the key, as will any processes running as root via sudo. But we probably also want to remove it from the unprivileged user's session keyring, because that's readable/writable by the unprivileged user - they'd be able to revoke the key from underneath us!<br /><tt>$ sudo keyctl unlink 678913344 @s</tt><br />will achieve this, and now the key is configured appropriately - UID 0 can read, modify and delete the key, other users can't.<br /><br />This is part of our ongoing work at <a href=\"http://www.coreos.com\">CoreOS</a> to make <a href=\"https://github.com/coreos/rkt\">rkt</a> more secure. Moving the signing keys into the kernel is the first step towards rkt no longer having to trust the local writable filesystem[2]. Once keys have been enrolled the keyring can be locked down - rkt will then refuse to run any images unless they're signed with one of these keys, and even root will be unable to alter them.<br /><br />[1] (obviously it should also be impossible to ptrace() my userspace keyring manager)<br />[2] Part of our Secure Boot work has been the integration of <a href=\"https://lwn.net/Articles/459420/\">dm-verity</a> into CoreOS. Once deployed this will mean that the /usr partition is cryptographically verified by the kernel at runtime, making it impossible for anybody to modify it underneath the kernel. / remains writable in order to permit local configuration and to act as a data store, and right now rkt stores its trusted keys there.<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=37333\" style=\"vertical-align: middle;\" width=\"30\" /> comments") (pubDate nil "Mon, 31 Aug 2015 17:18:52 +0000"))) ("James Morris: Linux Security Summit 2015 – Wrapup, slides" "<p>The slides for all of the presentations at last week’s <a href=\"http://kernsec.org/wiki/index.php/Linux_Security_Summit_2015\">Linux Security Summit</a> are now available at the <a href=\"http://kernsec.org/wiki/index.php/Linux_Security_Summit_2015#Schedule\">schedule page</a>.</p>
<p>Thanks to all of those who participated, and to all the events folk at <a href=\"http://events.linuxfoundation.org/\">Linux Foundation</a>, who handle the logistics for us each year, so we can focus on the event itself.</p>
<p>As with the previous year, we followed a two-day format, with most of the refereed presentations on the first day, with more of a developer focus on the second day.  We had good attendance, and also this year had participants from a wider field than the more typical kernel security developer group.  We hope to continue expanding the scope of participation next year, as it’s a good opportunity for people from different areas of security, and FOSS, to get together and learn from each other.  This was the first year, for example, that we had a presentation on Incident Response, thanks to Sean Gillespie who presented on <a href=\"https://github.com/google/grr\">GRR</a>, a live remote forensics tool initially developed at Google.</p>
<p>The <a href=\"http://kernsec.org/files/lss2015/giant-bags-of-mostly-water.pdf\">keynote</a> by kernel.org sysadmin, <a href=\"https://www.linux.com/news/featured-blogs/200-libby-clark/814542-15-reddit-ama-questions-for-kernelorg-sysadmin-konstantin-ryabitsev\">Konstantin Ryabitsev</a>, was another highlight, one of the best talks I’ve seen at any conference.</p>
<p>Overall, it seems the adoption of Linux kernel security features is increasing rapidly, especially via mobile devices and IoT, where we now have <em>billions</em> of Linux deployments out there, connected to everything else.  It’s interesting to see SELinux increasingly play a role here, on the Android platform, in protecting user privacy, as highlighted in Jeffrey Vander Stoep’s presentation on <a href=\"http://kernsec.org/files/lss2015/vanderstoep.pdf\">whitelisting ioctls</a>.  Apparently, some major corporate app vendors, who were not named, have been secretly tracking users via hardware MAC addresses, obtained via <em>ioctl.</em></p>
<p>We’re also seeing a lot of deployment activity around platform Integrity, including TPMs, secure boot and other integrity management schemes.  It’s gratifying to see the work our community has been doing in the kernel security/ tree being used in so many different ways to help solve large scale security and privacy problems.  Many of us have been working for 10 years or more on our various projects  — it seems to take about that long for a major security feature to mature.</p>
<p>One area, though, that I feel we need significantly more work, is in kernel self-protection, to harden the kernel against coding flaws from being exploited.  I’m hoping that we can find ways to work with the security research community on incorporating more hardening into the mainline kernel.  I’ve <a href=\"http://lists.linuxfoundation.org/pipermail/ksummit-discuss/2015-August/002292.html\">proposed</a> this as a topic for the upcoming Kernel Summit, as we need buy-in from core kernel developers.  I hope we’ll have topics to cover on this, then, at next year’s LSS.</p>
<p>We overlapped with <a href=\"https://linuxplumbersconf.org/2015/\">Linux Plumbers</a>, so <a href=\"http://lwn.net/\">LWN</a> was not able to provide any coverage of the summit.  Paul Moore, however, has published an excellent<a href=\"http://www.paul-moore.com/blog/d/2015/08/linux_security_summit.html\"> write-up on his blog</a>. Thanks, Paul!</p>
<p>The committee would appreciate feedback on the event, so we can make it even better for next year.  We may be contacted via email per the contact info at the bottom of the <a href=\"http://kernsec.org/wiki/index.php/Linux_Security_Summit_2015\">event page</a>.</p>" "http://blog.namei.org/2015/08/27/linux-security-summit-2015-wrapup-slides/" (21982 3836) old 52 nil nil ((title nil "James Morris: Linux Security Summit 2015 – Wrapup, slides") (guid nil "http://blog.namei.org/?p=619") (link nil "http://blog.namei.org/2015/08/27/linux-security-summit-2015-wrapup-slides/") (description nil "<p>The slides for all of the presentations at last week’s <a href=\"http://kernsec.org/wiki/index.php/Linux_Security_Summit_2015\">Linux Security Summit</a> are now available at the <a href=\"http://kernsec.org/wiki/index.php/Linux_Security_Summit_2015#Schedule\">schedule page</a>.</p>
<p>Thanks to all of those who participated, and to all the events folk at <a href=\"http://events.linuxfoundation.org/\">Linux Foundation</a>, who handle the logistics for us each year, so we can focus on the event itself.</p>
<p>As with the previous year, we followed a two-day format, with most of the refereed presentations on the first day, with more of a developer focus on the second day.  We had good attendance, and also this year had participants from a wider field than the more typical kernel security developer group.  We hope to continue expanding the scope of participation next year, as it’s a good opportunity for people from different areas of security, and FOSS, to get together and learn from each other.  This was the first year, for example, that we had a presentation on Incident Response, thanks to Sean Gillespie who presented on <a href=\"https://github.com/google/grr\">GRR</a>, a live remote forensics tool initially developed at Google.</p>
<p>The <a href=\"http://kernsec.org/files/lss2015/giant-bags-of-mostly-water.pdf\">keynote</a> by kernel.org sysadmin, <a href=\"https://www.linux.com/news/featured-blogs/200-libby-clark/814542-15-reddit-ama-questions-for-kernelorg-sysadmin-konstantin-ryabitsev\">Konstantin Ryabitsev</a>, was another highlight, one of the best talks I’ve seen at any conference.</p>
<p>Overall, it seems the adoption of Linux kernel security features is increasing rapidly, especially via mobile devices and IoT, where we now have <em>billions</em> of Linux deployments out there, connected to everything else.  It’s interesting to see SELinux increasingly play a role here, on the Android platform, in protecting user privacy, as highlighted in Jeffrey Vander Stoep’s presentation on <a href=\"http://kernsec.org/files/lss2015/vanderstoep.pdf\">whitelisting ioctls</a>.  Apparently, some major corporate app vendors, who were not named, have been secretly tracking users via hardware MAC addresses, obtained via <em>ioctl.</em></p>
<p>We’re also seeing a lot of deployment activity around platform Integrity, including TPMs, secure boot and other integrity management schemes.  It’s gratifying to see the work our community has been doing in the kernel security/ tree being used in so many different ways to help solve large scale security and privacy problems.  Many of us have been working for 10 years or more on our various projects  — it seems to take about that long for a major security feature to mature.</p>
<p>One area, though, that I feel we need significantly more work, is in kernel self-protection, to harden the kernel against coding flaws from being exploited.  I’m hoping that we can find ways to work with the security research community on incorporating more hardening into the mainline kernel.  I’ve <a href=\"http://lists.linuxfoundation.org/pipermail/ksummit-discuss/2015-August/002292.html\">proposed</a> this as a topic for the upcoming Kernel Summit, as we need buy-in from core kernel developers.  I hope we’ll have topics to cover on this, then, at next year’s LSS.</p>
<p>We overlapped with <a href=\"https://linuxplumbersconf.org/2015/\">Linux Plumbers</a>, so <a href=\"http://lwn.net/\">LWN</a> was not able to provide any coverage of the summit.  Paul Moore, however, has published an excellent<a href=\"http://www.paul-moore.com/blog/d/2015/08/linux_security_summit.html\"> write-up on his blog</a>. Thanks, Paul!</p>
<p>The committee would appreciate feedback on the event, so we can make it even better for next year.  We may be contacted via email per the contact info at the bottom of the <a href=\"http://kernsec.org/wiki/index.php/Linux_Security_Summit_2015\">event page</a>.</p>") (pubDate nil "Wed, 26 Aug 2015 19:09:48 +0000"))) ("Matt Domsch: Dell Desktop / Notebook Linux Engineering position available" "<p>Come help Dell ensure Linux “just works!” on Dell notebooks, desktops, and devices!  The Dell Client Linux Engineering team has opening for a Senior Software Engineer.  This team works closely with the Linux community, device manufacturers, and Dell engineering teams to provide the best Linux experience across the entire client product line.</p>
<p><a href=\"http://jobs.dell.com/us/texas/engineering/jobid7393338-software-dev-senior-engineer-jobs\" target=\"_blank\">Visit the Dell Jobs site to apply</a>.  If you’re a friend of mine and are interested, drop me a line and I’ll make sure you get in front of the hiring manager quickly!</p>" "https://domsch.com/blog/?p=677" (21972 62882) old 53 nil nil ((title nil "Matt Domsch: Dell Desktop / Notebook Linux Engineering position available") (guid nil "https://domsch.com/blog/?p=677") (link nil "https://domsch.com/blog/?p=677") (description nil "<p>Come help Dell ensure Linux “just works!” on Dell notebooks, desktops, and devices!  The Dell Client Linux Engineering team has opening for a Senior Software Engineer.  This team works closely with the Linux community, device manufacturers, and Dell engineering teams to provide the best Linux experience across the entire client product line.</p>
<p><a href=\"http://jobs.dell.com/us/texas/engineering/jobid7393338-software-dev-senior-engineer-jobs\" target=\"_blank\">Visit the Dell Jobs site to apply</a>.  If you’re a friend of mine and are interested, drop me a line and I’ll make sure you get in front of the hiring manager quickly!</p>") (pubDate nil "Wed, 19 Aug 2015 21:31:14 +0000"))) ("Matthew Garrett: Canonical's deliberately obfuscated IP policy" "I bumped into Mark Shuttleworth today at Linuxcon and we had a brief conversation about Canonical's IP policy. The short summary:<ul><li>Canonical assert that the act of compilation creates copyright over the binaries, and you may not redistribute those binaries unless (a) the license prevents Canonical from restricting redistribution (eg, the GPL), or (b) you follow the terms of their IP policy. This means that, <a href=\"http://blog.dustinkirkland.com/2015/07/appellation-of-origin-from-ubuntu.html\">no matter what Dustin's blogpost says</a>, Canonical's position is that you must ask for permission before distributing any custom container images that contain Ubuntu binaries, even if you use no Ubuntu trademarks in the process. Doing so without their permission is an infringement of their copyright.<br /></li><li>Canonical have no intention of clarifying their policy, because Canonical benefit from companies being legally uncertain as to whether they have permission to do something or not.<br /></li><li>Mark justifies maintaining this uncertainty by drawing an analogy between it and the perceived uncertainties that exist around certain aspects of the GPL. I disagree with this analogy pretty strongly. One of the main reasons for the creation of GPLv3 was to deal with some more ambiguous aspects of GPLv2 (such as what actually happened after license termination and how patents interacted with the GPL). The FSF publish a <a href=\"http://www.gnu.org/licenses/gpl-faq.en.html\">large FAQ</a> intended to provide further clarity. The major ambiguity is in what a derivative work actually is, which is something the FSF can't answer absolutely (that's going to be up to courts) but will give its opinion on when asked. The uncertainties in Canonical's IP policy aren't a result of a lack of legal clarity - they're a result of Canonical's refusal to answer questions.</li></ul><br />The even shorter summary: Canonical won't clarify their IP policy because they believe they can make more money if they don't.<br /><br />Why do I keep talking about this? Because Canonical are deliberately making it difficult to create derivative works, and that's one of the core tenets of the <a href=\"http://www.gnu.org/philosophy/free-sw.en.html\">definition of free software</a>. Their IP policy is fundamentally incompatible with our community norms, and that's something we <em>should</em> care about rather than ignoring.<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=37113\" style=\"vertical-align: middle;\" width=\"30\" /> comments" "http://mjg59.dreamwidth.org/37113.html" (21971 33116) old 54 nil nil ((title nil "Matthew Garrett: Canonical's deliberately obfuscated IP policy") (guid nil "tag:dreamwidth.org,2011-02-12:696190:37113") (link nil "http://mjg59.dreamwidth.org/37113.html") (description nil "I bumped into Mark Shuttleworth today at Linuxcon and we had a brief conversation about Canonical's IP policy. The short summary:<ul><li>Canonical assert that the act of compilation creates copyright over the binaries, and you may not redistribute those binaries unless (a) the license prevents Canonical from restricting redistribution (eg, the GPL), or (b) you follow the terms of their IP policy. This means that, <a href=\"http://blog.dustinkirkland.com/2015/07/appellation-of-origin-from-ubuntu.html\">no matter what Dustin's blogpost says</a>, Canonical's position is that you must ask for permission before distributing any custom container images that contain Ubuntu binaries, even if you use no Ubuntu trademarks in the process. Doing so without their permission is an infringement of their copyright.<br /></li><li>Canonical have no intention of clarifying their policy, because Canonical benefit from companies being legally uncertain as to whether they have permission to do something or not.<br /></li><li>Mark justifies maintaining this uncertainty by drawing an analogy between it and the perceived uncertainties that exist around certain aspects of the GPL. I disagree with this analogy pretty strongly. One of the main reasons for the creation of GPLv3 was to deal with some more ambiguous aspects of GPLv2 (such as what actually happened after license termination and how patents interacted with the GPL). The FSF publish a <a href=\"http://www.gnu.org/licenses/gpl-faq.en.html\">large FAQ</a> intended to provide further clarity. The major ambiguity is in what a derivative work actually is, which is something the FSF can't answer absolutely (that's going to be up to courts) but will give its opinion on when asked. The uncertainties in Canonical's IP policy aren't a result of a lack of legal clarity - they're a result of Canonical's refusal to answer questions.</li></ul><br />The even shorter summary: Canonical won't clarify their IP policy because they believe they can make more money if they don't.<br /><br />Why do I keep talking about this? Because Canonical are deliberately making it difficult to create derivative works, and that's one of the core tenets of the <a href=\"http://www.gnu.org/philosophy/free-sw.en.html\">definition of free software</a>. Their IP policy is fundamentally incompatible with our community norms, and that's something we <em>should</em> care about rather than ignoring.<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"http://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=37113\" style=\"vertical-align: middle;\" width=\"30\" /> comments") (pubDate nil "Tue, 18 Aug 2015 19:02:52 +0000"))) ("Andi Kleen: Announcing simple-pt — A simple Processor Trace implementation" "<p>Modern Intel Core CPUs (5th and 6th generation) have a Intel Processor Trace (PT) feature to trace branch execution with low overhead. This is useful for performance analysis and debugging.</p>
<p>simple-pt is a simple standalone driver and decoder tool to implement PT on Linux.</p>
<p>Starting with Linux 4.1 Linux already has a integrated PT implementation in perf (see <a href=\"https://lwn.net/Articles/648154/\">https://lwn.net/Articles/648154/</a> ). simple-pt is an alternative implementation. It has many disadvantages over the perf PT implementation, such as:<br />
- needs to run as root<br />
- no long term tracing or sampling with interrupts<br />
- no support for interactive debugging (use gdb 7.10 on perf for that)<br />
- no support for histograms<br />
- somewhat experimental<br />
- not as well supported as perf</p>
<p>On the positive side simple-pt is:<br />
- simple<br />
- standalone. No kernel changes needed. Could be ported to older kernels or other operating systems<br />
- easy to modify and experiment with<br />
- more ftrace like decoding tool<br />
- support for kprobes based triggers<br />
- modular “unix style” design with simple tools that do only one thing each<br />
- BSD licensed</p>
<p>Example output:</p>
<pre><code>
% sptcmd  -c tcall taskset -c 0 ./tcall
cpu   0 offset 1027688,  1003 KB, writing to ptout.0
...
Wrote sideband to ptout.sideband
% sptdecode --sideband ptout.sideband --pt ptout.0 | less
TIME      DELTA  INSNs   OPERATION
frequency 32
0        [+0]     [+   1] _dl_aux_init+436
[+   6] __libc_start_main+455 -&gt; _dl_discover_osversion
...
[+  13] __libc_start_main+446 -&gt; main
[+   9]     main+22 -&gt; f1
[+   4]             f1+9 -&gt; f2
[+   2]             f1+19 -&gt; f2
[+   5]     main+22 -&gt; f1
[+   4]             f1+9 -&gt; f2
[+   2]             f1+19 -&gt; f2
[+   5]     main+22 -&gt; f1
...
</code>
</pre>
<p>Available from <a href=\"https://github.com/andikleen/simple-pt\">https://github.com/andikleen/simple-pt</a></p>" "http://halobates.de/blog/p/344" (21969 25269) old 55 nil nil ((title nil "Andi Kleen: Announcing simple-pt — A simple Processor Trace implementation") (guid nil "http://halobates.de/blog/?p=344") (link nil "http://halobates.de/blog/p/344") (description nil "<p>Modern Intel Core CPUs (5th and 6th generation) have a Intel Processor Trace (PT) feature to trace branch execution with low overhead. This is useful for performance analysis and debugging.</p>
<p>simple-pt is a simple standalone driver and decoder tool to implement PT on Linux.</p>
<p>Starting with Linux 4.1 Linux already has a integrated PT implementation in perf (see <a href=\"https://lwn.net/Articles/648154/\">https://lwn.net/Articles/648154/</a> ). simple-pt is an alternative implementation. It has many disadvantages over the perf PT implementation, such as:<br />
- needs to run as root<br />
- no long term tracing or sampling with interrupts<br />
- no support for interactive debugging (use gdb 7.10 on perf for that)<br />
- no support for histograms<br />
- somewhat experimental<br />
- not as well supported as perf</p>
<p>On the positive side simple-pt is:<br />
- simple<br />
- standalone. No kernel changes needed. Could be ported to older kernels or other operating systems<br />
- easy to modify and experiment with<br />
- more ftrace like decoding tool<br />
- support for kprobes based triggers<br />
- modular “unix style” design with simple tools that do only one thing each<br />
- BSD licensed</p>
<p>Example output:</p>
<pre><code>
        % sptcmd  -c tcall taskset -c 0 ./tcall
        cpu   0 offset 1027688,  1003 KB, writing to ptout.0
        ...
        Wrote sideband to ptout.sideband
        % sptdecode --sideband ptout.sideband --pt ptout.0 | less
        TIME      DELTA  INSNs   OPERATION
        frequency 32
        0        [+0]     [+   1] _dl_aux_init+436
                          [+   6] __libc_start_main+455 -&gt; _dl_discover_osversion
        ...
                          [+  13] __libc_start_main+446 -&gt; main
                          [+   9]     main+22 -&gt; f1
                          [+   4]             f1+9 -&gt; f2
                          [+   2]             f1+19 -&gt; f2
                          [+   5]     main+22 -&gt; f1
                          [+   4]             f1+9 -&gt; f2
                          [+   2]             f1+19 -&gt; f2
                          [+   5]     main+22 -&gt; f1
        ...
</code>
</pre>
<p>Available from <a href=\"https://github.com/andikleen/simple-pt\">https://github.com/andikleen/simple-pt</a></p>") (pubDate nil "Mon, 17 Aug 2015 04:27:33 +0000"))) ("Daniel Vetter: Atomic Modesetting Design Overview" "After a few years of development the atomic display update IOCTL for drm drivers is finally ready for prime time with the <a href=\"http://mid.mail-archive.com/alpine.DEB.2.00.1506260158440.13786@skynet.skynet.ie\">4.2 pull request from Dave Airlie</a>. It's been a long road, with a lot of drivers <a href=\"http://blog.ffwll.ch/2014/11/atomic-modeset-support-for-kms-drivers.html\">already converted over to atomic</a> and even more in progress, the <a href=\"http://blog.ffwll.ch/2015/01/update-for-atomic-display-updates.html\">atomic helper libraries and support code in the drm subsystem</a> sufficiently polished. But what's really missing is a design overview of what the overall atomic infrastructure looks like and why some decisions and details are implemented like they are.<br /><br />That's now done and published on LWN: <a href=\"https://lwn.net/Articles/653071/\">Part 1 talks about the problem space, issues with the Android atomic display framework and the basic atomic IOCTL interface.</a> <a href=\"https://lwn.net/Articles/653466/\">Part 2 goes into more detail about a few specific things like locking, helper library design and the exact semantics of atomic modessetting updates.</a> Happy Reading!" "http://blog.ffwll.ch/2015/08/atomic-modesetting-design-overview.html" (21968 38309) old 56 nil nil ((title nil "Daniel Vetter: Atomic Modesetting Design Overview") (guid nil "tag:blogger.com,1999:blog-8047628228132312466.post-2572132837736503140") (link nil "http://blog.ffwll.ch/2015/08/atomic-modesetting-design-overview.html") (description nil "After a few years of development the atomic display update IOCTL for drm drivers is finally ready for prime time with the <a href=\"http://mid.mail-archive.com/alpine.DEB.2.00.1506260158440.13786@skynet.skynet.ie\">4.2 pull request from Dave Airlie</a>. It's been a long road, with a lot of drivers <a href=\"http://blog.ffwll.ch/2014/11/atomic-modeset-support-for-kms-drivers.html\">already converted over to atomic</a> and even more in progress, the <a href=\"http://blog.ffwll.ch/2015/01/update-for-atomic-display-updates.html\">atomic helper libraries and support code in the drm subsystem</a> sufficiently polished. But what's really missing is a design overview of what the overall atomic infrastructure looks like and why some decisions and details are implemented like they are.<br /><br />That's now done and published on LWN: <a href=\"https://lwn.net/Articles/653071/\">Part 1 talks about the problem space, issues with the Android atomic display framework and the basic atomic IOCTL interface.</a> <a href=\"https://lwn.net/Articles/653466/\">Part 2 goes into more detail about a few specific things like locking, helper library design and the exact semantics of atomic modessetting updates.</a> Happy Reading!") (pubDate nil "Sun, 16 Aug 2015 13:52:37 +0000"))) ("Rusty Russell: Broadband Speeds, New Data" "<p>Thanks to edmundedgar <a href=\"https://www.reddit.com/r/Bitcoin/comments/3goooc/remember_the_internet_speed_roughly_doubles_every/cu05dbm\">on reddit</a> I have some more accurate data to update my previous <a href=\"http://rusty.ozlabs.org/?p=493\">bandwidth growth estimation post</a>: OFCOM UK, who released their November 2014 report on <a href=\"http://stakeholders.ofcom.org.uk/market-data-research/other/telecoms-research/broadband-speeds/broadband-speeds-november2014/\">average broadband speeds</a>.  Whereas Akamai numbers could be lowered by the increase in mobile connections, this directly measures actual broadband speeds.</p>
<p>Extracting the figures gives:</p>
<ol>
<li>Average download speed in <a href=\"http://media.ofcom.org.uk/news/2013/average-uk-broadband-speeds-hit-double-figures/\">November 2008 was 3.6Mbit</a></li>
<li>Average download speed in November 2014 was 22.8Mbit</li>
<li>Average upload speed in November 2014 was 2.9Mbit</li>
<li>Average upload speed in <a href=\"http://stakeholders.ofcom.org.uk/binaries/research/telecoms-research/broadbandspeeds.pdf\">November 2008 to April 2009</a> was 0.43Mbit/s</li>
</ol>
<p>So in 6 years, downloads went up by 6.333 times, and uploads went up by 6.75 times.  That’s an annual increase of 36% for downloads and 37% for uploads; that’s good, as it <strong>implies we can use download speed factor increases as a proxy for upload speed increases</strong> (as upload speed is just as important for a peer-to-peer network).</p>
<p>This compares with my previous post’s <a href=\"https://www.akamai.com/us/en/our-thinking/state-of-the-internet-report/state-of-the-internet-map.jsp#stoi-graph\">Akamai’s UK numbers</a> of 3.526Mbit in Q4 2008 and 10.874Mbit in Q4 2014: only a factor of 3.08 (26% per annum).  Given how close Akamai’s numbers were to OFCOM’s in November 2008 (a year after the <a href=\"https://en.wikipedia.org/wiki/IPhone\">iPhone UK release</a>, but probably too early for mobile to have significant effect), it’s reasonable to assume that mobile plays a large part of this difference.</p>
<p>If we assume Akamai’s numbers reflected real broadband rates prior to November 2008, we can also use it to extend the OFCOM data back a year: this is important since there was almost no bandwidth growth according to Akamai from Q4 2007 to Q7 2008: ignoring that period gives a rosier picture than my last post, and smells of cherrypicking data.</p>
<p>So, let’s say the UK went from 3.265Mbit in Q4 2007 (Akamai numbers) to 22.8Mbit in Q4 2014 (OFCOM numbers).  That’s a factor of 6.98, or <strong>32% increase per annum for the UK</strong>. If we assume that the US Akamai data is under-representing Q4 2014 speeds by the same factor (6.333 / 3.08 = 2.056) as the UK data, that implies the US went from 3.644Mbit in Q4 2007 to 11.061 * 2.056 = 22.74Mbit in Q4 2014, giving a factor of 6.24, or <strong>30% increase per annum for the US.</strong></p>
<p>As stated previously, China is now where the US and UK were 7 years ago, suggesting they’re a reasonable model for future growth for that region.  Thus I revise my bandwidth estimates; <strong>instead of 17% per annum this suggests 30% per annum as a reasonable growth rate</strong>.</p>" "http://rusty.ozlabs.org/?p=551" (21966 50702) old 57 nil nil ((title nil "Rusty Russell: Broadband Speeds, New Data") (guid nil "http://rusty.ozlabs.org/?p=551") (link nil "http://rusty.ozlabs.org/?p=551") (description nil "<p>Thanks to edmundedgar <a href=\"https://www.reddit.com/r/Bitcoin/comments/3goooc/remember_the_internet_speed_roughly_doubles_every/cu05dbm\">on reddit</a> I have some more accurate data to update my previous <a href=\"http://rusty.ozlabs.org/?p=493\">bandwidth growth estimation post</a>: OFCOM UK, who released their November 2014 report on <a href=\"http://stakeholders.ofcom.org.uk/market-data-research/other/telecoms-research/broadband-speeds/broadband-speeds-november2014/\">average broadband speeds</a>.  Whereas Akamai numbers could be lowered by the increase in mobile connections, this directly measures actual broadband speeds.</p>
<p>Extracting the figures gives:</p>
<ol>
<li>Average download speed in <a href=\"http://media.ofcom.org.uk/news/2013/average-uk-broadband-speeds-hit-double-figures/\">November 2008 was 3.6Mbit</a></li>
<li>Average download speed in November 2014 was 22.8Mbit</li>
<li>Average upload speed in November 2014 was 2.9Mbit</li>
<li>Average upload speed in <a href=\"http://stakeholders.ofcom.org.uk/binaries/research/telecoms-research/broadbandspeeds.pdf\">November 2008 to April 2009</a> was 0.43Mbit/s</li>
</ol>
<p>So in 6 years, downloads went up by 6.333 times, and uploads went up by 6.75 times.  That’s an annual increase of 36% for downloads and 37% for uploads; that’s good, as it <strong>implies we can use download speed factor increases as a proxy for upload speed increases</strong> (as upload speed is just as important for a peer-to-peer network).</p>
<p>This compares with my previous post’s <a href=\"https://www.akamai.com/us/en/our-thinking/state-of-the-internet-report/state-of-the-internet-map.jsp#stoi-graph\">Akamai’s UK numbers</a> of 3.526Mbit in Q4 2008 and 10.874Mbit in Q4 2014: only a factor of 3.08 (26% per annum).  Given how close Akamai’s numbers were to OFCOM’s in November 2008 (a year after the <a href=\"https://en.wikipedia.org/wiki/IPhone\">iPhone UK release</a>, but probably too early for mobile to have significant effect), it’s reasonable to assume that mobile plays a large part of this difference.</p>
<p>If we assume Akamai’s numbers reflected real broadband rates prior to November 2008, we can also use it to extend the OFCOM data back a year: this is important since there was almost no bandwidth growth according to Akamai from Q4 2007 to Q7 2008: ignoring that period gives a rosier picture than my last post, and smells of cherrypicking data.</p>
<p>So, let’s say the UK went from 3.265Mbit in Q4 2007 (Akamai numbers) to 22.8Mbit in Q4 2014 (OFCOM numbers).  That’s a factor of 6.98, or <strong>32% increase per annum for the UK</strong>. If we assume that the US Akamai data is under-representing Q4 2014 speeds by the same factor (6.333 / 3.08 = 2.056) as the UK data, that implies the US went from 3.644Mbit in Q4 2007 to 11.061 * 2.056 = 22.74Mbit in Q4 2014, giving a factor of 6.24, or <strong>30% increase per annum for the US.</strong></p>
<p>As stated previously, China is now where the US and UK were 7 years ago, suggesting they’re a reasonable model for future growth for that region.  Thus I revise my bandwidth estimates; <strong>instead of 17% per annum this suggests 30% per annum as a reasonable growth rate</strong>.</p>") (pubDate nil "Sat, 15 Aug 2015 04:54:38 +0000"))) ("Pete Zaitcev: Tablet Uber Alles Or Is It" "<p>Given the trouble with modern laptops, I'm seriously thinking if I should make a jump to a gigantic tablet with a keyboard. You run \"make\" on VM. Not enough RAM? Order in the cloud! The idea was planted in my mind by that jerk Atwood, who penned an article claiming a death of PC. And a month ago I saw someone at Python meetup using Canopy. It kinda worked, actually. I expect Github Atom to be even better.</p>
<p>Unfortunately, there are problems in 3 broad categories still.</p>
<p>First, the hotspot Internet connectivity sucks. It is plain unreliable. VPN, ssh, and IRC are often blocked; it's necessary to remember \"Connectivity Through Anything\" lessons and tehcniques. When it works, it's often slow. These problems extend to venues such as Intel's Executive Briefing Center. If \"executives\" eating their awesome snacks cannot obtain a decent WiFi, what hope do I have? I do not have cellphone data, but I hear bitching about it.</p>
<p>Second, the usual questions about privacy and security apply. Non-proprietary tablets suck immensely, from what I heard.</p>
<p>Third, tablets top out at 10..11 inch. Sorry, but that is not enough to kill laptops while laptops continue to be made. Certainly, Atwood made an argument that as tablets absorb users, PC makers will stop. The day the last one quits, we'll have to use the least shitty tablet regardless of size. But today is not that day.</p>
<p>UPDATE: 3 weeks after this post, Apple unveiled a 12.9\" (2732 x 2048) iPad Pro, with a keyboard as a factory option.</p>" "http://zaitcev.livejournal.com/229212.html" (21966 24561) old 58 nil nil ((title nil "Pete Zaitcev: Tablet Uber Alles Or Is It") (guid nil "http://zaitcev.livejournal.com/229212.html") (link nil "http://zaitcev.livejournal.com/229212.html") (description nil "<p>Given the trouble with modern laptops, I'm seriously thinking if I should make a jump to a gigantic tablet with a keyboard. You run \"make\" on VM. Not enough RAM? Order in the cloud! The idea was planted in my mind by that jerk Atwood, who penned an article claiming a death of PC. And a month ago I saw someone at Python meetup using Canopy. It kinda worked, actually. I expect Github Atom to be even better.</p>
<p>Unfortunately, there are problems in 3 broad categories still.</p>
<p>First, the hotspot Internet connectivity sucks. It is plain unreliable. VPN, ssh, and IRC are often blocked; it's necessary to remember \"Connectivity Through Anything\" lessons and tehcniques. When it works, it's often slow. These problems extend to venues such as Intel's Executive Briefing Center. If \"executives\" eating their awesome snacks cannot obtain a decent WiFi, what hope do I have? I do not have cellphone data, but I hear bitching about it.</p>
<p>Second, the usual questions about privacy and security apply. Non-proprietary tablets suck immensely, from what I heard.</p>
<p>Third, tablets top out at 10..11 inch. Sorry, but that is not enough to kill laptops while laptops continue to be made. Certainly, Atwood made an argument that as tablets absorb users, PC makers will stop. The day the last one quits, we'll have to use the least shitty tablet regardless of size. But today is not that day.</p>
<p>UPDATE: 3 weeks after this post, Apple unveiled a 12.9\" (2732 x 2048) iPad Pro, with a keyboard as a factory option.</p>") (pubDate nil "Fri, 14 Aug 2015 21:38:57 +0000"))) ("Pete Zaitcev: User-facing hardware" "<p>New business trip, new hardware pictures.</p>
<img height=\"480\" src=\"http://www.zaitcev.us/things/lj/2015/20150814a2.jpg\" width=\"640\" />
<p>It was almost <a href=\"http://zaitcev.livejournal.com/224320.html\" rel=\"nofollow\">a year</a>, and I'm still looking for a decent laptop, same criteria. I saw a couple of guys using Lenovo X1 Carbon, which looks good. Most importantly, the left Ctrl is now extends to its proper position. Almost a winner, but unfortunately, there are issues. Apparently, the screen on the X1 is not touching the main frame flat when it's closed, so a bundle of clothing pressing in the middle between the hinges is capable to making a nasty crack in plastic. Not acceptable for what is a $1,400 laptop even with <a href=\"http://www.amazon.com/Lenovo-ThinkPad-Generation-20BS-Ultrabook/dp/B00W8W5DJQ/\" rel=\"nofollow\">Amazon's \"discount\"</a> of $900. Way to go, Lenovo. Almost had me this time.</p>
<p>Meanwhile, a $500 Dell Vostro continues to soldier on. It's showing its age: building Ceph with \"make -j${N}\" requires more RAM that it has for any reasonable N, and dialog windows started to outgrow its screen (notably, some of GNOME preferences). I still need a laptop, but can't find a suitable one. The Lenovo X1 tops out at 8GB, which was another strike against it.</p>
<img height=\"414\" src=\"http://www.zaitcev.us/things/lj/2015/20150814a1.jpg\" width=\"320\" />
<p>I was a little sad when Google stopped making Nexus 7. I have a 2013 version and it is quite good. In the same meeting, I bumped into a guy with a projected update to Nexus 7 that became orphaned when Google pulled the plug. ASUS continued to build them and market them as \"MemoPad 7\". However, taking the page from Microsoft playbook with their \"Surface\" and \"Surface Pro\", ASUS sell \"MemoPad 7\" versions ranging from worthless piece of junk with 1024x600 to actual Nexus 7 replacements with 1920x1200. Allegedly, the battery life and speed are much improved by using Intel's embedded Atom core. Some of the ARM-optimized apps may not work (example is some kind of music editing thing for podcasters).</p>" "http://zaitcev.livejournal.com/229104.html" (21966 23307) old 59 nil nil ((title nil "Pete Zaitcev: User-facing hardware") (guid nil "http://zaitcev.livejournal.com/229104.html") (link nil "http://zaitcev.livejournal.com/229104.html") (description nil "<p>New business trip, new hardware pictures.</p>
<img height=\"480\" src=\"http://www.zaitcev.us/things/lj/2015/20150814a2.jpg\" width=\"640\" />
<p>It was almost <a href=\"http://zaitcev.livejournal.com/224320.html\" rel=\"nofollow\">a year</a>, and I'm still looking for a decent laptop, same criteria. I saw a couple of guys using Lenovo X1 Carbon, which looks good. Most importantly, the left Ctrl is now extends to its proper position. Almost a winner, but unfortunately, there are issues. Apparently, the screen on the X1 is not touching the main frame flat when it's closed, so a bundle of clothing pressing in the middle between the hinges is capable to making a nasty crack in plastic. Not acceptable for what is a $1,400 laptop even with <a href=\"http://www.amazon.com/Lenovo-ThinkPad-Generation-20BS-Ultrabook/dp/B00W8W5DJQ/\" rel=\"nofollow\">Amazon's \"discount\"</a> of $900. Way to go, Lenovo. Almost had me this time.</p>
<p>Meanwhile, a $500 Dell Vostro continues to soldier on. It's showing its age: building Ceph with \"make -j${N}\" requires more RAM that it has for any reasonable N, and dialog windows started to outgrow its screen (notably, some of GNOME preferences). I still need a laptop, but can't find a suitable one. The Lenovo X1 tops out at 8GB, which was another strike against it.</p>
<img height=\"414\" src=\"http://www.zaitcev.us/things/lj/2015/20150814a1.jpg\" width=\"320\" />
<p>I was a little sad when Google stopped making Nexus 7. I have a 2013 version and it is quite good. In the same meeting, I bumped into a guy with a projected update to Nexus 7 that became orphaned when Google pulled the plug. ASUS continued to build them and market them as \"MemoPad 7\". However, taking the page from Microsoft playbook with their \"Surface\" and \"Surface Pro\", ASUS sell \"MemoPad 7\" versions ranging from worthless piece of junk with 1024x600 to actual Nexus 7 replacements with 1920x1200. Allegedly, the battery life and speed are much improved by using Intel's embedded Atom core. Some of the ARM-optimized apps may not work (example is some kind of music editing thing for podcasters).</p>") (pubDate nil "Fri, 14 Aug 2015 21:18:03 +0000"))) ("Dave Jones: The case of the mysterious disappearing I211" "<p>Day one of unemployed life saw me finally getting around to the first of several hardware related maintenance items that I’ve been putting off until I’ve had the time.</p>
<p>I got a lot of life out of my desktop machine that I had been using since 2007. Earlier this year, I decided it was long overdue an upgrade, and ended up building a ridiculously over-specced machine in the hopes it too would last me a while.  After some research, I ended up with a 6-core Haswell-E i7-5820K, and a <a href=\"http://www.amazon.com/gp/product/B00TXBP1OW/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00TXBP1OW&amp;linkCode=as2&amp;tag=codemonkeyorg-20&amp;linkId=TOJP22CCMQZB5IFF\">frankly ridiculously over-featured motherboard</a><img alt=\"\" border=\"0\" height=\"1\" src=\"http://ir-na.amazon-adsystem.com/e/ir?t=codemonkeyorg-20&amp;l=as2&amp;o=1&amp;a=B00TXBP1OW\" style=\"border: none !important; margin: 0px !important;\" width=\"1\" />.<br />
Once I had delved through the absurd number of BIOS options to convince it that I *really* didn’t want to overclock my CPU or my RAM, or anything else, it was very stable.</p>
<p>It has exceeded all my expectations. In the time it took my old desktop to build one kernel, I can build kernel .deb’s for every machine I own, and still have time spare. It’s an absolute beast.</p>
<p>One of the features that sold me on this board was the two onboard ethernet ports.  I had been wanting to do a bunch of networking experiments, and the possibility of using bonding, without having to screw around with add-in cards was appealing.</p>
<p>So I was a little irked one evening after updating its BIOS, to notice that the bond only had one interface active. After some investigation, I noticed that the PCI ID of one of the onboard NICs had changed.</p>
<p>What was once</p>
<pre>00:19.0 Ethernet controller: Intel Corporation Ethernet Connection (2) I218-V (rev 05)
08:00.0 Ethernet controller: Intel Corporation I211 Gigabit Network Connection (rev 03)
</pre>
<p>Was now</p>
<pre>00:19.0 Ethernet controller: Intel Corporation Ethernet Connection (2) I218-V (rev 05)
08:00.0 Ethernet controller: Intel Corporation Device 1532 (rev 03)
</pre>
<p>My I211 had changed its PCI ID, and the e1000 driver wouldn’t bind to this new device.</p>
<p>At first I thought “Cool, some kind of NIC firmware update”, and assumed that e1000 hadn’t been updated yet to support this new feature. Googling for “i211 1532” told a much sadder story however.</p>
<p>If you read the <a href=\"https://www-ssl.intel.com/content/dam/www/public/us/en/documents/specification-updates/i211-ethernet-controller-spec-update.pdf\">spec update for the i211</a>, you find this interesting table:</p>
<table>
<tbody><tr>
<td>I211 Device ID Code</td>
<td>Vendor ID</td>
<td>Device ID</td>
<td>Revision ID1</td>
</tr>
<tr>
<td>WGI211AT (not programmed/factory default)</td>
<td>0x8086</td>
<td>0x1532</td>
<td>0x3</td>
</tr>
<tr>
<td>WGI211AT (programmed)</td>
<td>0x8086</td>
<td>0x1539</td>
<td>0x3</td>
</tr>
</tbody></table>
<p>Uh, not cool. Somehow the BIOS update procedure had wiped the NVRAM on the NIC.</p>
<p>A long protracted conversation with ASUS support followed, including such gems as “I understand you’re seeing blue screens” and “Have you tried removing the DIMMs, rubbing the contacts with an eraser and replacing them”.  Eventually I think they got to the end of their script, and agreed to RMA the board. Somewhat annoying, given there’s probably a tool somewhere that can rewrite the flash, but Intel only seems to make that available to integrators, not end-users, and the ASUS representatives denied all knowledge.</p>
<p>It was gone for about two weeks, and finally returned yesterday.  Its PCI ID is 0x1539 again, and it has its old MAC address once more. (I’m now hesitant to ever upgrade the BIOS on this machine again). So what happened ? Anyone’s guess, but this isn’t the first time I’ve seen this happen. We had a bunch of these NICs at Akamai too that occasionally had the same thing happen to them.</p>
<p>The whole thing is reminiscent of a painful old bug where <a href=\"https://lwn.net/Articles/304105/\">ftrace would corrupt the e1000e ROM</a>. Hopefully Linux isn’t to blame this time.</p>
<p>So, long story short: If you see an i211 with a PCI ID of 1532, you’re looking at an RMA.</p>
<p>The post <a href=\"http://codemonkey.org.uk/2015/08/13/case-mysterious-disappearing-i211/\" rel=\"nofollow\">The case of the mysterious disappearing I211</a> appeared first on <a href=\"http://codemonkey.org.uk\" rel=\"nofollow\">codemonkey.org.uk</a>.</p>
<div class=\"yarpp-related-rss\">
<p>Related posts:</p><ol>
<li><a href=\"http://codemonkey.org.uk/2015/02/22/backup-solutions/\" rel=\"bookmark\" title=\"backup solutions.\">backup solutions. </a> <small>For the longest time, my backup solution has been a...</small></li>
</ol><p></p>
</div>" "http://codemonkey.org.uk/2015/08/13/case-mysterious-disappearing-i211/" (21964 49436) old 60 nil nil ((title nil "Dave Jones: The case of the mysterious disappearing I211") (guid nil "http://codemonkey.org.uk/?p=763") (link nil "http://codemonkey.org.uk/2015/08/13/case-mysterious-disappearing-i211/") (description nil "<p>Day one of unemployed life saw me finally getting around to the first of several hardware related maintenance items that I’ve been putting off until I’ve had the time.</p>
<p>I got a lot of life out of my desktop machine that I had been using since 2007. Earlier this year, I decided it was long overdue an upgrade, and ended up building a ridiculously over-specced machine in the hopes it too would last me a while.  After some research, I ended up with a 6-core Haswell-E i7-5820K, and a <a href=\"http://www.amazon.com/gp/product/B00TXBP1OW/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00TXBP1OW&amp;linkCode=as2&amp;tag=codemonkeyorg-20&amp;linkId=TOJP22CCMQZB5IFF\">frankly ridiculously over-featured motherboard</a><img alt=\"\" border=\"0\" height=\"1\" src=\"http://ir-na.amazon-adsystem.com/e/ir?t=codemonkeyorg-20&amp;l=as2&amp;o=1&amp;a=B00TXBP1OW\" style=\"border: none !important; margin: 0px !important;\" width=\"1\" />.<br />
Once I had delved through the absurd number of BIOS options to convince it that I *really* didn’t want to overclock my CPU or my RAM, or anything else, it was very stable.</p>
<p>It has exceeded all my expectations. In the time it took my old desktop to build one kernel, I can build kernel .deb’s for every machine I own, and still have time spare. It’s an absolute beast.</p>
<p>One of the features that sold me on this board was the two onboard ethernet ports.  I had been wanting to do a bunch of networking experiments, and the possibility of using bonding, without having to screw around with add-in cards was appealing.</p>
<p>So I was a little irked one evening after updating its BIOS, to notice that the bond only had one interface active. After some investigation, I noticed that the PCI ID of one of the onboard NICs had changed.</p>
<p>What was once</p>
<pre>00:19.0 Ethernet controller: Intel Corporation Ethernet Connection (2) I218-V (rev 05)
08:00.0 Ethernet controller: Intel Corporation I211 Gigabit Network Connection (rev 03)
</pre>
<p>Was now</p>
<pre>00:19.0 Ethernet controller: Intel Corporation Ethernet Connection (2) I218-V (rev 05)
08:00.0 Ethernet controller: Intel Corporation Device 1532 (rev 03)
</pre>
<p>My I211 had changed its PCI ID, and the e1000 driver wouldn’t bind to this new device.</p>
<p>At first I thought “Cool, some kind of NIC firmware update”, and assumed that e1000 hadn’t been updated yet to support this new feature. Googling for “i211 1532” told a much sadder story however.</p>
<p>If you read the <a href=\"https://www-ssl.intel.com/content/dam/www/public/us/en/documents/specification-updates/i211-ethernet-controller-spec-update.pdf\">spec update for the i211</a>, you find this interesting table:</p>
<table>
<tbody><tr>
<td>I211 Device ID Code</td>
<td>Vendor ID</td>
<td>Device ID</td>
<td>Revision ID1</td>
</tr>
<tr>
<td>WGI211AT (not programmed/factory default)</td>
<td>0x8086</td>
<td>0x1532</td>
<td>0x3</td>
</tr>
<tr>
<td>WGI211AT (programmed)</td>
<td>0x8086</td>
<td>0x1539</td>
<td>0x3</td>
</tr>
</tbody></table>
<p>Uh, not cool. Somehow the BIOS update procedure had wiped the NVRAM on the NIC.</p>
<p>A long protracted conversation with ASUS support followed, including such gems as “I understand you’re seeing blue screens” and “Have you tried removing the DIMMs, rubbing the contacts with an eraser and replacing them”.  Eventually I think they got to the end of their script, and agreed to RMA the board. Somewhat annoying, given there’s probably a tool somewhere that can rewrite the flash, but Intel only seems to make that available to integrators, not end-users, and the ASUS representatives denied all knowledge.</p>
<p>It was gone for about two weeks, and finally returned yesterday.  Its PCI ID is 0x1539 again, and it has its old MAC address once more. (I’m now hesitant to ever upgrade the BIOS on this machine again). So what happened ? Anyone’s guess, but this isn’t the first time I’ve seen this happen. We had a bunch of these NICs at Akamai too that occasionally had the same thing happen to them.</p>
<p>The whole thing is reminiscent of a painful old bug where <a href=\"https://lwn.net/Articles/304105/\">ftrace would corrupt the e1000e ROM</a>. Hopefully Linux isn’t to blame this time.</p>
<p>So, long story short: If you see an i211 with a PCI ID of 1532, you’re looking at an RMA.</p>
<p>The post <a href=\"http://codemonkey.org.uk/2015/08/13/case-mysterious-disappearing-i211/\" rel=\"nofollow\">The case of the mysterious disappearing I211</a> appeared first on <a href=\"http://codemonkey.org.uk\" rel=\"nofollow\">codemonkey.org.uk</a>.</p>
<div class=\"yarpp-related-rss\">
<p>Related posts:</p><ol>
<li><a href=\"http://codemonkey.org.uk/2015/02/22/backup-solutions/\" rel=\"bookmark\" title=\"backup solutions.\">backup solutions. </a> <small>For the longest time, my backup solution has been a...</small></li>
</ol><p></p>
</div>") (pubDate nil "Thu, 13 Aug 2015 16:09:00 +0000"))) ("Dave Jones: Moving on from Akamai." "<p>Today was my last day at Akamai.  It’s been brief (Just over seven months), but things weren’t really working out for me there for a number of reasons. I’ve mentioned to a number of people who have known about my decision for a while, that it’s not that it’s a bad place to work, but it never felt like a good fit for me, and I came to realize that I’ve spent most of this last year being in denial of just how unhappy I was, in the hope “things would get better”.</p>
<p>There are a lot of smart people working there, working on really difficult problems, but a lot of those problems just don’t align with my interests, especially when they don’t always involve contributing code back upstream. [clarification: There is some upstream work going on there, just not as much as I’d like].</p>
<p>Add to this my disdain for some of the proprietary tooling that’s prevalent there, and it was becoming clear it was not a matter of “if”, but “when” I was going to leave.  As an example; I joked a few months ago to co-workers “next time I’m looking for a job, the first question I ask is ‘do you use perforce’?”. Only it wasn’t really a joke, I was dead serious. User-hostile software has no place in my life.<br />
Even little things like “let’s use git” translating to “let’s license Atlassian stash” rather than “run a git-daemon somewhere” started getting me down.</p>
<p>The final project I worked on there was a continuous rebase strategy for the kernel, moving away from perforce to git. It’s a move in the right direction, but ultimately, not the sort of work that gets me excited, and it’s going to be a multi-year project before it starts really bearing fruit. Given how perforce is ingrained in so many of Akamai’s systems, it would also have been extremely unlikely I’d have been able to purge all knowledge of ever having used it.</p>
<p>The rebase work itself also started to bother me that many of the kernel changes we made had no chance of ever even being submitted, let alone accepted upstream. (In part because many of them are very unique to Akamai’s CDN — you won’t find any of the trickery employed there described in a Richard Stevens book, and they’re unlikely to ever be official RFC’s due to the competitive edge they gain from those changes).<br />
There are exceptions to all of this, and the kernel team is trying to do a better job there with upstreaming most of the newer changes, but many of the older legacy patches are under-documented, and/or understood well by few people, with the original authors no longer around, making it a frustrating exercise to get up to speed; especially when you’re trying to learn what the upstream code is doing at the same time.</p>
<p>Someone with less experience dealing exclusively with open-source for most of their career would probably find many of my reasons for leaving trivial. Those same people would probably find Akamai a great place to work. There are a lot of opportunities there if you have a higher tolerance for such things than I did.  It was eye-opening recently, mentoring some of the interns there. Optimism. The unjaded outlook that comes with youth. Not getting bent out of shape at crappy tooling because they don’t know different. It made me realize I wasn’t going to ever be like this here.</p>
<p>On a particularly bad day a few weeks back, a recruiter reached out to me, to find out if I was interested in a second chance at an offer I received last time I was looking for a new job.  It worked. Enduring an unhappy situation in the hopes things will get better isn’t a great strategy when there are other options.</p>
<p>So, I start at Facebook in September.</p>
<p>I have no delusions that things are going to be perfect there, but at least from the outside right now, the grass looks greener.  I feel bad walking away from problems unfinished, but going home miserable or angry or some other negative emotion every day was really starting to get take its toll. It’s not a healthy way to live.</p>
<p>When I was interviewing last December, I read <a href=\"http://www.amazon.com/gp/product/0596155409/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596155409&amp;linkCode=as2&amp;tag=codemonkeyorg-20&amp;linkId=OZPDBCDEUGM3OPQK\">Being Geek</a><img alt=\"\" border=\"0\" height=\"1\" src=\"http://ir-na.amazon-adsystem.com/e/ir?t=codemonkeyorg-20&amp;l=as2&amp;o=1&amp;a=0596155409\" style=\"border: none !important; margin: 0px !important;\" width=\"1\" /> to death, so it’s fitting that I’ve picked it up again recently. One paragraph in particular jumps out at me.</p>
<pre>My single worst gig was one where I got everything I wanted out the of the offer letter, but in my exuberance for being highly valued, I totally forgot that my gut read on the gig was \"meh\". Ninety days later, I couldn't care less that I got a 15% raise and a sign-on bonus. I couldn't stand the mundanity of the daily work, and I happily resigned a few months later, taking both a pay cut and returning my sign-on bonus for the opportunity to work at Netscape.</pre>
<p>Anachronisms and minor details aside, that paragraph played through my head this afternoon as I wrote the check to pay back the remainder of my sign-on bonus. I wasn’t quite thinking “meh”, but I knew I was making compromises on what I really valued from day one.</p>
<p>Walking away from unvested RSUs, giving up this months paycheck, and writing that check stings a little, but when I did my exit interview this morning, I knew that I too, was “happily resigning” for a great opportunity.</p>
<p>I’m feeling uncharacteristically optimistic right now. Hopefully it’ll last.</p>
<p>I’ll be in Seattle next week, but due to complications with my registration being transferred to another Akamai employee, I won’t actually be at the <a href=\"https://linuxplumbersconf.org/2015/\">Linux plumbers conf</a>. If you’re also going to be there and want to catch up, drop me a mail, or &lt;ahem&gt; hit me up on facebook.</p>
<p>The post <a href=\"http://codemonkey.org.uk/2015/08/11/moving-on-from-akamai/\" rel=\"nofollow\">Moving on from Akamai.</a> appeared first on <a href=\"http://codemonkey.org.uk\" rel=\"nofollow\">codemonkey.org.uk</a>.</p>
<div class=\"yarpp-related-rss\">
<p>Related posts:</p><ol>
<li><a href=\"http://codemonkey.org.uk/2014/12/19/moving-on-from-rht/\" rel=\"bookmark\" title=\"Moving on from Red Hat.\">Moving on from Red Hat. </a> <small>After eleven and a half years, today is my final...</small></li>
<li><a href=\"http://codemonkey.org.uk/2015/01/08/job-reveal/\" rel=\"bookmark\" title=\"the new job reveal.\">the new job reveal. </a> <small>I let the cat out of the bag earlier this...</small></li>
<li><a href=\"http://codemonkey.org.uk/2015/03/13/lsfmm-2015-recap/\" rel=\"bookmark\" title=\"LSF/MM 2015 recap.\">LSF/MM 2015 recap. </a> <small>It’s been a long week. Spent Monday/Tuesday at LSFMM. This...</small></li>
</ol><p></p>
</div>" "http://codemonkey.org.uk/2015/08/11/moving-on-from-akamai/" (21962 30789) obsolete 57 nil nil ((title nil "Dave Jones: Moving on from Akamai.") (guid nil "http://codemonkey.org.uk/?p=762") (link nil "http://codemonkey.org.uk/2015/08/11/moving-on-from-akamai/") (description nil "<p>Today was my last day at Akamai.  It’s been brief (Just over seven months), but things weren’t really working out for me there for a number of reasons. I’ve mentioned to a number of people who have known about my decision for a while, that it’s not that it’s a bad place to work, but it never felt like a good fit for me, and I came to realize that I’ve spent most of this last year being in denial of just how unhappy I was, in the hope “things would get better”.</p>
<p>There are a lot of smart people working there, working on really difficult problems, but a lot of those problems just don’t align with my interests, especially when they don’t always involve contributing code back upstream. [clarification: There is some upstream work going on there, just not as much as I’d like].</p>
<p>Add to this my disdain for some of the proprietary tooling that’s prevalent there, and it was becoming clear it was not a matter of “if”, but “when” I was going to leave.  As an example; I joked a few months ago to co-workers “next time I’m looking for a job, the first question I ask is ‘do you use perforce’?”. Only it wasn’t really a joke, I was dead serious. User-hostile software has no place in my life.<br />
Even little things like “let’s use git” translating to “let’s license Atlassian stash” rather than “run a git-daemon somewhere” started getting me down.</p>
<p>The final project I worked on there was a continuous rebase strategy for the kernel, moving away from perforce to git. It’s a move in the right direction, but ultimately, not the sort of work that gets me excited, and it’s going to be a multi-year project before it starts really bearing fruit. Given how perforce is ingrained in so many of Akamai’s systems, it would also have been extremely unlikely I’d have been able to purge all knowledge of ever having used it.</p>
<p>The rebase work itself also started to bother me that many of the kernel changes we made had no chance of ever even being submitted, let alone accepted upstream. (In part because many of them are very unique to Akamai’s CDN — you won’t find any of the trickery employed there described in a Richard Stevens book, and they’re unlikely to ever be official RFC’s due to the competitive edge they gain from those changes).<br />
There are exceptions to all of this, and the kernel team is trying to do a better job there with upstreaming most of the newer changes, but many of the older legacy patches are under-documented, and/or understood well by few people, with the original authors no longer around, making it a frustrating exercise to get up to speed; especially when you’re trying to learn what the upstream code is doing at the same time.</p>
<p>Someone with less experience dealing exclusively with open-source for most of their career would probably find many of my reasons for leaving trivial. Those same people would probably find Akamai a great place to work. There are a lot of opportunities there if you have a higher tolerance for such things than I did.  It was eye-opening recently, mentoring some of the interns there. Optimism. The unjaded outlook that comes with youth. Not getting bent out of shape at crappy tooling because they don’t know different. It made me realize I wasn’t going to ever be like this here.</p>
<p>On a particularly bad day a few weeks back, a recruiter reached out to me, to find out if I was interested in a second chance at an offer I received last time I was looking for a new job.  It worked. Enduring an unhappy situation in the hopes things will get better isn’t a great strategy when there are other options.</p>
<p>So, I start at Facebook in September.</p>
<p>I have no delusions that things are going to be perfect there, but at least from the outside right now, the grass looks greener.  I feel bad walking away from problems unfinished, but going home miserable or angry or some other negative emotion every day was really starting to get take its toll. It’s not a healthy way to live.</p>
<p>When I was interviewing last December, I read <a href=\"http://www.amazon.com/gp/product/0596155409/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596155409&amp;linkCode=as2&amp;tag=codemonkeyorg-20&amp;linkId=OZPDBCDEUGM3OPQK\">Being Geek</a><img alt=\"\" border=\"0\" height=\"1\" src=\"http://ir-na.amazon-adsystem.com/e/ir?t=codemonkeyorg-20&amp;l=as2&amp;o=1&amp;a=0596155409\" style=\"border: none !important; margin: 0px !important;\" width=\"1\" /> to death, so it’s fitting that I’ve picked it up again recently. One paragraph in particular jumps out at me.</p>
<pre>My single worst gig was one where I got everything I wanted out the of the offer letter, but in my exuberance for being highly valued, I totally forgot that my gut read on the gig was \"meh\". Ninety days later, I couldn't care less that I got a 15% raise and a sign-on bonus. I couldn't stand the mundanity of the daily work, and I happily resigned a few months later, taking both a pay cut and returning my sign-on bonus for the opportunity to work at Netscape.</pre>
<p>Anachronisms and minor details aside, that paragraph played through my head this afternoon as I wrote the check to pay back the remainder of my sign-on bonus. I wasn’t quite thinking “meh”, but I knew I was making compromises on what I really valued from day one.</p>
<p>Walking away from unvested RSUs, giving up this months paycheck, and writing that check stings a little, but when I did my exit interview this morning, I knew that I too, was “happily resigning” for a great opportunity.</p>
<p>I’m feeling uncharacteristically optimistic right now. Hopefully it’ll last.</p>
<p>I’ll be in Seattle next week, but due to complications with my registration being transferred to another Akamai employee, I won’t actually be at the <a href=\"https://linuxplumbersconf.org/2015/\">Linux plumbers conf</a>. If you’re also going to be there and want to catch up, drop me a mail, or &lt;ahem&gt; hit me up on facebook.</p>
<p>The post <a href=\"http://codemonkey.org.uk/2015/08/11/moving-on-from-akamai/\" rel=\"nofollow\">Moving on from Akamai.</a> appeared first on <a href=\"http://codemonkey.org.uk\" rel=\"nofollow\">codemonkey.org.uk</a>.</p>
<div class=\"yarpp-related-rss\">
<p>Related posts:</p><ol>
<li><a href=\"http://codemonkey.org.uk/2014/12/19/moving-on-from-rht/\" rel=\"bookmark\" title=\"Moving on from Red Hat.\">Moving on from Red Hat. </a> <small>After eleven and a half years, today is my final...</small></li>
<li><a href=\"http://codemonkey.org.uk/2015/01/08/job-reveal/\" rel=\"bookmark\" title=\"the new job reveal.\">the new job reveal. </a> <small>I let the cat out of the bag earlier this...</small></li>
<li><a href=\"http://codemonkey.org.uk/2015/03/13/lsfmm-2015-recap/\" rel=\"bookmark\" title=\"LSF/MM 2015 recap.\">LSF/MM 2015 recap. </a> <small>It’s been a long week. Spent Monday/Tuesday at LSFMM. This...</small></li>
</ol><p></p>
</div>") (pubDate nil "Tue, 11 Aug 2015 22:33:41 +0000"))) ("Pete Zaitcev: git submodule" "<p>It's a familiar sign to anyone dealing with a project that includes submodules: you run \"make\" and see something like this:</p>
<p><code>
rgw/rgw_main.cc: In member function ‘virtual int RGWMongooseFrontend::run()’:<br />
rgw/rgw_main.cc:993:8: error: ‘struct mg_callbacks’ has no member named ‘log_access’<br />
cb.log_access = rgw_civetweb_log_access_callback;<br />
^<br />
</code></p>
<p>Ah, yes. Submodule civetweb is obviously out of date. Type \"git submodule init; git submodule update\" and... nothing happens. The goddamn submodules are <b>stuck</b>.</p>
<p>At this point, running \"git diff origin\" produces an output like:</p>
<p><code>
--- a/ceph-object-corpus<br />
+++ b/ceph-object-corpus<br />
@@ -1 +1 @@<br />
-Subproject commit <b>20351c6bae6dd4802936a5a9fd76e41b8ce2bad0</b><br />
+Subproject commit bb3cee6b85b93210af5fb2c65a33f3000e341a11<br />
</code></p>
<p>So yeah, obviously you fetched the right thing from the origin, but you cannot merge or rebase no matter what. You may spend a good part of a hackathon reading man pages for git subcommands, all for naught.</p>
<p>Fortunately, the stuck submodules can be worked around, by looking at the \"git diff origin\" above, then doing this:</p>
<p><code>
git update-index --replace --cacheinfo 160000,<b>20351c6bae6dd4802936a5a9fd76e41b8ce2bad0</b>,ceph-object-corpus<br />
</code></p>
<p>You get the idea: force the right commit from the origin into the local index. This allows \"git submodule update\" to clone and checkout the right thing and you're off to the races. The fixups in the index will stick out in \"git status\", so create an empty commit to get rid of them (but only after \"git submodule update\").</p>
<p>When you're done, you might want to kick in the nuts whoever chose to use submodules in your project.</p>
<p>P.S. \"git --version\" yields \"git version 2.4.3\".</p>
<p>P.P.S. You verify what you have in the index by running \"git ls-files -s ceph-object-corpus\" (or src/civetweb). The mode must be 160000 and the hash should match the upstream. Note that \"git diff origin\" continues to display a disparity until you've run the \"git submodules update\".</p>" "http://zaitcev.livejournal.com/228768.html" (21961 26439) obsolete 58 nil nil ((title nil "Pete Zaitcev: git submodule") (guid nil "http://zaitcev.livejournal.com/228768.html") (link nil "http://zaitcev.livejournal.com/228768.html") (description nil "<p>It's a familiar sign to anyone dealing with a project that includes submodules: you run \"make\" and see something like this:</p>
<p><code>
rgw/rgw_main.cc: In member function ‘virtual int RGWMongooseFrontend::run()’:<br />
rgw/rgw_main.cc:993:8: error: ‘struct mg_callbacks’ has no member named ‘log_access’<br />
     cb.log_access = rgw_civetweb_log_access_callback;<br />
        ^<br />
</code></p>
<p>Ah, yes. Submodule civetweb is obviously out of date. Type \"git submodule init; git submodule update\" and... nothing happens. The goddamn submodules are <b>stuck</b>.</p>
<p>At this point, running \"git diff origin\" produces an output like:</p>
<p><code>
--- a/ceph-object-corpus<br />
+++ b/ceph-object-corpus<br />
@@ -1 +1 @@<br />
-Subproject commit <b>20351c6bae6dd4802936a5a9fd76e41b8ce2bad0</b><br />
+Subproject commit bb3cee6b85b93210af5fb2c65a33f3000e341a11<br />
</code></p>
<p>So yeah, obviously you fetched the right thing from the origin, but you cannot merge or rebase no matter what. You may spend a good part of a hackathon reading man pages for git subcommands, all for naught.</p>
<p>Fortunately, the stuck submodules can be worked around, by looking at the \"git diff origin\" above, then doing this:</p>
<p><code>
git update-index --replace --cacheinfo 160000,<b>20351c6bae6dd4802936a5a9fd76e41b8ce2bad0</b>,ceph-object-corpus<br />
</code></p>
<p>You get the idea: force the right commit from the origin into the local index. This allows \"git submodule update\" to clone and checkout the right thing and you're off to the races. The fixups in the index will stick out in \"git status\", so create an empty commit to get rid of them (but only after \"git submodule update\").</p>
<p>When you're done, you might want to kick in the nuts whoever chose to use submodules in your project.</p>
<p>P.S. \"git --version\" yields \"git version 2.4.3\".</p>
<p>P.P.S. You verify what you have in the index by running \"git ls-files -s ceph-object-corpus\" (or src/civetweb). The mode must be 160000 and the hash should match the upstream. Note that \"git diff origin\" continues to display a disparity until you've run the \"git submodules update\".</p>") (pubDate nil "Tue, 11 Aug 2015 03:08:55 +0000"))) ("Pete Zaitcev: the future is here" "<p>Behold:</p>
<p></p><pre><code>
PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
10005 zaitcev   20   0  809920 755384  13220 R  99.7 12.5   0:20.47 cc1plus
9894 zaitcev   20   0 1946748 <b>1.806g</b>  15800 R  99.3 31.4   1:46.60 cc1plus
9956 zaitcev   20   0 1652076 <b>1.524g</b>  15832 R  99.0 26.5   1:30.64 cc1plus
72 root      20   0       0      0      0 S   4.0  0.0   0:04.60 kswapd0
9957 zaitcev   20   0   56648  43536   1436 S   2.7  0.7   0:00.49 as
9895 zaitcev   20   0   79480  66368   1480 S   2.0  1.1   0:00.89 as
2870 zaitcev   20   0 1989524 <b>533104</b> 160868 S   1.3  8.9  60:28.10 firefox
2035 zaitcev   20   0 2018216 166872  20028 S   0.7  2.8  16:50.66 gnome-sh
</code></pre><p></p>
<p>That's right, boys and girls, a compiler with a bigger resident size than Firefox. Three times bigger.</p>" "http://zaitcev.livejournal.com/228523.html" (21961 23053) obsolete 59 nil nil ((title nil "Pete Zaitcev: the future is here") (guid nil "http://zaitcev.livejournal.com/228523.html") (link nil "http://zaitcev.livejournal.com/228523.html") (description nil "<p>Behold:</p>
<p></p><pre><code>
  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
10005 zaitcev   20   0  809920 755384  13220 R  99.7 12.5   0:20.47 cc1plus
 9894 zaitcev   20   0 1946748 <b>1.806g</b>  15800 R  99.3 31.4   1:46.60 cc1plus
 9956 zaitcev   20   0 1652076 <b>1.524g</b>  15832 R  99.0 26.5   1:30.64 cc1plus
   72 root      20   0       0      0      0 S   4.0  0.0   0:04.60 kswapd0
 9957 zaitcev   20   0   56648  43536   1436 S   2.7  0.7   0:00.49 as
 9895 zaitcev   20   0   79480  66368   1480 S   2.0  1.1   0:00.89 as
 2870 zaitcev   20   0 1989524 <b>533104</b> 160868 S   1.3  8.9  60:28.10 firefox
 2035 zaitcev   20   0 2018216 166872  20028 S   0.7  2.8  16:50.66 gnome-sh
</code></pre><p></p>
<p>That's right, boys and girls, a compiler with a bigger resident size than Firefox. Three times bigger.</p>") (pubDate nil "Tue, 11 Aug 2015 02:12:29 +0000"))) ("Lucas De Marchi: “Throw away” linux images in seconds" "<p>Generating a new rootfs from scratch in order to test changes to early
parts of the software stack or just to have a pristine environment is
something I needed several times in the past.</p>
<p>Since I use Archlinux in my desktop something that I like is to have a
similar environment in the target test rootfs. I decided to re-use and
improve a script from Kay Sievers to create an installer that can be
booted as a <span class=\"caps\">VM</span>, as a container or in bare metal:
<a href=\"https://github.com/lucasdemarchi/toolbox/blob/master/arch-installer.sh\">arch-installer.sh</a>.
Originally  it was a script to bootstrap a Fedora image and I think that
with some small changes that would still be possible.</p>
<div class=\"highlight\"><pre><span class=\"nv\">$ </span><span class=\"nb\">time </span>sudo arch-installer.sh -l ~/vm/test.img
...
real 0m31.238s
user 0m22.277s
sys 0m2.473s
</pre></div>
<p>30 seconds later I have a complete pristine image that can be used as a
<span class=\"caps\">VM</span> with qemu, as a container with systemd-nspawn or just copied to a
pendrive/sdcard to boot for example a Minnow Board Max.</p>
<p>Container:</p>
<div class=\"highlight\"><pre><span class=\"nv\">$ </span>sudo systemd-nspawn -b -i ~/vm/test.img
</pre></div>
<p><span class=\"caps\">VM</span>:</p>
<div class=\"highlight\"><pre>sudo kvm-that ~/vm/test.img
</pre></div>
<p>Note: ‘kvm-that’ is also a script available in the same repository so I
don’t have to type all the options to qemu.</p>
<p>In order to boot another computer or a board like Minnow Board Max just
dd the image to a usb disk or sdcard. You can also generate the image
directly to the final destination:</p>
<div class=\"highlight\"><pre>$ sudo arch-installer.sh -l /dev/mmcblk0
</pre></div>
<p>The script has also some nice options to make it easy to customize the
final image.  One thing that I’m often doing is giving an overlay
directory with configuration files for wpa_supplicant. This way I can
already access my WiFi networks in the target image.</p>
<p>If you always need certain packages you can use the  example
<a href=\"https://github.com/lucasdemarchi/toolbox/blob/master/arch-installer-hooks/debug-tools\">debug-tools</a>
hook that is executed before the image is finalized. By mixing hooks
like that and the overlay directory mentioned above it’s possible to add
your local repository to pacman.conf and install packages not available
in Archlinux. Or packages that you’d like to maintain on your own. In my
use cases with Minnow Board Max I maintain my own kernel with
configurations suited to run ardupilot on it.</p>" "http://www.politreco.com/2015/08/10/throw-away-linux-images-in-seconds/" (21960 50880) obsolete 60 nil nil ((title nil "Lucas De Marchi: “Throw away” linux images in seconds") (guid nil "tag:www.politreco.com,2015-08-10:2015/08/10/throw-away-linux-images-in-seconds/") (link nil "http://www.politreco.com/2015/08/10/throw-away-linux-images-in-seconds/") (description nil "<p>Generating a new rootfs from scratch in order to test changes to early
parts of the software stack or just to have a pristine environment is
something I needed several times in the past.</p>
<p>Since I use Archlinux in my desktop something that I like is to have a
similar environment in the target test rootfs. I decided to re-use and
improve a script from Kay Sievers to create an installer that can be
booted as a <span class=\"caps\">VM</span>, as a container or in bare metal:
<a href=\"https://github.com/lucasdemarchi/toolbox/blob/master/arch-installer.sh\">arch-installer.sh</a>.
Originally  it was a script to bootstrap a Fedora image and I think that
with some small changes that would still be possible.</p>
<div class=\"highlight\"><pre><span class=\"nv\">$ </span><span class=\"nb\">time </span>sudo arch-installer.sh -l ~/vm/test.img
...
real 0m31.238s
user 0m22.277s
sys 0m2.473s
</pre></div>


<p>30 seconds later I have a complete pristine image that can be used as a
<span class=\"caps\">VM</span> with qemu, as a container with systemd-nspawn or just copied to a
pendrive/sdcard to boot for example a Minnow Board Max.</p>
<p>Container:</p>
<div class=\"highlight\"><pre><span class=\"nv\">$ </span>sudo systemd-nspawn -b -i ~/vm/test.img
</pre></div>


<p><span class=\"caps\">VM</span>:</p>
<div class=\"highlight\"><pre>sudo kvm-that ~/vm/test.img
</pre></div>


<p>Note: ‘kvm-that’ is also a script available in the same repository so I
don’t have to type all the options to qemu.</p>
<p>In order to boot another computer or a board like Minnow Board Max just
dd the image to a usb disk or sdcard. You can also generate the image
directly to the final destination:</p>
<div class=\"highlight\"><pre>$ sudo arch-installer.sh -l /dev/mmcblk0
</pre></div>


<p>The script has also some nice options to make it easy to customize the
final image.  One thing that I’m often doing is giving an overlay
directory with configuration files for wpa_supplicant. This way I can
already access my WiFi networks in the target image.</p>
<p>If you always need certain packages you can use the  example
<a href=\"https://github.com/lucasdemarchi/toolbox/blob/master/arch-installer-hooks/debug-tools\">debug-tools</a>
hook that is executed before the image is finalized. By mixing hooks
like that and the overlay directory mentioned above it’s possible to add
your local repository to pacman.conf and install packages not available
in Archlinux. Or packages that you’d like to maintain on your own. In my
use cases with Minnow Board Max I maintain my own kernel with
configurations suited to run ardupilot on it.</p>") (pubDate nil "Mon, 10 Aug 2015 15:44:00 +0000"))) ("Daniel Vetter: Neat drm/i915 stuff for 4.5" "<a href=\"http://blog.ffwll.ch/2015/12/neat-drmi915-stuff-for-44.html\">Kernel version 4.4</a> is released, it's time for our regular look at what's in store for the Intel graphics driver in the next release.<br /><a name=\"more\"></a><br />Overall this cycle has seen lots and lots of bugfixes, and the reason for that is that we're rebuilding our CI infrastructure after it went up in a poof of smoke last summer. Really big thanks to the entire team for the effort invested! And that's why this overview is a bit different and we'll start with bugfix efforts before delving into the few feature additions:<br /><br />Ville <b>fixed up display fifo underruns</b> all over the place: FDI modeset fixes for Haswell/Broadwell, correctly detecting fused-of VGA on the same,  and disabling fifo underrun reporting in some places where we've learned that underruns just happen - mostly around starting up the display pipeline.<br /><br />Next up is <b>improved runtime PM wakelock debugging</b> from Imre Deak, with efforts from other folks trying to fix up various issues. Unfortunately this turned up so many little buglets that we had to disable the reporting again, at least for now. But at least we'll now have a very clear list of things to address, and a reliable way to audit any failures, to finally be able to enable runtime PM by default hopefully soon.<br /><br />There's also been lots of <b>fixes for PSR and FBC</b> from Rodrigo and Paulo respectively. PSR enabled by default missed the 4.5 merge window by just a hair - it's already enabled for 4.6. FBC is also pretty close, the last bit Paulo is working is untangling the locking issues. FBC is sitting between GEM and KMS and FBC code gets called by both subsystems. And that's an easy recipe for deadlocks, which Paulo is now working to resolve.<br /><br />There's also fixes included from Tvrtko Ursulin, Lukas Wunner and Chris Wilson to remedy some long-standing regressions in the <b>fbdev framebuffer setup code</b>. In GEM finally Dave Gordon <b>fixed issues with the page dirty</b> tracking. And Chris Wilson <b>fine-tuned the request polling logic</b> to avoid needlessly wasting CPU cycles.<br /><br />Imre, Patrik and others have done a lot of work to <b>fix up various issues in the DMC</b> firmware loader for Skylake and the DC5/6 support. It works well now on that platform, and could reenable the overall display power well support again on Skylake. But there's still plenty of issues on Broxton unfortunately.<br /><br />Since bugfixes have been highly prioritized over feature work this time around there's only very little progress on atomic modesettting and specifically atomic watermark updates. But 4.5 includes a few more prep patches from Maarten Lankhorst and Matt Roper.<br /><br />There have been some real features though still: Alex Goins from nvidia implementd proper <b>sync for page-flipping dma-buf</b> backed framebuffers, benefitting setups where nVidia renders buffers that the Intel driver displays.<br /><br />Finally there's also been the usual amount of internal refactoring to prepare the code for the future and keep it maintainable. Jani Nikula <b>rewrote the VBT parsing</b> code.  And Ander started to <b>rework the DP detection</b> code as the first step of a large DP support revamp. And finally ther's been a bit of <b>enabling for Kabylake</b> too, but it's not yet complete.<br /><br />And of courese there's been a lot more smaller things, again mostly bugfixes." "http://blog.ffwll.ch/2016/01/neat-drmi915-stuff-for-45.html" (22163 54379) old 1 nil nil ((title nil "Daniel Vetter: Neat drm/i915 stuff for 4.5") (guid nil "tag:blogger.com,1999:blog-8047628228132312466.post-1984383501718899742") (link nil "http://blog.ffwll.ch/2016/01/neat-drmi915-stuff-for-45.html") (description nil "<a href=\"http://blog.ffwll.ch/2015/12/neat-drmi915-stuff-for-44.html\">Kernel version 4.4</a> is released, it's time for our regular look at what's in store for the Intel graphics driver in the next release.<br /><a name=\"more\"></a><br />Overall this cycle has seen lots and lots of bugfixes, and the reason for that is that we're rebuilding our CI infrastructure after it went up in a poof of smoke last summer. Really big thanks to the entire team for the effort invested! And that's why this overview is a bit different and we'll start with bugfix efforts before delving into the few feature additions:<br /><br />Ville <b>fixed up display fifo underruns</b> all over the place: FDI modeset fixes for Haswell/Broadwell, correctly detecting fused-of VGA on the same,  and disabling fifo underrun reporting in some places where we've learned that underruns just happen - mostly around starting up the display pipeline.<br /><br />Next up is <b>improved runtime PM wakelock debugging</b> from Imre Deak, with efforts from other folks trying to fix up various issues. Unfortunately this turned up so many little buglets that we had to disable the reporting again, at least for now. But at least we'll now have a very clear list of things to address, and a reliable way to audit any failures, to finally be able to enable runtime PM by default hopefully soon.<br /><br />There's also been lots of <b>fixes for PSR and FBC</b> from Rodrigo and Paulo respectively. PSR enabled by default missed the 4.5 merge window by just a hair - it's already enabled for 4.6. FBC is also pretty close, the last bit Paulo is working is untangling the locking issues. FBC is sitting between GEM and KMS and FBC code gets called by both subsystems. And that's an easy recipe for deadlocks, which Paulo is now working to resolve.<br /><br />There's also fixes included from Tvrtko Ursulin, Lukas Wunner and Chris Wilson to remedy some long-standing regressions in the <b>fbdev framebuffer setup code</b>. In GEM finally Dave Gordon <b>fixed issues with the page dirty</b> tracking. And Chris Wilson <b>fine-tuned the request polling logic</b> to avoid needlessly wasting CPU cycles.<br /><br />Imre, Patrik and others have done a lot of work to <b>fix up various issues in the DMC</b> firmware loader for Skylake and the DC5/6 support. It works well now on that platform, and could reenable the overall display power well support again on Skylake. But there's still plenty of issues on Broxton unfortunately.<br /><br />Since bugfixes have been highly prioritized over feature work this time around there's only very little progress on atomic modesettting and specifically atomic watermark updates. But 4.5 includes a few more prep patches from Maarten Lankhorst and Matt Roper.<br /><br />There have been some real features though still: Alex Goins from nvidia implementd proper <b>sync for page-flipping dma-buf</b> backed framebuffers, benefitting setups where nVidia renders buffers that the Intel driver displays.<br /><br />Finally there's also been the usual amount of internal refactoring to prepare the code for the future and keep it maintainable. Jani Nikula <b>rewrote the VBT parsing</b> code.  And Ander started to <b>rework the DP detection</b> code as the first step of a large DP support revamp. And finally ther's been a bit of <b>enabling for Kabylake</b> too, but it's not yet complete.<br /><br />And of courese there's been a lot more smaller things, again mostly bugfixes.") (pubDate nil "Mon, 11 Jan 2016 16:12:27 +0000"))) ("Pavel Machek: X servers and dangerous aircraft" "<span style=\"line-height: 1.4;\">It is very easy to lose track of cursor on multiple </span><span style=\"line-height: 1.4;\">monitors... Especially if cursor is on down or right edge, only few </span><span style=\"line-height: 1.4;\">pixels remain. Should some kind of pointer remain on the monitor even </span><span style=\"line-height: 1.4;\">when mouse is on other monitor -- providing kind of \"look that way\" </span><span style=\"line-height: 1.4;\">pointer?</span><div><br /><div style=\"line-height: 19.6px;\">Oh and... when activating USB-to-VGA adapter, mouse disappears <span style=\"line-height: 1.4;\">altogether. Ouch. Unfortunately, that means system is unusable.</span></div>Is there way to adjust DPI setting, preferably per application? Does gtk has some option like that? N900 has 800x480 display. When using stylus, you can put your phone close to your eyes and pretend its a PC, but when using fingers, many controls are just way too small.<br /></div><div><div><b>Its official: Airbus killed them.</b></div><div>Airbus A320 has two sidesticks, with no force feedback, and no <span style=\"line-height: 1.4;\">physical link. So you are trying to recover from stall, you are </span><span style=\"line-height: 1.4;\">pushing the sidestick fully and your first officer pulls the stick </span><span style=\"line-height: 1.4;\">fully -- result is you remain stalled. You don't even know your first </span><span style=\"line-height: 1.4;\">officer fights with you... That's what happened to PK-AXC, report is <a href=\"http://kemhubri.dephub.go.id/knkt/ntsc_aviation/baru/Final%20Report%20PK-AXC.pdf\" rel=\"nofollow\">here</a>. (How did they get to stall? Computers spuriously adjusted their rudder trim when they lost power. No, you should not reset flight computers like that.) </span></div><div>This is second accident of this type. Similar effect happened to <a href=\"http://www.bea.aero/docspa/2009/f-cp090601.en/pdf/f-cp090601.en.pdf\" rel=\"nofollow\">Air </a><span style=\"line-height: 1.4;\"><a href=\"http://www.bea.aero/docspa/2009/f-cp090601.en/pdf/f-cp090601.en.pdf\" rel=\"nofollow\">France 447</a>. (And pretty much every Airbus incident involves \"dual inputs\"). Lets see how ma</span><span style=\"line-height: 1.4;\">ny crashes it takes before Airbus provides force feedback.</span></div></div>" "http://pavelmachek.livejournal.com/131016.html" (22163 40715) old 2 nil nil ((title nil "Pavel Machek: X servers and dangerous aircraft") (guid nil "http://pavelmachek.livejournal.com/131016.html") (link nil "http://pavelmachek.livejournal.com/131016.html") (description nil "<span style=\"line-height: 1.4;\">It is very easy to lose track of cursor on multiple </span><span style=\"line-height: 1.4;\">monitors... Especially if cursor is on down or right edge, only few </span><span style=\"line-height: 1.4;\">pixels remain. Should some kind of pointer remain on the monitor even </span><span style=\"line-height: 1.4;\">when mouse is on other monitor -- providing kind of \"look that way\" </span><span style=\"line-height: 1.4;\">pointer?</span><div><br /><div style=\"line-height: 19.6px;\">Oh and... when activating USB-to-VGA adapter, mouse disappears <span style=\"line-height: 1.4;\">altogether. Ouch. Unfortunately, that means system is unusable.</span></div>Is there way to adjust DPI setting, preferably per application? Does gtk has some option like that? N900 has 800x480 display. When using stylus, you can put your phone close to your eyes and pretend its a PC, but when using fingers, many controls are just way too small.<br /></div><div><div><b>Its official: Airbus killed them.</b></div><div>Airbus A320 has two sidesticks, with no force feedback, and no <span style=\"line-height: 1.4;\">physical link. So you are trying to recover from stall, you are </span><span style=\"line-height: 1.4;\">pushing the sidestick fully and your first officer pulls the stick </span><span style=\"line-height: 1.4;\">fully -- result is you remain stalled. You don't even know your first </span><span style=\"line-height: 1.4;\">officer fights with you... That's what happened to PK-AXC, report is <a href=\"http://kemhubri.dephub.go.id/knkt/ntsc_aviation/baru/Final%20Report%20PK-AXC.pdf\" rel=\"nofollow\">here</a>. (How did they get to stall? Computers spuriously adjusted their rudder trim when they lost power. No, you should not reset flight computers like that.) </span></div><div>This is second accident of this type. Similar effect happened to <a href=\"http://www.bea.aero/docspa/2009/f-cp090601.en/pdf/f-cp090601.en.pdf\" rel=\"nofollow\">Air </a><span style=\"line-height: 1.4;\"><a href=\"http://www.bea.aero/docspa/2009/f-cp090601.en/pdf/f-cp090601.en.pdf\" rel=\"nofollow\">France 447</a>. (And pretty much every Airbus incident involves \"dual inputs\"). Lets see how ma</span><span style=\"line-height: 1.4;\">ny crashes it takes before Airbus provides force feedback.</span></div></div>") (pubDate nil "Mon, 11 Jan 2016 12:24:43 +0000"))) ("Daniel Vetter: Better Markup for the Kernel GPU DocBook" "This summer Intel sponsored some work to improve the kerneldoc toolchain, with the aim to use all that to extend the DRM and i915 driver documentation we have. Most of it landed, but the last bit to integrate some type  of text markup processing was stalled until it could be discussed at the kernel summit, see the  <a href=\"https://lwn.net/Articles/662930/\" rel=\"nofollow\">LWN summary</a>. Unfortunately it died in a bikeshed fest due to an alliance of people who think docs are useless and you should just read the code, and others who didn't even know how to convert the kerneldoc into something pretty.<br /><br />But we still need this, since without lists, highlighting, basic tables and inserting code snippets it's really hard to write decent documentation. Luckily Dave Airlie is ok with using it for DRM kerneldoc as long as Intel maintains the support. It's purely opt-in and the only downside of not using <code>asciidoc</code> is that the resulting docs won't be as pretty. All the changes to the text itself to use this markup are going into upstream as normal. The only bit that's not in upstream is the tooling, which is available in a topic branch at<br /><br /><pre>        git://anongit.freedesktop.org/drm-intel topic/kerneldoc</pre><br /><br />If you want to build pretty docs just install <code>asciidoc</code> and base your drm documentation patches on top of drm-intel-nightly from the same repository - that tree also includes all of Dave's tree. Alternatively pull in the above topic branch into your own personal tree.  Note that <code>asciidoc</code> is detected automatically, so you really only need it and the tooling branch to check the rendering of your changes.<br /><br />For added convenience Intel also maintains an autobuilder that pushes latest drm-intel-nightly DRM documentation builds to      <a href=\"http://dri.freedesktop.org/docs/drm/\" rel=\"nofollow\">http://dri.freedesktop.org/docs/drm/</a>.<br /><br />Aside: If all you want to build is just the GPU DocBook instead of all of them, you can do that with<br /><br /><pre>        $ make DOCBOOKS=\"gpu.xml\" htmldocs</pre><br />With that have fun reading the new&amp;improved documentation, and if you spot anything please submit a patch to dri-devel@lists.freedesktop.org." "http://blog.ffwll.ch/2016/01/better-markup-for-kernel-gpu-docbook.html" (22162 57968) old 3 nil nil ((title nil "Daniel Vetter: Better Markup for the Kernel GPU DocBook") (guid nil "tag:blogger.com,1999:blog-8047628228132312466.post-5274572225825971862") (link nil "http://blog.ffwll.ch/2016/01/better-markup-for-kernel-gpu-docbook.html") (description nil "This summer Intel sponsored some work to improve the kerneldoc toolchain, with the aim to use all that to extend the DRM and i915 driver documentation we have. Most of it landed, but the last bit to integrate some type  of text markup processing was stalled until it could be discussed at the kernel summit, see the  <a href=\"https://lwn.net/Articles/662930/\" rel=\"nofollow\">LWN summary</a>. Unfortunately it died in a bikeshed fest due to an alliance of people who think docs are useless and you should just read the code, and others who didn't even know how to convert the kerneldoc into something pretty.<br /><br />But we still need this, since without lists, highlighting, basic tables and inserting code snippets it's really hard to write decent documentation. Luckily Dave Airlie is ok with using it for DRM kerneldoc as long as Intel maintains the support. It's purely opt-in and the only downside of not using <code>asciidoc</code> is that the resulting docs won't be as pretty. All the changes to the text itself to use this markup are going into upstream as normal. The only bit that's not in upstream is the tooling, which is available in a topic branch at<br /><br /><pre>        git://anongit.freedesktop.org/drm-intel topic/kerneldoc</pre><br /><br />If you want to build pretty docs just install <code>asciidoc</code> and base your drm documentation patches on top of drm-intel-nightly from the same repository - that tree also includes all of Dave's tree. Alternatively pull in the above topic branch into your own personal tree.  Note that <code>asciidoc</code> is detected automatically, so you really only need it and the tooling branch to check the rendering of your changes.<br /><br />For added convenience Intel also maintains an autobuilder that pushes latest drm-intel-nightly DRM documentation builds to      <a href=\"http://dri.freedesktop.org/docs/drm/\" rel=\"nofollow\">http://dri.freedesktop.org/docs/drm/</a>.<br /><br />Aside: If all you want to build is just the GPU DocBook instead of all of them, you can do that with<br /><br /><pre>        $ make DOCBOOKS=\"gpu.xml\" htmldocs</pre><br />With that have fun reading the new&amp;improved documentation, and if you spot anything please submit a patch to dri-devel@lists.freedesktop.org.") (pubDate nil "Sun, 10 Jan 2016 23:00:00 +0000"))) ("Pavel Machek: 2016: Year of the GNU/Linux phone" "<span style=\"line-height: 1.4;\">Well, Linux is running significant fraction of cellphones these days... but usually very old and very patched kernel. But maybe we can run mainline kernel with free userland?<br /><br />Today, I made first successfull call with Nokia N900 running 4.4-rc8 </span><span style=\"line-height: 1.4;\">kernel and Debian userland. Latency was cca second, and I was told my </span><span style=\"line-height: 1.4;\">voice was not recognizable, but we had no problems understanding each other.</span><div>Maybe voice format is not 4kHz, 16bit, stereo after all?</div>" "http://pavelmachek.livejournal.com/130784.html" (22162 16589) old 4 nil nil ((title nil "Pavel Machek: 2016: Year of the GNU/Linux phone") (guid nil "http://pavelmachek.livejournal.com/130784.html") (link nil "http://pavelmachek.livejournal.com/130784.html") (description nil "<span style=\"line-height: 1.4;\">Well, Linux is running significant fraction of cellphones these days... but usually very old and very patched kernel. But maybe we can run mainline kernel with free userland?<br /><br />Today, I made first successfull call with Nokia N900 running 4.4-rc8 </span><span style=\"line-height: 1.4;\">kernel and Debian userland. Latency was cca second, and I was told my </span><span style=\"line-height: 1.4;\">voice was not recognizable, but we had no problems understanding each other.</span><div>Maybe voice format is not 4kHz, 16bit, stereo after all?</div>") (pubDate nil "Sun, 10 Jan 2016 11:30:21 +0000"))))