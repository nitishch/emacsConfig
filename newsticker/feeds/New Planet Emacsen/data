;; -*- coding: utf-8 -*-
(("Planet Emacsen" nil nil (22174 13590 94064 997000) feed 0 nil nil ((title nil "Planet Emacsen") (link ((rel . "self") (href . "http://planet.emacsen.org/atom.xml"))) (link ((href . "http://planet.emacsen.org/"))) (id nil "http://planet.emacsen.org/atom.xml") (updated nil "2016-01-01T03:04:54+00:00") (generator ((uri . "http://www.planetplanet.org/")) "http://intertwingly.net/code/venus/") (entry nil (title ((type . "html") (lang . "en-US")) "Phil Hagelberg: in which year one comes to a close") (link ((href . "http://technomancy.us/178"))) (id nil "tag:technomancy.us,2007:in%20which%20year%20one%20comes%20to%20a%20close") (updated nil "2015-12-31T22:11:48+00:00") (content ((type . "html") (lang . "en-US")) "<p>Everyone asks what it's like to live here in Thailand on the
  border. \"Great, and weird\" is how I like to sum it up—the
  country
  is <a href=\"https://www.flickr.com/photos/technomancy/19658530230\">beautiful</a>;
  the <a href=\"https://www.flickr.com/photos/technomancy/20907191594/\">food
  is ridiculously good</a> and cheap enough to eat out every day;
  there's
  always <a href=\"https://www.flickr.com/photos/technomancy/19489921493\">something
  fun to do around</a>; great! Most people think the \"weird\" part
  comes from maybe
  the <a href=\"http://diythegoodlife.com/2015/12/02/spirited-away-in-thailand/\">animist
  spirit houses</a> everywhere, or the stalls serving fried crickets
  and grubs at the night market, or finding snails climbing up the
  inside of your kitchen pipes and poking up into your sink,
  or <a href=\"http://livingintoeventually.blogspot.com/2015/10/burmese-fermented-tea-leaf-salad.html\">salad
  made out of fermented tea leaves</a>? But no; all that stuff becomes everyday
  eventually. What's much harder to come to grips with is just being
  here, living a life of relative ease, and not knowing how to help
  the people around you who are going
  through <a href=\"http://livingintoeventually.blogspot.com/2015/06/processing.html\">difficulties
  you have a hard time even wrapping your head around</a>.</p>

<a href=\"https://www.flickr.com/photos/technomancy/21429068813\">
  <img src=\"http://technomancy.us/i/dump-clouds.jpg\" /></a>

<p>The Charis Project, which we are working under, doesn't really
  have projects for which it makes sense for me to be directly involved
  right now, so I have been looking for other ways to help out in, mostly
  the field of education. I began with trying to start a string of
  small projects on my own, but each of them so far has fizzled out
  or not gotten off the ground to begin with. I've heard from others
  with more field experience that long-term volunteers should expect
  it to take a while before they are really effective here.</p>

<p>There is a pattern of westerners naively coming in and thinking
  that they can dive right in
  and <a href=\"https://www.washingtonpost.com/posteverything/wp/2015/06/04/technology-wont-fix-americas-neediest-schools-it-makes-bad-education-worse/\">contribute
  without understanding the context</a>, and this often results in
  projects that end up abandoned after a year or so because there
  was no buy-in from the people they were intended to help. In order
  to avoid this I've come to the conclusion that it makes much more
  sense to partner with and learn from some of the larger
  organizations who have been involved in that kind of work here for
  a long time instead of trying to kick off my own thing right off
  the bat. What works, what doesn't?  What communities are
  receptive? What context am I dropping into the middle of
  unawares?</p>

<p>So that's been where I've been focusing more recently. It's a
  little rough to have come this far without more to show, but the
  language-learning front has proceeded better, and that is always
  time well-spent. Here's to seeing what year two brings.</p>") (author nil (name nil "Phil Hagelberg") (uri nil "http://technomancy.us/")) (source nil (title ((type . "html")) "Technomancy") (link ((rel . "self") (href . "http://technomancy.us/feed/atom"))) (id nil "tag:technomancy.us,2007:blog/"))) (entry nil (title ((type . "html") (lang . "en-US")) "Irreal: Integrating iCal and Org Mode") (link ((href . "http://irreal.org/blog/?p=4835"))) (id nil "http://irreal.org/blog/?p=4835") (updated nil "2015-12-31T15:30:00+00:00") (content ((type . "html") (lang . "en-US")) "<p> <a href=\"http://robrohan.com/\">Rob Rohan</a> has a very nice <a href=\"https://www.youtube.com/watch?v=gGO4RPzAKQY&amp;app=desktop\">video</a> up on integrating Org mode and OS X<sup><a class=\"footref\" href=\"http://irreal.org/blog/?tag=emacs&amp;feed=rss2#fn.1\" id=\"fnr.1\">1</a></sup> iCal. In his case, he wants to create a physical training schedule that will be reflected in his desktop calendar as well as on his iOS devices. Even if your idea of exercise is getting up to get another cup or coffee, you can use the same ideas to export Org events to your calendar for any purpose. </p>
<p> As the <a href=\"http://orgmode.org/manual/iCalendar-export.html\">Org Manual</a> puts it, “Some people use Org mode for keeping track of projects, but still prefer a standard calendar application for anniversaries and appointments.” In this case the techniques that Rohan describes make it easy to integrate Org mode with iCal. Even if you keep <i>everything</i> in Org mode, you may want to export it to iCal so you can see it on your iOS (or other remote) devices. </p>
<p> The video is short (7 minutes, 46 seconds) so it's easy to watch. If you've been wishing for a way to get Org events into your calendar or your New Year's resolution involves getting serious about your exercise regime, take a look at Rohan's video. </p>
<div id=\"footnotes\">
<h2 class=\"footnotes\">Footnotes: </h2>
<div id=\"text-footnotes\">
<div class=\"footdef\"><sup><a class=\"footnum\" href=\"http://irreal.org/blog/?tag=emacs&amp;feed=rss2#fnr.1\" id=\"fn.1\">1</a></sup>
<div class=\"footpara\">
<p class=\"footpara\"> Since iCal uses the standard icalendar format, you could probably make this work on any platform and calendar application that supports the icalendar standard. </p>
</div>
</div>
</div>
</div>") (author nil (name nil "jcs") (uri nil "http://irreal.org/blog")) (source nil (title ((type . "html")) "Irreal » Emacs") (subtitle ((type . "html")) "The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession") (link ((rel . "self") (href . "http://irreal.org/blog/?tag=emacs&feed=rss2"))) (id nil "http://irreal.org/blog"))) (entry nil (title ((type . "html") (lang . "en-US")) "sachachua: 2015-12-28 Emacs News") (link ((href . "http://sachachua.com/blog/2015/12/2015-12-28-emacs-news/"))) (id nil "http://sachachua.com/blog/?p=28529") (updated nil "2015-12-28T18:02:00+00:00") (content ((type . "html") (lang . "en-US")) "<ul class=\"org-ul\">
<li>Navigation:
<ul class=\"org-ul\">
<li><a href=\"http://blog.binchen.org/posts/use-ivy-mode-to-tweak-workgroups2.html\">Use Ivy-mode to tweak workgroups2</a> (<a href=\"https://www.reddit.com/r/emacs/comments/3xspps/use_ivymode_to_tweak_workgroups2/\">Reddit</a>)</li>
<li><a href=\"http://endlessparentheses.com/faster-pop-to-mark-command.html?source=rss\">Faster pop-to-mark command</a>: Go back to the last place – C-u C-SPC</li>
<li><a href=\"https://github.com/ancane/popup-imenu\">popup-imenu – select imenu items via popup window with fuzzy matching</a> (<a href=\"https://www.reddit.com/r/emacs/comments/3ye9c2/popupimenu_select_imenu_items_via_popup_window/\">Reddit</a>)</li>
<li><a href=\"https://github.com/bbatsov/super-save\">super-save – save Emacs buffers when they lose focus</a> (<a href=\"https://www.reddit.com/r/emacs/comments/3ya38u/supersave_save_emacs_buffers_when_they_lose_focus/\">Reddit</a>)</li>
<li><a href=\"http://xmodulo.com/best-plugins-to-increase-productivity-on-emacs.html\">10 emacs productivity plugins</a> (<a href=\"https://www.reddit.com/r/emacs/comments/3y4sbi/10_emacs_productivity_plugins/\">Reddit</a>) – see suggested substitutions in the comments</li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/3xzas3/help_with_ivycounsel_fuzzy_matching_and_sorting/\">ivy+flx for fuzzy matching</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/3xwffe/evil_map_unused_namespace_in_operatorpending/\">Evil: map unused “namespace” in operator-pending commands (like vim-impaired)</a></li>
</ul>
</li>
<li>Display:
<ul class=\"org-ul\">
<li><a href=\"http://irreal.org/blog/?p=4823\">Adjusting text size in Emacs</a>: C-x C-+ C-+ C-+, etc.</li>
<li><a href=\"http://muublog.blogspot.com/2015/12/evil-mode-hack-for-colorful-mode-line.html\">Evil Mode hack for a colorful mode line</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/3yc3el/spellchecking_in_emacs/\">Spellchecking in Emacs</a>: flyspell, ispell</li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/3xw5io/using_a_different_colour_scheme_for_mx_shell/\">Using a different colour scheme for M-x shell</a></li>
</ul>
</li>
<li>Coding:
<ul class=\"org-ul\">
<li><a href=\"https://github.com/velkyel/vc-darcs\">fixed vc-darcs package</a> (<a href=\"https://www.reddit.com/r/emacs/comments/3y7q4w/fixed_vcdarcs_package/\">Reddit</a>)</li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/3y78j2/n00b_question/\">Autocompletion</a>: hippie-expand, company-mode</li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/3y6czz/emacs_and_cc_irony_or_rtags_orboth/\">emacs and C/C++, irony or rtags or…both?</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/3xtmq5/any_cool_yasnippets_to_share_with_us/\">Any cool yasnippets to share with us?</a></li>
<li><a href=\"https://github.com/emacs-berlin/general-close\">Package of the day: press semicolon-key to close it, without figuring out which semicolon/parentheses/bracket</a> (<a href=\"https://www.reddit.com/r/emacs/comments/3xtl10/package_of_the_day_press_semicolonkey_to_close_it/\">Reddit</a>)</li>
</ul>
</li>
<li>Community:
<ul class=\"org-ul\">
<li><a href=\"http://irreal.org/blog/?p=4829\">Learning the right tools</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/3y8ppo/challenge_enumerate_all_the_things_you_currently/\">Challenge: enumerate all the things you currently do in Emacs!</a></li>
<li><a href=\"http://emacs-primer.branchable.com/posts/Participate_In_Emacs_Mailinglists_Via_Gmane/\">Participate In Emacs Mailinglists Via Gmane</a> (<a href=\"https://www.reddit.com/r/emacs/comments/3y5j63/participate_in_emacs_mailinglists_via_gmane/\">Reddit</a>)</li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/3y1iih/emacswiki_is_a_useful_pile_of_shit_i_say_this_as/\">Emacswiki needs cleaning up</a></li>
<li><a href=\"http://sachachua.com/blog/2015/12/2015-12-21-emacs-hangout/\">2015-12-21 Emacs Hangout</a></li>
</ul>
</li>
<li>Emacs development:
<ul class=\"org-ul\">
<li><a href=\"http://yann.hodique.info/blog/rant-obfuscation-in-emacs/\">Rant: Obfuscation in Emacs</a>: inhibit-startup-echo-area-message is special (<a href=\"https://www.reddit.com/r/emacs/comments/3ycj8m/rant_obfuscation_in_emacs_yann_hodique/\">Reddit</a>)</li>
<li><a href=\"https://github.com/vkazanov/elang\">Elang – a small Python-like language for the Emacs VM</a> (<a href=\"https://www.reddit.com/r/emacs/comments/3yikja/elang_a_small_pythonlike_language_for_the_emacs_vm/\">Reddit</a>)</li>
<li>Changes
<ul class=\"org-ul\">
<li><a href=\"http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=1fe73447864345c03fb28005122137419286853b\">erc-related fixes</a>: also, <a href=\"http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=d50b89dda9478b5e7e20e9b23bf48bd07ee6210a\">async</a>, <a href=\"http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=507e98a54d1aa37823c64993d6b59257a82fe8f4\">proxy</a>, <a href=\"http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=5917b504874faaa849f3976e0bfd75383745bd44\">tls</a></li>
<li><a href=\"http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=1f11b33a780ca4adeff7560cf347ea41cd31bc43\">IDNA domain encode/decode</a></li>
<li><a href=\"http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=1dee11d874de5ff3d5634e1629054c4398b27b72\">URL parsing</a></li>
<li><a href=\"http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=6d124eef1c940b251277b3eed6dd55eb7565d97e\">eww-related changes</a>: <a href=\"http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=6d124eef1c940b251277b3eed6dd55eb7565d97e\">colours</a>, meta-refresh, file name coding, history, left-to-right, checkboxes, filenames</li>
<li><a href=\"http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=1dcf9a5d2a727913bc53c68756bdaf6db5573671\">clipboard even without interprogram-*</a></li>
<li><a href=\"http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=65c64058b817f169e356ea7825d173eb4c27fcf6\">dired</a> – W views files in browser</li>
</ul>
</li>
<li>emacs-devel discussions
<ul class=\"org-ul\">
<li><a href=\"http://lists.gnu.org/archive/html/emacs-devel/2015-12/msg01285.html\">Apostrophes and the startup message</a></li>
<li><a href=\"http://lists.gnu.org/archive/html/emacs-devel/2015-12/msg01341.html\">Bug triage process, how to use debbugs</a>; also, <a href=\"http://lists.gnu.org/archive/html/emacs-devel/2015-12/msg01165.html\">debbugs limit</a></li>
<li><a href=\"http://lists.gnu.org/archive/html/emacs-devel/2015-12/msg01242.html\">Bug triage progress</a></li>
<li><a href=\"http://lists.gnu.org/archive/html/emacs-devel/2015-12/msg01053.html\">Continued discussion of dynamic modules</a></li>
</ul>
</li>
</ul>
</li>
<li>Other:
<ul class=\"org-ul\">
<li><a href=\"https://punchagan.muse-amuse.in/posts/clock-in-and-get-shit-done.html\">Clock in and get-shit-done</a>: Disable social media sites temporarily</li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/3xxlvx/how_can_i_load_external_executable_by_elisp/\">Running external executables from Emacs Lisp</a>: start-process, shell-command</li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/3xui8e/how_can_i_implement_twiddle_case_in_emacs/\">How can I implement “twiddle case” in emacs?</a></li>
<li><a href=\"https://www.youtube.com/watch?v=gGO4RPzAKQY\">Using emacs org mode for fitness – YouTube</a> (7:46)</li>
<li><a href=\"https://www.youtube.com/watch?v=--eSLDrCtZY\">011 Editing Files with Emacs – YouTube</a> (5:40) – beginner tutorial</li>
</ul>
</li>
<li>New packages:
<ul class=\"org-ul\">
<li><a href=\"http://melpa.org/#/ac-html-angular\" target=\"_blank\">ac-html-angular</a>: Auto complete angular15 data for `ac-html’ and `company-web’</li>
<li><a href=\"http://melpa.org/#/cff\" target=\"_blank\">cff</a>: Search of the C/C++ file header by the source and vice versa</li>
<li><a href=\"http://melpa.org/#/clean-buffers\" target=\"_blank\">clean-buffers</a>: Clean useless buffers</li>
<li><a href=\"http://melpa.org/#/crux\" target=\"_blank\">crux</a>: Miscellaneous commands such as crux-open-with, crux-view-url, crux-swap-windows</li>
<li><a href=\"http://melpa.org/#/dim\" target=\"_blank\">dim</a>: Change mode-line names of major/minor modes</li>
<li><a href=\"http://melpa.org/#/elisp-lint\" target=\"_blank\">elisp-lint</a>: Basic linting for Emacs Lisp</li>
<li><a href=\"http://melpa.org/#/git-command\" target=\"_blank\">git-command</a>: Yet another Git interface</li>
<li><a href=\"http://melpa.org/#/helm-img\" target=\"_blank\">helm-img</a>: Utilities for making image sources for helm.</li>
<li><a href=\"http://melpa.org/#/helm-img-tiqav\" target=\"_blank\">helm-img-tiqav</a>: An helm-source for joking.</li>
<li><a href=\"http://melpa.org/#/helm-xcdoc\" target=\"_blank\">helm-xcdoc</a>: Search Xcode Document by docsetutil and eww with helm interface</li>
<li><a href=\"http://melpa.org/#/import-js\" target=\"_blank\">import-js</a>: Import Javascript dependencies</li>
<li><a href=\"http://melpa.org/#/kooten-theme\" target=\"_blank\">kooten-theme</a>: Dark color theme</li>
<li><a href=\"http://melpa.org/#/latex-math-preview\" target=\"_blank\">latex-math-preview</a>: preview LaTeX mathematical expressions.</li>
<li><a href=\"http://melpa.org/#/platformio-mode\" target=\"_blank\">platformio-mode</a>: PlatformIO integration</li>
<li><a href=\"http://melpa.org/#/popup-imenu\" target=\"_blank\">popup-imenu</a>: Imenu index popup</li>
<li><a href=\"http://melpa.org/#/super-save\" target=\"_blank\">super-save</a>: Auto-save buffers, based on your activity.</li>
<li><a href=\"http://melpa.org/#/verify-url\" target=\"_blank\">verify-url</a>: Find invalid URLs in the buffer or region</li>
</ul>
</li>
</ul>
<p>Links from <a href=\"http://reddit.com/r/emacs/new\">reddit.com/r/emacs</a>, <a href=\"http://reddit.com/r/orgmode\">/r/orgmode</a>, <a href=\"https://hn.algolia.com/?query=emacs&amp;sort=byDate&amp;prefix&amp;page=0&amp;dateRange=all&amp;type=story\">Hacker News</a>, <a href=\"http://planet.emacsen.org/\">planet.emacsen.org</a>, <a href=\"https://www.youtube.com/results?search_query=emacs&amp;search_sort=video_date_uploaded\">Youtube</a>, the <a href=\"http://git.savannah.gnu.org/cgit/emacs.git/log/?showmsg=1\">Emacs commit log</a>, the changes to the <a href=\"http://git.savannah.gnu.org/cgit/emacs.git/log/etc/NEWS\">Emacs NEWS file</a>, and <a href=\"http://lists.gnu.org/archive/html/emacs-devel/2015-12\">emacs-devel</a>.</p>
<p><a href=\"http://sachachua.com/blog/category/emacs-news\">Past Emacs News round-ups</a></p>
<p>The post <a href=\"http://sachachua.com/blog/2015/12/2015-12-28-emacs-news/\" rel=\"nofollow\">2015-12-28 Emacs News</a> appeared first on <a href=\"http://sachachua.com/blog\" rel=\"nofollow\">sacha chua :: living an awesome life</a>.</p>") (author nil (name nil "Sacha Chua") (uri nil "http://sachachua.com/blog/category/geek/emacs/")) (source nil (title ((type . "html")) "Emacs - Sacha Chua") (subtitle ((type . "html")) "learn - share - scale") (link ((rel . "self") (href . "http://feeds.feedburner.com/pimpmyemacs"))) (id nil "http://sachachua.com/blog/category/geek/emacs/"))) (entry nil (title ((type . "html") (lang . "en-US")) "Irreal: Learning the Right Tools") (link ((href . "http://irreal.org/blog/?p=4829"))) (id nil "http://irreal.org/blog/?p=4829") (updated nil "2015-12-28T13:03:00+00:00") (content ((type . "html") (lang . "en-US")) "<p> I was going to let this go </p>
<blockquote class=\"twitter-tweet\" lang=\"en\"><p dir=\"ltr\" lang=\"en\">It's almost 2016. Let's stop telling newbies to learn <a href=\"https://twitter.com/hashtag/Emacs?src=hash\">#Emacs</a> or Vim, or any other \"1337\" command line shit. <a href=\"https://t.co/RiOg03tLhG\">https://t.co/RiOg03tLhG</a> <a href=\"https://twitter.com/hashtag/elitism?src=hash\">#elitism</a></p>
<p>— Niko Rosvall (@NikoRosvall) <a href=\"https://twitter.com/NikoRosvall/status/676132803164184576\">December 13, 2015</a></p></blockquote>
<p> </p>
<p> but it kept bothering me so here we are. </p>
<p> I don't understand this attitude and I find it insulting not only to those who have bothered to master their tools but also to younger engineers who are assumed to be too stupid or lazy to do the same. </p>
<p> If you want a best-in-class editor then you take the effort to learn Emacs, Vim, or perhaps one or two others. You <i>don't</i> declare that Notepad++ is good enough and you certainly don't, if you know what you're talking about, declare that Notepad++ won the Vim/Emacs holy war. </p>
<p> Today's younger engineers are not, in any real sense, kids. Nor are they special snowflakes that need to be protected from the disciplines of our profession. If you want to be more than today's equivalent of yesteryear's \"Web specialists\" that ran scripts to build rudimentary Web sites, then you better learn and master the basic tools. That means learning some language in addition to Javascript, moving beyond Eclipse, and <a href=\"http://pindexis.github.io/command-line/2015/12/23/power-of-commmand-line.html\">getting comfortable with the command line</a>. </p>
<p> Call me a dinosaur but if your idea of software engineering is pushing a button to generate great glops of code that you don't understand then your idea of our profession is very different from mine. </p>") (author nil (name nil "jcs") (uri nil "http://irreal.org/blog")) (source nil (title ((type . "html")) "Irreal » Emacs") (subtitle ((type . "html")) "The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession") (link ((rel . "self") (href . "http://irreal.org/blog/?tag=emacs&feed=rss2"))) (id nil "http://irreal.org/blog"))) (entry nil (title ((type . "html")) "Endless Parentheses: New in Emacs 25.1: Have prettify-symbols-mode reveal the symbol at point") (link ((href . "http://endlessparentheses.com/new-in-emacs-25-1-have-prettify-symbols-mode-reveal-the-symbol-at-point.html?source=rss"))) (id nil "http://endlessparentheses.com/new-in-emacs-25-1-have-prettify-symbols-mode-reveal-the-symbol-at-point") (updated nil "2015-12-28T00:00:00+00:00") (content ((type . "html")) "<p>
I’ve written before about what <a href=\"http://doc.endlessparentheses.com/Fun/prettify-symbols-mode\"><code>prettify-symbols-mode</code></a> can do for your buffers,
ranging from <a href=\"http://endlessparentheses.com/using-prettify-symbols-in-clojure-and-elisp-without-breaking-indentation.html\">pure eye-candy</a> to <a href=\"http://endlessparentheses.com/improving-latex-equations-with-font-lock.html\">signficant readability improvements</a>. Simply put,
this minor-mode “disguises” some strings in your buffer to look like something
else. For instance, in <code>emacs-lisp-mode</code> it makes <code>lambda</code> be displayed as <code>λ</code>,
and (for the next release) it’ll apply to a wide range of symbols in
<code>(la)tex-mode</code> too.
</p>

<p>
The only problem is that this (obviously) hides the symbol itself, and there’s
no way of revealing it other than disabling the mode. That’s usually not a big
deal, but it can get just a little annoying sometimes—specially when a mode
adds over 400 elements to <code>prettify-symbols-alist</code>.
</p>

<p>
In Emacs 25.1, thanks to Tassilo Horn, there’s a new variable called
<code>prettify-symbols-unprettify-at-point</code>. If you set it to <code>t</code>, <code>prettify-symbols</code>
will “unprettify” a symbol as long as the cursor is inside it. So you can easily
(and temporarily) reveal a symbol by just moving over to it.
</p>

<p>
My preference is to set it to <code>right-edge</code> which also reveals the symbol if the
point is immediately after it.
</p>
<div class=\"highlight\"><pre><code class=\"language-cl\"><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">prettify-symbols-unprettify-at-point</span> <span class=\"ss\">'right-edge</span><span class=\"p\">)</span></code></pre></div>

   <p><a href=\"http://endlessparentheses.com/new-in-emacs-25-1-have-prettify-symbols-mode-reveal-the-symbol-at-point.html?source=rss#disqus_thread\">Comment on this.</a></p>") (author nil (name nil "Artur Malabarba") (uri nil "http://endlessparentheses.com/?source=rss")) (source nil (title ((type . "html")) "Endless Parentheses") (link ((rel . "self") (href . "http://endlessparentheses.com/atom.xml"))) (id nil "http://endlessparentheses.com"))) (entry nil (title ((type . "html")) "Flickr tag 'emacs': orgmode") (link ((href . "http://www.flickr.com/photos/xmodulo/23969581166/"))) (id nil "tag:flickr.com,2004:/photo/23969581166") (updated nil "2015-12-27T04:16:50+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/xmodulo/\">xmodulo</a> posted a photo:</p>
	
<p><a href=\"http://www.flickr.com/photos/xmodulo/23969581166/\" title=\"orgmode\"><img alt=\"orgmode\" height=\"192\" src=\"http://farm6.staticflickr.com/5637/23969581166_37c8031cfd_m.jpg\" width=\"240\" /></a></p>

<p><a href=\"http://list.xmodulo.com/gnu-emacs.html\" rel=\"nofollow\">GNU Emacs</a></p>") (author nil (name nil "xmodulo") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/"))) (entry nil (title ((type . "html")) "Flickr tag 'emacs': emacs") (link ((href . "http://www.flickr.com/photos/xmodulo/23699971410/"))) (id nil "tag:flickr.com,2004:/photo/23699971410") (updated nil "2015-12-27T04:16:50+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/xmodulo/\">xmodulo</a> posted a photo:</p>
	
<p><a href=\"http://www.flickr.com/photos/xmodulo/23699971410/\" title=\"emacs\"><img alt=\"emacs\" height=\"166\" src=\"http://farm2.staticflickr.com/1676/23699971410_c4a4cd66dd_m.jpg\" width=\"240\" /></a></p>

<p><a href=\"http://list.xmodulo.com/gnu-emacs.html\" rel=\"nofollow\">GNU Emacs</a></p>") (author nil (name nil "xmodulo") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/"))) (entry nil (title ((type . "html") (lang . "en-us")) "Yann Hodique: Rant: Obfuscation in Emacs") (link ((href . "http://yann.hodique.info/blog/rant-obfuscation-in-emacs/"))) (id nil "http://yann.hodique.info/blog/rant-obfuscation-in-emacs/") (updated nil "2015-12-26T16:24:31+00:00") (content ((type . "html")) "<p>There’s been a bit of a discussion going on
<a href=\"http://thread.gmane.org/gmane.emacs.devel/196537\">here</a> regarding some very
weird beast in the Emacs code base. I find it quite interesting, cause it’s yet
another instance that reveals the diversity of points of view and priorities in
FOSS. And like a lot of people, I have a strong opinion, so I’ll rant a bit
about it :)</p>

<p>To give some context:</p>

<ul>
<li>by default, Emacs provides at startup information on Emacs and the GNU
project (which is definitely fine, maybe useful even). In this case,
a message saying “For information about GNU Emacs and the GNU system, type
C-h C-a.”</li>
<li>Emacs being pretty much all about customization, it provides ways to disable
that (again perfectly reasonable, after over 18 years spent in Emacs, I don’t
need the slightest reminder of what it is)</li>
<li>Emacs being a flagship project of GNU, it goes out of its way to make sure
that if that information is hidden, that’s only because <em>you</em> didn’t want it:
you, not your administrator (do real people still have those?), and not the
random guy you copied your Emacs configuration from (gosh, I miss the time
when <a href=\"http://dotemacs.de\">http://dotemacs.de</a> was a reference)</li>
</ul>

<p>That’s this last part that’s tricky. The code that does that follows, in all
it’s “splendor”. If you don’t puke when reading this, chances are you don’t
know Emacs lisp very well, or you have a very strong political agenda
(apparently RMS introduced that code back in 1994). Neither of those apply to
me, so I’ll be back in a minute.</p>

<div class=\"highlight\" style=\"background: #272822;\"><pre style=\"line-height: 125%;\"><span style=\"color: #f8f8f2;\">(defun</span> <span style=\"color: #f8f8f2;\">display-startup-echo-area-message</span> <span style=\"color: #f8f8f2;\">()</span>
  <span style=\"color: #f8f8f2;\">(</span><span style=\"color: #66d9ef;\">let</span> <span style=\"color: #f8f8f2;\">((resize-mini-windows</span> <span style=\"color: #66d9ef;\">t</span><span style=\"color: #f8f8f2;\">))</span>
    <span style=\"color: #f8f8f2;\">(or</span> <span style=\"color: #f8f8f2;\">noninteractive</span>                  <span style=\"color: #75715e;\">;(input-pending-p) init-file-had-error</span>
        <span style=\"color: #75715e;\">;; t if the init file says to inhibit the echo area startup message.</span>
        <span style=\"color: #f8f8f2;\">(and</span> <span style=\"color: #f8f8f2;\">inhibit-startup-echo-area-message</span>
             <span style=\"color: #f8f8f2;\">user-init-file</span>
             <span style=\"color: #f8f8f2;\">(or</span> <span style=\"color: #f8f8f2;\">(and</span> <span style=\"color: #f8f8f2;\">(get</span> <span style=\"color: #e6db74;\">'inhibit-startup-echo-area-message</span> <span style=\"color: #e6db74;\">'saved-value</span><span style=\"color: #f8f8f2;\">)</span>
                      <span style=\"color: #f8f8f2;\">(equal</span> <span style=\"color: #f8f8f2;\">inhibit-startup-echo-area-message</span>
                             <span style=\"color: #f8f8f2;\">(</span><span style=\"color: #66d9ef;\">if</span> <span style=\"color: #f8f8f2;\">(equal</span> <span style=\"color: #f8f8f2;\">init-file-user</span> <span style=\"color: #e6db74;\">\"\"</span><span style=\"color: #f8f8f2;\">)</span>
                                 <span style=\"color: #f8f8f2;\">(user-login-name)</span>
                               <span style=\"color: #f8f8f2;\">init-file-user)))</span>
                 <span style=\"color: #75715e;\">;; Wasn't set with custom; see if .emacs has a setq.</span>
                 <span style=\"color: #f8f8f2;\">(condition-case</span> <span style=\"color: #66d9ef;\">nil</span>
                     <span style=\"color: #f8f8f2;\">(with-temp-buffer</span>
                       <span style=\"color: #f8f8f2;\">(insert-file-contents</span> <span style=\"color: #f8f8f2;\">user-init-file)</span>
                       <span style=\"color: #f8f8f2;\">(re-search-forward</span>
                        <span style=\"color: #f8f8f2;\">(concat</span>
                         <span style=\"color: #e6db74;\">\"([ \\t\\n]*setq[ \\t\\n]+\"</span>
                         <span style=\"color: #e6db74;\">\"inhibit-startup-echo-area-message[ \\t\\n]+\"</span>
                         <span style=\"color: #f8f8f2;\">(regexp-quote</span>
                          <span style=\"color: #f8f8f2;\">(prin1-to-string</span>
                           <span style=\"color: #f8f8f2;\">(</span><span style=\"color: #66d9ef;\">if</span> <span style=\"color: #f8f8f2;\">(equal</span> <span style=\"color: #f8f8f2;\">init-file-user</span> <span style=\"color: #e6db74;\">\"\"</span><span style=\"color: #f8f8f2;\">)</span>
                               <span style=\"color: #f8f8f2;\">(user-login-name)</span>
                             <span style=\"color: #f8f8f2;\">init-file-user)))</span>
                         <span style=\"color: #e6db74;\">\"[ \\t\\n]*)\"</span><span style=\"color: #f8f8f2;\">)</span>
                        <span style=\"color: #66d9ef;\">nil</span> <span style=\"color: #66d9ef;\">t</span><span style=\"color: #f8f8f2;\">))</span>
                   <span style=\"color: #f8f8f2;\">(error</span> <span style=\"color: #66d9ef;\">nil</span><span style=\"color: #f8f8f2;\">))))</span>
        <span style=\"color: #f8f8f2;\">(message</span> <span style=\"color: #e6db74;\">\"%s\"</span> <span style=\"color: #f8f8f2;\">(startup-echo-area-message)))))</span>
</pre></div>


<p>So, basically what it does (or tries to do) is to control tightly the only ways
to disable that message: either via <code>customize</code> or by putting in your init file
(<code>.emacs</code>, or <code>.emacs.d/init.el</code>) and nowhere else a particular expression, as
explained in the documentation of <code>inhibit-startup-echo-area-message</code>. In both
case, your current user name will be used.</p>

<pre><code>Non-nil inhibits the initial startup echo area message.
Setting this variable takes effect
only if you do it with the customization buffer
or if your init file contains a line of this form:
 (setq inhibit-startup-echo-area-message \"YOUR-USER-NAME\")
If your init file is byte-compiled, use the following form
instead:
 (eval '(setq inhibit-startup-echo-area-message \"YOUR-USER-NAME\"))
Thus, someone else using a copy of your init file will see the
startup message unless he personally acts to inhibit it.
</code></pre>

<p>Now where people like me start having a problem with attempts like that is that
Emacs is pretty much trying to tell me what I should be doing with my
configuration:</p>

<ul>
<li>how I organize it. My init file is serious stuff, I don’t want to have that
silly form in there, instead I want it buried in an indirectly-loaded file
(along with many other very minor tweaks) that I can pretty much forget about</li>
<li>how I write it. Seriously? even <code>(set 'inhibit-startup-echo-area-message
\"YOUR-USER-NAME\")</code> doesn’t work. Let me emphasize this: source code that’s
supposedly <em>strictly equivalent</em>, or would even compile to the <em>exact same
bytecode</em> will behave differently! That’s beyond madness in my book: we’ve
just intentionally made the <em>implementation</em> of Emacs lisp engine part of the
<em>semantics</em> of Emacs lisp programs…</li>
<li>how I replicate it. Yes I have multiple user names depending on the machine,
no I don’t want to modify my configuration for each case, or generate it just
for that</li>
<li>how I distribute it. I like to share my config publicly, and I dislike having
stuff in there that’s relevant to me only (it’s bad enough that I probably
have those anyway, I shouldn’t be forced to)</li>
</ul>

<p>To add insult to injury, the code that’s attempting that is downright
disgusting, and of course flawed (everybody realizes this, but attempting to
constrain the user in Emacs is just doomed to fail), so it’s pretty much
useless. Therefore, in exchange for hypothetically protecting users against
massively incompetent misguided ill-intentioned people (I’m personally more
worried about the competent ones, but that’s probably just me), we hurt the
aesthetic sense of any developer who stumbles upon this monstrosity.  I guess
that’s where Free Software and Open Source start diverging… but I personally
don’t like trade-offs that result in shitty code.</p>

<p>Anyway, I’m still gonna use my right to publish free code that sidesteps that
abomination once and for all. I was briefly tempted to post it as a followup on
the <code>emacs-dev</code> mailing list, but that would be bad form (and pretty
useless). I’d rather let Google do their job. (bonus: disable the startup
screen as well). Oh yeah, I forgot to mention: I’d be <em>very</em> curious to know of
a single first-time user who will actually use <code>C-h C-a</code> to get information
about Emacs or GNU instead of asking Google these days. Imagining that just
because something is printed on screen people are actually gonna read it, or
act on it, is just wishful thinking. Just sayin’</p>

<p></p><div class=\"highlight\" style=\"background: #272822;\"><pre style=\"line-height: 125%;\"><span style=\"color: #75715e;\">;; Yes, it's disgusting, but it's a portable way to disable that silly</span>
<span style=\"color: #75715e;\">;; message</span>
<span style=\"color: #f8f8f2;\">(put</span> <span style=\"color: #e6db74;\">'inhibit-startup-echo-area-message</span> <span style=\"color: #e6db74;\">'saved-value</span>
     <span style=\"color: #f8f8f2;\">(</span><span style=\"color: #66d9ef;\">setq</span> <span style=\"color: #f8f8f2;\">inhibit-startup-echo-area-message</span> <span style=\"color: #f8f8f2;\">(user-login-name)))</span>

<span style=\"color: #75715e;\">;; and now for the startup screen</span>
<span style=\"color: #f8f8f2;\">(</span><span style=\"color: #66d9ef;\">setq</span> <span style=\"color: #f8f8f2;\">inhibit-startup-screen</span> <span style=\"color: #66d9ef;\">t</span><span style=\"color: #f8f8f2;\">)</span>
</pre></div>
<p></p>

<p>There you go, you can put that somewhere in a dark corner of your Emacs
configuration and forget about it: it’s portable, it just works, and it doesn’t
open your init file a second time just for kicks (therefore makes the part
that’s messing with the semantics of the language dead code). The second line
is more or less what I’d actually want that code to be. The first line is just
about “exploiting” a silly assumption in the “protection” code.</p>

<p>Note that another popular way of getting rid of that pesky message is the much
more brutal solution provided by the
<a href=\"http://www.emacswiki.org/emacs/EmacsNiftyTricks#toc8\">Emacs Wiki</a></p>

<p></p><div class=\"highlight\" style=\"background: #272822;\"><pre style=\"line-height: 125%;\"><span style=\"color: #f8f8f2;\">(eval-after-load</span> <span style=\"color: #e6db74;\">\"startup\"</span> <span style=\"color: #f92672;\">'</span><span style=\"color: #f8f8f2;\">(fset</span> <span style=\"color: #e6db74;\">'display-startup-echo-area-message</span> <span style=\"color: #e6db74;\">'ignore</span><span style=\"color: #f8f8f2;\">)))</span>
</pre></div>
<p></p>

<p>I don’t like it too much though, cause unlike
<code>inhibit-startup-echo-area-message</code> which is part of the public interface of
Emacs, this function might change name without warning (although quite frankly
it’s pretty unlikely). Well, mostly a matter of taste I guess.</p>

<p>Oh by the way, if you’re an evil site administrator who wants to deny their
users the freedom to access information about Emacs, you can even put this in
<code>after-init-hook</code> (mostly for <code>inhibit-startup-screen</code> actually, reason left as
an exercise) and you’ll be fine. There, I just enabled evil behavior, I guess
I should feel bad about it.</p>

<p>Seriously, let’s be clear: if your users don’t <em>know</em> they’re in Emacs, or what
it is, or where to find the documentation, they’re <em>never</em> gonna get the hang
of it (it’s not like it’s a particularly intuitive editor). So if you really
want to prevent them from using Emacs, just don’t install it already.</p>

<p>All in all, I find the justification for that piece of code to be extremely
weak and unsubstantiated. Feels more like basic paranoia to me.</p>

<p>I sincerely hope that nobody will “iron” the stupid piece of code that
generates the need for this stupid hack… it’s hopeless anyway.
Although the version control history shows that quite a few people have been
“improving” it over the years… <em>sigh</em></p>") (author nil (name nil "Yann Hodique") (uri nil "http://yann.hodique.info/blog/")) (source nil (title ((type . "html")) "Blog -- Yann Hodique") (subtitle ((type . "html")) "Recent content in Blog -- Yann Hodique") (link ((rel . "self") (href . "http://yann.hodique.info/blog/index.xml"))) (id nil "http://yann.hodique.info/blog/"))) (entry nil (title ((type . "html")) "Aaron Hawley: Pivotal CGI film history") (link ((href . "http://aaronhawley.livejournal.com/32001.html"))) (id nil "urn:lj:livejournal.com:atom1:aaronhawley:32001") (updated nil "2015-12-25T02:48:52+00:00") (content ((type . "html")) "Twenty years ago, in 1995, the first full-length digital movie, Toy Story, was released to theatres.  In my opinion, here are some noteworthy uses of computer-generated imagery (CGI) in film for both technical and artistic reasons:<br /><br />Westworld (1973) is the first film to use digital image processing to pixelate conventional motion pictures to show the point-of-view of the android gun-slinging character played by Yul Brynner.<br /><br />Futureworld (1976) was the first movie to use computer generated 3D images. Animated models of the human hand and face were displayed on computer monitors to the actors who were playing scientists, including a polygon rendering of a topographic scan of actor Peter Fonda's face.<br /><br />The original Star Wars (1977) rendered a hologram of the attack on the Death Star for a Rebel Alliance pre-briefing. The X-wing fighters also included vector displays in the cockpit.<br /><br />Looker (1981) has the first realistic 3D computer image of a character with shading during a scene in the film during a body scanning of actress Susan Dey.<br /><br />Star Trek II: The Wrath of Khan (1982) has a sequence of space and an earth-like terrain built by Industrial Light &amp; Magic (ILM) and using fractals.<br /><br />Tron (1982) contained long sequences of 3D computer image scenes including the famous \"light cycle race\".<br /><br />The hologram briefing of the attack on Death Star II, \"the Endoor moon sequence\", is built by ILM for Lucasfilm's Return of the Jedi (1983).<br /><br />Ghostbusters (1984) includes various CGI enhanced scenes including, the short animated scene of a cloud covered \"Zuul pyramid\" inside the refrigerator of Sigourney Weaver's character.<br /><br />The Last Starfighter (1984) contained the first use of 3D animation to present objects in long fight sequences between starships in space.<br /><br />The film 2010: The Year We Make Contact (1984) included computer-generated cloud animation of Jupiter and the animation sequence of \"monoliths\" which eventually converts the planet to a star.<br /><br />The Adventures of André and Wally B. (1984) was a digital short by LucasArts that contains the first use of complex 3D backgrounds, motion-blur and lighting.<br /><br />Young Sherlock Homes (1985) featured the first animated realistic character, the \"glass knight\", that was rendered to the live action shots alongside the actors.<br /><br />Dire Strait's \"Money for Nothing\" music video (1985) had computer animated 3D human characters and was produced by people who would go on to form Rainmaker Entertainment, Inc. (formerly Mainframe Entertainment).<br /><br />Flight of the Navigator (1986) featured a computer generated starship inserted into the live-action shot that could reflect the surrounding environment.<br /><br />The Abysss (1989) featured a non-terrestrial intelligence (NTI) that was a column-shaped, water-like creature that interacted with the actors on screen.<br /><br />Indiana Jones and the Last Crusade (1989) featured computer generated scene elements.<br /><br />Dick Tracy (1990) is the first movie to be recorded with digital audio.<br /><br />Terminator 2 (1991) has sequences with computer-generated characters that mimic human motion, including one with the T-1000 that is capable of becoming liquid metal.<br /><br />Jurassic Park (1993) contained computer-generated imagery of dinosaurs, with some motion inputs sourced from physical actors, and stunt double face-replacement.<br /><br />Forrest Gump (1994) uses CG to integrate characters with archival footage, renders an actor as a leg amputee using blue-screen technology, and composes digital explosions with live actors during a Vietnam battle scene.<br /><br />Toy Story (1995) is the first full-length CGI film starring animated anthropomorphic toys.<br /><br />Star Wars re-release (1997) introduces digital characters and effects.<br /><br />The Matrix (1999) features digitally enhanced special effects and introduces a digitally composed slow-motion tracking shot, or \"bullet time\".<br /><br />The Scorpion King (2002) would use gratuitous amounts of poorly executed computer-generated imagery in the final fight scene that was missing any semblance of artistic realism, thus liberating the film industry to use CGI without restraint.<br /><br />References:<br /><br /><a href=\"http://en.wikipedia.org/wiki/Timeline_of_computer_animation_in_film_and_television\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Timeline_of_computer_animation_in_film_and_television</a><br /><br /><a href=\"http://www.cs.cmu.edu/~ph/nyit/masson/history.htm\" rel=\"nofollow\">http://www.cs.cmu.edu/~ph/nyit/masson/history.htm</a>") (author nil (name nil "Aaron S. Hawley") (uri nil "http://aaronhawley.livejournal.com/")) (source nil (title ((type . "html")) "refusal computing") (subtitle ((type . "html")) "Aaron S. Hawley") (link ((rel . "self") (href . "http://aaronhawley.livejournal.com/data/atom"))) (id nil "urn:lj:livejournal.com:atom1:aaronhawley"))) (entry nil (title ((type . "html")) "Mathias Dahl: Evil Mode hack for a colorful mode line") (link ((href . "http://muublog.blogspot.com/2015/12/evil-mode-hack-for-colorful-mode-line.html"))) (id nil "tag:blogger.com,1999:blog-9910079.post-3690786608339147232") (updated nil "2015-12-22T17:14:15+00:00") (content ((type . "html")) "<b>Intro</b><br /><br />After trying out Spacemacs for about a week (and failing - too much old configuration to \"convert\") I am trying out Evil Mode by itself. It goes forward, slowly, step by step.  <br /><br />One thing I have been a bit annoyed with was how the different states are visualized. Being a Evil/Vim newbie I want to see, clearly, in which state/mode I am in.  <br /><br />Today I decided to do something about it and here is how my Emacs looks now:  <br /><br /><b>Normal state</b><br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/-H0KzQZ44RvE/VnmDet8r2UI/AAAAAAABHGw/qaUQNwXJD04/s1600/2015-12-22%2B18_06_17-Program%2BManager.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"41\" src=\"http://2.bp.blogspot.com/-H0KzQZ44RvE/VnmDet8r2UI/AAAAAAABHGw/qaUQNwXJD04/s400/2015-12-22%2B18_06_17-Program%2BManager.png\" width=\"400\" /></a></div><br /><b>Insert state</b><br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/-KSgSChHlcww/VnmD6PgZaII/AAAAAAABHG4/KOnA5w4tZlk/s1600/2015-12-22%2B18_06_34-Program%2BManager.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://1.bp.blogspot.com/-KSgSChHlcww/VnmD6PgZaII/AAAAAAABHG4/KOnA5w4tZlk/s400/2015-12-22%2B18_06_34-Program%2BManager.png\" /></a></div><b><br /></b><b>Emacs state</b><br /><b><br /></b><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/-Cy16u4ZzTwg/VnmEB7LkiwI/AAAAAAABHHA/lM44bDKof6A/s1600/2015-12-22%2B18_07_03-Program%2BManager.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"42\" src=\"http://2.bp.blogspot.com/-Cy16u4ZzTwg/VnmEB7LkiwI/AAAAAAABHHA/lM44bDKof6A/s400/2015-12-22%2B18_07_03-Program%2BManager.png\" width=\"400\" /></a></div><b><br /></b><b><br /></b><b>How it was done</b><br /><br />I could not find any good entry points for customizing the mode line with respect to the Evil Mode states, but I found the function (evil-generate-mode-line-tag) that generates the part of the mode line that comes from Evil Mode. I simply made a copy of it and changed it to add also a face attribute to the mode line, and let the face be different depending on the mode.  <br /><br /><b>The code</b><br /><b><br /></b>Copy the code below and save it in a file called my-evil-hacks.el.<br />  <br /> After this you need to make sure to load this file after you have loaded Evil mode for the first time. One way to achieve this is to put the following snippet in your .emacs or init.el file:<br /> <pre>(with-eval-after-load \"evil\"<br />  (load \"my-evil-hacks\"))<br /></pre> Enjoy!") (author nil (name nil "Mathias Dahl") (email nil "noreply@blogger.com") (uri nil "http://muublog.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "MuuBlog") (subtitle ((type . "html")) "MuuBlog - All things Muu") (link ((rel . "self") (href . "http://www.blogger.com/feeds/9910079/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-9910079"))) (entry nil (title ((type . "html") (lang . "en")) "punchagan: Clock in and get-shit-done") (link ((href . "https://punchagan.muse-amuse.in/posts/clock-in-and-get-shit-done.html"))) (id nil "https://punchagan.muse-amuse.in/posts/clock-in-and-get-shit-done.html") (updated nil "2015-12-22T14:17:04+00:00") (content ((type . "html")) "<p>
I had <a href=\"https://punchagan.muse-amuse.in/posts/simple-org-clock-and-gnomepidgin-integration.html\">setup</a> a couple of hooks about an year ago that turn off all notifications
while I'm clocking in. But, I find myself switching to the browser and jumping
to twitter, out of habit.  I've tried <a href=\"https://github.com/leftnode/get-shit-done\">get-shit-done</a> in the past to help myself
break this habit. But enabling get-shit-done manually is step that quickly
became a non-habit.
</p>

<p>
So, I hooked up get-shit-done into an <code>org-clock-in-hook</code>.  The snippet below
is what I added into a function that is added to this hook.
</p>

<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">with-temp-buffer</span>
  <span class=\"p\">(</span><span class=\"nv\">cd</span> <span class=\"s\">\"/sudo::/\"</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">shell-command</span> <span class=\"s\">\"HOME=/home/punchagan get-shit-done work\"</span><span class=\"p\">))</span>
</pre></div>

<p>
<code>get-shit-done</code> needs to be run as <code>root</code>, since it does things like modifying
<code>/etc/hosts</code> and restarting networking.  Just calling <code>get-shit-done</code> as a
shell command fails with the error <code>sudo: no tty present and no askpass program
specified</code>.  I found a couple of ways to fix this. The snippet above
piggy-backs on tramp to allow for a way to enter the password for <code>sudo</code> to
use. This also means that I don't need to enter the password, as long as the
tramp connection is alive.
</p>

<p>
For someone worried about having such an easy way of running something as
<code>root</code>, using something like <code>gnome-ssh-askpass</code> as the askpass program might
work better.
</p>

<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">shell-command</span> <span class=\"s\">\"SUDO_ASKPASS=\\\"/usr/lib/openssh/gnome-ssh-askpass\\\" get-shit-done work\"</span><span class=\"p\">)</span>
</pre></div>") (author nil (name nil "punchagan") (uri nil "https://punchagan.muse-amuse.in/")) (source nil (title ((type . "html")) "Noetic Nought (emacs)") (link ((rel . "self") (href . "https://punchagan.muse-amuse.in/tags/emacs.xml"))) (id nil "https://punchagan.muse-amuse.in/"))) (entry nil (title ((type . "html") (lang . "en")) "Chen Bin (redguardtoo): Use Ivy-mode to tweak workgroups2") (link ((href . "http://blog.binchen.org/posts/use-ivy-mode-to-tweak-workgroups2.html"))) (id nil "http://blog.binchen.org/posts/use-ivy-mode-to-tweak-workgroups2.html") (updated nil "2015-12-22T04:42:03+00:00") (content ((type . "html")) "<div><p><a href=\"https://github.com/pashinin/workgroups2\">Workgroups2</a> will load previous windows layout by default. That's handy for most developers.
</p>

<p>
But as a freelancer I am always assigned the low spec machine which takes too much time to load the old layout.
</p>

<p>
So I use <a href=\"https://github.com/abo-abo/swiper\">Ivy-mode</a> to create a light weight command `my-wg-switch-workgroup`. 
</p>

<p>
Here is code:
</p>

<pre><code class=\"lang-lisp\">(require 'ivy)

(defun my-wg-switch-workgroup ()
  (interactive)
  (let (group-names selected-group)
    (unless (featurep 'workgroups2)
      (require 'workgroups2))
    (setq group-names
          (mapcar (lambda (group)
                    ;; re-shape list for the ivy-read
                    (cons (wg-workgroup-name group) group))
                  (wg-session-workgroup-list (read (f-read-text (file-truename wg-session-file))))))
    (ivy-read \"work groups\" group-names
              :action (lambda (group)
                        (wg-find-session-file wg-default-session-file)
                        (wg-switch-to-workgroup group)))))

(eval-after-load 'workgroups2
  '(progn
     ;; save the session file in real time
     (defadvice wg-create-workgroup (after wg-create-workgroup-hack activate)
       (wg-save-session t))
     (defadvice wg-reset (after wg-reset-hack activate)
       (wg-save-session t))
     ;; I'm fine to to override the original workgroup
     (defadvice wg-unique-workgroup-name-p (around wg-unique-workgroup-name-p-hack activate)
       (setq ad-return-value t))))
</code></pre></div>") (author nil (name nil "Chen Bin") (uri nil "http://blog.binchen.org/")) (source nil (title ((type . "html")) "Chen's blog (emacs)") (link ((rel . "self") (href . "http://blog.binchen.org/categories/emacs.xml"))) (id nil "http://blog.binchen.org/"))) (entry nil (title ((type . "html") (lang . "en-US")) "sachachua: 2015-12-21 Emacs Hangout") (link ((href . "http://sachachua.com/blog/2015/12/2015-12-21-emacs-hangout/"))) (id nil "http://sachachua.com/blog/?p=28524") (updated nil "2015-12-22T03:51:00+00:00") (content ((type . "html") (lang . "en-US")) "<div class=\"update\">Update 2015-12-25: Added link about multiple e-mail accounts in Gnus</div>
<p>Embarrassing technical issues, but fortunately, people are awesome and patient! =) Skip to about 0:07 or 0:12 or something if you want to get to the conversation part.</p>
<p></p>
<p>Text chat:</p>
<ul class=\"org-ul\">
<li>me: <a href=\"http://users-phys.au.dk/harder/keywiz.el\">http://users-phys.au.dk/harder/keywiz.el</a></li>
<li>me: exercism.io</li>
<li>Howard Abrams: Here is my notes: <a href=\"https://github.com/howardabrams/pdx-emacs-hackers\">https://github.com/howardabrams/pdx-emacs-hackers</a> Here was our first workshop: <a href=\"https://github.com/howardabrams/pdx-emacs-hackers/blob/master/workshops/keyboard-macros.org\">https://github.com/howardabrams/pdx-emacs-hackers/blob/master/workshops/keyboard-macros.org</a></li>
</ul>
<p>Also, codingquark’s link: <a href=\"http://codingquark.com/multiple-email-accounts-in-gnus/\">http://codingquark.com/multiple-email-accounts-in-gnus/</a></p>
<p><a href=\"https://plus.google.com/events/cf41ggabbf7hjohbkl8acl56gds\">Event page</a></p>
<p>Timestamps very fuzzy because of stress =)</p>
<ul class=\"org-ul\">
<li>Awkwardness by myself (turns out I had to change a setting to let other people join)</li>
<li><a href=\"http://youtu.be/SXkb7ZxLmsA?t=0h06m0s\">0:07</a> Okay, other people joining, whew! warning: echo</li>
<li><a href=\"http://youtu.be/SXkb7ZxLmsA?t=0h12m0s\">0:12</a> Gnus</li>
<li><a href=\"http://youtu.be/SXkb7ZxLmsA?t=0h17m0s\">0:17</a> Meeting other Emacs geeks</li>
<li><a href=\"http://youtu.be/SXkb7ZxLmsA?t=0h25m0s\">0:25</a> Mail splitting</li>
<li><a href=\"http://youtu.be/SXkb7ZxLmsA?t=0h30m0s\">0:30</a> Asana to Org</li>
<li><a href=\"http://youtu.be/SXkb7ZxLmsA?t=0h33m0s\">0:33</a> Literate programming</li>
<li><a href=\"http://youtu.be/SXkb7ZxLmsA?t=0h36m0s\">0:36</a> Org Mode tables and Emacs Lisp functions</li>
<li><a href=\"http://youtu.be/SXkb7ZxLmsA?t=0h45m0s\">0:45</a> edebug</li>
<li><a href=\"http://youtu.be/SXkb7ZxLmsA?t=0h48m0s\">0:48</a> GnuPG</li>
<li><a href=\"http://youtu.be/SXkb7ZxLmsA?t=0h52m0s\">0:52</a> macros</li>
<li><a href=\"http://youtu.be/SXkb7ZxLmsA?t=1h00m0s\">1:00</a> smartparens / paredit</li>
<li><a href=\"http://youtu.be/SXkb7ZxLmsA?t=1h06m0s\">1:06</a> flashcards</li>
<li><a href=\"http://youtu.be/SXkb7ZxLmsA?t=1h18m0s\">1:18</a> narrow</li>
<li><a href=\"http://youtu.be/SXkb7ZxLmsA?t=1h20m0s\">1:20</a> switching buffers</li>
</ul>
<p>The audio is offset by about 7 minutes from the timestamps above, so you don’t have to listen to my panicking. =) <a href=\"https://archive.org/download/20151221EmacsHangout/2015-12-21-Emacs-Hangout-edited.mp3\">MP3</a>, <a href=\"https://archive.org/download/20151221EmacsHangout/2015-12-21-Emacs-Hangout-edited.ogg\">OGG</a></p>
<p>See <a href=\"http://sachachua.com/blog/tag/emacs-hangout\">http://sachachua.com/blog/tag/emacs-hangout</a> for more info, including where to find upcoming hangouts.</p>
<p>The post <a href=\"http://sachachua.com/blog/2015/12/2015-12-21-emacs-hangout/\" rel=\"nofollow\">2015-12-21 Emacs Hangout</a> appeared first on <a href=\"http://sachachua.com/blog\" rel=\"nofollow\">sacha chua :: living an awesome life</a>.</p>") (author nil (name nil "Sacha Chua") (uri nil "http://sachachua.com/blog/category/geek/emacs/")) (source nil (title ((type . "html")) "Emacs - Sacha Chua") (subtitle ((type . "html")) "learn - share - scale") (link ((rel . "self") (href . "http://feeds.feedburner.com/pimpmyemacs"))) (id nil "http://sachachua.com/blog/category/geek/emacs/"))) (entry nil (title ((type . "html")) "Endless Parentheses: Faster pop-to-mark command") (link ((href . "http://endlessparentheses.com/faster-pop-to-mark-command.html?source=rss"))) (id nil "http://endlessparentheses.com/faster-pop-to-mark-command") (updated nil "2015-12-21T00:00:00+00:00") (content ((type . "html")) "<p>
Today’s tip is one I <a href=\"https://github.com/magnars/expand-region.el/issues/159#issuecomment-83538021\">learned from Magnar</a>. A lot of Emacsers don’t know this, but
most commands that move point large distances (like <code>isearch</code> or
<code>end-of-buffer</code>) push the old position to the <a href=\"http://doc.endlessparentheses.com/Var/mark-ring\"><code>mark-ring</code></a>. The advantage is that
you can easily jump back through this history of positions by hitting <kbd>C-u
C-SPC</kbd>.
</p>

<p>
This is a hugely convenient take-me-back-to-that-last-place command. The only
problem is that sometimes the ring gets filled with repeated entries, so you
find yourself hitting <kbd>C-u C-SPC</kbd> 2 to 4 times in the same place. Of course,
this is Emacs, so all it takes to solve our problem is one simple advice.
</p>
<div class=\"highlight\"><pre><code class=\"language-cl\"><span class=\"c1\">;; When popping the mark, continue popping until the cursor</span>
<span class=\"c1\">;; actually moves</span>
<span class=\"p\">(</span><span class=\"nv\">defadvice</span> <span class=\"nv\">pop-to-mark-command</span> <span class=\"p\">(</span><span class=\"nv\">around</span> <span class=\"nv\">ensure-new-position</span> <span class=\"nv\">activate</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">p</span> <span class=\"p\">(</span><span class=\"nv\">point</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"nb\">dotimes</span> <span class=\"p\">(</span><span class=\"nv\">i</span> <span class=\"mi\">10</span><span class=\"p\">)</span>
      <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"nv\">p</span> <span class=\"p\">(</span><span class=\"nv\">point</span><span class=\"p\">))</span> <span class=\"nv\">ad-do-it</span><span class=\"p\">))))</span></code></pre></div>

<p>
Finally, a simple <code>setq</code> ensures we can quickly pop the mark several times by
typing <kbd>C-u C-SPC C-SPC</kbd>, instead of having to type <kbd>C-u C-SPC C-u C-SPC</kbd>.
</p>
<div class=\"highlight\"><pre><code class=\"language-cl\"><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">set-mark-command-repeat-pop</span> <span class=\"no\">t</span><span class=\"p\">)</span></code></pre></div>

   <p><a href=\"http://endlessparentheses.com/faster-pop-to-mark-command.html?source=rss#disqus_thread\">Comment on this.</a></p>") (author nil (name nil "Artur Malabarba") (uri nil "http://endlessparentheses.com/?source=rss")) (source nil (title ((type . "html")) "Endless Parentheses") (link ((rel . "self") (href . "http://endlessparentheses.com/atom.xml"))) (id nil "http://endlessparentheses.com"))) (entry nil (title ((type . "html") (lang . "en")) "punchagan: Elfeed hook to fetch full content") (link ((href . "https://punchagan.muse-amuse.in/posts/elfeed-hook-to-fetch-full-content.html"))) (id nil "https://punchagan.muse-amuse.in/posts/elfeed-hook-to-fetch-full-content.html") (updated nil "2015-12-19T08:12:29+00:00") (content ((type . "html")) "<p>
I have started to use <a href=\"http://pinboard.in\">Pinboard</a>'s <code>unread</code> tag as my to-read list.  It has a
bookmark-let that works pretty well for adding stuff into my \"to-read\" list.  I
then catch up on this list using <code>elfeed</code> and subscribing to the unread items'
RSS feed.  The work-flow is pretty nice for adding stuff into the list, and
finding items on the list. But, when it comes to the actual reading part, the
entries in the feed don't have the actual content I want to read, and I end up
opening the links in a browser.
</p>

<p>
Inspired by a <a href=\"https://github.com/sursh/blaggregator/pull/80#issuecomment-165849126\">comment from FiloSottile</a>, I realized it should be pretty easy to
setup a hook that fetches the actual content to make my reading work-flow
smoother. I wrote a <a href=\"https://github.com/punchagan/dot-files/blob/master/bin/get_article.py\">small script</a>, using <a href=\"https://github.com/buriy/python-readability\">python-readability</a>, to fetch the page
content, given a URL. This script is then hooked onto <code>elfeed-new-entry-hook</code>,
to fetch content of for new entries as they are fetched.  All the old entries
can be easily fixed with a single call to <code>elfeed-apply-hooks-now</code>.
</p>

<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">pc/get-url-content</span> <span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">)</span>
  <span class=\"s\">\"Fetches the content for a url.\"</span>
  <span class=\"p\">(</span><span class=\"nv\">shell-command-to-string</span> <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">\"~/bin/get_article.py %s\"</span> <span class=\"nv\">url</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">pc/get-entry-content</span> <span class=\"p\">(</span><span class=\"nv\">entry</span><span class=\"p\">)</span>
  <span class=\"s\">\"Fetches content for pinboard entries that are not tweets.\"</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span>
   <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">entry</span> <span class=\"nv\">elfeed-show-entry</span><span class=\"p\">))</span>
     <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"nv\">entry</span><span class=\"p\">)))</span>

  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">url</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-entry-link</span> <span class=\"nv\">entry</span><span class=\"p\">))</span>
	<span class=\"p\">(</span><span class=\"nv\">feed-id</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-deref</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-entry-feed-id</span> <span class=\"nv\">entry</span><span class=\"p\">)))</span>
	<span class=\"p\">(</span><span class=\"nv\">content</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-deref</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-entry-content</span> <span class=\"nv\">entry</span><span class=\"p\">))))</span>
    <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"p\">(</span><span class=\"nv\">s-matches?</span> <span class=\"s\">\"feeds.pinboard.in/\"</span> <span class=\"nv\">feed-id</span><span class=\"p\">)</span>
	       <span class=\"p\">(</span><span class=\"nb\">not</span> <span class=\"p\">(</span><span class=\"nv\">s-matches?</span> <span class=\"s\">\"twitter.com/\\\\|pdf$\\\\|png$\\\\|jpg$\"</span> <span class=\"nv\">url</span><span class=\"p\">))</span>
	       <span class=\"p\">(</span><span class=\"nb\">string-equal</span> <span class=\"s\">\"\"</span> <span class=\"nv\">content</span><span class=\"p\">))</span>
      <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">content</span> <span class=\"p\">(</span><span class=\"nv\">pc/get-url-content</span> <span class=\"nv\">url</span><span class=\"p\">))</span>
      <span class=\"p\">(</span><span class=\"nb\">setf</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-entry-content</span> <span class=\"nv\">entry</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-ref</span> <span class=\"nv\">content</span><span class=\"p\">)))))</span>

<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">'elfeed-new-entry-hook</span> <span class=\"nf\">#'</span><span class=\"nv\">pc/get-entry-content</span><span class=\"p\">)</span>
</pre></div>") (author nil (name nil "punchagan") (uri nil "https://punchagan.muse-amuse.in/")) (source nil (title ((type . "html")) "Noetic Nought (emacs)") (link ((rel . "self") (href . "https://punchagan.muse-amuse.in/tags/emacs.xml"))) (id nil "https://punchagan.muse-amuse.in/"))) (entry nil (title ((type . "html")) "Ryan Rix: Matrix and IndieWeb: A match made in heaven? 👼") (link ((href . "http://whatthefuck.computer/blog/2015/12/19/matrix-and-indieweb"))) (id nil "http://whatthefuck.computer/blog/2015/12/19/matrix-and-indieweb") (updated nil "2015-12-19T00:00:00+00:00") (content ((type . "html")) "One of the core benefits of Matrix is the fact that, at the end of the day, you own any chat room you participate in. There is no central authority that can shutter a chat, if you run your own homeserver, your homeserver and the homeservers of others make sure the rooms you care about stay alive. This is an incredibly important property of any ecosystem I choose to participate in, more and more -- I simply do not trust non-caring third parties to reliably power infrastructure that I build my personal life around. I don't want to trust a Google or a Facebook to not shutter their products in a way that is inaccessible to me, I don't want to trust them to keep my conversations safe and private.") (author nil (name nil "Ryan Rix") (uri nil "http://whatthefuck.computer")) (source nil (title ((type . "html")) "Computer :(") (subtitle ((type . "html")) "/home/rrix") (link ((rel . "self") (href . "http://whatthefuck.computer/rss.xml"))) (id nil "http://whatthefuck.computer"))) (entry nil (title ((type . "html")) "emacspeak: Soundscapes On The Emacspeak Audio Desktop") (link ((href . "http://emacspeak.blogspot.com/2015/12/soundscapes-on-emacspeak-audio-desktop.html"))) (id nil "tag:blogger.com,1999:blog-20280042.post-1743443909224540427") (updated nil "2015-12-18T19:07:51+00:00") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\"><div id=\"content\"><h1 class=\"title\">Soundscapes On The Emacspeak Audio Desktop</h1><div class=\"outline-2\" id=\"outline-container-orgheadline1\"><h2 id=\"orgheadline1\"><span class=\"section-number-2\">1</span> Executive Summary</h2><div class=\"outline-text-2\" id=\"text-1\"><p>Emacspeak module <a href=\"http://tvraman.github.io/emacspeak/manual/soundscape.html\">soundscape</a> adds the ability to automatically switch<br />
<b>Soundscapes</b> based on the current buffer. A <b>Soundscape</b> can be any<br />
continuously playing stream of audio; in practice, using nature sounds<br />
that repeat softly in a pseudo-random manner appears to be<br />
effective. Soundscapes are activated based on the currently active<br />
<i>Emacs Major Mode</i> and as a consequence directly mirror the user's<br />
current activity. The present implementation uses Python package<br />
<a href=\"http://boodler.org/\">Boodler</a> to generate soundscapes.<br />
</p></div></div><br />
<div class=\"outline-2\" id=\"outline-container-orgheadline2\"><h2 id=\"orgheadline2\"><span class=\"section-number-2\">2</span> Usage</h2><div class=\"outline-text-2\" id=\"text-2\"><p>Note that package <code>soundscape.el</code> does not have any Emacspeak<br />
dependencies. See the <a href=\"http://tvraman.github.io/emacspeak/manual/soundscape\">package documentation</a> for details on installing<br />
and configuring <a href=\"http://boodler.org/\">Boodler</a>. <br />
</p><br />
<p>You can experiment with installed Boodler agents using command<br />
<code>soundscape</code> and <code>soundscape-stop</code>. You can enable and disable<br />
<i>automatic soundscapes</i> using command <code>soundscape-toggle</code>. The<br />
currently active default Soundscape theme can be inspected via command<br />
<code>soundscape-display</code> — this produces a buffer that lists the<br />
currently defined /major-mode -&gt; Soundscape mapping. <br />
</p><br />
<p>Package <code>soundscape.el</code> considers the inheritance relationship among<br />
Emacs major-modes when computing the set of <i>soundscapes</i> to<br />
activate.As an example, <span class=\"underline\">eww-mode</span> inherits from <span class=\"underline\">special-mode</span> — as<br />
a consequence, two soundscapes (<i>LightWind</i> and <i>BackgroundWaves</i>)<br />
become active when reading Web content.<br />
</p></div></div><br />
<div class=\"outline-2\" id=\"outline-container-orgheadline3\"><h2 id=\"orgheadline3\"><span class=\"section-number-2\">3</span> Default Major-Mode-&gt;Soundscape (Mood) Mapping:</h2><div class=\"outline-text-2\" id=\"text-3\"><p>Here is a table showing the mapping of major-mmodes to Soundscape<br />
moods at the time of writing. For readability, I have stripped out the<br />
<span class=\"underline\">package-name</span> for these soundscapes.<br />
</p><br />
<br />
<table border=\"2\" cellpadding=\"6\" cellspacing=\"0\" frame=\"hsides\" rules=\"groups\">

<colgroup>
<col class=\"org-left\" />

<col class=\"org-left\" />
</colgroup>
<tbody>
<tr>
<td class=\"org-left\">Soundscape (Mood)</td>
<td class=\"org-left\">List Of Major Modes</td>
</tr>

<tr>
<td class=\"org-left\">BuddhaLoop</td>
<td class=\"org-left\">fundamental</td>
</tr>

<tr>
<td class=\"org-left\">LightStorm</td>
<td class=\"org-left\">special</td>
</tr>

<tr>
<td class=\"org-left\">RainForever</td>
<td class=\"org-left\">Info help Man Custom messages-buffer</td>
</tr>

<tr>
<td class=\"org-left\">LightWind</td>
<td class=\"org-left\">comint elfeed-search</td>
</tr>

<tr>
<td class=\"org-left\">TonkSpace</td>
<td class=\"org-left\">tabulated-list</td>
</tr>

<tr>
<td class=\"org-left\">Cavern</td>
<td class=\"org-left\">prog</td>
</tr>

<tr>
<td class=\"org-left\">Drip</td>
<td class=\"org-left\">message gnus-summary gnus-article gnus-group mspools vm-presentation vm mail twittering jabber-roster jabber-chat erc</td>
</tr>

<tr>
<td class=\"org-left\">Still</td>
<td class=\"org-left\">text</td>
</tr>

<tr>
<td class=\"org-left\">Water</td>
<td class=\"org-left\">dired</td>
</tr>

<tr>
<td class=\"org-left\">Steady</td>
<td class=\"org-left\">calendar diary</td>
</tr>

<tr>
<td class=\"org-left\">BackgroundWaves</td>
<td class=\"org-left\">w3 eww</td>
</tr>
</tbody>
</table></div></div><br />
<div class=\"outline-2\" id=\"outline-container-orgheadline4\"><h2 id=\"orgheadline4\"><span class=\"section-number-2\">4</span> Soundscape Research</h2><div class=\"outline-text-2\" id=\"text-4\"><p>I implemented package <code>soundscape.el</code> to create a platform that would<br />
let me experiment with different tools that aid in<br />
concentration. After using Soundscapes for about a week, I have also<br />
found that it reduces some of the fatigue that results from having to<br />
listen to synthetic text-to-speech for extended  periods.<br />
The true value (if any) of this package will be a function of how heavily<br />
I find myself using it six months from now — as a metric, <i>complete<br />
success</i>  might mean that in mid-2016, I still  have automatic<br />
soundscapes turned on.<br />
As I type this article in Emacs <span class=\"underline\">org-mode</span>, I hear  the sound of<br />
water-drops falling softly in the background, and I take note<br />
that I have not switched tasks  for the entire time I have spent<br />
writing this article.<br />
</p><br />
<p>Other success metrics — harder to measure — might include how<br />
effective Soundscapes are in helping the user stay focused on a<br />
given activity for extended periods of time. In an ever-connected<br />
world buzzing with a constant stream of distractions ranging from<br />
incoming email and instant-messages to a flood of twitter updates,<br />
this is likely the most relevant metric.<br />
</p></div></div></div></div>") (author nil (name nil "T. V. Raman") (email nil "noreply@blogger.com") (uri nil "http://emacspeak.blogspot.com/")) (source nil (title ((type . "html")) "EMACSPEAK  The Complete Audio Desktop") (subtitle ((type . "html")) "Here is where I plan to Blog Emacspeak tricks and introduce new features as I implement them.") (link ((rel . "self") (href . "http://www.blogger.com/feeds/20280042/posts/default?alt=atom"))) (id nil "tag:blogger.com,1999:blog-20280042"))) (entry nil (title ((type . "html")) "Marcin Borkowski: Star Wars crawl in Emacs") (link ((href . "http://mbork.pl/2015-12-18_Star_Wars_crawl_in_Emacs"))) (id nil "http://mbork.pl/2015-12-18_Star_Wars_crawl_in_Emacs") (updated nil "2015-12-18T18:02:58+00:00") (content ((type . "html")) "As I mentioned a while ago, I’m not an uncritical fan of Star Wars. The franchise, however, is obviously one of my childhood memories. Therefore, even though I try not to expect too much from Episode VII, I will certainly watch it. And since I’m (obviously) a huge (though not uncritical, either!) fan of Emacs, I could not resist this little piece of code.") (author nil (name nil "Marcin Borkowski") (uri nil "http://mbork.pl/Homepage")) (source nil (title ((type . "html")) "Marcin Borkowski:  Content AND Presentation") (subtitle ((type . "html")) "Strona domowa Marcina Borkowskiego") (link ((rel . "self") (href . "http://mbork.pl?action=rss;all=0;showedit=0;rcfilteronly=CategoryEmacs"))) (id nil "http://mbork.pl/Homepage"))) (entry nil (title ((type . "html") (lang . "en")) "Chen Bin (redguardtoo): Hello Ivy-mode, bye Helm") (link ((href . "http://blog.binchen.org/posts/hello-ivy-mode-bye-helm.html"))) (id nil "http://blog.binchen.org/posts/hello-ivy-mode-bye-helm.html") (updated nil "2015-12-18T02:41:04+00:00") (content ((type . "html")) "<div><p>I love <a href=\"https://github.com/abo-abo/swiper\">Ivy-mode/Swiper</a> because it's quick and easy to extend. So my <a href=\"https://github.com/emacs-helm/helm\">Helm</a> setup is replaced by ivy-mode.
</p>

<p>
I will demostrate how I use ivy-mode at first. Then the code.
</p>

<p>
Please note I <b>only use one API `ivy-read`</b> from ivy-mode.
</p>

<div class=\"outline-3\" id=\"outline-container-1\">
<h4 id=\"sec-1\">Demo</h4>
<div class=\"outline-text-3\" id=\"text-1\">

</div>

<div class=\"outline-4\" id=\"outline-container-1-1\">
<h5 id=\"sec-1-1\">M-x counsel-git-grep-yank-line</h5>
<div class=\"outline-text-4\" id=\"text-1-1\">

<p>Use <a href=\"https://git-scm.com/docs/git-grep\">git-grep</a> to grep the lines. Then copy the line into kill ring without opening new window.
</p>
<p>
<img alt=\"ivy-git-grep-yank-line-nq8.png\" src=\"http://blog.binchen.org/wp-content/ivy-git-grep-yank-line-nq8.png\" /></p></div>

</div>

<div class=\"outline-4\" id=\"outline-container-1-2\">
<h5 id=\"sec-1-2\">M-x counsel-git-find-my-file</h5>
<div class=\"outline-text-4\" id=\"text-1-2\">

<p>Find my file under git version control in recent N weeks.
</p>
<p>
<img alt=\"ivy-git-find-my-file-nq8.png\" src=\"http://blog.binchen.org/wp-content/ivy-git-find-my-file-nq8.png\" /></p></div>

</div>

<div class=\"outline-4\" id=\"outline-container-1-3\">
<h5 id=\"sec-1-3\">M-x ivy-imenu-goto</h5>
<div class=\"outline-text-4\" id=\"text-1-3\">

<p>Imenu. It's quick.
</p>
<p>
<img alt=\"ivy-imenu-goto-nq8.png\" src=\"http://blog.binchen.org/wp-content/ivy-imenu-goto-nq8.png\" /></p></div>

</div>

<div class=\"outline-4\" id=\"outline-container-1-4\">
<h5 id=\"sec-1-4\">M-x ivy-bookmark-goto</h5>
<div class=\"outline-text-4\" id=\"text-1-4\">

<p>Quick and customizable.
</p>
<p>
<img alt=\"ivy-bookmarks-goto-nq8.png\" src=\"http://blog.binchen.org/wp-content/ivy-bookmarks-goto-nq8.png\" /></p></div>

</div>

</div>

<div class=\"outline-3\" id=\"outline-container-2\">
<h4 id=\"sec-2\">Code</h4>
<div class=\"outline-text-3\" id=\"text-2\">

<p>Swiper 7.0+ required.
</p>



<pre><code class=\"lang-lisp\">;; {{ @see http://oremacs.com/2015/04/19/git-grep-ivy/
(defun counsel-git-grep-or-find-api (fn git-cmd hint open-another-window)
  \"Apply FN on the output lines of GIT-CMD.  HINT is hint when user input.
IF OPEN-ANOTHER-WINDOW is true, open the file in another window.\"
  (let ((default-directory (locate-dominating-file
                            default-directory \".git\"))
        (keyword (if (region-active-p)
                     (buffer-substring-no-properties (region-beginning) (region-end))
                   (read-string (concat \"Enter \" hint \" pattern:\" ))))
        collection val lst)

    (setq collection (split-string (shell-command-to-string (format git-cmd keyword))
                                   \"\\n\"
                                   t))

    (when (and collection (&gt; (length collection) 0))
      (setq val (if (= 1 (length collection)) (car collection)
                    (ivy-read (format \" matching \\\"%s\\\":\" keyword) collection)))
      (funcall fn open-another-window val))))

(defun counsel-git-grep (&amp;optional open-another-window)
  \"Grep in the current git repository.
If OPEN-ANOTHER-WINDOW is not nil, results are displayed in new window.\"
  (interactive \"P\")
  (let (fn)
    (setq fn (lambda (open-another-window val)
               (let ((lst (split-string val \":\")))
                 (funcall (if open-another-window 'find-file-other-window 'find-file)
                          (car lst))
                 (let ((linenum (string-to-number (cadr lst))))
                   (when (and linenum (&gt; linenum 0))
                     (goto-char (point-min))
                     (forward-line (1- linenum)))))))

    (counsel-git-grep-or-find-api fn
                                  \"git --no-pager grep --full-name -n --no-color -i -e \\\"%s\\\"\"
                                  \"grep\"
                                  open-another-window)))

(defun counsel-git-find-file (&amp;optional open-another-window)
  \"Find file in the current git repository.
If OPEN-ANOTHER-WINDOW is not nil, results are displayed in new window.\"
  (interactive \"P\")
  (let (fn)
    (setq fn (lambda (open-another-window val)
               (funcall (if open-another-window 'find-file-other-window 'find-file) val)))
    (counsel-git-grep-or-find-api fn
                                  \"git ls-tree -r HEAD --name-status | grep \\\"%s\\\"\"
                                  \"file\"
                                  open-another-window)))

(defun counsel-git-grep-yank-line (&amp;optional insert-line)
  \"Grep in the current git repository and yank the line.
If INSERT-LINE is not nil, insert the line grepped\"
  (interactive \"P\")
  (let (fn)
    (setq fn (lambda (unused-param val)
               (let ((lst (split-string val \":\")) text-line)
                 ;; the actual text line could contain \":\"
                 (setq text-line (replace-regexp-in-string (format \"^%s:%s:\" (car lst) (nth 1 lst)) \"\" val))
                 ;; trim the text line
                 (setq text-line (replace-regexp-in-string (rx (* (any \" \\t\\n\")) eos) \"\" text-line))
                 (kill-new text-line)
                 (if insert-line (insert text-line))
                 (message \"line from %s:%s =&gt; kill-ring\" (car lst) (nth 1 lst)))))

    (counsel-git-grep-or-find-api fn
                                  \"git --no-pager grep --full-name -n --no-color -i -e \\\"%s\\\"\"
                                  \"grep\"
                                  nil)))

(defvar counsel-my-name-regex \"\"
  \"My name used by `counsel-git-find-my-file', support regex like '[Tt]om [Cc]hen'.\")

(defun counsel-git-find-my-file (&amp;optional num)
  \"Find my files in the current git repository.
If NUM is not nil, find files since NUM weeks ago.
Or else, find files since 24 weeks (6 months) ago.\"
  (interactive \"P\")
  (let (fn cmd)
    (setq fn (lambda (open-another-window val)
               (find-file val)))
    (unless (and num (&gt; num 0))
      (setq num 24))
    (setq cmd (concat \"git log --pretty=format: --name-only --since=\\\"\"
                                          (number-to-string num)
                                          \" weeks ago\\\" --author=\\\"\"
                                          counsel-my-name-regex
                                          \"\\\" | grep \\\"%s\\\" | sort | uniq\"))
    ;; (message \"cmd=%s\" cmd)
    (counsel-git-grep-or-find-api fn cmd \"file\" nil)))
;; }}

(defun ivy-imenu-get-candidates-from (alist  &amp;optional prefix)
  (cl-loop for elm in alist
           nconc (if (imenu--subalist-p elm)
                       (ivy-imenu-get-candidates-from
                        (cl-loop for (e . v) in (cdr elm) collect
                                 (cons e (if (integerp v) (copy-marker v) v)))
                        (concat prefix (if prefix \".\") (car elm)))
                   (and (cdr elm) ; bug in imenu, should not be needed.
                        (setcdr elm (copy-marker (cdr elm))) ; Same as [1].
                        (list (cons (concat prefix (if prefix \".\") (car elm))
                                    (copy-marker (cdr elm))))))))

(defun ivy-imenu-goto ()
  \"Go to buffer position\"
  (interactive)
  (let ((imenu-auto-rescan t) items)
    (unless (featurep 'imenu)
      (require 'imenu nil t))
    (setq items (imenu--make-index-alist t))
    (ivy-read \"imenu items:\"
              (ivy-imenu-get-candidates-from (delete (assoc \"*Rescan*\" items) items))
              :action (lambda (k) (goto-char k)))))

(defun ivy-bookmark-goto ()
  \"Open ANY bookmark\"
  (interactive)
  (let (bookmarks filename)
    ;; load bookmarks
    (unless (featurep 'bookmark)
      (require 'bookmark))
    (bookmark-maybe-load-default-file)
    (setq bookmarks (and (boundp 'bookmark-alist) bookmark-alist))

    ;; do the real thing
    (ivy-read \"bookmarks:\"
              (delq nil (mapcar (lambda (bookmark)
                                  (let (key)
                                    ;; build key which will be displayed
                                    (cond
                                     ((and (assoc 'filename bookmark) (cdr (assoc 'filename bookmark)))
                                      (setq key (format \"%s (%s)\" (car bookmark) (cdr (assoc 'filename bookmark)))))
                                     ((and (assoc 'location bookmark) (cdr (assoc 'location bookmark)))
                                      ;; bmkp-jump-w3m is from bookmark+
                                      (unless (featurep 'bookmark+)
                                        (require 'bookmark+))
                                      (setq key (format \"%s (%s)\" (car bookmark) (cdr (assoc 'location bookmark)))))
                                     (t
                                      (setq key (car bookmark))))
                                    ;; re-shape the data so full bookmark be passed to ivy-read:action
                                    (cons key bookmark)))
                                bookmarks))
              :action (lambda (bookmark)
                        (bookmark-jump bookmark)))
    ))
</code></pre>


</div>

</div></div>") (author nil (name nil "Chen Bin") (uri nil "http://blog.binchen.org/")) (source nil (title ((type . "html")) "Chen's blog (emacs)") (link ((rel . "self") (href . "http://blog.binchen.org/categories/emacs.xml"))) (id nil "http://blog.binchen.org/"))) (entry nil (title ((type . "html") (lang . "en")) "Pragmatic Emacs: Master your inbox with mu4e and org-mode") (link ((href . "http://pragmaticemacs.com/emacs/master-your-inbox-with-mu4e-and-org-mode/"))) (id nil "http://pragmaticemacs.com/?p=409") (updated nil "2015-12-17T22:59:08+00:00") (content ((type . "html") (lang . "en")) "<p> In the following I will drone on a bit about my philosophy on handling emails and then show how this is realised in emacs using <a href=\"http://www.djcbsoftware.nl/code/mu/mu4e.html\">mu4e</a> and org-mode. </p>
<p> I couple of years ago I read an <a href=\"http://timharford.com/2013/09/3180/\">article by the economist Tim Harford</a> which hugely influenced the way I handle my emails. The ideas in the article are not unique but they really struck a chord with me. My email philosophy can be distilled down to one key concept: </p>
<blockquote>
<p> your inbox is not a todo list </p>
</blockquote>
<p> Like many people I used to keep emails in my inbox as a way of reminding me of something I needed to do, but the fact is that an inbox is a rubbish todo list. </p>
<p> I also had folders for putting emails in and I would occasionally have a painful cleanout of my towering inbox, agonising over which folder to put an email in, or whether I should create a new folder for it. No more! As long as your email programme has a good search, then it is quicker to search than to use a filing system. </p>
<p> Now when I check my emails, I do one of the following </p>
<ul class=\"org-ul\">
<li><i>delete</i> if it is rubbish</li>
<li><i>read and delete</i> if it is not something I’ll need to revisit</li>
<li><i>read and archive</i> if it is something I might need to look up again</li>
<li><i>reply and archive</i> if it is something that will take less than a couple of minutes to reply to and I have the time</li>
<li><i>add to todo list and archive</i> if it is something that requires an action or just needs a longer reply than I have time to write</li>
</ul>
<p> To use this system effectively, all you really need is: <i>(i)</i> an email client with a good search function so you can archive all mail in the same folder and not worry about filing it neatly, and <i>(ii)</i> a good system for adding tasks from your emails to a todo list. </p>
<p> The mu4e email client in emacs, combined with org-mode for todo organisation is the perfect way to do both of these things. There is very good documentation on how to set up mu4e on the <a href=\"http://www.djcbsoftware.nl/code/mu/mu4e.html\">project web page</a>, including configuring it to work well with gmail, so I won’t go over that here. What I will say is that mu4e is built on mu, a powerful email indexer so it has all of your search needs covered. </p>
<p> Apart from searching, mu4e integrates very well with org-mode to make it seamless to generate todo items from emails. To set this up, add the following to your <a href=\"http://pragmaticemacs.com/emacs/editing-your-emacs-config-file/\">emacs config file</a> </p>
<div class=\"org-src-container\">
<pre class=\"src src-elisp\"><span style=\"color: #5F7F5F;\">;;</span><span style=\"color: #7F9F7F;\">store org-mode links to messages</span>
<span style=\"color: #DCDCCC;\">(</span><span style=\"color: #F0DFAF; font-weight: bold;\">require</span> '<span style=\"color: #BFEBBF;\">org-mu4e</span><span style=\"color: #DCDCCC;\">)</span>
<span style=\"color: #5F7F5F;\">;;</span><span style=\"color: #7F9F7F;\">store link to message if in header view, not to header query</span>
<span style=\"color: #DCDCCC;\">(</span>setq org-mu4e-link-query-in-headers-mode nil<span style=\"color: #DCDCCC;\">)</span>
</pre>
</div>
<p> Now update your <a href=\"http://pragmaticemacs.com/emacs/org-mode-basics-vii-a-todo-list-with-schedules-and-deadlines/\">org-mode capture template</a> to something like this </p>
<div class=\"org-src-container\">
<pre class=\"src src-elisp\"><span style=\"color: #DCDCCC;\">(</span>setq org-capture-templates
      '<span style=\"color: #BFEBBF;\">(</span><span style=\"color: #D0BF8F;\">(</span><span style=\"color: #CC9393;\">\"t\"</span> <span style=\"color: #CC9393;\">\"todo\"</span> entry <span style=\"color: #93E0E3;\">(</span>file+headline <span style=\"color: #CC9393;\">\"~/todo.org\"</span> <span style=\"color: #CC9393;\">\"Tasks\"</span><span style=\"color: #93E0E3;\">)</span>
         <span style=\"color: #CC9393;\">\"* TODO [#A] %?\\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \\\"+0d\\\"))\\n%a\\n\"</span><span style=\"color: #D0BF8F;\">)</span><span style=\"color: #BFEBBF;\">)</span><span style=\"color: #DCDCCC;\">)</span>
</pre>
</div>
<p> This looks like the version we had before, but the extra <code>%a</code> adds a link to the file you are visiting when you invoke the capture template. </p>
<p> The beauty of this is that hitting <code>C-c c t</code> now generates a todo item that contains <i>a link to the email you are currently viewing</i>. So you have zero friction in creating a todo item to e.g. reply to an email by a certain deadline, and you can happily archive that email knowing that clicking the link in the todo item will take you directly back to it. </p>
<p> I moved from thunderbird to mu4e a couple of months ago and really haven’t looked back. The things I missed at first were some of the extensions I was using to: create email templates; remind me about attachments; and add a delay to outgoing email so that I could have an “undo send” functionality. Happily I’ve found solutions to all of these in mu4e and I’ll be covering them in future posts. </p>") (author nil (name nil "Ben Maughan") (uri nil "http://pragmaticemacs.com")) (source nil (title ((type . "html")) "Pragmatic Emacs") (subtitle ((type . "html")) "practical tips for everyday emacs") (link ((rel . "self") (href . "http://pragmaticemacs.com/feed/"))) (id nil "http://pragmaticemacs.com"))) (entry nil (title ((type . "html") (lang . "en-us")) "Yann Hodique: Blog automated deployment") (link ((href . "http://yann.hodique.info/blog/blog-automated-deployment/"))) (id nil "http://yann.hodique.info/blog/blog-automated-deployment/") (updated nil "2015-12-15T15:23:50+00:00") (content ((type . "html")) "<p>This site is now automatically deployed upon git commit to
<a href=\"https://github.com/sigma/yann.hodique.info\">https://github.com/sigma/yann.hodique.info</a></p>

<p>I’ve been following the instructions
<a href=\"https://gohugo.io/tutorials/automated-deployments/\">here</a>, that make use of
<a href=\"http://wercker.com\">wercker</a>. It works beautifully, although I <em>did</em> have to
do a minor modification: since I make heavy use of
<a href=\"http://pygments.org/\">Pygments</a> to display source code, I needed to make sure
it’s available in the context of this automated build (<em>update</em>: looking at the
code of
<a href=\"https://github.com/ArjenSchwarz/wercker-step-hugo-build/blob/master/run.sh#L95..L109\">arjen/hugo-build</a>,
it should not be needed, so not exactly sure what’s going on here, I’ll
investigate later).</p>

<p>This is very easily achieved with this final <code>wercker.yml</code></p>

<div class=\"highlight\" style=\"background: #272822;\"><pre style=\"line-height: 125%;\"><span style=\"color: #ae81ff;\">box</span><span style=\"color: #f8f8f2;\">:</span> <span style=\"color: #ae81ff;\">debian</span>
<span style=\"color: #ae81ff;\">build</span><span style=\"color: #f8f8f2;\">:</span>
  <span style=\"color: #ae81ff;\">steps</span><span style=\"color: #f8f8f2;\">:</span>
    <span style=\"color: #f8f8f2;\">-</span> <span style=\"color: #ae81ff;\">install-packages</span><span style=\"color: #f8f8f2;\">:</span>
        <span style=\"color: #ae81ff;\">packages</span><span style=\"color: #f8f8f2;\">:</span> <span style=\"color: #ae81ff;\">python-pygments</span>
    <span style=\"color: #f8f8f2;\">-</span> <span style=\"color: #ae81ff;\">arjen/hugo-build@1.8.1</span>
<span style=\"color: #ae81ff;\">deploy</span><span style=\"color: #f8f8f2;\">:</span>
  <span style=\"color: #ae81ff;\">steps</span><span style=\"color: #f8f8f2;\">:</span>
    <span style=\"color: #f8f8f2;\">-</span> <span style=\"color: #ae81ff;\">install-packages</span><span style=\"color: #f8f8f2;\">:</span>
        <span style=\"color: #ae81ff;\">packages</span><span style=\"color: #f8f8f2;\">:</span> <span style=\"color: #ae81ff;\">git ssh-client</span>
    <span style=\"color: #f8f8f2;\">-</span> <span style=\"color: #ae81ff;\">lukevivier/gh-pages@0.2.1</span><span style=\"color: #f8f8f2;\">:</span>
        <span style=\"color: #ae81ff;\">token</span><span style=\"color: #f8f8f2;\">:</span> <span style=\"color: #ae81ff;\">$GIT_TOKEN</span>
        <span style=\"color: #ae81ff;\">domain</span><span style=\"color: #f8f8f2;\">:</span> <span style=\"color: #ae81ff;\">yann.hodique.info</span>
        <span style=\"color: #ae81ff;\">basedir</span><span style=\"color: #f8f8f2;\">:</span> <span style=\"color: #ae81ff;\">public</span>
</pre></div>


<p><code>python-pygments</code> is the name of the Debian package. Depending on what box
you’re using, this might need to be adjusted.</p>

<p>So <em>now</em> I can blog with just <a href=\"https://www.gnu.org/software/emacs/\">Emacs</a> and
<a href=\"http://magit.vc/\">Magit</a>. Yay!</p>") (author nil (name nil "Yann Hodique") (uri nil "http://yann.hodique.info/blog/")) (source nil (title ((type . "html")) "Blog -- Yann Hodique") (subtitle ((type . "html")) "Recent content in Blog -- Yann Hodique") (link ((rel . "self") (href . "http://yann.hodique.info/blog/index.xml"))) (id nil "http://yann.hodique.info/blog/"))) (entry nil (title ((type . "html")) "Marcin Borkowski: Counting sentences") (link ((href . "http://mbork.pl/2015-12-12_Counting_sentences"))) (id nil "http://mbork.pl/2015-12-12_Counting_sentences") (updated nil "2015-12-12T11:56:10+00:00") (content ((type . "html")) "I was a bit astonished that Emacs does not have a count-sentences function. I mean, how is counting sentences different from counting words or lines? You move one sentence/word/line at a time, incrementing a counter, and when you finish, you have the count. Admittedly, this is one thing Vim does better than Emacs.") (author nil (name nil "Marcin Borkowski") (uri nil "http://mbork.pl/Homepage")) (source nil (title ((type . "html")) "Marcin Borkowski:  Content AND Presentation") (subtitle ((type . "html")) "Strona domowa Marcina Borkowskiego") (link ((rel . "self") (href . "http://mbork.pl?action=rss;all=0;showedit=0;rcfilteronly=CategoryEmacs"))) (id nil "http://mbork.pl/Homepage"))) (entry nil (title ((type . "html")) "Bryan Murdock: Linux Environment Management") (link ((href . "http://bryan-murdock.blogspot.com/2015/12/linux-environment-management.html"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097.post-2175611913018080433") (updated nil "2015-12-10T12:57:38+00:00") (content ((type . "html")) "<h4 class=\"title\">
Linux Environment Considerations</h4>
<div class=\"outline-2\" id=\"outline-container-sec-1\">
<div class=\"outline-text-2\" id=\"text-1\">
The Linux Environments that ASIC and SoC (chip) design teams use are often messy and confusing.  When team members work on multiple ASIC projects that each require different sets of tools the problem is even worse.  When engineers spend time fighting the environment that slows down the development of our chips little by little each day.  This doesn't need to be the case.  This post explains:<br />
<ul class=\"org-ul\">
<li>What a Linux Environment is<br />
</li>
<li>Why it's important, especially for ASIC projects<br />
</li>
<li>Techniques to configure and manage the environment<br />
</li>
</ul>
</div>
<div class=\"outline-3\" id=\"outline-container-sec-1-1\">
<h5 id=\"sec-1-1\">
What is an Environment?</h5>
<div class=\"outline-text-3\" id=\"text-1-1\">
In Linux, every process runs with a set of environment variables available to it.  This set of environment variables is often referred to simply as, the environment.  Here are some examples of how programs use the environment:<br />
<br />
<ul class=\"org-ul\">
<li>The command-line shell uses the <code>PATH</code> environment variable to find the programs you ask it to run<br />
</li>
<li>Programs use <code>LD_LIBRARY_PATH</code> to find compiled libraries that they rely on<br />
</li>
<li>ASIC design and verification tools use the <code>LM_LICENSE_FILE</code> environment variable to determine how to contact their required license servers.<br />
</li>
</ul>
<br />
For most Linux users the environment isn't much of a concern.  When they log in it gets configured by shell initialization files for the common programs and libraries that they use and they are good to go.  We ASIC engineers are much more demanding of our environment.  We generally use a wide array of software tools that are not included in our Linux distribution.  We also keep multiple versions of each of those tools installed so we can try new versions out and revert back to using old versions when needed.  Our environment needs to be configured for each of these tools and reconfigured when we want to switch which version of the tool we are using.  Making matters worse most of these ASIC tools require more than just <code>PATH</code> and <code>LM_LICENSE_FILE</code> environment variables, they have a wide assortment of other variables they expect to be set in your environment for proper operation.</div>
</div>
<div class=\"outline-3\" id=\"outline-container-sec-1-2\">
<h5 id=\"sec-1-2\">
Managing The Environment</h5>
<div class=\"outline-text-3\" id=\"text-1-2\">
There are several ways to manage your Linux shell environment.  Let's take a look at them.</div>
<div class=\"outline-4\" id=\"outline-container-sec-1-2-1\">
<h6 id=\"sec-1-2-1\">
Default Shell Initialization Files</h6>
<div class=\"outline-text-4\" id=\"text-1-2-1\">
This was mentioned in the introduction.  With this technique you simply put all configuration in the shell initialization files (<code>~/.profile</code>, <code>~/.bashrc</code>, <code>~/.cshrc</code>, etc.).<br />
<br />
Benefits:<br />
<ul class=\"org-ul\">
<li>This is the standard way of managing your environment in linux<br />
</li>
<li>Simple, easy to understand for everyone<br />
</li>
<li>You can use standard shell commands to inspect your environment: <code>env</code>, <code>echo $VARIABLE_NAME</code>, etc.<br />
</li>
</ul>
Downsides:<br />
<ul class=\"org-ul\">
<li>Only supports one version of any given tool.  To use a different version of a tool you have to edit your shell initialization files, then start a new shell for them to take affect.<br />
</li>
<li>Everyone has their own initialization files, which makes it hard to ensure everyone is using the same environment<br />
</li>
</ul>
</div>
</div>
<div class=\"outline-4\" id=\"outline-container-sec-1-2-2\">
<h6 id=\"sec-1-2-2\">
Explicit Environment Files</h6>
<div class=\"outline-text-4\" id=\"text-1-2-2\">
Another approach is to have explicit environment configuration files.  When you log in or start a new terminal session a minimal environment will be configured by the normal shell initialization files, and then you issue a command to configure that shell instance with the desired environment.  The environment configuration files can be simple shell-syntax files (and the command as simple as <code>. environment-init</code> or <code>source environment-init</code>).  Alternatively, there is an open source tool named <a href=\"http://modules.sourceforge.net/\">Environment Modules</a> that teams often use for this.<br />
<br />
Benefits:<br />
<ul class=\"org-ul\">
<li>Environment configuration files can be centralized so there is one file that everyone uses<br />
</li>
<li>You can maintain multiple configuration files as needed: one per tool version, one per project, one per engineering role, etc.<br />
</li>
<li>Project leads and/or tool administrators can easily create and maintain the configuration files so individual engineers don't have to<br />
</li>
<li>You can use standard shell commands to inspect your environment: <code>env</code>, <code>echo $VARIABLE_NAME</code>, etc.<br />
</li>
</ul>
Downsides:<br />
<ul class=\"org-ul\">
<li>Once an environment configuration is loaded it's difficult to unload (you need to start a fresh shell to be sure)<sup><a class=\"footref\" href=\"https://www.blogger.com/blogger.g?blogID=3669809752172683097#fn.1\" id=\"fnr.1\" name=\"fnr.1\">1</a></sup><br />
</li>
<li>If you use Environment Modules for this, environment configuration files have to be written in Tcl<sup><a class=\"footref\" href=\"https://www.blogger.com/blogger.g?blogID=3669809752172683097#fn.2\" id=\"fnr.2\" name=\"fnr.2\">2</a></sup><br />
</li>
</ul>
</div>
</div>
<div class=\"outline-4\" id=\"outline-container-sec-1-2-3\">
<h6 id=\"sec-1-2-3\">
Per-command Environment Files</h6>
<div class=\"outline-text-4\" id=\"text-1-2-3\">
Another approach is to prefix every command that needs a special environment with a command that spawns a subshell, sets up the necessary environment, and then runs the intended command.  It looks sort of like this:<br />
<pre class=\"example\">envA simulation-command
</pre>
This way your interactive shell is never poluted with project- or tool-specific settings (just the subshell is) and you can easily switch to a different environment on a per-command basis:<br />
<pre class=\"example\">envA simulation-command
cd &lt;another-project-area&gt;
envB synthesis-command
</pre>
Benefits:<br />
<ul class=\"org-ul\">
<li>All the same benefits of Explicit Environment Files mentioned above<br />
</li>
<li>Easy to use different environment configurations, even on a per-command basis (you don't have to start a fresh shell for each new environment)<br />
</li>
</ul>
Downsides:<br />
<ul class=\"org-ul\">
<li>Sometimes hard to remember to prefix every command<br />
</li>
<li>If you don't often use different environments the prefix feels like unnecessary awkwardness<br />
</li>
<li>Inspecting the per-command shell environment is not as simple as typing <code>echo $VARIABLE_NAME</code> or <code>env</code>, you have to do something like <code>envA sh -c 'echo $PATH'= or =envA env</code><br />
</li>
</ul>
</div>
</div>
<div class=\"outline-4\" id=\"outline-container-sec-1-2-4\">
<h6 id=\"sec-1-2-4\">
Smart Environment Manager Tool</h6>
<div class=\"outline-text-4\" id=\"text-1-2-4\">
This is basically the same as using Explicit Environment Files above, but instead of a simple <code>source</code> command or Environment Modules, you can use a tool that has the ability to load an environment and to safely and completely undo (unload) an environment configuration when you want to switch from one environment to another.  An open source tool that does this is named <a href=\"https://bitbucket.org/krupan/albion/wiki/Home\">albion</a> (full disclosure: I wrote albion).  Using it looks like this:<br />
<pre class=\"example\">albion env projectA
simulation-command
albion env projectB
synthesis-command
</pre>
Benefits:<br />
<ul class=\"org-ul\">
<li>All the same benefits of Explicit Environment Files mentioned above<br />
</li>
<li>Easy to use different environment configurations and switch between them<br />
</li>
<li>Environment configuration files use sh syntax, not Tcl<br />
</li>
</ul>
Downsides:<br />
<ul class=\"org-ul\">
<li>You can't switch environments in a single command like Per-command Environment Files allows you to, but a future version of albion could support this<br />
</li>
<li>albion is still somewhat new and might need a little work or customization to fit your specific needs<br />
</li>
</ul>
</div>
</div>
</div>
<div class=\"outline-3\" id=\"outline-container-sec-1-3\">
<h5 id=\"sec-1-3\">
Conclusion</h5>
<div class=\"outline-text-3\" id=\"text-1-3\">
A messy Linux environment can be confusing to engineers and slow down a project.  With some thought and use of a good tool the Linux environment can be tamed.  A tame environment will make your engineers happier and your project will go smoothly and more quickly.</div>
</div>
</div>
<div id=\"footnotes\">
<h4 class=\"footnotes\">
Footnotes: </h4>
<div id=\"text-footnotes\">
<div class=\"footdef\">
<a class=\"footnum\" href=\"https://www.blogger.com/blogger.g?blogID=3669809752172683097#fnr.1\" id=\"fn.1\" name=\"fn.1\">1.</a> Environment Modules claims it can cleanly undo (unload, in their terminology) an environment by simply inverting every command in the modulefile (e.g., setting a variable becomes unsetting the variable).  If someone has removed or changed a command in the modulefile or deleted it altogether in the time after you loaded it this technique obviously does not work.</div>
<br />
<div class=\"footdef\">
<a class=\"footnum\" href=\"https://www.blogger.com/blogger.g?blogID=3669809752172683097#fnr.2\" id=\"fn.2\" name=\"fn.2\">2.</a> If this seems OK to you, consider that most ASIC tools provide you with an environment configuration file in csh or sh syntax that you will then have to translate into Tcl, for <b>every</b> version of <b>each</b> tool you install.</div>
<br /></div>
</div>") (author nil (name nil "Bryan") (email nil "noreply@blogger.com") (uri nil "http://bryan-murdock.blogspot.com/")) (source nil (title ((type . "html")) "Cyclopedia Square") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3669809752172683097/posts/default?alt=atom"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097"))) (entry nil (title ((type . "html") (lang . "en")) "Pragmatic Emacs: Org-mode basics VII: A TODO list with schedules and deadlines") (link ((href . "http://pragmaticemacs.com/emacs/org-mode-basics-vii-a-todo-list-with-schedules-and-deadlines/"))) (id nil "http://pragmaticemacs.com/?p=405") (updated nil "2015-12-08T13:45:00+00:00") (content ((type . "html") (lang . "en")) "<p> In this post we’ll build on the <a href=\"http://pragmaticemacs.com/emacs/org-mode-basics-vi-a-simple-todo-list/\">simple todo list</a> that we put together previously and add schedules and deadlines to our tasks to build a powerful agenda. </p>
<p> When adding a task (with <code>C-c c t</code>) you can add a scheduled date to it with <code>C-c C-s</code> or a deadline date with <code>C-c C-d</code>, or both. These will pop up a calendar which you can navigate using shift and the arrow keys. </p>
<p> I prefer to schedule all new tasks to today’s date as a default, so I update the <code>org-capture-templates</code> variable to </p>
<div class=\"org-src-container\">
<pre class=\"src src-elisp\"><span style=\"color: #DCDCCC;\">(</span>setq org-capture-templates
      '<span style=\"color: #BFEBBF;\">(</span><span style=\"color: #D0BF8F;\">(</span><span style=\"color: #CC9393;\">\"t\"</span> <span style=\"color: #CC9393;\">\"todo\"</span> entry <span style=\"color: #93E0E3;\">(</span>file+headline <span style=\"color: #CC9393;\">\"~/todo.org\"</span> <span style=\"color: #CC9393;\">\"Tasks\"</span><span style=\"color: #93E0E3;\">)</span>
         <span style=\"color: #CC9393;\">\"* TODO [#A] %?\\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \\\"+0d\\\"))\\n\"</span><span style=\"color: #D0BF8F;\">)</span><span style=\"color: #BFEBBF;\">)</span><span style=\"color: #DCDCCC;\">)</span>
</pre>
</div>
<p> Now when you add a task, you will see a scheduled field like this </p>
<div class=\"org-src-container\">
<pre class=\"src src-org\"><span style=\"color: #BFEBBF;\">** </span><span style=\"color: #CC9393; font-weight: bold;\">TODO</span><span style=\"color: #BFEBBF;\"> </span><span style=\"color: #F0DFAF; font-weight: bold;\">[#A]</span>
<span style=\"color: #7F9F7F;\">SCHEDULED:</span> <span style=\"color: #8CD0D3; text-decoration: underline;\">&lt;2015-12-08 Tue&gt;</span>
</pre>
</div>
<p> You can edit the date by putting the cursor in it and using shift + arrow keys. </p>
<p> Now instead of using <code>C-c a t</code> to view your list of tasks, we will use <code>C-c a n</code> to display a list of your scheduled tasks and then any unscheduled tasks below it. </p>
<p> I have several configuration options that I recommend. Add the following to your <a href=\"http://pragmaticemacs.com/emacs/editing-your-emacs-config-file/\">emacs config file</a> if you like the look of them: </p>
<div class=\"org-src-container\">
<pre class=\"src src-elisp\"><span style=\"color: #5F7F5F;\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span style=\"color: #5F7F5F;\">;; </span><span style=\"color: #7F9F7F;\">org-mode agenda options                                                ;;</span>
<span style=\"color: #5F7F5F;\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span style=\"color: #5F7F5F;\">;;</span><span style=\"color: #7F9F7F;\">open agenda in current window</span>
<span style=\"color: #DCDCCC;\">(</span>setq org-agenda-window-setup <span style=\"color: #BFEBBF;\">(</span>quote current-window<span style=\"color: #BFEBBF;\">)</span><span style=\"color: #DCDCCC;\">)</span>
<span style=\"color: #5F7F5F;\">;;</span><span style=\"color: #7F9F7F;\">warn me of any deadlines in next 7 days</span>
<span style=\"color: #DCDCCC;\">(</span>setq org-deadline-warning-days 7<span style=\"color: #DCDCCC;\">)</span>
<span style=\"color: #5F7F5F;\">;;</span><span style=\"color: #7F9F7F;\">show me tasks scheduled or due in next fortnight</span>
<span style=\"color: #DCDCCC;\">(</span>setq org-agenda-span <span style=\"color: #BFEBBF;\">(</span>quote fortnight<span style=\"color: #BFEBBF;\">)</span><span style=\"color: #DCDCCC;\">)</span>
<span style=\"color: #5F7F5F;\">;;</span><span style=\"color: #7F9F7F;\">don't show tasks as scheduled if they are already shown as a deadline</span>
<span style=\"color: #DCDCCC;\">(</span>setq org-agenda-skip-scheduled-if-deadline-is-shown t<span style=\"color: #DCDCCC;\">)</span>
<span style=\"color: #5F7F5F;\">;;</span><span style=\"color: #7F9F7F;\">don't give awarning colour to tasks with impending deadlines</span>
<span style=\"color: #5F7F5F;\">;;</span><span style=\"color: #7F9F7F;\">if they are scheduled to be done</span>
<span style=\"color: #DCDCCC;\">(</span>setq org-agenda-skip-deadline-prewarning-if-scheduled <span style=\"color: #BFEBBF;\">(</span>quote pre-scheduled<span style=\"color: #BFEBBF;\">)</span><span style=\"color: #DCDCCC;\">)</span>
<span style=\"color: #5F7F5F;\">;;</span><span style=\"color: #7F9F7F;\">don't show tasks that are scheduled or have deadlines in the</span>
<span style=\"color: #5F7F5F;\">;;</span><span style=\"color: #7F9F7F;\">normal todo list</span>
<span style=\"color: #DCDCCC;\">(</span>setq org-agenda-todo-ignore-deadlines <span style=\"color: #BFEBBF;\">(</span>quote all<span style=\"color: #BFEBBF;\">)</span><span style=\"color: #DCDCCC;\">)</span>
<span style=\"color: #DCDCCC;\">(</span>setq org-agenda-todo-ignore-scheduled <span style=\"color: #BFEBBF;\">(</span>quote all<span style=\"color: #BFEBBF;\">)</span><span style=\"color: #DCDCCC;\">)</span>
<span style=\"color: #5F7F5F;\">;;</span><span style=\"color: #7F9F7F;\">sort tasks in order of when they are due and then by priority</span>
<span style=\"color: #DCDCCC;\">(</span>setq org-agenda-sorting-strategy
  <span style=\"color: #BFEBBF;\">(</span>quote
   <span style=\"color: #D0BF8F;\">(</span><span style=\"color: #93E0E3;\">(</span>agenda deadline-up priority-down<span style=\"color: #93E0E3;\">)</span>
    <span style=\"color: #93E0E3;\">(</span>todo priority-down category-keep<span style=\"color: #93E0E3;\">)</span>
    <span style=\"color: #93E0E3;\">(</span>tags priority-down category-keep<span style=\"color: #93E0E3;\">)</span>
    <span style=\"color: #93E0E3;\">(</span>search category-keep<span style=\"color: #93E0E3;\">)</span><span style=\"color: #D0BF8F;\">)</span><span style=\"color: #BFEBBF;\">)</span><span style=\"color: #DCDCCC;\">)</span>
</pre>
</div>
<p> With these options we get a really useful view of our tasks when using <code>C-c a n</code>. For example, here is a <code>todo.org</code> file with a mixture of tasks with and without schedules and deadlines </p>
<div class=\"org-src-container\">
<pre class=\"src src-org\"><span style=\"color: #DFAF8F;\">* Tasks</span>
<span style=\"color: #BFEBBF;\">** </span><span style=\"color: #CC9393; font-weight: bold;\">TODO</span><span style=\"color: #BFEBBF;\"> </span><span style=\"color: #F0DFAF; font-weight: bold;\">[#A]</span><span style=\"color: #BFEBBF;\"> do this today</span>
<span style=\"color: #7F9F7F;\">SCHEDULED:</span> <span style=\"color: #8CD0D3; text-decoration: underline;\">&lt;2015-12-08 Tue&gt;</span>
<span style=\"color: #BFEBBF;\">** </span><span style=\"color: #CC9393; font-weight: bold;\">TODO</span><span style=\"color: #BFEBBF;\"> </span><span style=\"color: #F0DFAF; font-weight: bold;\">[#A]</span><span style=\"color: #BFEBBF;\"> do this tomorrow</span>
<span style=\"color: #7F9F7F;\">SCHEDULED:</span> <span style=\"color: #8CD0D3; text-decoration: underline;\">&lt;2015-12-09 Wed&gt;</span>
<span style=\"color: #BFEBBF;\">** </span><span style=\"color: #CC9393; font-weight: bold;\">TODO</span><span style=\"color: #BFEBBF;\"> </span><span style=\"color: #F0DFAF; font-weight: bold;\">[#A]</span><span style=\"color: #BFEBBF;\"> this task is not scheduled</span>
<span style=\"color: #BFEBBF;\">** </span><span style=\"color: #CC9393; font-weight: bold;\">TODO</span><span style=\"color: #BFEBBF;\"> </span><span style=\"color: #b0c4de;\">[#B]</span><span style=\"color: #BFEBBF;\"> scheduled for today, priority B</span>
<span style=\"color: #7F9F7F;\">SCHEDULED:</span> <span style=\"color: #8CD0D3; text-decoration: underline;\">&lt;2015-12-08 Tue&gt;</span>
<span style=\"color: #BFEBBF;\">** </span><span style=\"color: #CC9393; font-weight: bold;\">TODO</span><span style=\"color: #BFEBBF;\"> </span><span style=\"color: #F0DFAF; font-weight: bold;\">[#A]</span><span style=\"color: #BFEBBF;\"> scheduled today and deadline in 2 days</span>
<span style=\"color: #7F9F7F;\">DEADLINE:</span> <span style=\"color: #8CD0D3; text-decoration: underline;\">&lt;2015-12-10 Thu&gt;</span> <span style=\"color: #7F9F7F;\">SCHEDULED:</span> <span style=\"color: #8CD0D3; text-decoration: underline;\">&lt;2015-12-08 Tue&gt;</span>
<span style=\"color: #BFEBBF;\">** </span><span style=\"color: #CC9393; font-weight: bold;\">TODO</span><span style=\"color: #BFEBBF;\"> </span><span style=\"color: #F0DFAF; font-weight: bold;\">[#A]</span><span style=\"color: #BFEBBF;\"> deadline in 2 days and not scheduled</span>
<span style=\"color: #7F9F7F;\">DEADLINE:</span> <span style=\"color: #8CD0D3; text-decoration: underline;\">&lt;2015-12-10 Thu&gt;</span>
<span style=\"color: #BFEBBF;\">** </span><span style=\"color: #CC9393; font-weight: bold;\">TODO</span><span style=\"color: #BFEBBF;\"> </span><span style=\"color: #F0DFAF; font-weight: bold;\">[#A]</span><span style=\"color: #BFEBBF;\"> scheduled for monday</span>
<span style=\"color: #7F9F7F;\">SCHEDULED:</span> <span style=\"color: #8CD0D3; text-decoration: underline;\">&lt;2015-12-14 Mon&gt;</span>
<span style=\"color: #BFEBBF;\">** </span><span style=\"color: #CC9393; font-weight: bold;\">TODO</span><span style=\"color: #BFEBBF;\"> </span><span style=\"color: #6b8e23;\">[#C]</span><span style=\"color: #BFEBBF;\"> do this today if I get time</span>
<span style=\"color: #7F9F7F;\">SCHEDULED:</span> <span style=\"color: #8CD0D3; text-decoration: underline;\">&lt;2015-12-08 Tue&gt;</span>
<span style=\"color: #BFEBBF;\">** </span><span style=\"color: #CC9393; font-weight: bold;\">TODO</span><span style=\"color: #BFEBBF;\"> </span><span style=\"color: #b0c4de;\">[#B]</span><span style=\"color: #BFEBBF;\"> neither is this one</span>
<span style=\"color: #BFEBBF;\">** </span><span style=\"color: #CC9393; font-weight: bold;\">TODO</span><span style=\"color: #BFEBBF;\"> </span><span style=\"color: #6b8e23;\">[#C]</span><span style=\"color: #BFEBBF;\"> or this one</span>
<span style=\"color: #BFEBBF;\">** </span><span style=\"color: #CC9393; font-weight: bold;\">TODO</span><span style=\"color: #BFEBBF;\"> </span><span style=\"color: #F0DFAF; font-weight: bold;\">[#A]</span><span style=\"color: #BFEBBF;\"> deadline in 10 days and not scheduled</span>
<span style=\"color: #7F9F7F;\">DEADLINE:</span> <span style=\"color: #8CD0D3; text-decoration: underline;\">&lt;2015-12-18 Fri&gt;</span>
</pre>
</div>
<p> When I view the agenda associated with this file I see this </p>
<div class=\"figure\">
<p><img alt=\"example-agenda.png\" src=\"http://i0.wp.com/pragmaticemacs.com/wp-content/uploads/2015/12/wpid-example-agenda.png?w=620\" /> </p>
<p></p></div>") (author nil (name nil "Ben Maughan") (uri nil "http://pragmaticemacs.com")) (source nil (title ((type . "html")) "Pragmatic Emacs") (subtitle ((type . "html")) "practical tips for everyday emacs") (link ((rel . "self") (href . "http://pragmaticemacs.com/feed/"))) (id nil "http://pragmaticemacs.com"))) (entry nil (title ((type . "html")) "(or emacs: Ivy-mode 0.7.0 is out") (link ((href . "http://oremacs.com/2015/12/07/ivy-0.7.0/"))) (id nil "http://oremacs.com/2015/12/07/ivy-0.7.0") (updated nil "2015-12-06T23:00:00+00:00") (content ((type . "html")) "<h2 id=\"intro\">Intro</h2>

<p><a href=\"https://github.com/abo-abo/swiper\">Ivy-mode</a> is a completion method
that's similar to <code>Ido</code>, but with emphasis on simplicity and
customizability.  Currently, there are two related packages on MELPA:
<code>swiper</code> and <code>counsel</code>:</p>

<ul>
<li><code>swiper</code> provides an <code>isearch</code> replacement, using <code>ivy-read</code> for
completion, as well as the basic <code>ivy-mode</code>.</li>
<li><code>counsel</code> provides some extra commands that use <code>ivy-read</code>, like <code>-M-x</code>, <code>-ag</code>,
<code>-load-theme</code> etc.</li>
</ul>

<h2 id=\"release-notes\">Release Notes</h2>

<p>The release notes are available at the
<a href=\"https://github.com/abo-abo/swiper/releases/tag/0.7.0\">homepage</a> as usual.
There are 220 commits since the last release, which was on Aug 5, roughly
4 months ago.  Slowly but surely, the
<a href=\"https://github.com/abo-abo/swiper/graphs/contributors\">contributors list</a>
has grown to 20 people, besides me. A few people even got their Emacs
Copyright Assignment just to make large contributions. Statistically,
Org-mode is probably the prime package that leads to the most CA, but
I'm glad that Ivy is there as well, contributing in a small way.</p>

<p>The release notes are made in
<a href=\"https://github.com/abo-abo/swiper/blob/master/doc/Changelog.org#070\">Org-mode</a>,
each new version is a level 1 heading.  With time, hopefully, their
parts will make their way into the
<a href=\"https://github.com/abo-abo/swiper/blob/master/doc/ivy.org\">manual</a>,
which is also in Org-mode.</p>

<p>In addition, I also export each new release notes to
<a href=\"https://github.com/abo-abo/swiper/releases/tag/0.7.0\">Markdown</a> using
<a href=\"http://pandoc.org/\">pandoc</a>, since that's what Github prefers.</p>

<h2 id=\"release-process\">Release Process</h2>

<p>Since the release notes for <code>0.7.0</code> are huge, I don't embed them into
the post, they're listed separately.  You can go through them at your
own pace, or wait until I make some highlights for each piece either
or the blog or in the manual. The manual, by the way, is a work in
progress but is already distributed in MELPA. Use <kbd>C-h i</kbd>
followed by <kbd>g</kbd> <code>(ivy)</code> to read it. If you're new to reading
the info pages, there's info on info in info format: use <kbd>dg</kbd>
<code>(info)</code> to access it.</p>

<p>Today, I'll describe some cool stuff that I used to generate the
Markdown notes from <code>Changelog.org</code>.</p>

<h3 id=\"org-mode's-org-narrow-to-subtree\">Org-mode's <code>org-narrow-to-subtree</code></h3>

<p>Since <code>Changelog.org</code> already has a <code>0.6.0</code> branch that I didn't want
to see, I've narrowed the buffer to only the <code>0.7.0</code> branch.  This is
possible to do thanks to Emacs' narrowing feature and
<code>org-narrow-to-subtree</code>.  After this command, the buffer behaves as if
the <code>0.6.0</code> branch isn't there and the only content is <code>0.7.0</code> branch.
But if I perform any edits and save the file, everything that was
hidden is still there.</p>

<p>As a shortcut, I'm using my <a href=\"https://github.com/abo-abo/worf\">worf</a> to narrow faster.
Pressing <kbd>[</kbd> while <code>worf-mode</code> is active goes back to the current heading start.
While at heading start, pressing alphanumeric keys calls commands instead of self-inserting:</p>

<ul>
<li><kbd>N</kbd> calls <code>org-narrow-to-subtree</code>,</li>
<li><kbd>W</kbd> calls <code>widen</code>, which turns narrowing off.</li>
</ul>

<p>There are, of course, many more commands and bindings in <code>worf</code>. Check
it out if you like Org's Speed Keys feature, but feel like it could
use more structure.</p>

<h3 id=\"pandoc-mode\"><code>pandoc-mode</code></h3>

<p><a href=\"https://github.com/joostkremers/pandoc-mode\">pandoc-mode</a> is an Emacs
interface to <a href=\"http://pandoc.org/\">pandoc</a> - a tool that allows to
export documents from one format to another.
The Elisp package is available in MELPA.
And I installed <a href=\"https://github.com/jgm/pandoc/releases/download/1.15.2/pandoc-1.15.2-1-amd64.deb\">pandoc-1.15.2-1-amd64.deb</a> from
its <a href=\"https://github.com/jgm/pandoc/releases/tag/1.15.2\">homepage</a> with:</p>
<div class=\"highlight\"><pre><code class=\"language-sh\">sudo dpkg -i pandoc-1.15.2-1-amd64.deb
</code></pre></div>
<p>After that, <kbd>M-x</kbd> <code>pandoc-mode</code> and I'm on easy street: <kbd>C-c /</kbd> calls <code>pandoc-main-hydra/body</code>:</p>

<ul>
<li>Set the output format to Github-flavored Markdown with <kbd>OG</kbd>.</li>
<li>Set the input format to Org-mode with <kbd>bIo</kbd>.</li>
<li>Export with <kbd>C-c / r</kbd>.</li>
<li>View the resulting buffer with <kbd>C-c / V</kbd>.</li>
</ul>

<h3 id=\"add-table-of-contents-to-markdown\">Add table of contents to Markdown</h3>

<p>I used <kbd>M-x</kbd> <code>markdown-toc/generate-toc</code> for this. The MELPA
package <a href=\"https://github.com/ardumont/markdown-toc\">markdown-toc</a>
provides this function.  The resulting table of contents is a list
with a bunch of links, which turned out to be dead, because of the way
Github renders Markdown for releases.</p>

<h3 id=\"use-swiper-to-replace-each-markdown-link-with-its-title\">Use <code>swiper</code> to replace each Markdown link with its title</h3>

<p>Since <code>swiper</code> works with regexps, here's what I input to match each link:</p>
<div class=\"highlight\"><pre><code class=\"language-text\">\\[\\(.*?\\)\\](.*?)
</code></pre></div>
<p>This matches anything in brackets (non-greedy), followed by anything
in parens; the bracket's content is captured in a group.</p>

<p>Then I press <kbd>M-q</kbd> (<code>swiper-query-replace</code>) and enter <code>\\1</code> as
replacement - the first captured group. After this, I confirm each
replacement with <kbd>y</kbd> or confirm them all at once with
<kbd>!</kbd>.</p>

<h3 id=\"use-rectangle-mark-mode-to-promote-toc-one-level\">Use <code>rectangle-mark-mode</code> to promote TOC one level</h3>

<p>Since all entries in the TOC were children to a single <code>0.7.0</code> entry,
I wanted to remove that entry and promote its children one level.
This can be done with <code>rectangle-mark-mode</code>, bound by default to <kbd>C-x SPC</kbd>.</p>

<p>In my config, I use this instead:</p>
<div class=\"highlight\"><pre><code class=\"language-elisp\"><span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"C-x SPC\"</span><span class=\"p\">)</span> <span class=\"ss\">'hydra-rectangle/body</span><span class=\"p\">)</span>
</code></pre></div>
<p>Where, <code>hydra-rectangle/body</code> is provided by <code>hydra-examples.el</code> and
is also described in
<a href=\"http://oremacs.com/2015/02/25/rectangle-hydra/\">an earlier post</a>.  I
really liked the <code>hydra-rectangle/body</code> idea and use it all the time.
Here's a key sequence I used to delete a <code>4x95</code> rectangle in order to
promote the list items: <kbd>C-x SPC 4l95jdo</kbd>.</p>

<h3 id=\"use-basic-elisp-to-turn-each-bug-reference-into-an-org-mode-link\">Use basic Elisp to turn each bug reference into an Org-mode link</h3>

<p>When copy-pasting from the commit log into <code>Changelog.org</code>, I quickly
tired of putting the each issue link as
e.g. <code>[[https://github.com/abo-abo/swiper/issues/244][#244]]</code>.  So I
wrote e.g. <code>#244</code> instead, and used this code in the end to make the
transformation:</p>
<div class=\"highlight\"><pre><code class=\"language-elisp\"><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">ora-quote-github-issues</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"k\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">base</span> <span class=\"s\">\"https://github.com/abo-abo/swiper/issues/\"</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nf\">goto-char</span> <span class=\"p\">(</span><span class=\"nf\">point-min</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nf\">re-search-forward</span> <span class=\"s\">\"\\\\([^[]\\\\)#\\\\([0-9]+\\\\)\"</span> <span class=\"no\">nil</span> <span class=\"no\">t</span><span class=\"p\">)</span>
      <span class=\"p\">(</span><span class=\"nf\">replace-match</span>
       <span class=\"p\">(</span><span class=\"nf\">format</span> <span class=\"s\">\"%s[[%s%s][#%s]]\"</span>
               <span class=\"p\">(</span><span class=\"nv\">match-string</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
               <span class=\"nv\">base</span>
               <span class=\"p\">(</span><span class=\"nv\">match-string</span> <span class=\"mi\">2</span><span class=\"p\">)</span>
               <span class=\"p\">(</span><span class=\"nv\">match-string</span> <span class=\"mi\">2</span><span class=\"p\">))))))</span>
</code></pre></div>
<p>If anyone reading the blog wants to start with some basic Elisp, the
above function is a nice intro to a lot of useful functions.  And I
expect that many people face this sort of automation scenario pretty
often. I'm pretty sure that <kbd>M-%</kbd> <code>query-replace-regexp</code>
could work here as well, but it's easier for me to just write out the
code and save it for later.</p>

<h2 id=\"outro\">Outro</h2>

<p>Thanks to everyone who contributed issues, code and
documentation. Enjoy the new release.</p>") (author nil (name nil "(or emacs") (uri nil "http://oremacs.com/")) (source nil (title ((type . "html")) "(or emacs") (link ((rel . "self") (href . "http://oremacs.com/atom.xml"))) (id nil "http://oremacs.com"))) (entry nil (title ((type . "html")) "Ryan Rix: 2014: How Did I Do?") (link ((href . "http://whatthefuck.computer/blog/2015/01/01/2014-how-did-i-do"))) (id nil "http://whatthefuck.computer/blog/2015/01/01/2014-how-did-i-do") (updated nil "2015-12-06T00:00:00+00:00") (content ((type . "html"))) (author nil (name nil "Ryan Rix") (uri nil "http://whatthefuck.computer")) (source nil (title ((type . "html")) "Computer :(") (subtitle ((type . "html")) "/home/rrix") (link ((rel . "self") (href . "http://whatthefuck.computer/rss.xml"))) (id nil "http://whatthefuck.computer"))) (entry nil (title ((type . "html")) "emacspeak: A Ladspa Work-Bench For The Emacspeak Desktop") (link ((href . "http://emacspeak.blogspot.com/2015/12/a-ladspa-work-bench-for-emacspeak.html"))) (id nil "tag:blogger.com,1999:blog-20280042.post-6914615005759113231") (updated nil "2015-12-05T04:09:41+00:00") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\"><div id=\"content\"><h1 class=\"title\">A Ladspa Work-Bench For The Emacspeak Audio Desktop</h1><div class=\"outline-2\" id=\"outline-container-orgheadline1\"><h2 id=\"orgheadline1\"><span class=\"section-number-2\">1</span> Executive Summary</h2><div class=\"outline-text-2\" id=\"text-1\"><p>Module <code>ladspa.el</code>  in the Emacspeak GitHub repository implements a<br />
high-level interface for experimenting with Ladspa Plugins using<br />
<code>MPlayer</code> and <code>SoX</code>.<br />
</p></div></div><br />
<div class=\"outline-2\" id=\"outline-container-orgheadline2\"><h2 id=\"orgheadline2\"><span class=\"section-number-2\">2</span> Module <code>ladspa.el</code></h2><div class=\"outline-text-2\" id=\"text-2\"><p>This  module implements the following functionality:<br />
</p><br />
<ol class=\"org-ol\"><li>Builds up a table of installed Ladspa plugins along with their<br />
associated metadata.</li>
<li>Command <code>M-x ladspa</code> displays  installed Ladspa Plugins in a<br />
special <code>*Ladspa*</code> buffer.</li>
<li>Plugins can be instantiated by pressing <code>RET</code>.</li>
<li>Instantiating a plugin prompts for its arguments and displays the<br />
instantiated plugin in a new buffer.</li>
<li>This plugin can then be applied to a running <code>MPlayer</code> media<br />
stream by pressing <code>a</code>.</li>
<li>The effect can be deleted by pressing <code>d</code>.</li>
<li>Plugin parameters can be edited  by pressing <code>e</code> with point on<br />
the parameter to edit.</li>
</ol></div></div><br />
<div class=\"outline-2\" id=\"outline-container-orgheadline3\"><h2 id=\"orgheadline3\"><span class=\"section-number-2\">3</span> Interfacing With SoX</h2><div class=\"outline-text-2\" id=\"text-3\"><p>Module <code>sox.el</code> implements an <b>Audio Workbench</b> using <code>SoX</code>. Module<br />
<code>ladspa.el</code> integrates with that module by allowing the addition of<br />
<code>ladspa</code> as a supported SoX effect. Adding a <code>ladspa</code> effect results<br />
in a completion interface for picking one of the available Ladspa<br />
plugin; once selected, that plugin then prompts for its parameters as<br />
needed.<br />
</p></div></div></div><div class=\"status\" id=\"postamble\"><p class=\"date\">Date: <span class=\"timestamp-wrapper\"><span class=\"timestamp\">&lt;2015-12-04 Fri&gt;</span></span></p><p class=\"author\">Author: raman</p><p class=\"date\">Created: 2015-12-04 Fri 20:03</p><p class=\"validation\"><a href=\"http://validator.w3.org/check?uri=referer\">Validate</a></p></div><br />
</div>") (author nil (name nil "T. V. Raman") (email nil "noreply@blogger.com") (uri nil "http://emacspeak.blogspot.com/")) (source nil (title ((type . "html")) "EMACSPEAK  The Complete Audio Desktop") (subtitle ((type . "html")) "Here is where I plan to Blog Emacspeak tricks and introduce new features as I implement them.") (link ((rel . "self") (href . "http://www.blogger.com/feeds/20280042/posts/default?alt=atom"))) (id nil "tag:blogger.com,1999:blog-20280042"))) (entry nil (title ((type . "html")) "Chris Wellons: 9 Elfeed Features You Might Not Know") (link ((href . "http://nullprogram.com/blog/2015/12/03/"))) (id nil "urn:uuid:26807fd8-4b69-3caa-552a-90308cc0b24f") (updated nil "2015-12-03T22:33:17+00:00") (content ((type . "html")) "<p>It’s been two years since <a href=\"http://nullprogram.com/blog/2013/11/26/\">I last wrote about Elfeed</a>, my
<a href=\"https://github.com/skeeto/elfeed\">Atom/RSS feed reader for Emacs</a>. I’ve used it every single
day since, and I continue to maintain it with help from the community.
So far 18 people besides me have contributed commits. Over the last
couple of years it’s accumulated some new features, some more obvious
than others.</p>

<p>Every time I mark a new release, I update the ChangeLog at the top of
elfeed.el which lists what’s new. Since it’s easy to overlook many of
the newer useful features, I thought I’d list the more important ones
here.</p>

<h4>Custom Entry Colors</h4>

<p>You can now customize entry faces through <code>elfeed-search-face-alist</code>.
This variable maps tags to faces. An entry inherits the face of any
tag it carries. Previously “unread” was a special tag that got a bold
face, but this is now implemented as nothing more than an initial
entry in the alist.</p>

<p><a href=\"http://nullprogram.com/img/elfeed/colors.png\"><img alt=\"\" src=\"http://nullprogram.com/img/elfeed/colors-thumb.png\" /></a></p>

<p>I’ve been using it to mark different kinds of content (videos,
podcasts, comics) with different colors.</p>

<h4>Autotagging</h4>

<p>You can specify the starting tags for entries from particular feeds
directly in the feed listing. This has been a feature for awhile now,
but it’s not something you’d want to miss. It started out as a feature
in my personal configuration that eventually migrated into Elfeed
proper.</p>

<p>For example, your <code>elfeed-feeds</code> may initially look like this,
especially if you imported from OPML.</p>
<div class=\"highlight\"><pre><code class=\"language-cl\"><span class=\"p\">(</span><span class=\"s\">\"http://nullprogram.com/feed/\"</span>
 <span class=\"s\">\"http://nedroid.com/feed/\"</span>
 <span class=\"s\">\"https://www.youtube.com/feeds/videos.xml?user=quill18\"</span><span class=\"p\">)</span>
</code></pre></div>
<p>If you wanted certain tags applied to entries from each, you would
need to putz around with <code>elfeed-make-tagger</code>. For the most common
case — apply certain tags to all entries from a URL — it’s much
simpler to specify the information as part of the listing itself,</p>
<div class=\"highlight\"><pre><code class=\"language-cl\"><span class=\"p\">((</span><span class=\"s\">\"http://nullprogram.com/feed/\"</span> <span class=\"nv\">blog</span> <span class=\"nv\">emacs</span><span class=\"p\">)</span>
 <span class=\"p\">(</span><span class=\"s\">\"http://nedroid.com/feed/\"</span> <span class=\"nv\">webcomic</span><span class=\"p\">)</span>
 <span class=\"p\">(</span><span class=\"s\">\"https://www.youtube.com/feeds/videos.xml?user=quill18\"</span> <span class=\"nv\">youtube</span><span class=\"p\">))</span>
</code></pre></div>
<p>Today I only use custom tagger functions in my own configuration to
filter within a couple of particularly noisy feeds.</p>

<h4>Arbitrary Metadata</h4>

<p>Metadata is more for Elfeed extensions (i.e. <a href=\"https://github.com/remyhonig/elfeed-org\">elfeed-org</a>)
than regular users. You can attach arbitrary, <a href=\"http://nullprogram.com/blog/2013/12/30/\">readable</a>
metadata to any Elfeed object (entry, feed). This metadata is
automatically stored in the database. It’s a plist.</p>

<p>Metadata is accessed entirely through one setf-able function:
<code>elfeed-meta</code>. For example, you might want to track <em>when</em> you’ve read
something, not just that you’ve read it. You could use this to
selectively update certain feeds or just to evaluate your own habits.</p>
<div class=\"highlight\"><pre><code class=\"language-cl\"><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">my-elfeed-mark-read</span> <span class=\"p\">(</span><span class=\"nv\">entry</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">elfeed-untag</span> <span class=\"nv\">entry</span> <span class=\"ss\">'unread</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">date</span> <span class=\"p\">(</span><span class=\"nv\">format-time-string</span> <span class=\"s\">\"%FT%T%z\"</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"nb\">setf</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-meta</span> <span class=\"nv\">entry</span> <span class=\"ss\">:read-date</span><span class=\"p\">)</span> <span class=\"nv\">date</span><span class=\"p\">)))</span>
</code></pre></div>
<p>Two things motivated this feature. First, without a plist, if I added
more properties in the future, I would need to change the database
format to support them. I modified the database format to add
metadata, requiring an upgrade function to quietly upgrade older
databases as they were loaded. I’d really like to avoid this in the
future.</p>

<p>Second, I wanted to make it easy for extension authors to store their
own data. I still imagine an extension someday to update feeds
intelligently based on their history. For example, the database
doesn’t track when the feed was last fetched, just the date of the
most recent entry (if any). A smart-update extension could use
metadata to tag feeds with this information.</p>

<p>Elfeed itself already uses two metadata keys: <code>:failures</code> on feeds and
<code>:title</code> on both. <code>:failures</code> counts the total number of times
fetching that feed resulted in an error. You could use this get a
listing of troublesome feeds like so,</p>
<div class=\"highlight\"><pre><code class=\"language-cl\"><span class=\"p\">(</span><span class=\"nv\">cl-loop</span> <span class=\"nv\">for</span> <span class=\"nv\">url</span> <span class=\"nv\">in</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-feed-list</span><span class=\"p\">)</span>
         <span class=\"nv\">for</span> <span class=\"nv\">feed</span> <span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-db-get-feed</span> <span class=\"nv\">url</span><span class=\"p\">)</span>
         <span class=\"nv\">for</span> <span class=\"nv\">failures</span> <span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-meta</span> <span class=\"nv\">feed</span> <span class=\"ss\">:failures</span><span class=\"p\">)</span>
         <span class=\"nb\">when</span> <span class=\"nv\">failures</span>
         <span class=\"nv\">collect</span> <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"nv\">url</span> <span class=\"nv\">failures</span><span class=\"p\">))</span>
</code></pre></div>
<p>The <code>:title</code> property allows for a custom title for both feeds and
entries in the search buffer listing, assuming you’re using the
default function (see below). It overrides the title provided by the
feed itself. This is different than <code>elfeed-entry-title</code> and
<code>elfeed-feed-title</code>, which is kept in sync with feed content. Metadata
is not kept in sync with the feed itself.</p>

<h4>Filter Inversion</h4>

<p>You can invert filter components by prefixing them with <code>!</code>. For
example, say you’re looking at all my posts from the past 6 months:</p>
<div class=\"highlight\"><pre><code class=\"language-text\">@6-months nullprogram.com
</code></pre></div>
<p>But say you’re tired of me and decide you want to see every entry from
the past 6 months <em>excluding</em> my posts.</p>
<div class=\"highlight\"><pre><code class=\"language-text\">@6-months !nullprogram.com
</code></pre></div>
<h4>Filter Limiter</h4>

<p>Normally you limit the number of results by date, but you can now
limit the result by count using <code>#n</code>. For example, to see my most
recent 12 posts regardless of date,</p>
<div class=\"highlight\"><pre><code class=\"language-text\">nullprogram.com #12
</code></pre></div>
<p>This is used internally in the live filter to limit the number of
results to the height of the screen. If you noticed that live
filtering has been much more responsive in the last few months, this is
probably why.</p>

<h4>Bookmark Support</h4>

<p>Elfeed properly integrates with Emacs’ bookmarks (<a href=\"https://github.com/skeeto/elfeed/issues/110\">thanks to
groks</a>). You can bookmark the current filter with <code>M-x
bookmark-set</code> (<code>C-x r m</code>). By default, Emacs will persist bookmarks
between sessions. To revisit a filter in the future, <code>M-x
bookmark-jump</code> (<code>C-x r b</code>).</p>

<p>Since this requires no configuration, this may serve as an easy
replacement for manually building “view” toggles — filters bound to
certain keys — which I know many users have done, including me.</p>

<h4>New Header</h4>

<p>If you’ve updated very recently, you probably noticed Elfeed got a
brand new header. Previously it faked a header by writing to the first
line of the buffer. This is because somehow I had no idea Emacs had
official support for buffer headers (despite notmuch using them all
this time).</p>

<p>The new header includes additional information, such as the current
filter, the number of unread entries, the total number of entries, and
the number of unique feeds currently in view. You’ll see this as
<code>&lt;unread&gt;/&lt;total&gt;:&lt;feeds&gt;</code> in the middle of the header.</p>

<p>As of this writing, the new header has not been made part of a formal
release. So if you’re only tracking stable releases, you won’t see
this for awhile longer.</p>

<p>You can supply your own header via <code>elfeed-search-header-function</code>
(<a href=\"https://github.com/skeeto/elfeed/issues/111\">thanks to Gergely Nagy</a>).</p>

<h4>Scoped Updates</h4>

<p>As you already know, in the search buffer listing you can press <code>G</code> to
update your feeds. But did you know you it takes a prefix argument?
Run as <code>C-u G</code>, it only updates feeds with entries currently listed in
the buffer.</p>

<p>As of this writing, this is another feature not yet in a formal
release. I’d been wanting something like this for awhile but couldn’t
think of a reasonable interface. Directly prompting the user for feeds
is neither elegant nor composable. However, groks <a href=\"https://github.com/skeeto/elfeed/issues/109\">suggested the
prefix argument</a>, which composes perfectly with Elfeed’s
existing idioms.</p>

<h4>Listing Customizations</h4>

<p>In addition to custom faces, there are a number of ways to customize
the listing.</p>

<ul>
<li>Choose the sort order with <code>elfeed-sort-order</code>.</li>
<li>Set a custom date format with <code>elfeed-search-date-format</code>.</li>
<li>Adjust field widths with <code>elfeed-search-*-width</code>.</li>
<li>Or override everything with <code>elfeed-search-print-entry-function</code>.</li>
</ul>

<p>Gergely Nagy has been throwing lots of commits at me over the last
couple of weeks to open up lots of Elfeed’s behavior to customization,
so there are more to come.</p>

<h3>Thank You, Emacs Community</h3>

<p>Apologies about any features I missed or anyone I forgot to mention
who’s made contributions. The above comes from my ChangeLogs, the
commit log, the GitHub issue listing, and my own memory, so I’m likely
to have forgotten some things. A couple of these features I had
forgotten about myself!</p>") (author nil (name nil "Christopher Wellons") (uri nil "http://nullprogram.com/tags/emacs/")) (source nil (title ((type . "html")) "Articles tagged emacs at null program") (link ((rel . "self") (href . "http://nullprogram.com/tags/emacs/feed/"))) (id nil "urn:uuid:3d01fe0a-7c1c-475c-b07c-47b7b19e8870"))) (entry nil (title ((type . "html")) "Raimon Grau: Improving Lua support in etags") (link ((href . "http://puntoblogspot.blogspot.com/2015/12/improving-lua-support-in-etags.html"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158.post-4493997954535550039") (updated nil "2015-12-03T21:08:15+00:00") (content ((type . "html")) "It seems it's <a href=\"http://www.lua.org/\">Lua</a> time again!<br /><br />So for my new project I'm starting in openresty+lua, I needed some kind of support for tags. Lua is a very simple language syntaxwise (it's whole <a href=\"http://www.lua.org/manual/5.2/manual.html#9\">grammar</a> fits in a screen of code).<br /><br />Etags support is quite poor, in fact, if you read the emacs-devel <a href=\"https://lists.gnu.org/archive/html/emacs-devel/2004-02/msg00485.html\">message when it got added</a>, you'll see how basic is it.<br /><br /><pre>+ * Lua tag functions<br />+ *  look for function, local function.<br />+ */<br />+<br />+static void<br />+Lua_functions (inf)<br />+     FILE *inf;<br />+{<br />+  register char *bp;<br />+<br />+  LOOP_ON_INPUT_LINES (inf, lb, bp)<br />+    {<br />+      if (bp[0] != 'f' &amp;&amp; bp[0] != 'l')<br />+       continue;<br />+<br />+      LOOKING_AT (bp, \"local\");<br />+<br />+      if (LOOKING_AT (bp, \"function\"))<br />+       get_tag (bp, NULL);<br />     }<br /> }<br /></pre><br />The regex version of this would be:   /^(local)?\\s+function\\s+(\\w)/ .<br /><br />So I wanted to add support for lines not in the beginning, and also to add support for things like<br /><br /><pre>local foo = function (p1, p2) .... end<br /></pre><br /><br />So it turned out to not be very difficult to augment etags to do that.<br /><br /><pre>tags:<br /> etags --language=lua --regex='/.*\\([^. \\t]\\)*[ \\t]*=[ \\t]*function/\\1/' \\<br /> --regex='/.*\\(local\\|\\)[ \\t][ \\t]*function[ \\t]\\([^ \\t(]*\\)[ \\t]*(/\\2/'  **/*lua<br /></pre><br />Just adding this to the Makefile allows me to catch the other forms of lua functions. Again, regex to the rescue! :)") (author nil (name nil "Raimon Grau") (email nil "noreply@blogger.com") (uri nil "http://puntoblogspot.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "puntoblogspot") (subtitle ((type . "html")) "Technical stuff, mostly") (link ((rel . "self") (href . "http://www.blogger.com/feeds/8696405790788556158/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158"))) (entry nil (title ((type . "html")) "(or emacs: I move my s-expressions back and forth") (link ((href . "http://oremacs.com/2015/11/30/hydra-lispy-move/"))) (id nil "http://oremacs.com/2015/11/30/hydra-lispy-move") (updated nil "2015-11-29T23:00:00+00:00") (content ((type . "html")) "<p>Some people find <a href=\"https://github.com/abo-abo/lispy\">lispy</a> too weird
and/or complex to try, quite possibly because of it's sort-of-modal
key binding structure. Which is a shame, since out of 7k lines of
lispy's code, only 500 lines do key bindings, the rest do all sorts of
useful stuff, like sexp navigation/modification, outlines and REPL
interaction.</p>

<p>In this post, I'll show a short example of using lispy's functions
outside of <code>lispy-mode</code>, and compare it with the default approach.</p>

<h2 id=\"moving-s-expressions-while-the-point-is-anywhere\">Moving s-expressions while the point is anywhere</h2>

<p>Using this simple <a href=\"https://github.com/abo-abo/hydra\">hydra</a>, and the
key sequence <kbd>C-c m sss www</kbd> I got the following GIF:</p>

<p><img alt=\"hydra-lispy-move-1.gif\" src=\"http://oremacs.com/download/hydra-lispy-move-1.gif\" /></p>

<h2 id=\"doing-the-same-lispy-way\">Doing the same lispy-way</h2>

<p>To do it the lispy-way, I move the point before the list that I wish
to operate on (with
<kbd>[</kbd> key), and press <kbd>sss www</kbd> to get the following GIF:</p>

<p><img alt=\"hydra-lispy-move-2.gif\" src=\"http://oremacs.com/download/hydra-lispy-move-2.gif\" /></p>

<p>The difference here is that no hydra is necessary in the second case,
the key bindings come only from <code>lispy-mode</code>.  But the first case will
also work if <code>lispy-mode</code> is off.</p>

<h2 id=\"which-way-is-better?\">Which way is better?</h2>

<p>I think the second way is better, since it's faster and more clear,
but you can decide for yourself. By the way, you can also move
symbols, comments and sub-words (if that makes sense) with
<kbd>w</kbd> and <kbd>s</kbd>, provided you mark them with a region
first.</p>") (author nil (name nil "(or emacs") (uri nil "http://oremacs.com/")) (source nil (title ((type . "html")) "(or emacs") (link ((rel . "self") (href . "http://oremacs.com/atom.xml"))) (id nil "http://oremacs.com"))))) ("Phil Hagelberg: in which year one comes to a close" "<p>Everyone asks what it's like to live here in Thailand on the
border. \"Great, and weird\" is how I like to sum it up—the
country
is <a href=\"https://www.flickr.com/photos/technomancy/19658530230\">beautiful</a>;
the <a href=\"https://www.flickr.com/photos/technomancy/20907191594/\">food
is ridiculously good</a> and cheap enough to eat out every day;
there's
always <a href=\"https://www.flickr.com/photos/technomancy/19489921493\">something
fun to do around</a>; great! Most people think the \"weird\" part
comes from maybe
the <a href=\"http://diythegoodlife.com/2015/12/02/spirited-away-in-thailand/\">animist
spirit houses</a> everywhere, or the stalls serving fried crickets
and grubs at the night market, or finding snails climbing up the
inside of your kitchen pipes and poking up into your sink,
or <a href=\"http://livingintoeventually.blogspot.com/2015/10/burmese-fermented-tea-leaf-salad.html\">salad
made out of fermented tea leaves</a>? But no; all that stuff becomes everyday
eventually. What's much harder to come to grips with is just being
here, living a life of relative ease, and not knowing how to help
the people around you who are going
through <a href=\"http://livingintoeventually.blogspot.com/2015/06/processing.html\">difficulties
you have a hard time even wrapping your head around</a>.</p>
<a href=\"https://www.flickr.com/photos/technomancy/21429068813\">
<img src=\"http://technomancy.us/i/dump-clouds.jpg\" /></a>
<p>The Charis Project, which we are working under, doesn't really
have projects for which it makes sense for me to be directly involved
right now, so I have been looking for other ways to help out in, mostly
the field of education. I began with trying to start a string of
small projects on my own, but each of them so far has fizzled out
or not gotten off the ground to begin with. I've heard from others
with more field experience that long-term volunteers should expect
it to take a while before they are really effective here.</p>
<p>There is a pattern of westerners naively coming in and thinking
that they can dive right in
and <a href=\"https://www.washingtonpost.com/posteverything/wp/2015/06/04/technology-wont-fix-americas-neediest-schools-it-makes-bad-education-worse/\">contribute
without understanding the context</a>, and this often results in
projects that end up abandoned after a year or so because there
was no buy-in from the people they were intended to help. In order
to avoid this I've come to the conclusion that it makes much more
sense to partner with and learn from some of the larger
organizations who have been involved in that kind of work here for
a long time instead of trying to kick off my own thing right off
the bat. What works, what doesn't?  What communities are
receptive? What context am I dropping into the middle of
unawares?</p>
<p>So that's been where I've been focusing more recently. It's a
little rough to have come this far without more to show, but the
language-learning front has proceeded better, and that is always
time well-spent. Here's to seeing what year two brings.</p>" "http://technomancy.us/178" (22149 43044) old 19 nil nil ((guid nil "tag:technomancy.us,2007:in%20which%20year%20one%20comes%20to%20a%20close") (title ((type . "html") (lang . "en-US")) "Phil Hagelberg: in which year one comes to a close") (link ((href . "http://technomancy.us/178"))) (id nil "tag:technomancy.us,2007:in%20which%20year%20one%20comes%20to%20a%20close") (updated nil "2015-12-31T22:11:48+00:00") (content ((type . "html") (lang . "en-US")) "<p>Everyone asks what it's like to live here in Thailand on the
  border. \"Great, and weird\" is how I like to sum it up—the
  country
  is <a href=\"https://www.flickr.com/photos/technomancy/19658530230\">beautiful</a>;
  the <a href=\"https://www.flickr.com/photos/technomancy/20907191594/\">food
  is ridiculously good</a> and cheap enough to eat out every day;
  there's
  always <a href=\"https://www.flickr.com/photos/technomancy/19489921493\">something
  fun to do around</a>; great! Most people think the \"weird\" part
  comes from maybe
  the <a href=\"http://diythegoodlife.com/2015/12/02/spirited-away-in-thailand/\">animist
  spirit houses</a> everywhere, or the stalls serving fried crickets
  and grubs at the night market, or finding snails climbing up the
  inside of your kitchen pipes and poking up into your sink,
  or <a href=\"http://livingintoeventually.blogspot.com/2015/10/burmese-fermented-tea-leaf-salad.html\">salad
  made out of fermented tea leaves</a>? But no; all that stuff becomes everyday
  eventually. What's much harder to come to grips with is just being
  here, living a life of relative ease, and not knowing how to help
  the people around you who are going
  through <a href=\"http://livingintoeventually.blogspot.com/2015/06/processing.html\">difficulties
  you have a hard time even wrapping your head around</a>.</p>

<a href=\"https://www.flickr.com/photos/technomancy/21429068813\">
  <img src=\"http://technomancy.us/i/dump-clouds.jpg\" /></a>

<p>The Charis Project, which we are working under, doesn't really
  have projects for which it makes sense for me to be directly involved
  right now, so I have been looking for other ways to help out in, mostly
  the field of education. I began with trying to start a string of
  small projects on my own, but each of them so far has fizzled out
  or not gotten off the ground to begin with. I've heard from others
  with more field experience that long-term volunteers should expect
  it to take a while before they are really effective here.</p>

<p>There is a pattern of westerners naively coming in and thinking
  that they can dive right in
  and <a href=\"https://www.washingtonpost.com/posteverything/wp/2015/06/04/technology-wont-fix-americas-neediest-schools-it-makes-bad-education-worse/\">contribute
  without understanding the context</a>, and this often results in
  projects that end up abandoned after a year or so because there
  was no buy-in from the people they were intended to help. In order
  to avoid this I've come to the conclusion that it makes much more
  sense to partner with and learn from some of the larger
  organizations who have been involved in that kind of work here for
  a long time instead of trying to kick off my own thing right off
  the bat. What works, what doesn't?  What communities are
  receptive? What context am I dropping into the middle of
  unawares?</p>

<p>So that's been where I've been focusing more recently. It's a
  little rough to have come this far without more to show, but the
  language-learning front has proceeded better, and that is always
  time well-spent. Here's to seeing what year two brings.</p>") (author nil (name nil "Phil Hagelberg") (uri nil "http://technomancy.us/")) (source nil (title ((type . "html")) "Technomancy") (link ((rel . "self") (href . "http://technomancy.us/feed/atom"))) (id nil "tag:technomancy.us,2007:blog/")))) ("Flickr tag 'emacs': orgmode" "<p><a href=\"http://www.flickr.com/people/xmodulo/\">xmodulo</a> posted a photo:</p>
<p><a href=\"http://www.flickr.com/photos/xmodulo/23969581166/\" title=\"orgmode\"><img alt=\"orgmode\" height=\"192\" src=\"http://farm6.staticflickr.com/5637/23969581166_37c8031cfd_m.jpg\" width=\"240\" /></a></p>
<p><a href=\"http://list.xmodulo.com/gnu-emacs.html\" rel=\"nofollow\">GNU Emacs</a></p>" "http://www.flickr.com/photos/xmodulo/23969581166/" (22143 26162) old 20 nil nil ((guid nil "tag:flickr.com,2004:/photo/23969581166") (title ((type . "html")) "Flickr tag 'emacs': orgmode") (link ((href . "http://www.flickr.com/photos/xmodulo/23969581166/"))) (id nil "tag:flickr.com,2004:/photo/23969581166") (updated nil "2015-12-27T04:16:50+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/xmodulo/\">xmodulo</a> posted a photo:</p>
	
<p><a href=\"http://www.flickr.com/photos/xmodulo/23969581166/\" title=\"orgmode\"><img alt=\"orgmode\" height=\"192\" src=\"http://farm6.staticflickr.com/5637/23969581166_37c8031cfd_m.jpg\" width=\"240\" /></a></p>

<p><a href=\"http://list.xmodulo.com/gnu-emacs.html\" rel=\"nofollow\">GNU Emacs</a></p>") (author nil (name nil "xmodulo") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/")))) ("Flickr tag 'emacs': emacs" "<p><a href=\"http://www.flickr.com/people/xmodulo/\">xmodulo</a> posted a photo:</p>
<p><a href=\"http://www.flickr.com/photos/xmodulo/23699971410/\" title=\"emacs\"><img alt=\"emacs\" height=\"166\" src=\"http://farm2.staticflickr.com/1676/23699971410_c4a4cd66dd_m.jpg\" width=\"240\" /></a></p>
<p><a href=\"http://list.xmodulo.com/gnu-emacs.html\" rel=\"nofollow\">GNU Emacs</a></p>" "http://www.flickr.com/photos/xmodulo/23699971410/" (22143 26162) old 21 nil nil ((guid nil "tag:flickr.com,2004:/photo/23699971410") (title ((type . "html")) "Flickr tag 'emacs': emacs") (link ((href . "http://www.flickr.com/photos/xmodulo/23699971410/"))) (id nil "tag:flickr.com,2004:/photo/23699971410") (updated nil "2015-12-27T04:16:50+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/xmodulo/\">xmodulo</a> posted a photo:</p>
	
<p><a href=\"http://www.flickr.com/photos/xmodulo/23699971410/\" title=\"emacs\"><img alt=\"emacs\" height=\"166\" src=\"http://farm2.staticflickr.com/1676/23699971410_c4a4cd66dd_m.jpg\" width=\"240\" /></a></p>

<p><a href=\"http://list.xmodulo.com/gnu-emacs.html\" rel=\"nofollow\">GNU Emacs</a></p>") (author nil (name nil "xmodulo") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/")))) ("Yann Hodique: Rant: Obfuscation in Emacs" "<p>There’s been a bit of a discussion going on
<a href=\"http://thread.gmane.org/gmane.emacs.devel/196537\">here</a> regarding some very
weird beast in the Emacs code base. I find it quite interesting, cause it’s yet
another instance that reveals the diversity of points of view and priorities in
FOSS. And like a lot of people, I have a strong opinion, so I’ll rant a bit
about it :)</p>
<p>To give some context:</p>
<ul>
<li>by default, Emacs provides at startup information on Emacs and the GNU
project (which is definitely fine, maybe useful even). In this case,
a message saying “For information about GNU Emacs and the GNU system, type
C-h C-a.”</li>
<li>Emacs being pretty much all about customization, it provides ways to disable
that (again perfectly reasonable, after over 18 years spent in Emacs, I don’t
need the slightest reminder of what it is)</li>
<li>Emacs being a flagship project of GNU, it goes out of its way to make sure
that if that information is hidden, that’s only because <em>you</em> didn’t want it:
you, not your administrator (do real people still have those?), and not the
random guy you copied your Emacs configuration from (gosh, I miss the time
when <a href=\"http://dotemacs.de\">http://dotemacs.de</a> was a reference)</li>
</ul>
<p>That’s this last part that’s tricky. The code that does that follows, in all
it’s “splendor”. If you don’t puke when reading this, chances are you don’t
know Emacs lisp very well, or you have a very strong political agenda
(apparently RMS introduced that code back in 1994). Neither of those apply to
me, so I’ll be back in a minute.</p>
<div class=\"highlight\" style=\"background: #272822;\"><pre style=\"line-height: 125%;\"><span style=\"color: #f8f8f2;\">(defun</span> <span style=\"color: #f8f8f2;\">display-startup-echo-area-message</span> <span style=\"color: #f8f8f2;\">()</span>
<span style=\"color: #f8f8f2;\">(</span><span style=\"color: #66d9ef;\">let</span> <span style=\"color: #f8f8f2;\">((resize-mini-windows</span> <span style=\"color: #66d9ef;\">t</span><span style=\"color: #f8f8f2;\">))</span>
<span style=\"color: #f8f8f2;\">(or</span> <span style=\"color: #f8f8f2;\">noninteractive</span>                  <span style=\"color: #75715e;\">;(input-pending-p) init-file-had-error</span>
<span style=\"color: #75715e;\">;; t if the init file says to inhibit the echo area startup message.</span>
<span style=\"color: #f8f8f2;\">(and</span> <span style=\"color: #f8f8f2;\">inhibit-startup-echo-area-message</span>
<span style=\"color: #f8f8f2;\">user-init-file</span>
<span style=\"color: #f8f8f2;\">(or</span> <span style=\"color: #f8f8f2;\">(and</span> <span style=\"color: #f8f8f2;\">(get</span> <span style=\"color: #e6db74;\">'inhibit-startup-echo-area-message</span> <span style=\"color: #e6db74;\">'saved-value</span><span style=\"color: #f8f8f2;\">)</span>
<span style=\"color: #f8f8f2;\">(equal</span> <span style=\"color: #f8f8f2;\">inhibit-startup-echo-area-message</span>
<span style=\"color: #f8f8f2;\">(</span><span style=\"color: #66d9ef;\">if</span> <span style=\"color: #f8f8f2;\">(equal</span> <span style=\"color: #f8f8f2;\">init-file-user</span> <span style=\"color: #e6db74;\">\"\"</span><span style=\"color: #f8f8f2;\">)</span>
<span style=\"color: #f8f8f2;\">(user-login-name)</span>
<span style=\"color: #f8f8f2;\">init-file-user)))</span>
<span style=\"color: #75715e;\">;; Wasn't set with custom; see if .emacs has a setq.</span>
<span style=\"color: #f8f8f2;\">(condition-case</span> <span style=\"color: #66d9ef;\">nil</span>
<span style=\"color: #f8f8f2;\">(with-temp-buffer</span>
<span style=\"color: #f8f8f2;\">(insert-file-contents</span> <span style=\"color: #f8f8f2;\">user-init-file)</span>
<span style=\"color: #f8f8f2;\">(re-search-forward</span>
<span style=\"color: #f8f8f2;\">(concat</span>
<span style=\"color: #e6db74;\">\"([ \\t\\n]*setq[ \\t\\n]+\"</span>
<span style=\"color: #e6db74;\">\"inhibit-startup-echo-area-message[ \\t\\n]+\"</span>
<span style=\"color: #f8f8f2;\">(regexp-quote</span>
<span style=\"color: #f8f8f2;\">(prin1-to-string</span>
<span style=\"color: #f8f8f2;\">(</span><span style=\"color: #66d9ef;\">if</span> <span style=\"color: #f8f8f2;\">(equal</span> <span style=\"color: #f8f8f2;\">init-file-user</span> <span style=\"color: #e6db74;\">\"\"</span><span style=\"color: #f8f8f2;\">)</span>
<span style=\"color: #f8f8f2;\">(user-login-name)</span>
<span style=\"color: #f8f8f2;\">init-file-user)))</span>
<span style=\"color: #e6db74;\">\"[ \\t\\n]*)\"</span><span style=\"color: #f8f8f2;\">)</span>
<span style=\"color: #66d9ef;\">nil</span> <span style=\"color: #66d9ef;\">t</span><span style=\"color: #f8f8f2;\">))</span>
<span style=\"color: #f8f8f2;\">(error</span> <span style=\"color: #66d9ef;\">nil</span><span style=\"color: #f8f8f2;\">))))</span>
<span style=\"color: #f8f8f2;\">(message</span> <span style=\"color: #e6db74;\">\"%s\"</span> <span style=\"color: #f8f8f2;\">(startup-echo-area-message)))))</span>
</pre></div>
<p>So, basically what it does (or tries to do) is to control tightly the only ways
to disable that message: either via <code>customize</code> or by putting in your init file
(<code>.emacs</code>, or <code>.emacs.d/init.el</code>) and nowhere else a particular expression, as
explained in the documentation of <code>inhibit-startup-echo-area-message</code>. In both
case, your current user name will be used.</p>
<pre><code>Non-nil inhibits the initial startup echo area message.
Setting this variable takes effect
only if you do it with the customization buffer
or if your init file contains a line of this form:
(setq inhibit-startup-echo-area-message \"YOUR-USER-NAME\")
If your init file is byte-compiled, use the following form
instead:
(eval '(setq inhibit-startup-echo-area-message \"YOUR-USER-NAME\"))
Thus, someone else using a copy of your init file will see the
startup message unless he personally acts to inhibit it.
</code></pre>
<p>Now where people like me start having a problem with attempts like that is that
Emacs is pretty much trying to tell me what I should be doing with my
configuration:</p>
<ul>
<li>how I organize it. My init file is serious stuff, I don’t want to have that
silly form in there, instead I want it buried in an indirectly-loaded file
(along with many other very minor tweaks) that I can pretty much forget about</li>
<li>how I write it. Seriously? even <code>(set 'inhibit-startup-echo-area-message
\"YOUR-USER-NAME\")</code> doesn’t work. Let me emphasize this: source code that’s
supposedly <em>strictly equivalent</em>, or would even compile to the <em>exact same
bytecode</em> will behave differently! That’s beyond madness in my book: we’ve
just intentionally made the <em>implementation</em> of Emacs lisp engine part of the
<em>semantics</em> of Emacs lisp programs…</li>
<li>how I replicate it. Yes I have multiple user names depending on the machine,
no I don’t want to modify my configuration for each case, or generate it just
for that</li>
<li>how I distribute it. I like to share my config publicly, and I dislike having
stuff in there that’s relevant to me only (it’s bad enough that I probably
have those anyway, I shouldn’t be forced to)</li>
</ul>
<p>To add insult to injury, the code that’s attempting that is downright
disgusting, and of course flawed (everybody realizes this, but attempting to
constrain the user in Emacs is just doomed to fail), so it’s pretty much
useless. Therefore, in exchange for hypothetically protecting users against
massively incompetent misguided ill-intentioned people (I’m personally more
worried about the competent ones, but that’s probably just me), we hurt the
aesthetic sense of any developer who stumbles upon this monstrosity.  I guess
that’s where Free Software and Open Source start diverging… but I personally
don’t like trade-offs that result in shitty code.</p>
<p>Anyway, I’m still gonna use my right to publish free code that sidesteps that
abomination once and for all. I was briefly tempted to post it as a followup on
the <code>emacs-dev</code> mailing list, but that would be bad form (and pretty
useless). I’d rather let Google do their job. (bonus: disable the startup
screen as well). Oh yeah, I forgot to mention: I’d be <em>very</em> curious to know of
a single first-time user who will actually use <code>C-h C-a</code> to get information
about Emacs or GNU instead of asking Google these days. Imagining that just
because something is printed on screen people are actually gonna read it, or
act on it, is just wishful thinking. Just sayin’</p>
<p></p><div class=\"highlight\" style=\"background: #272822;\"><pre style=\"line-height: 125%;\"><span style=\"color: #75715e;\">;; Yes, it's disgusting, but it's a portable way to disable that silly</span>
<span style=\"color: #75715e;\">;; message</span>
<span style=\"color: #f8f8f2;\">(put</span> <span style=\"color: #e6db74;\">'inhibit-startup-echo-area-message</span> <span style=\"color: #e6db74;\">'saved-value</span>
<span style=\"color: #f8f8f2;\">(</span><span style=\"color: #66d9ef;\">setq</span> <span style=\"color: #f8f8f2;\">inhibit-startup-echo-area-message</span> <span style=\"color: #f8f8f2;\">(user-login-name)))</span>
<span style=\"color: #75715e;\">;; and now for the startup screen</span>
<span style=\"color: #f8f8f2;\">(</span><span style=\"color: #66d9ef;\">setq</span> <span style=\"color: #f8f8f2;\">inhibit-startup-screen</span> <span style=\"color: #66d9ef;\">t</span><span style=\"color: #f8f8f2;\">)</span>
</pre></div>
<p></p>
<p>There you go, you can put that somewhere in a dark corner of your Emacs
configuration and forget about it: it’s portable, it just works, and it doesn’t
open your init file a second time just for kicks (therefore makes the part
that’s messing with the semantics of the language dead code). The second line
is more or less what I’d actually want that code to be. The first line is just
about “exploiting” a silly assumption in the “protection” code.</p>
<p>Note that another popular way of getting rid of that pesky message is the much
more brutal solution provided by the
<a href=\"http://www.emacswiki.org/emacs/EmacsNiftyTricks#toc8\">Emacs Wiki</a></p>
<p></p><div class=\"highlight\" style=\"background: #272822;\"><pre style=\"line-height: 125%;\"><span style=\"color: #f8f8f2;\">(eval-after-load</span> <span style=\"color: #e6db74;\">\"startup\"</span> <span style=\"color: #f92672;\">'</span><span style=\"color: #f8f8f2;\">(fset</span> <span style=\"color: #e6db74;\">'display-startup-echo-area-message</span> <span style=\"color: #e6db74;\">'ignore</span><span style=\"color: #f8f8f2;\">)))</span>
</pre></div>
<p></p>
<p>I don’t like it too much though, cause unlike
<code>inhibit-startup-echo-area-message</code> which is part of the public interface of
Emacs, this function might change name without warning (although quite frankly
it’s pretty unlikely). Well, mostly a matter of taste I guess.</p>
<p>Oh by the way, if you’re an evil site administrator who wants to deny their
users the freedom to access information about Emacs, you can even put this in
<code>after-init-hook</code> (mostly for <code>inhibit-startup-screen</code> actually, reason left as
an exercise) and you’ll be fine. There, I just enabled evil behavior, I guess
I should feel bad about it.</p>
<p>Seriously, let’s be clear: if your users don’t <em>know</em> they’re in Emacs, or what
it is, or where to find the documentation, they’re <em>never</em> gonna get the hang
of it (it’s not like it’s a particularly intuitive editor). So if you really
want to prevent them from using Emacs, just don’t install it already.</p>
<p>All in all, I find the justification for that piece of code to be extremely
weak and unsubstantiated. Feels more like basic paranoia to me.</p>
<p>I sincerely hope that nobody will “iron” the stupid piece of code that
generates the need for this stupid hack… it’s hopeless anyway.
Although the version control history shows that quite a few people have been
“improving” it over the years… <em>sigh</em></p>" "http://yann.hodique.info/blog/rant-obfuscation-in-emacs/" (22142 48959) old 22 nil nil ((guid nil "http://yann.hodique.info/blog/rant-obfuscation-in-emacs/") (title ((type . "html") (lang . "en-us")) "Yann Hodique: Rant: Obfuscation in Emacs") (link ((href . "http://yann.hodique.info/blog/rant-obfuscation-in-emacs/"))) (id nil "http://yann.hodique.info/blog/rant-obfuscation-in-emacs/") (updated nil "2015-12-26T16:24:31+00:00") (content ((type . "html")) "<p>There’s been a bit of a discussion going on
<a href=\"http://thread.gmane.org/gmane.emacs.devel/196537\">here</a> regarding some very
weird beast in the Emacs code base. I find it quite interesting, cause it’s yet
another instance that reveals the diversity of points of view and priorities in
FOSS. And like a lot of people, I have a strong opinion, so I’ll rant a bit
about it :)</p>

<p>To give some context:</p>

<ul>
<li>by default, Emacs provides at startup information on Emacs and the GNU
project (which is definitely fine, maybe useful even). In this case,
a message saying “For information about GNU Emacs and the GNU system, type
C-h C-a.”</li>
<li>Emacs being pretty much all about customization, it provides ways to disable
that (again perfectly reasonable, after over 18 years spent in Emacs, I don’t
need the slightest reminder of what it is)</li>
<li>Emacs being a flagship project of GNU, it goes out of its way to make sure
that if that information is hidden, that’s only because <em>you</em> didn’t want it:
you, not your administrator (do real people still have those?), and not the
random guy you copied your Emacs configuration from (gosh, I miss the time
when <a href=\"http://dotemacs.de\">http://dotemacs.de</a> was a reference)</li>
</ul>

<p>That’s this last part that’s tricky. The code that does that follows, in all
it’s “splendor”. If you don’t puke when reading this, chances are you don’t
know Emacs lisp very well, or you have a very strong political agenda
(apparently RMS introduced that code back in 1994). Neither of those apply to
me, so I’ll be back in a minute.</p>

<div class=\"highlight\" style=\"background: #272822;\"><pre style=\"line-height: 125%;\"><span style=\"color: #f8f8f2;\">(defun</span> <span style=\"color: #f8f8f2;\">display-startup-echo-area-message</span> <span style=\"color: #f8f8f2;\">()</span>
  <span style=\"color: #f8f8f2;\">(</span><span style=\"color: #66d9ef;\">let</span> <span style=\"color: #f8f8f2;\">((resize-mini-windows</span> <span style=\"color: #66d9ef;\">t</span><span style=\"color: #f8f8f2;\">))</span>
    <span style=\"color: #f8f8f2;\">(or</span> <span style=\"color: #f8f8f2;\">noninteractive</span>                  <span style=\"color: #75715e;\">;(input-pending-p) init-file-had-error</span>
        <span style=\"color: #75715e;\">;; t if the init file says to inhibit the echo area startup message.</span>
        <span style=\"color: #f8f8f2;\">(and</span> <span style=\"color: #f8f8f2;\">inhibit-startup-echo-area-message</span>
             <span style=\"color: #f8f8f2;\">user-init-file</span>
             <span style=\"color: #f8f8f2;\">(or</span> <span style=\"color: #f8f8f2;\">(and</span> <span style=\"color: #f8f8f2;\">(get</span> <span style=\"color: #e6db74;\">'inhibit-startup-echo-area-message</span> <span style=\"color: #e6db74;\">'saved-value</span><span style=\"color: #f8f8f2;\">)</span>
                      <span style=\"color: #f8f8f2;\">(equal</span> <span style=\"color: #f8f8f2;\">inhibit-startup-echo-area-message</span>
                             <span style=\"color: #f8f8f2;\">(</span><span style=\"color: #66d9ef;\">if</span> <span style=\"color: #f8f8f2;\">(equal</span> <span style=\"color: #f8f8f2;\">init-file-user</span> <span style=\"color: #e6db74;\">\"\"</span><span style=\"color: #f8f8f2;\">)</span>
                                 <span style=\"color: #f8f8f2;\">(user-login-name)</span>
                               <span style=\"color: #f8f8f2;\">init-file-user)))</span>
                 <span style=\"color: #75715e;\">;; Wasn't set with custom; see if .emacs has a setq.</span>
                 <span style=\"color: #f8f8f2;\">(condition-case</span> <span style=\"color: #66d9ef;\">nil</span>
                     <span style=\"color: #f8f8f2;\">(with-temp-buffer</span>
                       <span style=\"color: #f8f8f2;\">(insert-file-contents</span> <span style=\"color: #f8f8f2;\">user-init-file)</span>
                       <span style=\"color: #f8f8f2;\">(re-search-forward</span>
                        <span style=\"color: #f8f8f2;\">(concat</span>
                         <span style=\"color: #e6db74;\">\"([ \\t\\n]*setq[ \\t\\n]+\"</span>
                         <span style=\"color: #e6db74;\">\"inhibit-startup-echo-area-message[ \\t\\n]+\"</span>
                         <span style=\"color: #f8f8f2;\">(regexp-quote</span>
                          <span style=\"color: #f8f8f2;\">(prin1-to-string</span>
                           <span style=\"color: #f8f8f2;\">(</span><span style=\"color: #66d9ef;\">if</span> <span style=\"color: #f8f8f2;\">(equal</span> <span style=\"color: #f8f8f2;\">init-file-user</span> <span style=\"color: #e6db74;\">\"\"</span><span style=\"color: #f8f8f2;\">)</span>
                               <span style=\"color: #f8f8f2;\">(user-login-name)</span>
                             <span style=\"color: #f8f8f2;\">init-file-user)))</span>
                         <span style=\"color: #e6db74;\">\"[ \\t\\n]*)\"</span><span style=\"color: #f8f8f2;\">)</span>
                        <span style=\"color: #66d9ef;\">nil</span> <span style=\"color: #66d9ef;\">t</span><span style=\"color: #f8f8f2;\">))</span>
                   <span style=\"color: #f8f8f2;\">(error</span> <span style=\"color: #66d9ef;\">nil</span><span style=\"color: #f8f8f2;\">))))</span>
        <span style=\"color: #f8f8f2;\">(message</span> <span style=\"color: #e6db74;\">\"%s\"</span> <span style=\"color: #f8f8f2;\">(startup-echo-area-message)))))</span>
</pre></div>


<p>So, basically what it does (or tries to do) is to control tightly the only ways
to disable that message: either via <code>customize</code> or by putting in your init file
(<code>.emacs</code>, or <code>.emacs.d/init.el</code>) and nowhere else a particular expression, as
explained in the documentation of <code>inhibit-startup-echo-area-message</code>. In both
case, your current user name will be used.</p>

<pre><code>Non-nil inhibits the initial startup echo area message.
Setting this variable takes effect
only if you do it with the customization buffer
or if your init file contains a line of this form:
 (setq inhibit-startup-echo-area-message \"YOUR-USER-NAME\")
If your init file is byte-compiled, use the following form
instead:
 (eval '(setq inhibit-startup-echo-area-message \"YOUR-USER-NAME\"))
Thus, someone else using a copy of your init file will see the
startup message unless he personally acts to inhibit it.
</code></pre>

<p>Now where people like me start having a problem with attempts like that is that
Emacs is pretty much trying to tell me what I should be doing with my
configuration:</p>

<ul>
<li>how I organize it. My init file is serious stuff, I don’t want to have that
silly form in there, instead I want it buried in an indirectly-loaded file
(along with many other very minor tweaks) that I can pretty much forget about</li>
<li>how I write it. Seriously? even <code>(set 'inhibit-startup-echo-area-message
\"YOUR-USER-NAME\")</code> doesn’t work. Let me emphasize this: source code that’s
supposedly <em>strictly equivalent</em>, or would even compile to the <em>exact same
bytecode</em> will behave differently! That’s beyond madness in my book: we’ve
just intentionally made the <em>implementation</em> of Emacs lisp engine part of the
<em>semantics</em> of Emacs lisp programs…</li>
<li>how I replicate it. Yes I have multiple user names depending on the machine,
no I don’t want to modify my configuration for each case, or generate it just
for that</li>
<li>how I distribute it. I like to share my config publicly, and I dislike having
stuff in there that’s relevant to me only (it’s bad enough that I probably
have those anyway, I shouldn’t be forced to)</li>
</ul>

<p>To add insult to injury, the code that’s attempting that is downright
disgusting, and of course flawed (everybody realizes this, but attempting to
constrain the user in Emacs is just doomed to fail), so it’s pretty much
useless. Therefore, in exchange for hypothetically protecting users against
massively incompetent misguided ill-intentioned people (I’m personally more
worried about the competent ones, but that’s probably just me), we hurt the
aesthetic sense of any developer who stumbles upon this monstrosity.  I guess
that’s where Free Software and Open Source start diverging… but I personally
don’t like trade-offs that result in shitty code.</p>

<p>Anyway, I’m still gonna use my right to publish free code that sidesteps that
abomination once and for all. I was briefly tempted to post it as a followup on
the <code>emacs-dev</code> mailing list, but that would be bad form (and pretty
useless). I’d rather let Google do their job. (bonus: disable the startup
screen as well). Oh yeah, I forgot to mention: I’d be <em>very</em> curious to know of
a single first-time user who will actually use <code>C-h C-a</code> to get information
about Emacs or GNU instead of asking Google these days. Imagining that just
because something is printed on screen people are actually gonna read it, or
act on it, is just wishful thinking. Just sayin’</p>

<p></p><div class=\"highlight\" style=\"background: #272822;\"><pre style=\"line-height: 125%;\"><span style=\"color: #75715e;\">;; Yes, it's disgusting, but it's a portable way to disable that silly</span>
<span style=\"color: #75715e;\">;; message</span>
<span style=\"color: #f8f8f2;\">(put</span> <span style=\"color: #e6db74;\">'inhibit-startup-echo-area-message</span> <span style=\"color: #e6db74;\">'saved-value</span>
     <span style=\"color: #f8f8f2;\">(</span><span style=\"color: #66d9ef;\">setq</span> <span style=\"color: #f8f8f2;\">inhibit-startup-echo-area-message</span> <span style=\"color: #f8f8f2;\">(user-login-name)))</span>

<span style=\"color: #75715e;\">;; and now for the startup screen</span>
<span style=\"color: #f8f8f2;\">(</span><span style=\"color: #66d9ef;\">setq</span> <span style=\"color: #f8f8f2;\">inhibit-startup-screen</span> <span style=\"color: #66d9ef;\">t</span><span style=\"color: #f8f8f2;\">)</span>
</pre></div>
<p></p>

<p>There you go, you can put that somewhere in a dark corner of your Emacs
configuration and forget about it: it’s portable, it just works, and it doesn’t
open your init file a second time just for kicks (therefore makes the part
that’s messing with the semantics of the language dead code). The second line
is more or less what I’d actually want that code to be. The first line is just
about “exploiting” a silly assumption in the “protection” code.</p>

<p>Note that another popular way of getting rid of that pesky message is the much
more brutal solution provided by the
<a href=\"http://www.emacswiki.org/emacs/EmacsNiftyTricks#toc8\">Emacs Wiki</a></p>

<p></p><div class=\"highlight\" style=\"background: #272822;\"><pre style=\"line-height: 125%;\"><span style=\"color: #f8f8f2;\">(eval-after-load</span> <span style=\"color: #e6db74;\">\"startup\"</span> <span style=\"color: #f92672;\">'</span><span style=\"color: #f8f8f2;\">(fset</span> <span style=\"color: #e6db74;\">'display-startup-echo-area-message</span> <span style=\"color: #e6db74;\">'ignore</span><span style=\"color: #f8f8f2;\">)))</span>
</pre></div>
<p></p>

<p>I don’t like it too much though, cause unlike
<code>inhibit-startup-echo-area-message</code> which is part of the public interface of
Emacs, this function might change name without warning (although quite frankly
it’s pretty unlikely). Well, mostly a matter of taste I guess.</p>

<p>Oh by the way, if you’re an evil site administrator who wants to deny their
users the freedom to access information about Emacs, you can even put this in
<code>after-init-hook</code> (mostly for <code>inhibit-startup-screen</code> actually, reason left as
an exercise) and you’ll be fine. There, I just enabled evil behavior, I guess
I should feel bad about it.</p>

<p>Seriously, let’s be clear: if your users don’t <em>know</em> they’re in Emacs, or what
it is, or where to find the documentation, they’re <em>never</em> gonna get the hang
of it (it’s not like it’s a particularly intuitive editor). So if you really
want to prevent them from using Emacs, just don’t install it already.</p>

<p>All in all, I find the justification for that piece of code to be extremely
weak and unsubstantiated. Feels more like basic paranoia to me.</p>

<p>I sincerely hope that nobody will “iron” the stupid piece of code that
generates the need for this stupid hack… it’s hopeless anyway.
Although the version control history shows that quite a few people have been
“improving” it over the years… <em>sigh</em></p>") (author nil (name nil "Yann Hodique") (uri nil "http://yann.hodique.info/blog/")) (source nil (title ((type . "html")) "Blog -- Yann Hodique") (subtitle ((type . "html")) "Recent content in Blog -- Yann Hodique") (link ((rel . "self") (href . "http://yann.hodique.info/blog/index.xml"))) (id nil "http://yann.hodique.info/blog/")))) ("Aaron Hawley: Pivotal CGI film history" "Twenty years ago, in 1995, the first full-length digital movie, Toy Story, was released to theatres.  In my opinion, here are some noteworthy uses of computer-generated imagery (CGI) in film for both technical and artistic reasons:<br /><br />Westworld (1973) is the first film to use digital image processing to pixelate conventional motion pictures to show the point-of-view of the android gun-slinging character played by Yul Brynner.<br /><br />Futureworld (1976) was the first movie to use computer generated 3D images. Animated models of the human hand and face were displayed on computer monitors to the actors who were playing scientists, including a polygon rendering of a topographic scan of actor Peter Fonda's face.<br /><br />The original Star Wars (1977) rendered a hologram of the attack on the Death Star for a Rebel Alliance pre-briefing. The X-wing fighters also included vector displays in the cockpit.<br /><br />Looker (1981) has the first realistic 3D computer image of a character with shading during a scene in the film during a body scanning of actress Susan Dey.<br /><br />Star Trek II: The Wrath of Khan (1982) has a sequence of space and an earth-like terrain built by Industrial Light &amp; Magic (ILM) and using fractals.<br /><br />Tron (1982) contained long sequences of 3D computer image scenes including the famous \"light cycle race\".<br /><br />The hologram briefing of the attack on Death Star II, \"the Endoor moon sequence\", is built by ILM for Lucasfilm's Return of the Jedi (1983).<br /><br />Ghostbusters (1984) includes various CGI enhanced scenes including, the short animated scene of a cloud covered \"Zuul pyramid\" inside the refrigerator of Sigourney Weaver's character.<br /><br />The Last Starfighter (1984) contained the first use of 3D animation to present objects in long fight sequences between starships in space.<br /><br />The film 2010: The Year We Make Contact (1984) included computer-generated cloud animation of Jupiter and the animation sequence of \"monoliths\" which eventually converts the planet to a star.<br /><br />The Adventures of André and Wally B. (1984) was a digital short by LucasArts that contains the first use of complex 3D backgrounds, motion-blur and lighting.<br /><br />Young Sherlock Homes (1985) featured the first animated realistic character, the \"glass knight\", that was rendered to the live action shots alongside the actors.<br /><br />Dire Strait's \"Money for Nothing\" music video (1985) had computer animated 3D human characters and was produced by people who would go on to form Rainmaker Entertainment, Inc. (formerly Mainframe Entertainment).<br /><br />Flight of the Navigator (1986) featured a computer generated starship inserted into the live-action shot that could reflect the surrounding environment.<br /><br />The Abysss (1989) featured a non-terrestrial intelligence (NTI) that was a column-shaped, water-like creature that interacted with the actors on screen.<br /><br />Indiana Jones and the Last Crusade (1989) featured computer generated scene elements.<br /><br />Dick Tracy (1990) is the first movie to be recorded with digital audio.<br /><br />Terminator 2 (1991) has sequences with computer-generated characters that mimic human motion, including one with the T-1000 that is capable of becoming liquid metal.<br /><br />Jurassic Park (1993) contained computer-generated imagery of dinosaurs, with some motion inputs sourced from physical actors, and stunt double face-replacement.<br /><br />Forrest Gump (1994) uses CG to integrate characters with archival footage, renders an actor as a leg amputee using blue-screen technology, and composes digital explosions with live actors during a Vietnam battle scene.<br /><br />Toy Story (1995) is the first full-length CGI film starring animated anthropomorphic toys.<br /><br />Star Wars re-release (1997) introduces digital characters and effects.<br /><br />The Matrix (1999) features digitally enhanced special effects and introduces a digitally composed slow-motion tracking shot, or \"bullet time\".<br /><br />The Scorpion King (2002) would use gratuitous amounts of poorly executed computer-generated imagery in the final fight scene that was missing any semblance of artistic realism, thus liberating the film industry to use CGI without restraint.<br /><br />References:<br /><br /><a href=\"http://en.wikipedia.org/wiki/Timeline_of_computer_animation_in_film_and_television\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Timeline_of_computer_animation_in_film_and_television</a><br /><br /><a href=\"http://www.cs.cmu.edu/~ph/nyit/masson/history.htm\" rel=\"nofollow\">http://www.cs.cmu.edu/~ph/nyit/masson/history.htm</a>" "http://aaronhawley.livejournal.com/32001.html" (22140 44692) old 23 nil nil ((guid nil "urn:lj:livejournal.com:atom1:aaronhawley:32001") (title ((type . "html")) "Aaron Hawley: Pivotal CGI film history") (link ((href . "http://aaronhawley.livejournal.com/32001.html"))) (id nil "urn:lj:livejournal.com:atom1:aaronhawley:32001") (updated nil "2015-12-25T02:48:52+00:00") (content ((type . "html")) "Twenty years ago, in 1995, the first full-length digital movie, Toy Story, was released to theatres.  In my opinion, here are some noteworthy uses of computer-generated imagery (CGI) in film for both technical and artistic reasons:<br /><br />Westworld (1973) is the first film to use digital image processing to pixelate conventional motion pictures to show the point-of-view of the android gun-slinging character played by Yul Brynner.<br /><br />Futureworld (1976) was the first movie to use computer generated 3D images. Animated models of the human hand and face were displayed on computer monitors to the actors who were playing scientists, including a polygon rendering of a topographic scan of actor Peter Fonda's face.<br /><br />The original Star Wars (1977) rendered a hologram of the attack on the Death Star for a Rebel Alliance pre-briefing. The X-wing fighters also included vector displays in the cockpit.<br /><br />Looker (1981) has the first realistic 3D computer image of a character with shading during a scene in the film during a body scanning of actress Susan Dey.<br /><br />Star Trek II: The Wrath of Khan (1982) has a sequence of space and an earth-like terrain built by Industrial Light &amp; Magic (ILM) and using fractals.<br /><br />Tron (1982) contained long sequences of 3D computer image scenes including the famous \"light cycle race\".<br /><br />The hologram briefing of the attack on Death Star II, \"the Endoor moon sequence\", is built by ILM for Lucasfilm's Return of the Jedi (1983).<br /><br />Ghostbusters (1984) includes various CGI enhanced scenes including, the short animated scene of a cloud covered \"Zuul pyramid\" inside the refrigerator of Sigourney Weaver's character.<br /><br />The Last Starfighter (1984) contained the first use of 3D animation to present objects in long fight sequences between starships in space.<br /><br />The film 2010: The Year We Make Contact (1984) included computer-generated cloud animation of Jupiter and the animation sequence of \"monoliths\" which eventually converts the planet to a star.<br /><br />The Adventures of André and Wally B. (1984) was a digital short by LucasArts that contains the first use of complex 3D backgrounds, motion-blur and lighting.<br /><br />Young Sherlock Homes (1985) featured the first animated realistic character, the \"glass knight\", that was rendered to the live action shots alongside the actors.<br /><br />Dire Strait's \"Money for Nothing\" music video (1985) had computer animated 3D human characters and was produced by people who would go on to form Rainmaker Entertainment, Inc. (formerly Mainframe Entertainment).<br /><br />Flight of the Navigator (1986) featured a computer generated starship inserted into the live-action shot that could reflect the surrounding environment.<br /><br />The Abysss (1989) featured a non-terrestrial intelligence (NTI) that was a column-shaped, water-like creature that interacted with the actors on screen.<br /><br />Indiana Jones and the Last Crusade (1989) featured computer generated scene elements.<br /><br />Dick Tracy (1990) is the first movie to be recorded with digital audio.<br /><br />Terminator 2 (1991) has sequences with computer-generated characters that mimic human motion, including one with the T-1000 that is capable of becoming liquid metal.<br /><br />Jurassic Park (1993) contained computer-generated imagery of dinosaurs, with some motion inputs sourced from physical actors, and stunt double face-replacement.<br /><br />Forrest Gump (1994) uses CG to integrate characters with archival footage, renders an actor as a leg amputee using blue-screen technology, and composes digital explosions with live actors during a Vietnam battle scene.<br /><br />Toy Story (1995) is the first full-length CGI film starring animated anthropomorphic toys.<br /><br />Star Wars re-release (1997) introduces digital characters and effects.<br /><br />The Matrix (1999) features digitally enhanced special effects and introduces a digitally composed slow-motion tracking shot, or \"bullet time\".<br /><br />The Scorpion King (2002) would use gratuitous amounts of poorly executed computer-generated imagery in the final fight scene that was missing any semblance of artistic realism, thus liberating the film industry to use CGI without restraint.<br /><br />References:<br /><br /><a href=\"http://en.wikipedia.org/wiki/Timeline_of_computer_animation_in_film_and_television\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Timeline_of_computer_animation_in_film_and_television</a><br /><br /><a href=\"http://www.cs.cmu.edu/~ph/nyit/masson/history.htm\" rel=\"nofollow\">http://www.cs.cmu.edu/~ph/nyit/masson/history.htm</a>") (author nil (name nil "Aaron S. Hawley") (uri nil "http://aaronhawley.livejournal.com/")) (source nil (title ((type . "html")) "refusal computing") (subtitle ((type . "html")) "Aaron S. Hawley") (link ((rel . "self") (href . "http://aaronhawley.livejournal.com/data/atom"))) (id nil "urn:lj:livejournal.com:atom1:aaronhawley")))) ("Mathias Dahl: Evil Mode hack for a colorful mode line" "<b>Intro</b><br /><br />After trying out Spacemacs for about a week (and failing - too much old configuration to \"convert\") I am trying out Evil Mode by itself. It goes forward, slowly, step by step.  <br /><br />One thing I have been a bit annoyed with was how the different states are visualized. Being a Evil/Vim newbie I want to see, clearly, in which state/mode I am in.  <br /><br />Today I decided to do something about it and here is how my Emacs looks now:  <br /><br /><b>Normal state</b><br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/-H0KzQZ44RvE/VnmDet8r2UI/AAAAAAABHGw/qaUQNwXJD04/s1600/2015-12-22%2B18_06_17-Program%2BManager.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"41\" src=\"http://2.bp.blogspot.com/-H0KzQZ44RvE/VnmDet8r2UI/AAAAAAABHGw/qaUQNwXJD04/s400/2015-12-22%2B18_06_17-Program%2BManager.png\" width=\"400\" /></a></div><br /><b>Insert state</b><br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/-KSgSChHlcww/VnmD6PgZaII/AAAAAAABHG4/KOnA5w4tZlk/s1600/2015-12-22%2B18_06_34-Program%2BManager.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://1.bp.blogspot.com/-KSgSChHlcww/VnmD6PgZaII/AAAAAAABHG4/KOnA5w4tZlk/s400/2015-12-22%2B18_06_34-Program%2BManager.png\" /></a></div><b><br /></b><b>Emacs state</b><br /><b><br /></b><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/-Cy16u4ZzTwg/VnmEB7LkiwI/AAAAAAABHHA/lM44bDKof6A/s1600/2015-12-22%2B18_07_03-Program%2BManager.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"42\" src=\"http://2.bp.blogspot.com/-Cy16u4ZzTwg/VnmEB7LkiwI/AAAAAAABHHA/lM44bDKof6A/s400/2015-12-22%2B18_07_03-Program%2BManager.png\" width=\"400\" /></a></div><b><br /></b><b><br /></b><b>How it was done</b><br /><br />I could not find any good entry points for customizing the mode line with respect to the Evil Mode states, but I found the function (evil-generate-mode-line-tag) that generates the part of the mode line that comes from Evil Mode. I simply made a copy of it and changed it to add also a face attribute to the mode line, and let the face be different depending on the mode.  <br /><br /><b>The code</b><br /><b><br /></b>Copy the code below and save it in a file called my-evil-hacks.el.<br />  <br /> After this you need to make sure to load this file after you have loaded Evil mode for the first time. One way to achieve this is to put the following snippet in your .emacs or init.el file:<br /> <pre>(with-eval-after-load \"evil\"<br />  (load \"my-evil-hacks\"))<br /></pre> Enjoy!" "http://muublog.blogspot.com/2015/12/evil-mode-hack-for-colorful-mode-line.html" (22137 34023) old 24 nil nil ((guid nil "tag:blogger.com,1999:blog-9910079.post-3690786608339147232") (title ((type . "html")) "Mathias Dahl: Evil Mode hack for a colorful mode line") (link ((href . "http://muublog.blogspot.com/2015/12/evil-mode-hack-for-colorful-mode-line.html"))) (id nil "tag:blogger.com,1999:blog-9910079.post-3690786608339147232") (updated nil "2015-12-22T17:14:15+00:00") (content ((type . "html")) "<b>Intro</b><br /><br />After trying out Spacemacs for about a week (and failing - too much old configuration to \"convert\") I am trying out Evil Mode by itself. It goes forward, slowly, step by step.  <br /><br />One thing I have been a bit annoyed with was how the different states are visualized. Being a Evil/Vim newbie I want to see, clearly, in which state/mode I am in.  <br /><br />Today I decided to do something about it and here is how my Emacs looks now:  <br /><br /><b>Normal state</b><br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/-H0KzQZ44RvE/VnmDet8r2UI/AAAAAAABHGw/qaUQNwXJD04/s1600/2015-12-22%2B18_06_17-Program%2BManager.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"41\" src=\"http://2.bp.blogspot.com/-H0KzQZ44RvE/VnmDet8r2UI/AAAAAAABHGw/qaUQNwXJD04/s400/2015-12-22%2B18_06_17-Program%2BManager.png\" width=\"400\" /></a></div><br /><b>Insert state</b><br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/-KSgSChHlcww/VnmD6PgZaII/AAAAAAABHG4/KOnA5w4tZlk/s1600/2015-12-22%2B18_06_34-Program%2BManager.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://1.bp.blogspot.com/-KSgSChHlcww/VnmD6PgZaII/AAAAAAABHG4/KOnA5w4tZlk/s400/2015-12-22%2B18_06_34-Program%2BManager.png\" /></a></div><b><br /></b><b>Emacs state</b><br /><b><br /></b><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/-Cy16u4ZzTwg/VnmEB7LkiwI/AAAAAAABHHA/lM44bDKof6A/s1600/2015-12-22%2B18_07_03-Program%2BManager.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"42\" src=\"http://2.bp.blogspot.com/-Cy16u4ZzTwg/VnmEB7LkiwI/AAAAAAABHHA/lM44bDKof6A/s400/2015-12-22%2B18_07_03-Program%2BManager.png\" width=\"400\" /></a></div><b><br /></b><b><br /></b><b>How it was done</b><br /><br />I could not find any good entry points for customizing the mode line with respect to the Evil Mode states, but I found the function (evil-generate-mode-line-tag) that generates the part of the mode line that comes from Evil Mode. I simply made a copy of it and changed it to add also a face attribute to the mode line, and let the face be different depending on the mode.  <br /><br /><b>The code</b><br /><b><br /></b>Copy the code below and save it in a file called my-evil-hacks.el.<br />  <br /> After this you need to make sure to load this file after you have loaded Evil mode for the first time. One way to achieve this is to put the following snippet in your .emacs or init.el file:<br /> <pre>(with-eval-after-load \"evil\"<br />  (load \"my-evil-hacks\"))<br /></pre> Enjoy!") (author nil (name nil "Mathias Dahl") (email nil "noreply@blogger.com") (uri nil "http://muublog.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "MuuBlog") (subtitle ((type . "html")) "MuuBlog - All things Muu") (link ((rel . "self") (href . "http://www.blogger.com/feeds/9910079/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-9910079")))) ("punchagan: Clock in and get-shit-done" "<p>
I had <a href=\"https://punchagan.muse-amuse.in/posts/simple-org-clock-and-gnomepidgin-integration.html\">setup</a> a couple of hooks about an year ago that turn off all notifications
while I'm clocking in. But, I find myself switching to the browser and jumping
to twitter, out of habit.  I've tried <a href=\"https://github.com/leftnode/get-shit-done\">get-shit-done</a> in the past to help myself
break this habit. But enabling get-shit-done manually is step that quickly
became a non-habit.
</p>
<p>
So, I hooked up get-shit-done into an <code>org-clock-in-hook</code>.  The snippet below
is what I added into a function that is added to this hook.
</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">with-temp-buffer</span>
<span class=\"p\">(</span><span class=\"nv\">cd</span> <span class=\"s\">\"/sudo::/\"</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nv\">shell-command</span> <span class=\"s\">\"HOME=/home/punchagan get-shit-done work\"</span><span class=\"p\">))</span>
</pre></div>
<p>
<code>get-shit-done</code> needs to be run as <code>root</code>, since it does things like modifying
<code>/etc/hosts</code> and restarting networking.  Just calling <code>get-shit-done</code> as a
shell command fails with the error <code>sudo: no tty present and no askpass program
specified</code>.  I found a couple of ways to fix this. The snippet above
piggy-backs on tramp to allow for a way to enter the password for <code>sudo</code> to
use. This also means that I don't need to enter the password, as long as the
tramp connection is alive.
</p>
<p>
For someone worried about having such an easy way of running something as
<code>root</code>, using something like <code>gnome-ssh-askpass</code> as the askpass program might
work better.
</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">shell-command</span> <span class=\"s\">\"SUDO_ASKPASS=\\\"/usr/lib/openssh/gnome-ssh-askpass\\\" get-shit-done work\"</span><span class=\"p\">)</span>
</pre></div>" "https://punchagan.muse-amuse.in/posts/clock-in-and-get-shit-done.html" (22137 23392) old 25 nil nil ((guid nil "https://punchagan.muse-amuse.in/posts/clock-in-and-get-shit-done.html") (title ((type . "html") (lang . "en")) "punchagan: Clock in and get-shit-done") (link ((href . "https://punchagan.muse-amuse.in/posts/clock-in-and-get-shit-done.html"))) (id nil "https://punchagan.muse-amuse.in/posts/clock-in-and-get-shit-done.html") (updated nil "2015-12-22T14:17:04+00:00") (content ((type . "html")) "<p>
I had <a href=\"https://punchagan.muse-amuse.in/posts/simple-org-clock-and-gnomepidgin-integration.html\">setup</a> a couple of hooks about an year ago that turn off all notifications
while I'm clocking in. But, I find myself switching to the browser and jumping
to twitter, out of habit.  I've tried <a href=\"https://github.com/leftnode/get-shit-done\">get-shit-done</a> in the past to help myself
break this habit. But enabling get-shit-done manually is step that quickly
became a non-habit.
</p>

<p>
So, I hooked up get-shit-done into an <code>org-clock-in-hook</code>.  The snippet below
is what I added into a function that is added to this hook.
</p>

<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">with-temp-buffer</span>
  <span class=\"p\">(</span><span class=\"nv\">cd</span> <span class=\"s\">\"/sudo::/\"</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nv\">shell-command</span> <span class=\"s\">\"HOME=/home/punchagan get-shit-done work\"</span><span class=\"p\">))</span>
</pre></div>

<p>
<code>get-shit-done</code> needs to be run as <code>root</code>, since it does things like modifying
<code>/etc/hosts</code> and restarting networking.  Just calling <code>get-shit-done</code> as a
shell command fails with the error <code>sudo: no tty present and no askpass program
specified</code>.  I found a couple of ways to fix this. The snippet above
piggy-backs on tramp to allow for a way to enter the password for <code>sudo</code> to
use. This also means that I don't need to enter the password, as long as the
tramp connection is alive.
</p>

<p>
For someone worried about having such an easy way of running something as
<code>root</code>, using something like <code>gnome-ssh-askpass</code> as the askpass program might
work better.
</p>

<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nv\">shell-command</span> <span class=\"s\">\"SUDO_ASKPASS=\\\"/usr/lib/openssh/gnome-ssh-askpass\\\" get-shit-done work\"</span><span class=\"p\">)</span>
</pre></div>") (author nil (name nil "punchagan") (uri nil "https://punchagan.muse-amuse.in/")) (source nil (title ((type . "html")) "Noetic Nought (emacs)") (link ((rel . "self") (href . "https://punchagan.muse-amuse.in/tags/emacs.xml"))) (id nil "https://punchagan.muse-amuse.in/")))) ("punchagan: Elfeed hook to fetch full content" "<p>
I have started to use <a href=\"http://pinboard.in\">Pinboard</a>'s <code>unread</code> tag as my to-read list.  It has a
bookmark-let that works pretty well for adding stuff into my \"to-read\" list.  I
then catch up on this list using <code>elfeed</code> and subscribing to the unread items'
RSS feed.  The work-flow is pretty nice for adding stuff into the list, and
finding items on the list. But, when it comes to the actual reading part, the
entries in the feed don't have the actual content I want to read, and I end up
opening the links in a browser.
</p>
<p>
Inspired by a <a href=\"https://github.com/sursh/blaggregator/pull/80#issuecomment-165849126\">comment from FiloSottile</a>, I realized it should be pretty easy to
setup a hook that fetches the actual content to make my reading work-flow
smoother. I wrote a <a href=\"https://github.com/punchagan/dot-files/blob/master/bin/get_article.py\">small script</a>, using <a href=\"https://github.com/buriy/python-readability\">python-readability</a>, to fetch the page
content, given a URL. This script is then hooked onto <code>elfeed-new-entry-hook</code>,
to fetch content of for new entries as they are fetched.  All the old entries
can be easily fixed with a single call to <code>elfeed-apply-hooks-now</code>.
</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">pc/get-url-content</span> <span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">)</span>
<span class=\"s\">\"Fetches the content for a url.\"</span>
<span class=\"p\">(</span><span class=\"nv\">shell-command-to-string</span> <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">\"~/bin/get_article.py %s\"</span> <span class=\"nv\">url</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">pc/get-entry-content</span> <span class=\"p\">(</span><span class=\"nv\">entry</span><span class=\"p\">)</span>
<span class=\"s\">\"Fetches content for pinboard entries that are not tweets.\"</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">entry</span> <span class=\"nv\">elfeed-show-entry</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"nv\">entry</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">url</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-entry-link</span> <span class=\"nv\">entry</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">feed-id</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-deref</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-entry-feed-id</span> <span class=\"nv\">entry</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nv\">content</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-deref</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-entry-content</span> <span class=\"nv\">entry</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"p\">(</span><span class=\"nv\">s-matches?</span> <span class=\"s\">\"feeds.pinboard.in/\"</span> <span class=\"nv\">feed-id</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">not</span> <span class=\"p\">(</span><span class=\"nv\">s-matches?</span> <span class=\"s\">\"twitter.com/\\\\|pdf$\\\\|png$\\\\|jpg$\"</span> <span class=\"nv\">url</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">string-equal</span> <span class=\"s\">\"\"</span> <span class=\"nv\">content</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">content</span> <span class=\"p\">(</span><span class=\"nv\">pc/get-url-content</span> <span class=\"nv\">url</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">setf</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-entry-content</span> <span class=\"nv\">entry</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-ref</span> <span class=\"nv\">content</span><span class=\"p\">)))))</span>
<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">'elfeed-new-entry-hook</span> <span class=\"nf\">#'</span><span class=\"nv\">pc/get-entry-content</span><span class=\"p\">)</span>
</pre></div>" "https://punchagan.muse-amuse.in/posts/elfeed-hook-to-fetch-full-content.html" (22133 4461) old 26 nil nil ((guid nil "https://punchagan.muse-amuse.in/posts/elfeed-hook-to-fetch-full-content.html") (title ((type . "html") (lang . "en")) "punchagan: Elfeed hook to fetch full content") (link ((href . "https://punchagan.muse-amuse.in/posts/elfeed-hook-to-fetch-full-content.html"))) (id nil "https://punchagan.muse-amuse.in/posts/elfeed-hook-to-fetch-full-content.html") (updated nil "2015-12-19T08:12:29+00:00") (content ((type . "html")) "<p>
I have started to use <a href=\"http://pinboard.in\">Pinboard</a>'s <code>unread</code> tag as my to-read list.  It has a
bookmark-let that works pretty well for adding stuff into my \"to-read\" list.  I
then catch up on this list using <code>elfeed</code> and subscribing to the unread items'
RSS feed.  The work-flow is pretty nice for adding stuff into the list, and
finding items on the list. But, when it comes to the actual reading part, the
entries in the feed don't have the actual content I want to read, and I end up
opening the links in a browser.
</p>

<p>
Inspired by a <a href=\"https://github.com/sursh/blaggregator/pull/80#issuecomment-165849126\">comment from FiloSottile</a>, I realized it should be pretty easy to
setup a hook that fetches the actual content to make my reading work-flow
smoother. I wrote a <a href=\"https://github.com/punchagan/dot-files/blob/master/bin/get_article.py\">small script</a>, using <a href=\"https://github.com/buriy/python-readability\">python-readability</a>, to fetch the page
content, given a URL. This script is then hooked onto <code>elfeed-new-entry-hook</code>,
to fetch content of for new entries as they are fetched.  All the old entries
can be easily fixed with a single call to <code>elfeed-apply-hooks-now</code>.
</p>

<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">pc/get-url-content</span> <span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">)</span>
  <span class=\"s\">\"Fetches the content for a url.\"</span>
  <span class=\"p\">(</span><span class=\"nv\">shell-command-to-string</span> <span class=\"p\">(</span><span class=\"nb\">format</span> <span class=\"s\">\"~/bin/get_article.py %s\"</span> <span class=\"nv\">url</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">pc/get-entry-content</span> <span class=\"p\">(</span><span class=\"nv\">entry</span><span class=\"p\">)</span>
  <span class=\"s\">\"Fetches content for pinboard entries that are not tweets.\"</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span>
   <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">entry</span> <span class=\"nv\">elfeed-show-entry</span><span class=\"p\">))</span>
     <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"nv\">entry</span><span class=\"p\">)))</span>

  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">url</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-entry-link</span> <span class=\"nv\">entry</span><span class=\"p\">))</span>
	<span class=\"p\">(</span><span class=\"nv\">feed-id</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-deref</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-entry-feed-id</span> <span class=\"nv\">entry</span><span class=\"p\">)))</span>
	<span class=\"p\">(</span><span class=\"nv\">content</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-deref</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-entry-content</span> <span class=\"nv\">entry</span><span class=\"p\">))))</span>
    <span class=\"p\">(</span><span class=\"nb\">when</span> <span class=\"p\">(</span><span class=\"nb\">and</span> <span class=\"p\">(</span><span class=\"nv\">s-matches?</span> <span class=\"s\">\"feeds.pinboard.in/\"</span> <span class=\"nv\">feed-id</span><span class=\"p\">)</span>
	       <span class=\"p\">(</span><span class=\"nb\">not</span> <span class=\"p\">(</span><span class=\"nv\">s-matches?</span> <span class=\"s\">\"twitter.com/\\\\|pdf$\\\\|png$\\\\|jpg$\"</span> <span class=\"nv\">url</span><span class=\"p\">))</span>
	       <span class=\"p\">(</span><span class=\"nb\">string-equal</span> <span class=\"s\">\"\"</span> <span class=\"nv\">content</span><span class=\"p\">))</span>
      <span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">content</span> <span class=\"p\">(</span><span class=\"nv\">pc/get-url-content</span> <span class=\"nv\">url</span><span class=\"p\">))</span>
      <span class=\"p\">(</span><span class=\"nb\">setf</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-entry-content</span> <span class=\"nv\">entry</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">elfeed-ref</span> <span class=\"nv\">content</span><span class=\"p\">)))))</span>

<span class=\"p\">(</span><span class=\"nv\">add-hook</span> <span class=\"ss\">'elfeed-new-entry-hook</span> <span class=\"nf\">#'</span><span class=\"nv\">pc/get-entry-content</span><span class=\"p\">)</span>
</pre></div>") (author nil (name nil "punchagan") (uri nil "https://punchagan.muse-amuse.in/")) (source nil (title ((type . "html")) "Noetic Nought (emacs)") (link ((rel . "self") (href . "https://punchagan.muse-amuse.in/tags/emacs.xml"))) (id nil "https://punchagan.muse-amuse.in/")))) ("Ryan Rix: Matrix and IndieWeb: A match made in heaven? 👼" "One of the core benefits of Matrix is the fact that, at the end of the day, you own any chat room you participate in. There is no central authority that can shutter a chat, if you run your own homeserver, your homeserver and the homeservers of others make sure the rooms you care about stay alive. This is an incredibly important property of any ecosystem I choose to participate in, more and more -- I simply do not trust non-caring third parties to reliably power infrastructure that I build my personal life around. I don't want to trust a Google or a Facebook to not shutter their products in a way that is inaccessible to me, I don't want to trust them to keep my conversations safe and private." "http://whatthefuck.computer/blog/2015/12/19/matrix-and-indieweb" (22132 40448) old 27 nil nil ((guid nil "http://whatthefuck.computer/blog/2015/12/19/matrix-and-indieweb") (title ((type . "html")) "Ryan Rix: Matrix and IndieWeb: A match made in heaven? 👼") (link ((href . "http://whatthefuck.computer/blog/2015/12/19/matrix-and-indieweb"))) (id nil "http://whatthefuck.computer/blog/2015/12/19/matrix-and-indieweb") (updated nil "2015-12-19T00:00:00+00:00") (content ((type . "html")) "One of the core benefits of Matrix is the fact that, at the end of the day, you own any chat room you participate in. There is no central authority that can shutter a chat, if you run your own homeserver, your homeserver and the homeservers of others make sure the rooms you care about stay alive. This is an incredibly important property of any ecosystem I choose to participate in, more and more -- I simply do not trust non-caring third parties to reliably power infrastructure that I build my personal life around. I don't want to trust a Google or a Facebook to not shutter their products in a way that is inaccessible to me, I don't want to trust them to keep my conversations safe and private.") (author nil (name nil "Ryan Rix") (uri nil "http://whatthefuck.computer")) (source nil (title ((type . "html")) "Computer :(") (subtitle ((type . "html")) "/home/rrix") (link ((rel . "self") (href . "http://whatthefuck.computer/rss.xml"))) (id nil "http://whatthefuck.computer")))) ("emacspeak: Soundscapes On The Emacspeak Audio Desktop" "<div dir=\"ltr\" style=\"text-align: left;\"><div id=\"content\"><h1 class=\"title\">Soundscapes On The Emacspeak Audio Desktop</h1><div class=\"outline-2\" id=\"outline-container-orgheadline1\"><h2 id=\"orgheadline1\"><span class=\"section-number-2\">1</span> Executive Summary</h2><div class=\"outline-text-2\" id=\"text-1\"><p>Emacspeak module <a href=\"http://tvraman.github.io/emacspeak/manual/soundscape.html\">soundscape</a> adds the ability to automatically switch<br />
<b>Soundscapes</b> based on the current buffer. A <b>Soundscape</b> can be any<br />
continuously playing stream of audio; in practice, using nature sounds<br />
that repeat softly in a pseudo-random manner appears to be<br />
effective. Soundscapes are activated based on the currently active<br />
<i>Emacs Major Mode</i> and as a consequence directly mirror the user's<br />
current activity. The present implementation uses Python package<br />
<a href=\"http://boodler.org/\">Boodler</a> to generate soundscapes.<br />
</p></div></div><br />
<div class=\"outline-2\" id=\"outline-container-orgheadline2\"><h2 id=\"orgheadline2\"><span class=\"section-number-2\">2</span> Usage</h2><div class=\"outline-text-2\" id=\"text-2\"><p>Note that package <code>soundscape.el</code> does not have any Emacspeak<br />
dependencies. See the <a href=\"http://tvraman.github.io/emacspeak/manual/soundscape\">package documentation</a> for details on installing<br />
and configuring <a href=\"http://boodler.org/\">Boodler</a>. <br />
</p><br />
<p>You can experiment with installed Boodler agents using command<br />
<code>soundscape</code> and <code>soundscape-stop</code>. You can enable and disable<br />
<i>automatic soundscapes</i> using command <code>soundscape-toggle</code>. The<br />
currently active default Soundscape theme can be inspected via command<br />
<code>soundscape-display</code> — this produces a buffer that lists the<br />
currently defined /major-mode -&gt; Soundscape mapping. <br />
</p><br />
<p>Package <code>soundscape.el</code> considers the inheritance relationship among<br />
Emacs major-modes when computing the set of <i>soundscapes</i> to<br />
activate.As an example, <span class=\"underline\">eww-mode</span> inherits from <span class=\"underline\">special-mode</span> — as<br />
a consequence, two soundscapes (<i>LightWind</i> and <i>BackgroundWaves</i>)<br />
become active when reading Web content.<br />
</p></div></div><br />
<div class=\"outline-2\" id=\"outline-container-orgheadline3\"><h2 id=\"orgheadline3\"><span class=\"section-number-2\">3</span> Default Major-Mode-&gt;Soundscape (Mood) Mapping:</h2><div class=\"outline-text-2\" id=\"text-3\"><p>Here is a table showing the mapping of major-mmodes to Soundscape<br />
moods at the time of writing. For readability, I have stripped out the<br />
<span class=\"underline\">package-name</span> for these soundscapes.<br />
</p><br />
<br />
<table border=\"2\" cellpadding=\"6\" cellspacing=\"0\" frame=\"hsides\" rules=\"groups\">
<colgroup>
<col class=\"org-left\" />
<col class=\"org-left\" />
</colgroup>
<tbody>
<tr>
<td class=\"org-left\">Soundscape (Mood)</td>
<td class=\"org-left\">List Of Major Modes</td>
</tr>
<tr>
<td class=\"org-left\">BuddhaLoop</td>
<td class=\"org-left\">fundamental</td>
</tr>
<tr>
<td class=\"org-left\">LightStorm</td>
<td class=\"org-left\">special</td>
</tr>
<tr>
<td class=\"org-left\">RainForever</td>
<td class=\"org-left\">Info help Man Custom messages-buffer</td>
</tr>
<tr>
<td class=\"org-left\">LightWind</td>
<td class=\"org-left\">comint elfeed-search</td>
</tr>
<tr>
<td class=\"org-left\">TonkSpace</td>
<td class=\"org-left\">tabulated-list</td>
</tr>
<tr>
<td class=\"org-left\">Cavern</td>
<td class=\"org-left\">prog</td>
</tr>
<tr>
<td class=\"org-left\">Drip</td>
<td class=\"org-left\">message gnus-summary gnus-article gnus-group mspools vm-presentation vm mail twittering jabber-roster jabber-chat erc</td>
</tr>
<tr>
<td class=\"org-left\">Still</td>
<td class=\"org-left\">text</td>
</tr>
<tr>
<td class=\"org-left\">Water</td>
<td class=\"org-left\">dired</td>
</tr>
<tr>
<td class=\"org-left\">Steady</td>
<td class=\"org-left\">calendar diary</td>
</tr>
<tr>
<td class=\"org-left\">BackgroundWaves</td>
<td class=\"org-left\">w3 eww</td>
</tr>
</tbody>
</table></div></div><br />
<div class=\"outline-2\" id=\"outline-container-orgheadline4\"><h2 id=\"orgheadline4\"><span class=\"section-number-2\">4</span> Soundscape Research</h2><div class=\"outline-text-2\" id=\"text-4\"><p>I implemented package <code>soundscape.el</code> to create a platform that would<br />
let me experiment with different tools that aid in<br />
concentration. After using Soundscapes for about a week, I have also<br />
found that it reduces some of the fatigue that results from having to<br />
listen to synthetic text-to-speech for extended  periods.<br />
The true value (if any) of this package will be a function of how heavily<br />
I find myself using it six months from now — as a metric, <i>complete<br />
success</i>  might mean that in mid-2016, I still  have automatic<br />
soundscapes turned on.<br />
As I type this article in Emacs <span class=\"underline\">org-mode</span>, I hear  the sound of<br />
water-drops falling softly in the background, and I take note<br />
that I have not switched tasks  for the entire time I have spent<br />
writing this article.<br />
</p><br />
<p>Other success metrics — harder to measure — might include how<br />
effective Soundscapes are in helping the user stay focused on a<br />
given activity for extended periods of time. In an ever-connected<br />
world buzzing with a constant stream of distractions ranging from<br />
incoming email and instant-messages to a flood of twitter updates,<br />
this is likely the most relevant metric.<br />
</p></div></div></div></div>" "http://emacspeak.blogspot.com/2015/12/soundscapes-on-emacspeak-audio-desktop.html" (22132 22919) old 28 nil nil ((guid nil "tag:blogger.com,1999:blog-20280042.post-1743443909224540427") (title ((type . "html")) "emacspeak: Soundscapes On The Emacspeak Audio Desktop") (link ((href . "http://emacspeak.blogspot.com/2015/12/soundscapes-on-emacspeak-audio-desktop.html"))) (id nil "tag:blogger.com,1999:blog-20280042.post-1743443909224540427") (updated nil "2015-12-18T19:07:51+00:00") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\"><div id=\"content\"><h1 class=\"title\">Soundscapes On The Emacspeak Audio Desktop</h1><div class=\"outline-2\" id=\"outline-container-orgheadline1\"><h2 id=\"orgheadline1\"><span class=\"section-number-2\">1</span> Executive Summary</h2><div class=\"outline-text-2\" id=\"text-1\"><p>Emacspeak module <a href=\"http://tvraman.github.io/emacspeak/manual/soundscape.html\">soundscape</a> adds the ability to automatically switch<br />
<b>Soundscapes</b> based on the current buffer. A <b>Soundscape</b> can be any<br />
continuously playing stream of audio; in practice, using nature sounds<br />
that repeat softly in a pseudo-random manner appears to be<br />
effective. Soundscapes are activated based on the currently active<br />
<i>Emacs Major Mode</i> and as a consequence directly mirror the user's<br />
current activity. The present implementation uses Python package<br />
<a href=\"http://boodler.org/\">Boodler</a> to generate soundscapes.<br />
</p></div></div><br />
<div class=\"outline-2\" id=\"outline-container-orgheadline2\"><h2 id=\"orgheadline2\"><span class=\"section-number-2\">2</span> Usage</h2><div class=\"outline-text-2\" id=\"text-2\"><p>Note that package <code>soundscape.el</code> does not have any Emacspeak<br />
dependencies. See the <a href=\"http://tvraman.github.io/emacspeak/manual/soundscape\">package documentation</a> for details on installing<br />
and configuring <a href=\"http://boodler.org/\">Boodler</a>. <br />
</p><br />
<p>You can experiment with installed Boodler agents using command<br />
<code>soundscape</code> and <code>soundscape-stop</code>. You can enable and disable<br />
<i>automatic soundscapes</i> using command <code>soundscape-toggle</code>. The<br />
currently active default Soundscape theme can be inspected via command<br />
<code>soundscape-display</code> — this produces a buffer that lists the<br />
currently defined /major-mode -&gt; Soundscape mapping. <br />
</p><br />
<p>Package <code>soundscape.el</code> considers the inheritance relationship among<br />
Emacs major-modes when computing the set of <i>soundscapes</i> to<br />
activate.As an example, <span class=\"underline\">eww-mode</span> inherits from <span class=\"underline\">special-mode</span> — as<br />
a consequence, two soundscapes (<i>LightWind</i> and <i>BackgroundWaves</i>)<br />
become active when reading Web content.<br />
</p></div></div><br />
<div class=\"outline-2\" id=\"outline-container-orgheadline3\"><h2 id=\"orgheadline3\"><span class=\"section-number-2\">3</span> Default Major-Mode-&gt;Soundscape (Mood) Mapping:</h2><div class=\"outline-text-2\" id=\"text-3\"><p>Here is a table showing the mapping of major-mmodes to Soundscape<br />
moods at the time of writing. For readability, I have stripped out the<br />
<span class=\"underline\">package-name</span> for these soundscapes.<br />
</p><br />
<br />
<table border=\"2\" cellpadding=\"6\" cellspacing=\"0\" frame=\"hsides\" rules=\"groups\">

<colgroup>
<col class=\"org-left\" />

<col class=\"org-left\" />
</colgroup>
<tbody>
<tr>
<td class=\"org-left\">Soundscape (Mood)</td>
<td class=\"org-left\">List Of Major Modes</td>
</tr>

<tr>
<td class=\"org-left\">BuddhaLoop</td>
<td class=\"org-left\">fundamental</td>
</tr>

<tr>
<td class=\"org-left\">LightStorm</td>
<td class=\"org-left\">special</td>
</tr>

<tr>
<td class=\"org-left\">RainForever</td>
<td class=\"org-left\">Info help Man Custom messages-buffer</td>
</tr>

<tr>
<td class=\"org-left\">LightWind</td>
<td class=\"org-left\">comint elfeed-search</td>
</tr>

<tr>
<td class=\"org-left\">TonkSpace</td>
<td class=\"org-left\">tabulated-list</td>
</tr>

<tr>
<td class=\"org-left\">Cavern</td>
<td class=\"org-left\">prog</td>
</tr>

<tr>
<td class=\"org-left\">Drip</td>
<td class=\"org-left\">message gnus-summary gnus-article gnus-group mspools vm-presentation vm mail twittering jabber-roster jabber-chat erc</td>
</tr>

<tr>
<td class=\"org-left\">Still</td>
<td class=\"org-left\">text</td>
</tr>

<tr>
<td class=\"org-left\">Water</td>
<td class=\"org-left\">dired</td>
</tr>

<tr>
<td class=\"org-left\">Steady</td>
<td class=\"org-left\">calendar diary</td>
</tr>

<tr>
<td class=\"org-left\">BackgroundWaves</td>
<td class=\"org-left\">w3 eww</td>
</tr>
</tbody>
</table></div></div><br />
<div class=\"outline-2\" id=\"outline-container-orgheadline4\"><h2 id=\"orgheadline4\"><span class=\"section-number-2\">4</span> Soundscape Research</h2><div class=\"outline-text-2\" id=\"text-4\"><p>I implemented package <code>soundscape.el</code> to create a platform that would<br />
let me experiment with different tools that aid in<br />
concentration. After using Soundscapes for about a week, I have also<br />
found that it reduces some of the fatigue that results from having to<br />
listen to synthetic text-to-speech for extended  periods.<br />
The true value (if any) of this package will be a function of how heavily<br />
I find myself using it six months from now — as a metric, <i>complete<br />
success</i>  might mean that in mid-2016, I still  have automatic<br />
soundscapes turned on.<br />
As I type this article in Emacs <span class=\"underline\">org-mode</span>, I hear  the sound of<br />
water-drops falling softly in the background, and I take note<br />
that I have not switched tasks  for the entire time I have spent<br />
writing this article.<br />
</p><br />
<p>Other success metrics — harder to measure — might include how<br />
effective Soundscapes are in helping the user stay focused on a<br />
given activity for extended periods of time. In an ever-connected<br />
world buzzing with a constant stream of distractions ranging from<br />
incoming email and instant-messages to a flood of twitter updates,<br />
this is likely the most relevant metric.<br />
</p></div></div></div></div>") (author nil (name nil "T. V. Raman") (email nil "noreply@blogger.com") (uri nil "http://emacspeak.blogspot.com/")) (source nil (title ((type . "html")) "EMACSPEAK  The Complete Audio Desktop") (subtitle ((type . "html")) "Here is where I plan to Blog Emacspeak tricks and introduce new features as I implement them.") (link ((rel . "self") (href . "http://www.blogger.com/feeds/20280042/posts/default?alt=atom"))) (id nil "tag:blogger.com,1999:blog-20280042")))) ("Bryan Murdock: Linux Environment Management" "<h4 class=\"title\">
Linux Environment Considerations</h4>
<div class=\"outline-2\" id=\"outline-container-sec-1\">
<div class=\"outline-text-2\" id=\"text-1\">
The Linux Environments that ASIC and SoC (chip) design teams use are often messy and confusing.  When team members work on multiple ASIC projects that each require different sets of tools the problem is even worse.  When engineers spend time fighting the environment that slows down the development of our chips little by little each day.  This doesn't need to be the case.  This post explains:<br />
<ul class=\"org-ul\">
<li>What a Linux Environment is<br />
</li>
<li>Why it's important, especially for ASIC projects<br />
</li>
<li>Techniques to configure and manage the environment<br />
</li>
</ul>
</div>
<div class=\"outline-3\" id=\"outline-container-sec-1-1\">
<h5 id=\"sec-1-1\">
What is an Environment?</h5>
<div class=\"outline-text-3\" id=\"text-1-1\">
In Linux, every process runs with a set of environment variables available to it.  This set of environment variables is often referred to simply as, the environment.  Here are some examples of how programs use the environment:<br />
<br />
<ul class=\"org-ul\">
<li>The command-line shell uses the <code>PATH</code> environment variable to find the programs you ask it to run<br />
</li>
<li>Programs use <code>LD_LIBRARY_PATH</code> to find compiled libraries that they rely on<br />
</li>
<li>ASIC design and verification tools use the <code>LM_LICENSE_FILE</code> environment variable to determine how to contact their required license servers.<br />
</li>
</ul>
<br />
For most Linux users the environment isn't much of a concern.  When they log in it gets configured by shell initialization files for the common programs and libraries that they use and they are good to go.  We ASIC engineers are much more demanding of our environment.  We generally use a wide array of software tools that are not included in our Linux distribution.  We also keep multiple versions of each of those tools installed so we can try new versions out and revert back to using old versions when needed.  Our environment needs to be configured for each of these tools and reconfigured when we want to switch which version of the tool we are using.  Making matters worse most of these ASIC tools require more than just <code>PATH</code> and <code>LM_LICENSE_FILE</code> environment variables, they have a wide assortment of other variables they expect to be set in your environment for proper operation.</div>
</div>
<div class=\"outline-3\" id=\"outline-container-sec-1-2\">
<h5 id=\"sec-1-2\">
Managing The Environment</h5>
<div class=\"outline-text-3\" id=\"text-1-2\">
There are several ways to manage your Linux shell environment.  Let's take a look at them.</div>
<div class=\"outline-4\" id=\"outline-container-sec-1-2-1\">
<h6 id=\"sec-1-2-1\">
Default Shell Initialization Files</h6>
<div class=\"outline-text-4\" id=\"text-1-2-1\">
This was mentioned in the introduction.  With this technique you simply put all configuration in the shell initialization files (<code>~/.profile</code>, <code>~/.bashrc</code>, <code>~/.cshrc</code>, etc.).<br />
<br />
Benefits:<br />
<ul class=\"org-ul\">
<li>This is the standard way of managing your environment in linux<br />
</li>
<li>Simple, easy to understand for everyone<br />
</li>
<li>You can use standard shell commands to inspect your environment: <code>env</code>, <code>echo $VARIABLE_NAME</code>, etc.<br />
</li>
</ul>
Downsides:<br />
<ul class=\"org-ul\">
<li>Only supports one version of any given tool.  To use a different version of a tool you have to edit your shell initialization files, then start a new shell for them to take affect.<br />
</li>
<li>Everyone has their own initialization files, which makes it hard to ensure everyone is using the same environment<br />
</li>
</ul>
</div>
</div>
<div class=\"outline-4\" id=\"outline-container-sec-1-2-2\">
<h6 id=\"sec-1-2-2\">
Explicit Environment Files</h6>
<div class=\"outline-text-4\" id=\"text-1-2-2\">
Another approach is to have explicit environment configuration files.  When you log in or start a new terminal session a minimal environment will be configured by the normal shell initialization files, and then you issue a command to configure that shell instance with the desired environment.  The environment configuration files can be simple shell-syntax files (and the command as simple as <code>. environment-init</code> or <code>source environment-init</code>).  Alternatively, there is an open source tool named <a href=\"http://modules.sourceforge.net/\">Environment Modules</a> that teams often use for this.<br />
<br />
Benefits:<br />
<ul class=\"org-ul\">
<li>Environment configuration files can be centralized so there is one file that everyone uses<br />
</li>
<li>You can maintain multiple configuration files as needed: one per tool version, one per project, one per engineering role, etc.<br />
</li>
<li>Project leads and/or tool administrators can easily create and maintain the configuration files so individual engineers don't have to<br />
</li>
<li>You can use standard shell commands to inspect your environment: <code>env</code>, <code>echo $VARIABLE_NAME</code>, etc.<br />
</li>
</ul>
Downsides:<br />
<ul class=\"org-ul\">
<li>Once an environment configuration is loaded it's difficult to unload (you need to start a fresh shell to be sure)<sup><a class=\"footref\" href=\"https://www.blogger.com/blogger.g?blogID=3669809752172683097#fn.1\" id=\"fnr.1\" name=\"fnr.1\">1</a></sup><br />
</li>
<li>If you use Environment Modules for this, environment configuration files have to be written in Tcl<sup><a class=\"footref\" href=\"https://www.blogger.com/blogger.g?blogID=3669809752172683097#fn.2\" id=\"fnr.2\" name=\"fnr.2\">2</a></sup><br />
</li>
</ul>
</div>
</div>
<div class=\"outline-4\" id=\"outline-container-sec-1-2-3\">
<h6 id=\"sec-1-2-3\">
Per-command Environment Files</h6>
<div class=\"outline-text-4\" id=\"text-1-2-3\">
Another approach is to prefix every command that needs a special environment with a command that spawns a subshell, sets up the necessary environment, and then runs the intended command.  It looks sort of like this:<br />
<pre class=\"example\">envA simulation-command
</pre>
This way your interactive shell is never poluted with project- or tool-specific settings (just the subshell is) and you can easily switch to a different environment on a per-command basis:<br />
<pre class=\"example\">envA simulation-command
cd &lt;another-project-area&gt;
envB synthesis-command
</pre>
Benefits:<br />
<ul class=\"org-ul\">
<li>All the same benefits of Explicit Environment Files mentioned above<br />
</li>
<li>Easy to use different environment configurations, even on a per-command basis (you don't have to start a fresh shell for each new environment)<br />
</li>
</ul>
Downsides:<br />
<ul class=\"org-ul\">
<li>Sometimes hard to remember to prefix every command<br />
</li>
<li>If you don't often use different environments the prefix feels like unnecessary awkwardness<br />
</li>
<li>Inspecting the per-command shell environment is not as simple as typing <code>echo $VARIABLE_NAME</code> or <code>env</code>, you have to do something like <code>envA sh -c 'echo $PATH'= or =envA env</code><br />
</li>
</ul>
</div>
</div>
<div class=\"outline-4\" id=\"outline-container-sec-1-2-4\">
<h6 id=\"sec-1-2-4\">
Smart Environment Manager Tool</h6>
<div class=\"outline-text-4\" id=\"text-1-2-4\">
This is basically the same as using Explicit Environment Files above, but instead of a simple <code>source</code> command or Environment Modules, you can use a tool that has the ability to load an environment and to safely and completely undo (unload) an environment configuration when you want to switch from one environment to another.  An open source tool that does this is named <a href=\"https://bitbucket.org/krupan/albion/wiki/Home\">albion</a> (full disclosure: I wrote albion).  Using it looks like this:<br />
<pre class=\"example\">albion env projectA
simulation-command
albion env projectB
synthesis-command
</pre>
Benefits:<br />
<ul class=\"org-ul\">
<li>All the same benefits of Explicit Environment Files mentioned above<br />
</li>
<li>Easy to use different environment configurations and switch between them<br />
</li>
<li>Environment configuration files use sh syntax, not Tcl<br />
</li>
</ul>
Downsides:<br />
<ul class=\"org-ul\">
<li>You can't switch environments in a single command like Per-command Environment Files allows you to, but a future version of albion could support this<br />
</li>
<li>albion is still somewhat new and might need a little work or customization to fit your specific needs<br />
</li>
</ul>
</div>
</div>
</div>
<div class=\"outline-3\" id=\"outline-container-sec-1-3\">
<h5 id=\"sec-1-3\">
Conclusion</h5>
<div class=\"outline-text-3\" id=\"text-1-3\">
A messy Linux environment can be confusing to engineers and slow down a project.  With some thought and use of a good tool the Linux environment can be tamed.  A tame environment will make your engineers happier and your project will go smoothly and more quickly.</div>
</div>
</div>
<div id=\"footnotes\">
<h4 class=\"footnotes\">
Footnotes: </h4>
<div id=\"text-footnotes\">
<div class=\"footdef\">
<a class=\"footnum\" href=\"https://www.blogger.com/blogger.g?blogID=3669809752172683097#fnr.1\" id=\"fn.1\" name=\"fn.1\">1.</a> Environment Modules claims it can cleanly undo (unload, in their terminology) an environment by simply inverting every command in the modulefile (e.g., setting a variable becomes unsetting the variable).  If someone has removed or changed a command in the modulefile or deleted it altogether in the time after you loaded it this technique obviously does not work.</div>
<br />
<div class=\"footdef\">
<a class=\"footnum\" href=\"https://www.blogger.com/blogger.g?blogID=3669809752172683097#fnr.2\" id=\"fn.2\" name=\"fn.2\">2.</a> If this seems OK to you, consider that most ASIC tools provide you with an environment configuration file in csh or sh syntax that you will then have to translate into Tcl, for <b>every</b> version of <b>each</b> tool you install.</div>
<br /></div>
</div>" "http://bryan-murdock.blogspot.com/2015/12/linux-environment-management.html" (22121 30402) old 29 nil nil ((guid nil "tag:blogger.com,1999:blog-3669809752172683097.post-2175611913018080433") (title ((type . "html")) "Bryan Murdock: Linux Environment Management") (link ((href . "http://bryan-murdock.blogspot.com/2015/12/linux-environment-management.html"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097.post-2175611913018080433") (updated nil "2015-12-10T12:57:38+00:00") (content ((type . "html")) "<h4 class=\"title\">
Linux Environment Considerations</h4>
<div class=\"outline-2\" id=\"outline-container-sec-1\">
<div class=\"outline-text-2\" id=\"text-1\">
The Linux Environments that ASIC and SoC (chip) design teams use are often messy and confusing.  When team members work on multiple ASIC projects that each require different sets of tools the problem is even worse.  When engineers spend time fighting the environment that slows down the development of our chips little by little each day.  This doesn't need to be the case.  This post explains:<br />
<ul class=\"org-ul\">
<li>What a Linux Environment is<br />
</li>
<li>Why it's important, especially for ASIC projects<br />
</li>
<li>Techniques to configure and manage the environment<br />
</li>
</ul>
</div>
<div class=\"outline-3\" id=\"outline-container-sec-1-1\">
<h5 id=\"sec-1-1\">
What is an Environment?</h5>
<div class=\"outline-text-3\" id=\"text-1-1\">
In Linux, every process runs with a set of environment variables available to it.  This set of environment variables is often referred to simply as, the environment.  Here are some examples of how programs use the environment:<br />
<br />
<ul class=\"org-ul\">
<li>The command-line shell uses the <code>PATH</code> environment variable to find the programs you ask it to run<br />
</li>
<li>Programs use <code>LD_LIBRARY_PATH</code> to find compiled libraries that they rely on<br />
</li>
<li>ASIC design and verification tools use the <code>LM_LICENSE_FILE</code> environment variable to determine how to contact their required license servers.<br />
</li>
</ul>
<br />
For most Linux users the environment isn't much of a concern.  When they log in it gets configured by shell initialization files for the common programs and libraries that they use and they are good to go.  We ASIC engineers are much more demanding of our environment.  We generally use a wide array of software tools that are not included in our Linux distribution.  We also keep multiple versions of each of those tools installed so we can try new versions out and revert back to using old versions when needed.  Our environment needs to be configured for each of these tools and reconfigured when we want to switch which version of the tool we are using.  Making matters worse most of these ASIC tools require more than just <code>PATH</code> and <code>LM_LICENSE_FILE</code> environment variables, they have a wide assortment of other variables they expect to be set in your environment for proper operation.</div>
</div>
<div class=\"outline-3\" id=\"outline-container-sec-1-2\">
<h5 id=\"sec-1-2\">
Managing The Environment</h5>
<div class=\"outline-text-3\" id=\"text-1-2\">
There are several ways to manage your Linux shell environment.  Let's take a look at them.</div>
<div class=\"outline-4\" id=\"outline-container-sec-1-2-1\">
<h6 id=\"sec-1-2-1\">
Default Shell Initialization Files</h6>
<div class=\"outline-text-4\" id=\"text-1-2-1\">
This was mentioned in the introduction.  With this technique you simply put all configuration in the shell initialization files (<code>~/.profile</code>, <code>~/.bashrc</code>, <code>~/.cshrc</code>, etc.).<br />
<br />
Benefits:<br />
<ul class=\"org-ul\">
<li>This is the standard way of managing your environment in linux<br />
</li>
<li>Simple, easy to understand for everyone<br />
</li>
<li>You can use standard shell commands to inspect your environment: <code>env</code>, <code>echo $VARIABLE_NAME</code>, etc.<br />
</li>
</ul>
Downsides:<br />
<ul class=\"org-ul\">
<li>Only supports one version of any given tool.  To use a different version of a tool you have to edit your shell initialization files, then start a new shell for them to take affect.<br />
</li>
<li>Everyone has their own initialization files, which makes it hard to ensure everyone is using the same environment<br />
</li>
</ul>
</div>
</div>
<div class=\"outline-4\" id=\"outline-container-sec-1-2-2\">
<h6 id=\"sec-1-2-2\">
Explicit Environment Files</h6>
<div class=\"outline-text-4\" id=\"text-1-2-2\">
Another approach is to have explicit environment configuration files.  When you log in or start a new terminal session a minimal environment will be configured by the normal shell initialization files, and then you issue a command to configure that shell instance with the desired environment.  The environment configuration files can be simple shell-syntax files (and the command as simple as <code>. environment-init</code> or <code>source environment-init</code>).  Alternatively, there is an open source tool named <a href=\"http://modules.sourceforge.net/\">Environment Modules</a> that teams often use for this.<br />
<br />
Benefits:<br />
<ul class=\"org-ul\">
<li>Environment configuration files can be centralized so there is one file that everyone uses<br />
</li>
<li>You can maintain multiple configuration files as needed: one per tool version, one per project, one per engineering role, etc.<br />
</li>
<li>Project leads and/or tool administrators can easily create and maintain the configuration files so individual engineers don't have to<br />
</li>
<li>You can use standard shell commands to inspect your environment: <code>env</code>, <code>echo $VARIABLE_NAME</code>, etc.<br />
</li>
</ul>
Downsides:<br />
<ul class=\"org-ul\">
<li>Once an environment configuration is loaded it's difficult to unload (you need to start a fresh shell to be sure)<sup><a class=\"footref\" href=\"https://www.blogger.com/blogger.g?blogID=3669809752172683097#fn.1\" id=\"fnr.1\" name=\"fnr.1\">1</a></sup><br />
</li>
<li>If you use Environment Modules for this, environment configuration files have to be written in Tcl<sup><a class=\"footref\" href=\"https://www.blogger.com/blogger.g?blogID=3669809752172683097#fn.2\" id=\"fnr.2\" name=\"fnr.2\">2</a></sup><br />
</li>
</ul>
</div>
</div>
<div class=\"outline-4\" id=\"outline-container-sec-1-2-3\">
<h6 id=\"sec-1-2-3\">
Per-command Environment Files</h6>
<div class=\"outline-text-4\" id=\"text-1-2-3\">
Another approach is to prefix every command that needs a special environment with a command that spawns a subshell, sets up the necessary environment, and then runs the intended command.  It looks sort of like this:<br />
<pre class=\"example\">envA simulation-command
</pre>
This way your interactive shell is never poluted with project- or tool-specific settings (just the subshell is) and you can easily switch to a different environment on a per-command basis:<br />
<pre class=\"example\">envA simulation-command
cd &lt;another-project-area&gt;
envB synthesis-command
</pre>
Benefits:<br />
<ul class=\"org-ul\">
<li>All the same benefits of Explicit Environment Files mentioned above<br />
</li>
<li>Easy to use different environment configurations, even on a per-command basis (you don't have to start a fresh shell for each new environment)<br />
</li>
</ul>
Downsides:<br />
<ul class=\"org-ul\">
<li>Sometimes hard to remember to prefix every command<br />
</li>
<li>If you don't often use different environments the prefix feels like unnecessary awkwardness<br />
</li>
<li>Inspecting the per-command shell environment is not as simple as typing <code>echo $VARIABLE_NAME</code> or <code>env</code>, you have to do something like <code>envA sh -c 'echo $PATH'= or =envA env</code><br />
</li>
</ul>
</div>
</div>
<div class=\"outline-4\" id=\"outline-container-sec-1-2-4\">
<h6 id=\"sec-1-2-4\">
Smart Environment Manager Tool</h6>
<div class=\"outline-text-4\" id=\"text-1-2-4\">
This is basically the same as using Explicit Environment Files above, but instead of a simple <code>source</code> command or Environment Modules, you can use a tool that has the ability to load an environment and to safely and completely undo (unload) an environment configuration when you want to switch from one environment to another.  An open source tool that does this is named <a href=\"https://bitbucket.org/krupan/albion/wiki/Home\">albion</a> (full disclosure: I wrote albion).  Using it looks like this:<br />
<pre class=\"example\">albion env projectA
simulation-command
albion env projectB
synthesis-command
</pre>
Benefits:<br />
<ul class=\"org-ul\">
<li>All the same benefits of Explicit Environment Files mentioned above<br />
</li>
<li>Easy to use different environment configurations and switch between them<br />
</li>
<li>Environment configuration files use sh syntax, not Tcl<br />
</li>
</ul>
Downsides:<br />
<ul class=\"org-ul\">
<li>You can't switch environments in a single command like Per-command Environment Files allows you to, but a future version of albion could support this<br />
</li>
<li>albion is still somewhat new and might need a little work or customization to fit your specific needs<br />
</li>
</ul>
</div>
</div>
</div>
<div class=\"outline-3\" id=\"outline-container-sec-1-3\">
<h5 id=\"sec-1-3\">
Conclusion</h5>
<div class=\"outline-text-3\" id=\"text-1-3\">
A messy Linux environment can be confusing to engineers and slow down a project.  With some thought and use of a good tool the Linux environment can be tamed.  A tame environment will make your engineers happier and your project will go smoothly and more quickly.</div>
</div>
</div>
<div id=\"footnotes\">
<h4 class=\"footnotes\">
Footnotes: </h4>
<div id=\"text-footnotes\">
<div class=\"footdef\">
<a class=\"footnum\" href=\"https://www.blogger.com/blogger.g?blogID=3669809752172683097#fnr.1\" id=\"fn.1\" name=\"fn.1\">1.</a> Environment Modules claims it can cleanly undo (unload, in their terminology) an environment by simply inverting every command in the modulefile (e.g., setting a variable becomes unsetting the variable).  If someone has removed or changed a command in the modulefile or deleted it altogether in the time after you loaded it this technique obviously does not work.</div>
<br />
<div class=\"footdef\">
<a class=\"footnum\" href=\"https://www.blogger.com/blogger.g?blogID=3669809752172683097#fnr.2\" id=\"fn.2\" name=\"fn.2\">2.</a> If this seems OK to you, consider that most ASIC tools provide you with an environment configuration file in csh or sh syntax that you will then have to translate into Tcl, for <b>every</b> version of <b>each</b> tool you install.</div>
<br /></div>
</div>") (author nil (name nil "Bryan") (email nil "noreply@blogger.com") (uri nil "http://bryan-murdock.blogspot.com/")) (source nil (title ((type . "html")) "Cyclopedia Square") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3669809752172683097/posts/default?alt=atom"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097")))) ("emacspeak: A Ladspa Work-Bench For The Emacspeak Desktop" "<div dir=\"ltr\" style=\"text-align: left;\"><div id=\"content\"><h1 class=\"title\">A Ladspa Work-Bench For The Emacspeak Audio Desktop</h1><div class=\"outline-2\" id=\"outline-container-orgheadline1\"><h2 id=\"orgheadline1\"><span class=\"section-number-2\">1</span> Executive Summary</h2><div class=\"outline-text-2\" id=\"text-1\"><p>Module <code>ladspa.el</code>  in the Emacspeak GitHub repository implements a<br />
high-level interface for experimenting with Ladspa Plugins using<br />
<code>MPlayer</code> and <code>SoX</code>.<br />
</p></div></div><br />
<div class=\"outline-2\" id=\"outline-container-orgheadline2\"><h2 id=\"orgheadline2\"><span class=\"section-number-2\">2</span> Module <code>ladspa.el</code></h2><div class=\"outline-text-2\" id=\"text-2\"><p>This  module implements the following functionality:<br />
</p><br />
<ol class=\"org-ol\"><li>Builds up a table of installed Ladspa plugins along with their<br />
associated metadata.</li>
<li>Command <code>M-x ladspa</code> displays  installed Ladspa Plugins in a<br />
special <code>*Ladspa*</code> buffer.</li>
<li>Plugins can be instantiated by pressing <code>RET</code>.</li>
<li>Instantiating a plugin prompts for its arguments and displays the<br />
instantiated plugin in a new buffer.</li>
<li>This plugin can then be applied to a running <code>MPlayer</code> media<br />
stream by pressing <code>a</code>.</li>
<li>The effect can be deleted by pressing <code>d</code>.</li>
<li>Plugin parameters can be edited  by pressing <code>e</code> with point on<br />
the parameter to edit.</li>
</ol></div></div><br />
<div class=\"outline-2\" id=\"outline-container-orgheadline3\"><h2 id=\"orgheadline3\"><span class=\"section-number-2\">3</span> Interfacing With SoX</h2><div class=\"outline-text-2\" id=\"text-3\"><p>Module <code>sox.el</code> implements an <b>Audio Workbench</b> using <code>SoX</code>. Module<br />
<code>ladspa.el</code> integrates with that module by allowing the addition of<br />
<code>ladspa</code> as a supported SoX effect. Adding a <code>ladspa</code> effect results<br />
in a completion interface for picking one of the available Ladspa<br />
plugin; once selected, that plugin then prompts for its parameters as<br />
needed.<br />
</p></div></div></div><div class=\"status\" id=\"postamble\"><p class=\"date\">Date: <span class=\"timestamp-wrapper\"><span class=\"timestamp\">&lt;2015-12-04 Fri&gt;</span></span></p><p class=\"author\">Author: raman</p><p class=\"date\">Created: 2015-12-04 Fri 20:03</p><p class=\"validation\"><a href=\"http://validator.w3.org/check?uri=referer\">Validate</a></p></div><br />
</div>" "http://emacspeak.blogspot.com/2015/12/a-ladspa-work-bench-for-emacspeak.html" (22114 25477) old 30 nil nil ((guid nil "tag:blogger.com,1999:blog-20280042.post-6914615005759113231") (title ((type . "html")) "emacspeak: A Ladspa Work-Bench For The Emacspeak Desktop") (link ((href . "http://emacspeak.blogspot.com/2015/12/a-ladspa-work-bench-for-emacspeak.html"))) (id nil "tag:blogger.com,1999:blog-20280042.post-6914615005759113231") (updated nil "2015-12-05T04:09:41+00:00") (content ((type . "html")) "<div dir=\"ltr\" style=\"text-align: left;\"><div id=\"content\"><h1 class=\"title\">A Ladspa Work-Bench For The Emacspeak Audio Desktop</h1><div class=\"outline-2\" id=\"outline-container-orgheadline1\"><h2 id=\"orgheadline1\"><span class=\"section-number-2\">1</span> Executive Summary</h2><div class=\"outline-text-2\" id=\"text-1\"><p>Module <code>ladspa.el</code>  in the Emacspeak GitHub repository implements a<br />
high-level interface for experimenting with Ladspa Plugins using<br />
<code>MPlayer</code> and <code>SoX</code>.<br />
</p></div></div><br />
<div class=\"outline-2\" id=\"outline-container-orgheadline2\"><h2 id=\"orgheadline2\"><span class=\"section-number-2\">2</span> Module <code>ladspa.el</code></h2><div class=\"outline-text-2\" id=\"text-2\"><p>This  module implements the following functionality:<br />
</p><br />
<ol class=\"org-ol\"><li>Builds up a table of installed Ladspa plugins along with their<br />
associated metadata.</li>
<li>Command <code>M-x ladspa</code> displays  installed Ladspa Plugins in a<br />
special <code>*Ladspa*</code> buffer.</li>
<li>Plugins can be instantiated by pressing <code>RET</code>.</li>
<li>Instantiating a plugin prompts for its arguments and displays the<br />
instantiated plugin in a new buffer.</li>
<li>This plugin can then be applied to a running <code>MPlayer</code> media<br />
stream by pressing <code>a</code>.</li>
<li>The effect can be deleted by pressing <code>d</code>.</li>
<li>Plugin parameters can be edited  by pressing <code>e</code> with point on<br />
the parameter to edit.</li>
</ol></div></div><br />
<div class=\"outline-2\" id=\"outline-container-orgheadline3\"><h2 id=\"orgheadline3\"><span class=\"section-number-2\">3</span> Interfacing With SoX</h2><div class=\"outline-text-2\" id=\"text-3\"><p>Module <code>sox.el</code> implements an <b>Audio Workbench</b> using <code>SoX</code>. Module<br />
<code>ladspa.el</code> integrates with that module by allowing the addition of<br />
<code>ladspa</code> as a supported SoX effect. Adding a <code>ladspa</code> effect results<br />
in a completion interface for picking one of the available Ladspa<br />
plugin; once selected, that plugin then prompts for its parameters as<br />
needed.<br />
</p></div></div></div><div class=\"status\" id=\"postamble\"><p class=\"date\">Date: <span class=\"timestamp-wrapper\"><span class=\"timestamp\">&lt;2015-12-04 Fri&gt;</span></span></p><p class=\"author\">Author: raman</p><p class=\"date\">Created: 2015-12-04 Fri 20:03</p><p class=\"validation\"><a href=\"http://validator.w3.org/check?uri=referer\">Validate</a></p></div><br />
</div>") (author nil (name nil "T. V. Raman") (email nil "noreply@blogger.com") (uri nil "http://emacspeak.blogspot.com/")) (source nil (title ((type . "html")) "EMACSPEAK  The Complete Audio Desktop") (subtitle ((type . "html")) "Here is where I plan to Blog Emacspeak tricks and introduce new features as I implement them.") (link ((rel . "self") (href . "http://www.blogger.com/feeds/20280042/posts/default?alt=atom"))) (id nil "tag:blogger.com,1999:blog-20280042")))) ("Yann Hodique: How modern languages will save the text editor" "<p>I’ve been an <a href=\"https://www.gnu.org/software/emacs/\">Emacs</a> user for many years,
and a coder for just as long. Somewhere in the middle, something weird
happened: while a text editor was initially considered a perfectly appropriate
way of writing code (in C, Lisp, Perl, Shell, …), that ceased to be true for
a while. With the gain in popularity of complex languages like Java, or C++,
coders started to crave “fancy” features like code completion, refactoring, …</p>
<p>And quite unfortunately, these advanced features relied to complex tooling
living outside of the languages themselves. Worse, the languages were developed
in complete ignorance of these tools, which made them somewhat hostile to those
goals (anybody who tried to implement a correct C++ parser knows what I mean,
life before <a href=\"http://clang.llvm.org/\">clang</a> was just painful). As a result,
very complex tools making heavy use of specialized partial parsers, static
analysis, and crazy heuristics emerged. And they emerged as part of even more
complex development suites to combine them all in a coherent form: the IDE
was born.</p>
<p>To tell the truth, I’ve never been a fan of the concept, and even though
I contributed to <a href=\"https://www.kdevelop.org/\">KDevelop</a> for a while, I did so
from the comfort of my beloved Emacs… Still, it’d be dishonest to pretend
IDEs like Visual Studio, Eclipse and the likes don’t have a great impact, even
today, on how people ultimately develop code.</p>
<p>I guess my main gripe with this abundant tooling is that it’s an all-or-nothing
deal: there’s just no (easy) way I can take some of that experience and
integrate it somewhere else. At a more fundamental level, it seemed simply
“odd”: why would we introduce “deficiencies” at the language level, just to
hope somebody else would work around them the best they can in tools?
For those reasons, I never actually used an IDE. But then, I <em>also</em> stayed away
from the languages that were “requiring” them as much as possible (with mixed
results, as I ended up writing a ton of code in those as well :)). Not
everybody has that luxury though, so text editors declined.</p>
<p>But more recently, things took a different turn (for the best I think): a new
language emerged that was promoting a different paradigm:
<a href=\"https://golang.org/\">Go</a>.  Instead of making the tooling an afterthought, it’s
been pretty much there at some level since inception. It even shows in the
language grammar itself, which is <em>designed</em> to enable fast compilation,
partial parsing, and a whole bunch of analysis tools. So instead of designing
a language to give programmers arbitrary bells and whistles they’re used to
(completely disregarding the resulting complexity in the larger ecosystem), the
Go creators have made careful choices to create the best <em>overall</em> experience,
which includes not only code writing, but also code reading, code maintaining
and so on. So while some “features” that people might expect are noticeably
missing (macros, generics, …), it’s not <em>just</em> because those guys are lazy
(although all great engineers are :)) but <em>also</em> because the balance to maintain
is very subtle.</p>
<p>I personally find the result quite brilliant (some people obviously disagree),
and it’s a real pleasure to write code in Go, but more importantly to me, I can
take the tooling, and integrate it pretty much anywhere. So a complex IDE is
not even particularly useful: all you need from your editor is to be able to
display the information the tools give, and to act on it.</p>
<p>And then, just like that, Emacs is a perfect environment to develop in Go. It’s
not exactly <em>free</em> of course, in the sense that some integration code has to be
developed. But it’s definitely several orders of magnitude easier than getting
a proper environment for
<a href=\"http://www.emacswiki.org/emacs/JavaDevelopmentEnvironment\">Java</a> or
<a href=\"http://tuhdo.github.io/c-ide.html\">C++</a>, and <em>even</em> Python, despite
<a href=\"https://elpy.readthedocs.org/en/latest/\">Elpy</a>’s greatness.</p>
<p>If anybody’s curious, here’s my
<a href=\"https://github.com/sigma/dotemacs/blob/master/lisp/config/go-config.el\">Go configuration for Emacs</a>. Except
for some <code>GOPATH</code>-related gymnastics, it’s pretty straighforward.</p>
<p>I believe this new ability to embrace whatever environment the developer is
most familiar with, and with minimal effort, is part of Go’s appeal. I, for
one, am most excited about the prospect of many developer-friendly tools to
come, and I really hope Go is just the first of many languages to follow the
same approach.</p>" "http://yann.hodique.info/blog/how-modern-languages-save-the-text-editor/" (22152 7311) old 18 nil nil ((guid nil "http://yann.hodique.info/blog/how-modern-languages-save-the-text-editor/") (title ((type . "html") (lang . "en-us")) "Yann Hodique: How modern languages will save the text editor") (link ((href . "http://yann.hodique.info/blog/how-modern-languages-save-the-text-editor/"))) (id nil "http://yann.hodique.info/blog/how-modern-languages-save-the-text-editor/") (updated nil "2016-01-02T18:53:03+00:00") (content ((type . "html")) "<p>I’ve been an <a href=\"https://www.gnu.org/software/emacs/\">Emacs</a> user for many years,
and a coder for just as long. Somewhere in the middle, something weird
happened: while a text editor was initially considered a perfectly appropriate
way of writing code (in C, Lisp, Perl, Shell, …), that ceased to be true for
a while. With the gain in popularity of complex languages like Java, or C++,
coders started to crave “fancy” features like code completion, refactoring, …</p>

<p>And quite unfortunately, these advanced features relied to complex tooling
living outside of the languages themselves. Worse, the languages were developed
in complete ignorance of these tools, which made them somewhat hostile to those
goals (anybody who tried to implement a correct C++ parser knows what I mean,
life before <a href=\"http://clang.llvm.org/\">clang</a> was just painful). As a result,
very complex tools making heavy use of specialized partial parsers, static
analysis, and crazy heuristics emerged. And they emerged as part of even more
complex development suites to combine them all in a coherent form: the IDE
was born.</p>

<p>To tell the truth, I’ve never been a fan of the concept, and even though
I contributed to <a href=\"https://www.kdevelop.org/\">KDevelop</a> for a while, I did so
from the comfort of my beloved Emacs… Still, it’d be dishonest to pretend
IDEs like Visual Studio, Eclipse and the likes don’t have a great impact, even
today, on how people ultimately develop code.</p>

<p>I guess my main gripe with this abundant tooling is that it’s an all-or-nothing
deal: there’s just no (easy) way I can take some of that experience and
integrate it somewhere else. At a more fundamental level, it seemed simply
“odd”: why would we introduce “deficiencies” at the language level, just to
hope somebody else would work around them the best they can in tools?
For those reasons, I never actually used an IDE. But then, I <em>also</em> stayed away
from the languages that were “requiring” them as much as possible (with mixed
results, as I ended up writing a ton of code in those as well :)). Not
everybody has that luxury though, so text editors declined.</p>

<p>But more recently, things took a different turn (for the best I think): a new
language emerged that was promoting a different paradigm:
<a href=\"https://golang.org/\">Go</a>.  Instead of making the tooling an afterthought, it’s
been pretty much there at some level since inception. It even shows in the
language grammar itself, which is <em>designed</em> to enable fast compilation,
partial parsing, and a whole bunch of analysis tools. So instead of designing
a language to give programmers arbitrary bells and whistles they’re used to
(completely disregarding the resulting complexity in the larger ecosystem), the
Go creators have made careful choices to create the best <em>overall</em> experience,
which includes not only code writing, but also code reading, code maintaining
and so on. So while some “features” that people might expect are noticeably
missing (macros, generics, …), it’s not <em>just</em> because those guys are lazy
(although all great engineers are :)) but <em>also</em> because the balance to maintain
is very subtle.</p>

<p>I personally find the result quite brilliant (some people obviously disagree),
and it’s a real pleasure to write code in Go, but more importantly to me, I can
take the tooling, and integrate it pretty much anywhere. So a complex IDE is
not even particularly useful: all you need from your editor is to be able to
display the information the tools give, and to act on it.</p>

<p>And then, just like that, Emacs is a perfect environment to develop in Go. It’s
not exactly <em>free</em> of course, in the sense that some integration code has to be
developed. But it’s definitely several orders of magnitude easier than getting
a proper environment for
<a href=\"http://www.emacswiki.org/emacs/JavaDevelopmentEnvironment\">Java</a> or
<a href=\"http://tuhdo.github.io/c-ide.html\">C++</a>, and <em>even</em> Python, despite
<a href=\"https://elpy.readthedocs.org/en/latest/\">Elpy</a>’s greatness.</p>

<p>If anybody’s curious, here’s my
<a href=\"https://github.com/sigma/dotemacs/blob/master/lisp/config/go-config.el\">Go configuration for Emacs</a>. Except
for some <code>GOPATH</code>-related gymnastics, it’s pretty straighforward.</p>

<p>I believe this new ability to embrace whatever environment the developer is
most familiar with, and with minimal effort, is part of Go’s appeal. I, for
one, am most excited about the prospect of many developer-friendly tools to
come, and I really hope Go is just the first of many languages to follow the
same approach.</p>") (author nil (name nil "Yann Hodique") (uri nil "http://yann.hodique.info/blog/")) (source nil (title ((type . "html")) "Blog -- Yann Hodique") (subtitle ((type . "html")) "Recent content in Blog -- Yann Hodique") (link ((rel . "self") (href . "http://yann.hodique.info/blog/index.xml"))) (id nil "http://yann.hodique.info/blog/")))) ("Jorgen Schäfer: Buttercup 1.3 released" "<p>I just released version 1.3 of Buttercup, the Behavior-Driven Emacs Lisp Testing framework.</p> <p>Buttercup is a behavior-driven development framework for testing Emacs Lisp code. It is heavily inspired by <a href=\"https://jasmine.github.io/\">Jasmine</a>.</p> <ul>  <li>    <a href=\"https://github.com/jorgenschaefer/emacs-buttercup/\">      Homepage and documentation     </a>  </li></ul> <a name=\"more\"></a> <h2>Installation and Use</h2> <p>Buttercup is available from <a href=\"http://stable.melpa.org/\">MELPA Stable</a>.</p> <p>Example test suite:</p> <pre><code class=\"lisp\">(describe \"A suite\"<br />  (it \"contains a spec with an expectation\"<br />    (expect t :to-be t)))<br /></code></pre> <p>Suites group tests, and suites can be nested. Contrary to ERT, suites can share set-up and tear-down code for tests, and Buttercup comes with built-in support for mocks in the form of spies. See the package homepage above for a full description of the syntax for test suites and specs.</p> <p>Buttercup comes with a shell script to run the default discover runner. If used together with cask, <tt>cask exec buttercup</tt>will find, load and run test suites in your project.</p> <h2>Changes Since 1.2</h2> <ul>  <li>The test discovery can now skip tests based on a pattern,     given by the <tt>-p</tt> command line argument.</li>  <li>The <tt>buttercup-pending</tt> signal now takes an argument     which is displayed during spec execution. This enables users     to provide a visual explanation as to why a spec was skipped.</li></ul>" "http://blog.jorgenschaefer.de/2016/01/buttercup-13-released.html" (22160 50487) old 14 nil nil ((guid nil "tag:blogger.com,1999:blog-4394570295456001999.post-2038027055189975939") (title ((type . "html")) "Jorgen Schäfer: Buttercup 1.3 released") (link ((href . "http://blog.jorgenschaefer.de/2016/01/buttercup-13-released.html"))) (id nil "tag:blogger.com,1999:blog-4394570295456001999.post-2038027055189975939") (updated nil "2016-01-09T08:30:47+00:00") (content ((type . "html")) "<p>I just released version 1.3 of Buttercup, the Behavior-Driven Emacs Lisp Testing framework.</p> <p>Buttercup is a behavior-driven development framework for testing Emacs Lisp code. It is heavily inspired by <a href=\"https://jasmine.github.io/\">Jasmine</a>.</p> <ul>  <li>    <a href=\"https://github.com/jorgenschaefer/emacs-buttercup/\">      Homepage and documentation     </a>  </li></ul> <a name=\"more\"></a> <h2>Installation and Use</h2> <p>Buttercup is available from <a href=\"http://stable.melpa.org/\">MELPA Stable</a>.</p> <p>Example test suite:</p> <pre><code class=\"lisp\">(describe \"A suite\"<br />  (it \"contains a spec with an expectation\"<br />    (expect t :to-be t)))<br /></code></pre> <p>Suites group tests, and suites can be nested. Contrary to ERT, suites can share set-up and tear-down code for tests, and Buttercup comes with built-in support for mocks in the form of spies. See the package homepage above for a full description of the syntax for test suites and specs.</p> <p>Buttercup comes with a shell script to run the default discover runner. If used together with cask, <tt>cask exec buttercup</tt>will find, load and run test suites in your project.</p> <h2>Changes Since 1.2</h2> <ul>  <li>The test discovery can now skip tests based on a pattern,     given by the <tt>-p</tt> command line argument.</li>  <li>The <tt>buttercup-pending</tt> signal now takes an argument     which is displayed during spec execution. This enables users     to provide a visual explanation as to why a spec was skipped.</li></ul>") (author nil (name nil "Jorgen Schäfer") (email nil "noreply@blogger.com") (uri nil "http://blog.jorgenschaefer.de/search/label/Emacs")) (source nil (title ((type . "html")) "Jorgen’s Weblog") (link ((rel . "self") (href . "http://www.blogger.com/feeds/4394570295456001999/posts/default/-/Emacs"))) (id nil "tag:blogger.com,1999:blog-4394570295456001999")))) ("Chen Bin (redguardtoo): Git gutter tip" "<div><p>
I use <a href=\"https://github.com/syohex/emacs-git-gutter\">git-gutter.el</a> everyday. It indicats \"whether a line has been inserted, modified or deleted\". You can jump to the inser/modified/deleted line easily.
</p>
<p>
But I usually need to know what line changed in <b>latest commit</b>.
</p>
<p>
So I designed `M-x git-gutter-reset-to-head-parent`,
</p>
<div class=\"org-src-container\">
<pre><code class=\"lang-lisp\">(defun git-gutter-reset-to-head-parent()
(interactive)
(let (parent (filename (buffer-file-name)))
(if (eq git-gutter:vcs-type 'svn)
(setq parent \"PREV\")
(setq parent (if filename (concat (shell-command-to-string (concat \"git --no-pager log --oneline -n1 --pretty='format:%H' \" filename)) \"^\") \"HEAD^\")))
(git-gutter:set-start-revision parent)
(message \"git-gutter:set-start-revision HEAD^\")))
(defun git-gutter-reset-to-default ()
(interactive)
(git-gutter:set-start-revision nil)
(message \"git-gutter reset\"))
</code></pre>
</div>
<p>
`M-x git-gutter-reset-to-default` compare you file under working directory with the latet version under VCS.
</p>
<p>
`M-x git-gutter:next-hunk` and `M-x git-gutter:previous-hunk` will jump to the deleted/modified/added line.
</p></div>" "http://blog.binchen.org/posts/git-gutter-tip.html" (22159 44695) old 15 nil nil ((guid nil "http://blog.binchen.org/posts/git-gutter-tip.html") (title ((type . "html") (lang . "en")) "Chen Bin (redguardtoo): Git gutter tip") (link ((href . "http://blog.binchen.org/posts/git-gutter-tip.html"))) (id nil "http://blog.binchen.org/posts/git-gutter-tip.html") (updated nil "2016-01-08T12:41:59+00:00") (content ((type . "html")) "<div><p>
I use <a href=\"https://github.com/syohex/emacs-git-gutter\">git-gutter.el</a> everyday. It indicats \"whether a line has been inserted, modified or deleted\". You can jump to the inser/modified/deleted line easily.
</p>

<p>
But I usually need to know what line changed in <b>latest commit</b>.
</p>

<p>
So I designed `M-x git-gutter-reset-to-head-parent`,
</p>

<div class=\"org-src-container\">

<pre><code class=\"lang-lisp\">(defun git-gutter-reset-to-head-parent()
  (interactive)
  (let (parent (filename (buffer-file-name)))
    (if (eq git-gutter:vcs-type 'svn)
        (setq parent \"PREV\")
      (setq parent (if filename (concat (shell-command-to-string (concat \"git --no-pager log --oneline -n1 --pretty='format:%H' \" filename)) \"^\") \"HEAD^\")))
    (git-gutter:set-start-revision parent)
    (message \"git-gutter:set-start-revision HEAD^\")))

(defun git-gutter-reset-to-default ()
  (interactive)
  (git-gutter:set-start-revision nil)
  (message \"git-gutter reset\"))
</code></pre>

</div>

<p>
`M-x git-gutter-reset-to-default` compare you file under working directory with the latet version under VCS.
</p>

<p>
`M-x git-gutter:next-hunk` and `M-x git-gutter:previous-hunk` will jump to the deleted/modified/added line.
</p></div>") (author nil (name nil "Chen Bin") (uri nil "http://blog.binchen.org/")) (source nil (title ((type . "html")) "Chen's blog (emacs)") (link ((rel . "self") (href . "http://blog.binchen.org/categories/emacs.xml"))) (id nil "http://blog.binchen.org/")))) ("Raimon Grau: TIL: ediff-revision" "When editing a file in some git branch I often want to take a quick look at the same file in other branch (usually master).  I always did it by <pre> git diff HEAD master -- file.rb </pre>   but today I discovered there's an emacs way to do it. <pre> M-x ediff-revision</pre>. it asks you for a file (defaults to the current one), and two branches.  And that's it!" "http://puntoblogspot.blogspot.com/2016/01/til-ediff-revision.html" (22158 43806) old 16 nil nil ((guid nil "tag:blogger.com,1999:blog-8696405790788556158.post-2465095860918832841") (title ((type . "html")) "Raimon Grau: TIL: ediff-revision") (link ((href . "http://puntoblogspot.blogspot.com/2016/01/til-ediff-revision.html"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158.post-2465095860918832841") (updated nil "2016-01-07T18:14:54+00:00") (content ((type . "html")) "When editing a file in some git branch I often want to take a quick look at the same file in other branch (usually master).  I always did it by <pre> git diff HEAD master -- file.rb </pre>   but today I discovered there's an emacs way to do it. <pre> M-x ediff-revision</pre>. it asks you for a file (defaults to the current one), and two branches.  And that's it!") (author nil (name nil "Raimon Grau") (email nil "noreply@blogger.com") (uri nil "http://puntoblogspot.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "puntoblogspot") (subtitle ((type . "html")) "Technical stuff, mostly") (link ((rel . "self") (href . "http://www.blogger.com/feeds/8696405790788556158/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-8696405790788556158")))) ("Chen Bin (redguardtoo): How to use Gnus Group Topics efficiently" "<div><p>
<i>Group Topics</i> is used to manage Gnus groups.
</p>
<p>
For example, you can,
</p>
<ul class=\"org-ul\">
<li>Place groups (mail folders)  from Gmail into \"gmail\" topic
</li>
<li>Place groups (mails folders) from Outlook.com into \"hotmail\" topic
</li>
<li>Make \"gmail\" and \"hotmail\" belong to the root topic \"Gnus\"
</li>
</ul>
<p>
Enable it is just one line,
</p>
<div class=\"org-src-container\">
<pre><code class=\"lang-lisp\">(add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
</code></pre>
</div>
<p>
Now comes the question how to delete/add/move the topics?
</p>
<p>
The official answer is to read <a href=\"http://www.gnu.org/software/emacs/manual/html_node/gnus/Topic-Commands.html#Topic-Commands\">its manual</a>.
</p>
<p>
But there is a <b>simpler solution</b>. All you need to do is insert below code into ~/.emacs or ~/.gnus.el,
</p>
<div class=\"org-src-container\">
<pre><code class=\"lang-lisp\">(eval-after-load 'gnus-topic
'(progn
(setq gnus-topic-topology '((\"Gnus\" visible)
((\"hotmail\" visible nil nil))
((\"gmail\" visible nil nil))))
(setq gnus-topic-alist '((\"hotmail\" ; the key of topic
\"nnimap+hotmail:Inbox\"
\"nnimap+hotmail:Drafts\"
\"nnimap+hotmail:Sent\"
\"nnimap+hotmail:Junk\"
\"nnimap+hotmail:Deleted\")
(\"gmail\" ; the key of topic
\"INBOX\"
\"[Gmail]/Sent Mail\"
\"[Gmail]/Trash\"
\"Drafts\")
(\"Gnus\")))))
</code></pre>
</div>
<p>
The <b>management of topics is as easy as editing above code</b>.
</p>
<p>
My setup always works no matter ~/.newsrc.eld is loaded or not.
</p>
<p>
BTW, \"hotmail\" and \"gmail\" are the keys you used when configuring IMAP accounts,
</p>
<div class=\"org-src-container\">
<pre><code class=\"lang-lisp\">(setq gnus-select-method
'(nnimap \"gmail\" ; key
(nnimap-address \"imap.gmail.com\")
(nnimap-server-port 993)
(nnimap-stream ssl)))
(add-to-list 'gnus-secondary-select-methods
'(nnimap \"hotmail\" ; key
(nnimap-address \"imap-mail.outlook.com\")
(nnimap-server-port 993)
(nnimap-stream ssl)))
</code></pre>
</div></div>" "http://blog.binchen.org/posts/how-to-use-gnus-group-topics-efficiently.html" (22161 60913) old 12 nil nil ((guid nil "http://blog.binchen.org/posts/how-to-use-gnus-group-topics-efficiently.html") (title ((type . "html") (lang . "en")) "Chen Bin (redguardtoo): How to use Gnus Group Topics efficiently") (link ((href . "http://blog.binchen.org/posts/how-to-use-gnus-group-topics-efficiently.html"))) (id nil "http://blog.binchen.org/posts/how-to-use-gnus-group-topics-efficiently.html") (updated nil "2016-01-10T05:36:49+00:00") (content ((type . "html")) "<div><p>
<i>Group Topics</i> is used to manage Gnus groups.
</p>

<p>
For example, you can,
</p>

<ul class=\"org-ul\">
<li>Place groups (mail folders)  from Gmail into \"gmail\" topic
</li>
<li>Place groups (mails folders) from Outlook.com into \"hotmail\" topic
</li>
<li>Make \"gmail\" and \"hotmail\" belong to the root topic \"Gnus\"
</li>
</ul>

<p>
Enable it is just one line,
</p>

<div class=\"org-src-container\">

<pre><code class=\"lang-lisp\">(add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
</code></pre>

</div>

<p>
Now comes the question how to delete/add/move the topics?
</p>

<p>
The official answer is to read <a href=\"http://www.gnu.org/software/emacs/manual/html_node/gnus/Topic-Commands.html#Topic-Commands\">its manual</a>.
</p>

<p>
But there is a <b>simpler solution</b>. All you need to do is insert below code into ~/.emacs or ~/.gnus.el,
</p>

<div class=\"org-src-container\">

<pre><code class=\"lang-lisp\">(eval-after-load 'gnus-topic
  '(progn
     (setq gnus-topic-topology '((\"Gnus\" visible)
                                 ((\"hotmail\" visible nil nil))
                                 ((\"gmail\" visible nil nil))))

     (setq gnus-topic-alist '((\"hotmail\" ; the key of topic
                               \"nnimap+hotmail:Inbox\"
                               \"nnimap+hotmail:Drafts\"
                               \"nnimap+hotmail:Sent\"
                               \"nnimap+hotmail:Junk\"
                               \"nnimap+hotmail:Deleted\")
                              (\"gmail\" ; the key of topic
                               \"INBOX\"
                               \"[Gmail]/Sent Mail\"
                               \"[Gmail]/Trash\"
                               \"Drafts\")
                              (\"Gnus\")))))
</code></pre>

</div>

<p>
The <b>management of topics is as easy as editing above code</b>.
</p>

<p>
My setup always works no matter ~/.newsrc.eld is loaded or not.
</p>

<p>
BTW, \"hotmail\" and \"gmail\" are the keys you used when configuring IMAP accounts,
</p>

<div class=\"org-src-container\">

<pre><code class=\"lang-lisp\">(setq gnus-select-method
             '(nnimap \"gmail\" ; key
                      (nnimap-address \"imap.gmail.com\")
                      (nnimap-server-port 993)
                      (nnimap-stream ssl)))
(add-to-list 'gnus-secondary-select-methods
             '(nnimap \"hotmail\" ; key
                      (nnimap-address \"imap-mail.outlook.com\")
                      (nnimap-server-port 993)
                      (nnimap-stream ssl)))
</code></pre>

</div></div>") (author nil (name nil "Chen Bin") (uri nil "http://blog.binchen.org/")) (source nil (title ((type . "html")) "Chen's blog (emacs)") (link ((rel . "self") (href . "http://blog.binchen.org/categories/emacs.xml"))) (id nil "http://blog.binchen.org/")))) ("Marcin Borkowski: mrr-auto-replace" "It is often the case that I need to do some heavy search-and-replace in LaTeX files. Usually, this is when I get a file from someone else, and the person who wrote it does not know LaTeX very well. Fortunately, the errors in such files are usually quite predictable and repeatable." "http://mbork.pl/2016-01-09_mrr-auto-replace" (22161 1103) old 13 nil nil ((guid nil "http://mbork.pl/2016-01-09_mrr-auto-replace") (title ((type . "html")) "Marcin Borkowski: mrr-auto-replace") (link ((href . "http://mbork.pl/2016-01-09_mrr-auto-replace"))) (id nil "http://mbork.pl/2016-01-09_mrr-auto-replace") (updated nil "2016-01-09T12:59:59+00:00") (content ((type . "html")) "It is often the case that I need to do some heavy search-and-replace in LaTeX files. Usually, this is when I get a file from someone else, and the person who wrote it does not know LaTeX very well. Fortunately, the errors in such files are usually quite predictable and repeatable.") (author nil (name nil "Marcin Borkowski") (uri nil "http://mbork.pl/Homepage")) (source nil (title ((type . "html")) "Marcin Borkowski:  Content AND Presentation") (subtitle ((type . "html")) "Strona domowa Marcina Borkowskiego") (link ((rel . "self") (href . "http://mbork.pl?action=rss;all=0;showedit=0;rcfilteronly=CategoryEmacs"))) (id nil "http://mbork.pl/Homepage")))) ("(or emacs: Better fuzzy matching support in Ivy" "<p>Recently, I wrote some code to add better highlighting for
<a href=\"https://github.com/abo-abo/swiper\">Ivy</a>'s fuzzy matcher. Here's a
quick step-by-step to get an equivalent of
<a href=\"https://github.com/lewang/flx\">flx-ido-mode</a> working with Ivy.</p>
<h2 id=\"step-1-install-the-packages\">Step 1: install the packages</h2>
<p><kbd>M-x</kbd> <code>package-install</code> - <code>counsel</code> and <code>flx</code> (MELPA should be configured).</p>
<h2 id=\"step-2-configure-ivy-re-builders-alist\">Step 2: configure <code>ivy-re-builders-alist</code></h2>
<p>Here's the default setting:</p>
<div class=\"highlight\"><pre><code class=\"language-elisp\"><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">ivy-re-builders-alist</span>
<span class=\"o\">'</span><span class=\"p\">((</span><span class=\"no\">t</span> <span class=\"o\">.</span> <span class=\"nv\">ivy--regex-plus</span><span class=\"p\">)))</span>
</code></pre></div>
<p>The default matcher will use a <code>.*</code> regex wild card in place of each
single space in the input.  If you want to use the fuzzy matcher,
which instead uses a <code>.*</code> regex wild card between each input letter,
write this in your config:</p>
<div class=\"highlight\"><pre><code class=\"language-elisp\"><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">ivy-re-builders-alist</span>
<span class=\"o\">'</span><span class=\"p\">((</span><span class=\"no\">t</span> <span class=\"o\">.</span> <span class=\"nv\">ivy--regex-fuzzy</span><span class=\"p\">)))</span>
</code></pre></div>
<p>You can also mix the two regex builders, for example:</p>
<div class=\"highlight\"><pre><code class=\"language-elisp\"><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">ivy-re-builders-alist</span>
<span class=\"o\">'</span><span class=\"p\">((</span><span class=\"nv\">ivy-switch-buffer</span> <span class=\"o\">.</span> <span class=\"nv\">ivy--regex-plus</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"no\">t</span> <span class=\"o\">.</span> <span class=\"nv\">ivy--regex-fuzzy</span><span class=\"p\">)))</span>
</code></pre></div>
<p>The <code>t</code> key is used for all fall-through cases, otherwise the key is
the command or collection name.</p>
<p>The fuzzy matcher often results in substantially more matching
candidates than the regular one for similar input. That's why some
kind of sorting is important to bring the more relevant matching
candidates to the start of the list. Luckily, that's already been
figured out in <code>flx</code>, so to have it working just make sure that the
<code>flx</code> package is installed.</p>
<h2 id=\"step-3-optionally-configure-ivy-initial-inputs-alist\">Step 3: optionally configure <code>ivy-initial-inputs-alist</code></h2>
<p>The <code>ivy-initial-inputs-alist</code> variable is pretty useful in
conjunction with the default matcher. It's usually used to insert <code>^</code>
into the input area for certain commands.</p>
<p>If you're going fuzzy all the way, you can do without the initial <code>^</code>,
and simply let <code>flx</code> (hopefully) sort the matches in a nice way:</p>
<div class=\"highlight\"><pre><code class=\"language-elisp\"><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">ivy-initial-inputs-alist</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
</code></pre></div>
<h2 id=\"the-result\">The result</h2>
<p>Here's how <kbd>M-x</kbd> <code>counsel-M-x</code> looks like now:</p>
<p><img alt=\"ivy-flx-highlight.png\" src=\"http://oremacs.com/download/ivy-flx-highlight.png\" /></p>" "http://oremacs.com/2016/01/06/ivy-flx/" (22156 19184) old 17 nil nil ((guid nil "http://oremacs.com/2016/01/06/ivy-flx") (title ((type . "html")) "(or emacs: Better fuzzy matching support in Ivy") (link ((href . "http://oremacs.com/2016/01/06/ivy-flx/"))) (id nil "http://oremacs.com/2016/01/06/ivy-flx") (updated nil "2016-01-05T23:00:00+00:00") (content ((type . "html")) "<p>Recently, I wrote some code to add better highlighting for
<a href=\"https://github.com/abo-abo/swiper\">Ivy</a>'s fuzzy matcher. Here's a
quick step-by-step to get an equivalent of
<a href=\"https://github.com/lewang/flx\">flx-ido-mode</a> working with Ivy.</p>

<h2 id=\"step-1-install-the-packages\">Step 1: install the packages</h2>

<p><kbd>M-x</kbd> <code>package-install</code> - <code>counsel</code> and <code>flx</code> (MELPA should be configured).</p>

<h2 id=\"step-2-configure-ivy-re-builders-alist\">Step 2: configure <code>ivy-re-builders-alist</code></h2>

<p>Here's the default setting:</p>
<div class=\"highlight\"><pre><code class=\"language-elisp\"><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">ivy-re-builders-alist</span>
      <span class=\"o\">'</span><span class=\"p\">((</span><span class=\"no\">t</span> <span class=\"o\">.</span> <span class=\"nv\">ivy--regex-plus</span><span class=\"p\">)))</span>
</code></pre></div>
<p>The default matcher will use a <code>.*</code> regex wild card in place of each
single space in the input.  If you want to use the fuzzy matcher,
which instead uses a <code>.*</code> regex wild card between each input letter,
write this in your config:</p>
<div class=\"highlight\"><pre><code class=\"language-elisp\"><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">ivy-re-builders-alist</span>
      <span class=\"o\">'</span><span class=\"p\">((</span><span class=\"no\">t</span> <span class=\"o\">.</span> <span class=\"nv\">ivy--regex-fuzzy</span><span class=\"p\">)))</span>
</code></pre></div>
<p>You can also mix the two regex builders, for example:</p>
<div class=\"highlight\"><pre><code class=\"language-elisp\"><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">ivy-re-builders-alist</span>
      <span class=\"o\">'</span><span class=\"p\">((</span><span class=\"nv\">ivy-switch-buffer</span> <span class=\"o\">.</span> <span class=\"nv\">ivy--regex-plus</span><span class=\"p\">)</span>
        <span class=\"p\">(</span><span class=\"no\">t</span> <span class=\"o\">.</span> <span class=\"nv\">ivy--regex-fuzzy</span><span class=\"p\">)))</span>
</code></pre></div>
<p>The <code>t</code> key is used for all fall-through cases, otherwise the key is
the command or collection name.</p>

<p>The fuzzy matcher often results in substantially more matching
candidates than the regular one for similar input. That's why some
kind of sorting is important to bring the more relevant matching
candidates to the start of the list. Luckily, that's already been
figured out in <code>flx</code>, so to have it working just make sure that the
<code>flx</code> package is installed.</p>

<h2 id=\"step-3-optionally-configure-ivy-initial-inputs-alist\">Step 3: optionally configure <code>ivy-initial-inputs-alist</code></h2>

<p>The <code>ivy-initial-inputs-alist</code> variable is pretty useful in
conjunction with the default matcher. It's usually used to insert <code>^</code>
into the input area for certain commands.</p>

<p>If you're going fuzzy all the way, you can do without the initial <code>^</code>,
and simply let <code>flx</code> (hopefully) sort the matches in a nice way:</p>
<div class=\"highlight\"><pre><code class=\"language-elisp\"><span class=\"p\">(</span><span class=\"k\">setq</span> <span class=\"nv\">ivy-initial-inputs-alist</span> <span class=\"no\">nil</span><span class=\"p\">)</span>
</code></pre></div>
<h2 id=\"the-result\">The result</h2>

<p>Here's how <kbd>M-x</kbd> <code>counsel-M-x</code> looks like now:</p>

<p><img alt=\"ivy-flx-highlight.png\" src=\"http://oremacs.com/download/ivy-flx-highlight.png\" /></p>") (author nil (name nil "(or emacs") (uri nil "http://oremacs.com/")) (source nil (title ((type . "html")) "(or emacs") (link ((rel . "self") (href . "http://oremacs.com/atom.xml"))) (id nil "http://oremacs.com")))) ("Pragmatic Emacs: Email templates in mu4e with yasnippet" "<p> This is the second in a <a href=\"http://pragmaticemacs.com/mu4e-tutorials/\">series of posts</a> on using <code>mu4e</code> for email in emacs. When I <a href=\"http://pragmaticemacs.com/emacs/master-your-inbox-with-mu4e-and-org-mode/\">moved from thunderbird to mu4e</a>, there were some thunderbird extensions that I missed. One was quicktext which I used to create simple email templates for common sorts of emails. This is easily replicated in emacs using <a href=\"http://pragmaticemacs.com/emacs/smart-text-templates-with-yasnippet/\">yasnippet</a>. </p>
<p> As a simple example, I made a snippet to expand the key <code>all</code> into </p>
<blockquote>
<p> Hi all, </p>
<p> <img alt=\"…\" class=\"wp-smiley\" src=\"http://s.w.org/images/core/emoji/72x72/2026.png\" style=\"height: 1em;\" /> </p>
<p> Cheers, </p>
<p> Ben </p>
</blockquote>
<p> The snippet is </p>
<div class=\"org-src-container\">
<pre class=\"src src-snippet\"><span style=\"color: #7F9F7F;\"># -*- mode: snippet -*-</span>
<span style=\"color: #7F9F7F;\"># name: hi all</span>
<span style=\"color: #7F9F7F;\"># key: all</span>
<span style=\"color: #7F9F7F;\"># --</span>
Hi all,
<span style=\"color: #F0DFAF; font-weight: bold;\">$</span><span style=\"color: #CC9393;\">0</span>
Cheers,
Ben
</pre>
</div>
<p> This snippet is saved in the <code>message-mode</code> subdirectory of my <code>snippets</code> directory, since <code>message-mode</code> is the major mode for email composition in <code>mu4e</code>. </p>
<p> We can be a bit smarter than this with a snippet that takes the name of the email recipient and adds that to the template. The following is close to <a href=\"http://blog.binchen.org/posts/how-to-use-yasnippets-to-produce-email-templates-in-emacs.html\">binchen’s instructions</a> with a few small modifications. There are two parts to this: a snippet that expands out as normal, and a lisp function that it calls when it expands to extract the recipient’s name. </p>
<p> First, the lisp function </p>
<div class=\"org-src-container\">
<pre class=\"src src-elisp\"><span style=\"color: #5F7F5F;\">;; </span><span style=\"color: #7F9F7F;\">Function to return first name of email recipient</span>
<span style=\"color: #5F7F5F;\">;; </span><span style=\"color: #7F9F7F;\">Used by yasnippet</span>
<span style=\"color: #5F7F5F;\">;; </span><span style=\"color: #7F9F7F;\">Based closely on</span>
<span style=\"color: #5F7F5F;\">;; </span><span style=\"color: #7F9F7F;\">http://blog.binchen.org/posts/how-to-use-yasnippets-to-produce-email-templates-in-emacs.html</span>
<span style=\"color: #DCDCCC;\">(</span><span style=\"color: #F0DFAF; font-weight: bold;\">defun</span> <span style=\"color: #93E0E3;\">my-yas-get-first-name-from-to-field</span> <span style=\"color: #BFEBBF;\">()</span>
<span style=\"color: #BFEBBF;\">(</span><span style=\"color: #F0DFAF; font-weight: bold;\">let</span> <span style=\"color: #D0BF8F;\">(</span><span style=\"color: #93E0E3;\">(</span>rlt <span style=\"color: #CC9393;\">\"NAME\"</span><span style=\"color: #93E0E3;\">)</span> str rlt2<span style=\"color: #D0BF8F;\">)</span>
<span style=\"color: #D0BF8F;\">(</span><span style=\"color: #F0DFAF; font-weight: bold;\">save-excursion</span>
<span style=\"color: #93E0E3;\">(</span>goto-char <span style=\"color: #9FC59F;\">(</span>point-min<span style=\"color: #9FC59F;\">)</span><span style=\"color: #93E0E3;\">)</span>
<span style=\"color: #5F7F5F;\">;; </span><span style=\"color: #7F9F7F;\">first line in email could be some hidden line containing NO to field</span>
<span style=\"color: #93E0E3;\">(</span>setq str <span style=\"color: #9FC59F;\">(</span>buffer-substring-no-properties <span style=\"color: #94BFF3;\">(</span>point-min<span style=\"color: #94BFF3;\">)</span> <span style=\"color: #94BFF3;\">(</span>point-max<span style=\"color: #94BFF3;\">)</span><span style=\"color: #9FC59F;\">)</span><span style=\"color: #93E0E3;\">)</span><span style=\"color: #D0BF8F;\">)</span>
<span style=\"color: #5F7F5F;\">;; </span><span style=\"color: #7F9F7F;\">take name from TO field</span>
<span style=\"color: #D0BF8F;\">(</span><span style=\"color: #F0DFAF; font-weight: bold;\">when</span> <span style=\"color: #93E0E3;\">(</span>string-match <span style=\"color: #CC9393;\">\"^To: \\\"?</span><span style=\"color: #7F9F7F; font-weight: bold;\">\\\\</span><span style=\"color: #F0DFAF; font-weight: bold;\">(</span><span style=\"color: #CC9393;\">[</span><span style=\"color: #F0DFAF; font-weight: bold;\">^</span><span style=\"color: #CC9393;\"> ,]+</span><span style=\"color: #7F9F7F; font-weight: bold;\">\\\\</span><span style=\"color: #F0DFAF; font-weight: bold;\">)</span><span style=\"color: #CC9393;\">\"</span> str<span style=\"color: #93E0E3;\">)</span>
<span style=\"color: #93E0E3;\">(</span>setq rlt <span style=\"color: #9FC59F;\">(</span>match-string 1 str<span style=\"color: #9FC59F;\">)</span><span style=\"color: #93E0E3;\">)</span><span style=\"color: #D0BF8F;\">)</span>
<span style=\"color: #5F7F5F;\">;;</span><span style=\"color: #7F9F7F;\">get name in FROM field if available</span>
<span style=\"color: #D0BF8F;\">(</span><span style=\"color: #F0DFAF; font-weight: bold;\">when</span> <span style=\"color: #93E0E3;\">(</span>string-match <span style=\"color: #CC9393;\">\"^</span><span style=\"color: #7F9F7F; font-weight: bold;\">\\\\</span><span style=\"color: #F0DFAF; font-weight: bold;\">(</span><span style=\"color: #CC9393;\">[</span><span style=\"color: #F0DFAF; font-weight: bold;\">^</span><span style=\"color: #CC9393;\"> ,\\n]+</span><span style=\"color: #7F9F7F; font-weight: bold;\">\\\\</span><span style=\"color: #F0DFAF; font-weight: bold;\">)</span><span style=\"color: #CC9393;\">.+writes:$\"</span> str<span style=\"color: #93E0E3;\">)</span>
<span style=\"color: #93E0E3;\">(</span><span style=\"color: #F0DFAF; font-weight: bold;\">progn</span> <span style=\"color: #9FC59F;\">(</span>setq rlt2 <span style=\"color: #94BFF3;\">(</span>match-string 1 str<span style=\"color: #94BFF3;\">)</span><span style=\"color: #9FC59F;\">)</span>
<span style=\"color: #5F7F5F;\">;;</span><span style=\"color: #7F9F7F;\">prefer name in FROM field if TO field has \"@\"</span>
<span style=\"color: #9FC59F;\">(</span><span style=\"color: #F0DFAF; font-weight: bold;\">when</span> <span style=\"color: #94BFF3;\">(</span>string-match <span style=\"color: #CC9393;\">\"@\"</span> rlt<span style=\"color: #94BFF3;\">)</span>
<span style=\"color: #94BFF3;\">(</span>setq rlt rlt2<span style=\"color: #94BFF3;\">)</span><span style=\"color: #9FC59F;\">)</span>
<span style=\"color: #93E0E3;\">)</span><span style=\"color: #D0BF8F;\">)</span>
<span style=\"color: #D0BF8F;\">(</span>message <span style=\"color: #CC9393;\">\"rlt=%s\"</span> rlt<span style=\"color: #D0BF8F;\">)</span>
rlt<span style=\"color: #BFEBBF;\">)</span><span style=\"color: #DCDCCC;\">)</span>
</pre>
</div>
<p> This function takes the first name of the email recipient from the “To:” field of the message. It also looks for a name in the “Joe Bloggs writes:” text that mu4e generates when you reply to an email. This is populated from the “From:” field of the email being replied to and sometimes gives a better match for the name. The function compares the two name strings and prefers the “To:” name unless it contains an “@” in which case it chooses the “From:” name (this is the addition I made to <i>binchen</i>‘s version). You could make this more sophisticated but it works pretty well for me as is. </p>
<p> Now we need a snippet to expand: </p>
<div class=\"org-src-container\">
<pre class=\"src src-snippet\"><span style=\"color: #7F9F7F;\"># -*- mode: snippet -*-</span>
<span style=\"color: #7F9F7F;\"># name: dear name</span>
<span style=\"color: #7F9F7F;\"># key: dear</span>
<span style=\"color: #7F9F7F;\"># --</span>
Dear <span style=\"color: #F0DFAF; font-weight: bold;\">${</span><span style=\"color: #ff0000; font-weight: bold;\">1</span><span style=\"color: #F0DFAF; font-weight: bold;\">:</span>`(my-yas-get-first-name-from-to-field)`<span style=\"color: #F0DFAF; font-weight: bold;\">}</span>,
<span style=\"color: #F0DFAF; font-weight: bold;\">$</span><span style=\"color: #CC9393;\">0</span>
Best wishes,
Ben
</pre>
</div>
<p> Note how our function is straightforwardly called by the snippet to give “Dear NAME”. </p>
<p> Hopefully this gives you some ideas of how to make useful email templates with yasnippet. In future posts I’ll talk about how I have added attachment reminders and delayed sending features to mu4e. </p>" "http://pragmaticemacs.com/emacs/email-templates-in-mu4e-with-yasnippet/" (22164 5736) old 10 nil nil ((guid nil "http://pragmaticemacs.com/?p=428") (title ((type . "html") (lang . "en")) "Pragmatic Emacs: Email templates in mu4e with yasnippet") (link ((href . "http://pragmaticemacs.com/emacs/email-templates-in-mu4e-with-yasnippet/"))) (id nil "http://pragmaticemacs.com/?p=428") (updated nil "2016-01-11T20:54:00+00:00") (content ((type . "html") (lang . "en")) "<p> This is the second in a <a href=\"http://pragmaticemacs.com/mu4e-tutorials/\">series of posts</a> on using <code>mu4e</code> for email in emacs. When I <a href=\"http://pragmaticemacs.com/emacs/master-your-inbox-with-mu4e-and-org-mode/\">moved from thunderbird to mu4e</a>, there were some thunderbird extensions that I missed. One was quicktext which I used to create simple email templates for common sorts of emails. This is easily replicated in emacs using <a href=\"http://pragmaticemacs.com/emacs/smart-text-templates-with-yasnippet/\">yasnippet</a>. </p>
<p> As a simple example, I made a snippet to expand the key <code>all</code> into </p>
<blockquote>
<p> Hi all, </p>
<p> <img alt=\"…\" class=\"wp-smiley\" src=\"http://s.w.org/images/core/emoji/72x72/2026.png\" style=\"height: 1em;\" /> </p>
<p> Cheers, </p>
<p> Ben </p>
</blockquote>
<p> The snippet is </p>
<div class=\"org-src-container\">
<pre class=\"src src-snippet\"><span style=\"color: #7F9F7F;\"># -*- mode: snippet -*-</span>
<span style=\"color: #7F9F7F;\"># name: hi all</span>
<span style=\"color: #7F9F7F;\"># key: all</span>
<span style=\"color: #7F9F7F;\"># --</span>
Hi all,

<span style=\"color: #F0DFAF; font-weight: bold;\">$</span><span style=\"color: #CC9393;\">0</span>

Cheers,
 Ben
</pre>
</div>
<p> This snippet is saved in the <code>message-mode</code> subdirectory of my <code>snippets</code> directory, since <code>message-mode</code> is the major mode for email composition in <code>mu4e</code>. </p>
<p> We can be a bit smarter than this with a snippet that takes the name of the email recipient and adds that to the template. The following is close to <a href=\"http://blog.binchen.org/posts/how-to-use-yasnippets-to-produce-email-templates-in-emacs.html\">binchen’s instructions</a> with a few small modifications. There are two parts to this: a snippet that expands out as normal, and a lisp function that it calls when it expands to extract the recipient’s name. </p>
<p> First, the lisp function </p>
<div class=\"org-src-container\">
<pre class=\"src src-elisp\"><span style=\"color: #5F7F5F;\">;; </span><span style=\"color: #7F9F7F;\">Function to return first name of email recipient</span>
<span style=\"color: #5F7F5F;\">;; </span><span style=\"color: #7F9F7F;\">Used by yasnippet</span>
<span style=\"color: #5F7F5F;\">;; </span><span style=\"color: #7F9F7F;\">Based closely on</span>
<span style=\"color: #5F7F5F;\">;; </span><span style=\"color: #7F9F7F;\">http://blog.binchen.org/posts/how-to-use-yasnippets-to-produce-email-templates-in-emacs.html</span>
<span style=\"color: #DCDCCC;\">(</span><span style=\"color: #F0DFAF; font-weight: bold;\">defun</span> <span style=\"color: #93E0E3;\">my-yas-get-first-name-from-to-field</span> <span style=\"color: #BFEBBF;\">()</span>
  <span style=\"color: #BFEBBF;\">(</span><span style=\"color: #F0DFAF; font-weight: bold;\">let</span> <span style=\"color: #D0BF8F;\">(</span><span style=\"color: #93E0E3;\">(</span>rlt <span style=\"color: #CC9393;\">\"NAME\"</span><span style=\"color: #93E0E3;\">)</span> str rlt2<span style=\"color: #D0BF8F;\">)</span>
    <span style=\"color: #D0BF8F;\">(</span><span style=\"color: #F0DFAF; font-weight: bold;\">save-excursion</span>
      <span style=\"color: #93E0E3;\">(</span>goto-char <span style=\"color: #9FC59F;\">(</span>point-min<span style=\"color: #9FC59F;\">)</span><span style=\"color: #93E0E3;\">)</span>
      <span style=\"color: #5F7F5F;\">;; </span><span style=\"color: #7F9F7F;\">first line in email could be some hidden line containing NO to field</span>
      <span style=\"color: #93E0E3;\">(</span>setq str <span style=\"color: #9FC59F;\">(</span>buffer-substring-no-properties <span style=\"color: #94BFF3;\">(</span>point-min<span style=\"color: #94BFF3;\">)</span> <span style=\"color: #94BFF3;\">(</span>point-max<span style=\"color: #94BFF3;\">)</span><span style=\"color: #9FC59F;\">)</span><span style=\"color: #93E0E3;\">)</span><span style=\"color: #D0BF8F;\">)</span>
    <span style=\"color: #5F7F5F;\">;; </span><span style=\"color: #7F9F7F;\">take name from TO field</span>
    <span style=\"color: #D0BF8F;\">(</span><span style=\"color: #F0DFAF; font-weight: bold;\">when</span> <span style=\"color: #93E0E3;\">(</span>string-match <span style=\"color: #CC9393;\">\"^To: \\\"?</span><span style=\"color: #7F9F7F; font-weight: bold;\">\\\\</span><span style=\"color: #F0DFAF; font-weight: bold;\">(</span><span style=\"color: #CC9393;\">[</span><span style=\"color: #F0DFAF; font-weight: bold;\">^</span><span style=\"color: #CC9393;\"> ,]+</span><span style=\"color: #7F9F7F; font-weight: bold;\">\\\\</span><span style=\"color: #F0DFAF; font-weight: bold;\">)</span><span style=\"color: #CC9393;\">\"</span> str<span style=\"color: #93E0E3;\">)</span>
      <span style=\"color: #93E0E3;\">(</span>setq rlt <span style=\"color: #9FC59F;\">(</span>match-string 1 str<span style=\"color: #9FC59F;\">)</span><span style=\"color: #93E0E3;\">)</span><span style=\"color: #D0BF8F;\">)</span>
    <span style=\"color: #5F7F5F;\">;;</span><span style=\"color: #7F9F7F;\">get name in FROM field if available</span>
    <span style=\"color: #D0BF8F;\">(</span><span style=\"color: #F0DFAF; font-weight: bold;\">when</span> <span style=\"color: #93E0E3;\">(</span>string-match <span style=\"color: #CC9393;\">\"^</span><span style=\"color: #7F9F7F; font-weight: bold;\">\\\\</span><span style=\"color: #F0DFAF; font-weight: bold;\">(</span><span style=\"color: #CC9393;\">[</span><span style=\"color: #F0DFAF; font-weight: bold;\">^</span><span style=\"color: #CC9393;\"> ,\\n]+</span><span style=\"color: #7F9F7F; font-weight: bold;\">\\\\</span><span style=\"color: #F0DFAF; font-weight: bold;\">)</span><span style=\"color: #CC9393;\">.+writes:$\"</span> str<span style=\"color: #93E0E3;\">)</span>
      <span style=\"color: #93E0E3;\">(</span><span style=\"color: #F0DFAF; font-weight: bold;\">progn</span> <span style=\"color: #9FC59F;\">(</span>setq rlt2 <span style=\"color: #94BFF3;\">(</span>match-string 1 str<span style=\"color: #94BFF3;\">)</span><span style=\"color: #9FC59F;\">)</span>
             <span style=\"color: #5F7F5F;\">;;</span><span style=\"color: #7F9F7F;\">prefer name in FROM field if TO field has \"@\"</span>
             <span style=\"color: #9FC59F;\">(</span><span style=\"color: #F0DFAF; font-weight: bold;\">when</span> <span style=\"color: #94BFF3;\">(</span>string-match <span style=\"color: #CC9393;\">\"@\"</span> rlt<span style=\"color: #94BFF3;\">)</span>
               <span style=\"color: #94BFF3;\">(</span>setq rlt rlt2<span style=\"color: #94BFF3;\">)</span><span style=\"color: #9FC59F;\">)</span>
             <span style=\"color: #93E0E3;\">)</span><span style=\"color: #D0BF8F;\">)</span>
    <span style=\"color: #D0BF8F;\">(</span>message <span style=\"color: #CC9393;\">\"rlt=%s\"</span> rlt<span style=\"color: #D0BF8F;\">)</span>
    rlt<span style=\"color: #BFEBBF;\">)</span><span style=\"color: #DCDCCC;\">)</span>
</pre>
</div>
<p> This function takes the first name of the email recipient from the “To:” field of the message. It also looks for a name in the “Joe Bloggs writes:” text that mu4e generates when you reply to an email. This is populated from the “From:” field of the email being replied to and sometimes gives a better match for the name. The function compares the two name strings and prefers the “To:” name unless it contains an “@” in which case it chooses the “From:” name (this is the addition I made to <i>binchen</i>‘s version). You could make this more sophisticated but it works pretty well for me as is. </p>
<p> Now we need a snippet to expand: </p>
<div class=\"org-src-container\">
<pre class=\"src src-snippet\"><span style=\"color: #7F9F7F;\"># -*- mode: snippet -*-</span>
<span style=\"color: #7F9F7F;\"># name: dear name</span>
<span style=\"color: #7F9F7F;\"># key: dear</span>
<span style=\"color: #7F9F7F;\"># --</span>
Dear <span style=\"color: #F0DFAF; font-weight: bold;\">${</span><span style=\"color: #ff0000; font-weight: bold;\">1</span><span style=\"color: #F0DFAF; font-weight: bold;\">:</span>`(my-yas-get-first-name-from-to-field)`<span style=\"color: #F0DFAF; font-weight: bold;\">}</span>,

<span style=\"color: #F0DFAF; font-weight: bold;\">$</span><span style=\"color: #CC9393;\">0</span>

Best wishes,
 Ben
</pre>
</div>
<p> Note how our function is straightforwardly called by the snippet to give “Dear NAME”. </p>
<p> Hopefully this gives you some ideas of how to make useful email templates with yasnippet. In future posts I’ll talk about how I have added attachment reminders and delayed sending features to mu4e. </p>") (author nil (name nil "Ben Maughan") (uri nil "http://pragmaticemacs.com")) (source nil (title ((type . "html")) "Pragmatic Emacs") (subtitle ((type . "html")) "practical tips for everyday emacs") (link ((rel . "self") (href . "http://pragmaticemacs.com/feed/"))) (id nil "http://pragmaticemacs.com")))) ("Endless Parentheses: An improvement to Emacs auto-correct" "<p>
My <a href=\"http://endlessparentheses.com/ispell-and-abbrev-the-perfect-auto-correct.html\">Emacs auto-correct</a> is one of the oldest posts on this blog, and I still see
it pop up here and there on occasion. Last week, Norman Ramsey <a href=\"http://endlessparentheses.com/ispell-and-abbrev-the-perfect-auto-correct.html#comment-2440958792\">asked</a> about an
improvement to that command and I figured it’s worth an update post.
</p>
<p>
As of today, the code in the post will search backwards for a typo, instead of
just correcting the current word. So you can invoke it without trouble even if
the typo happened several words ago.</p>
<p><a href=\"http://endlessparentheses.com/an-improvement-to-emacs-auto-correct.html?source=rss#disqus_thread\">Comment on this.</a></p>" "http://endlessparentheses.com/an-improvement-to-emacs-auto-correct.html?source=rss" (22162 61568) old 11 nil nil ((guid nil "http://endlessparentheses.com/an-improvement-to-emacs-auto-correct") (title ((type . "html")) "Endless Parentheses: An improvement to Emacs auto-correct") (link ((href . "http://endlessparentheses.com/an-improvement-to-emacs-auto-correct.html?source=rss"))) (id nil "http://endlessparentheses.com/an-improvement-to-emacs-auto-correct") (updated nil "2016-01-11T00:00:00+00:00") (content ((type . "html")) "<p>
My <a href=\"http://endlessparentheses.com/ispell-and-abbrev-the-perfect-auto-correct.html\">Emacs auto-correct</a> is one of the oldest posts on this blog, and I still see
it pop up here and there on occasion. Last week, Norman Ramsey <a href=\"http://endlessparentheses.com/ispell-and-abbrev-the-perfect-auto-correct.html#comment-2440958792\">asked</a> about an
improvement to that command and I figured it’s worth an update post.
</p>

<p>
As of today, the code in the post will search backwards for a typo, instead of
just correcting the current word. So you can invoke it without trouble even if
the typo happened several words ago.</p>

   <p><a href=\"http://endlessparentheses.com/an-improvement-to-emacs-auto-correct.html?source=rss#disqus_thread\">Comment on this.</a></p>") (author nil (name nil "Artur Malabarba") (uri nil "http://endlessparentheses.com/?source=rss")) (source nil (title ((type . "html")) "Endless Parentheses") (link ((rel . "self") (href . "http://endlessparentheses.com/atom.xml"))) (id nil "http://endlessparentheses.com")))) ("sachachua: 2016-01-16 Emacs Hangout" "<p></p>
<p>Event page: <a href=\"https://plus.google.com/b/108840863190686221561/events/cqe6vjn5a3jbt8971n9ovljl78g\">https://plus.google.com/b/108840863190686221561/events/cqe6vjn5a3jbt8971n9ovljl78g</a></p>
<p>Timestamps:</p>
<ul class=\"org-ul\">
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=0h19m0s\">0:19</a> Posting to blog</li>
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=0h25m0s\">0:25</a> Cheat sheet</li>
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=0h31m0s\">0:31</a> Books</li>
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=0h36m0s\">0:36</a> Org Mode</li>
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=0h40m0s\">0:40</a> Emacs config</li>
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=0h42m0s\">0:42</a> Programming languages and modes</li>
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=0h51m0s\">0:51</a> Discovery of the week</li>
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=0h52m0s\">0:52</a> Kanban</li>
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=0h56m0s\">0:56</a> Bug trackers, Scrum</li>
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=1h04m0s\">1:04</a> Helm, input methods</li>
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=1h08m0s\">1:08</a> Mobile access</li>
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=1h18m0s\">1:18</a> Sharing</li>
</ul>
<p>Text chat:</p>
<p>Neat links from Paul Harper, who couldn’t participate in the voice chat: I am writing in to share my ‘discovery of the week’ which was J. Alexander Branham’s Blog and his dotemacs on Github. He is a PhD Candidate at UT-Austin in the Department of Government. He has some very good posts on using Emacs for Markdown, LaTeX and R for academic types. It complements Kiern Healy’s one for Social Scientists, and Vikas Rawal’s Orgpaper.</p>
<ul class=\"org-ul\">
<li><a href=\"http://jabranham.com/blog/\">http://jabranham.com/blog/</a></li>
<li><a href=\"https://github.com/jabranham?tab=repositories\">https://github.com/jabranham?tab=repositories</a></li>
<li><a href=\"http://kieranhealy.org/resources/emacs-starter-kit/\">http://kieranhealy.org/resources/emacs-starter-kit/</a></li>
<li><a href=\"https://github.com/vikasrawal/orgpaper\">https://github.com/vikasrawal/orgpaper</a></li>
</ul>
<table border=\"2\" cellpadding=\"6\" cellspacing=\"0\" frame=\"hsides\" rules=\"groups\">
<colgroup>
<col class=\"org-left\" />
<col class=\"org-left\" />
<col class=\"org-left\" /> </colgroup>
<tbody>
<tr>
<td class=\"org-left\">me</td>
<td class=\"org-left\">8:49 PM</td>
<td class=\"org-left\">Jira</td>
</tr>
<tr>
<td class=\"org-left\">Shakthi Kannan</td>
<td class=\"org-left\">8:58 PM</td>
<td class=\"org-left\"><a href=\"https://github.com/ianxm/emacs-scrum\">https://github.com/ianxm/emacs-scrum</a></td>
</tr>
<tr>
<td class=\"org-left\">me</td>
<td class=\"org-left\">8:59 PM</td>
<td class=\"org-left\">org-ascii-text-width</td>
</tr>
<tr>
<td class=\"org-left\">me</td>
<td class=\"org-left\">9:03 PM</td>
<td class=\"org-left\"><a href=\"https://github.com/jtatarik/ical-event/blob/master/gnus-calendar.el\">https://github.com/jtatarik/ical-event/blob/master/gnus-calendar.el</a></td>
</tr>
<tr>
<td class=\"org-left\">Puneeth Chaganti</td>
<td class=\"org-left\">9:03 PM</td>
<td class=\"org-left\">Paul, there seemed to be a lot of noise on your end. I muted you. Unmute yourself when you want to speak. Thanks!</td>
</tr>
<tr>
<td class=\"org-left\">Bill Zimmerly</td>
<td class=\"org-left\">9:13 PM</td>
<td class=\"org-left\">Great ssh client for Android –&amp;gt; <a href=\"https://play.google.com/store/apps/details?id=com.server.auditor.ssh.client\">https://play.google.com/store/apps/details?id=com.server.auditor.ssh.client</a></td>
</tr>
<tr>
<td class=\"org-left\">me</td>
<td class=\"org-left\">9:13 PM</td>
<td class=\"org-left\"><a href=\"http://zot.github.io/Leisure/?load=http://zot.github.io/Leisure/elisp/README.org\">http://zot.github.io/Leisure/?load=http://zot.github.io/Leisure/elisp/README.org</a></td>
</tr>
<tr>
<td class=\"org-left\">me</td>
<td class=\"org-left\">9:18 PM</td>
<td class=\"org-left\">tmate</td>
</tr>
<tr>
<td class=\"org-left\">Joe Heyming</td>
<td class=\"org-left\">9:21 PM</td>
<td class=\"org-left\">gotta go, bye</td>
</tr>
<tr>
<td class=\"org-left\">me</td>
<td class=\"org-left\">9:22 PM</td>
<td class=\"org-left\">Quick tmate demo: ssh <a href=\"mailto:ro-OPif3M1DSekzNKzpfI7LScPid@to2.tmate.io\">ro-OPif3M1DSekzNKzpfI7LScPid@to2.tmate.io</a></td>
</tr>
<tr>
<td class=\"org-left\">Puneeth Chaganti</td>
<td class=\"org-left\">9:23 PM</td>
<td class=\"org-left\">I can see the emacs tutorial. ~.</td>
</tr>
</tbody>
</table>
<p>The post <a href=\"http://sachachua.com/blog/2016/01/2016-01-16-emacs-hangout/\" rel=\"nofollow\">2016-01-16 Emacs Hangout</a> appeared first on <a href=\"http://sachachua.com/blog\" rel=\"nofollow\">sacha chua :: living an awesome life</a>.</p>" "http://sachachua.com/blog/2016/01/2016-01-16-emacs-hangout/" (22170 65160) old 6 nil nil ((guid nil "http://sachachua.com/blog/?p=28566") (title ((type . "html") (lang . "en-US")) "sachachua: 2016-01-16 Emacs Hangout") (link ((href . "http://sachachua.com/blog/2016/01/2016-01-16-emacs-hangout/"))) (id nil "http://sachachua.com/blog/?p=28566") (updated nil "2016-01-17T02:38:00+00:00") (content ((type . "html") (lang . "en-US")) "<p></p>
<p>Event page: <a href=\"https://plus.google.com/b/108840863190686221561/events/cqe6vjn5a3jbt8971n9ovljl78g\">https://plus.google.com/b/108840863190686221561/events/cqe6vjn5a3jbt8971n9ovljl78g</a></p>
<p>Timestamps:</p>
<ul class=\"org-ul\">
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=0h19m0s\">0:19</a> Posting to blog</li>
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=0h25m0s\">0:25</a> Cheat sheet</li>
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=0h31m0s\">0:31</a> Books</li>
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=0h36m0s\">0:36</a> Org Mode</li>
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=0h40m0s\">0:40</a> Emacs config</li>
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=0h42m0s\">0:42</a> Programming languages and modes</li>
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=0h51m0s\">0:51</a> Discovery of the week</li>
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=0h52m0s\">0:52</a> Kanban</li>
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=0h56m0s\">0:56</a> Bug trackers, Scrum</li>
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=1h04m0s\">1:04</a> Helm, input methods</li>
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=1h08m0s\">1:08</a> Mobile access</li>
<li><a href=\"https://www.youtube.com/watch?v=uklkzbjEN-4&amp;t=1h18m0s\">1:18</a> Sharing</li>
</ul>
<p>Text chat:</p>
<p>Neat links from Paul Harper, who couldn’t participate in the voice chat: I am writing in to share my ‘discovery of the week’ which was J. Alexander Branham’s Blog and his dotemacs on Github. He is a PhD Candidate at UT-Austin in the Department of Government. He has some very good posts on using Emacs for Markdown, LaTeX and R for academic types. It complements Kiern Healy’s one for Social Scientists, and Vikas Rawal’s Orgpaper.</p>
<ul class=\"org-ul\">
<li><a href=\"http://jabranham.com/blog/\">http://jabranham.com/blog/</a></li>
<li><a href=\"https://github.com/jabranham?tab=repositories\">https://github.com/jabranham?tab=repositories</a></li>
<li><a href=\"http://kieranhealy.org/resources/emacs-starter-kit/\">http://kieranhealy.org/resources/emacs-starter-kit/</a></li>
<li><a href=\"https://github.com/vikasrawal/orgpaper\">https://github.com/vikasrawal/orgpaper</a></li>
</ul>
<table border=\"2\" cellpadding=\"6\" cellspacing=\"0\" frame=\"hsides\" rules=\"groups\">
<colgroup>
<col class=\"org-left\" />
<col class=\"org-left\" />
<col class=\"org-left\" /> </colgroup>
<tbody>
<tr>
<td class=\"org-left\">me</td>
<td class=\"org-left\">8:49 PM</td>
<td class=\"org-left\">Jira</td>
</tr>
<tr>
<td class=\"org-left\">Shakthi Kannan</td>
<td class=\"org-left\">8:58 PM</td>
<td class=\"org-left\"><a href=\"https://github.com/ianxm/emacs-scrum\">https://github.com/ianxm/emacs-scrum</a></td>
</tr>
<tr>
<td class=\"org-left\">me</td>
<td class=\"org-left\">8:59 PM</td>
<td class=\"org-left\">org-ascii-text-width</td>
</tr>
<tr>
<td class=\"org-left\">me</td>
<td class=\"org-left\">9:03 PM</td>
<td class=\"org-left\"><a href=\"https://github.com/jtatarik/ical-event/blob/master/gnus-calendar.el\">https://github.com/jtatarik/ical-event/blob/master/gnus-calendar.el</a></td>
</tr>
<tr>
<td class=\"org-left\">Puneeth Chaganti</td>
<td class=\"org-left\">9:03 PM</td>
<td class=\"org-left\">Paul, there seemed to be a lot of noise on your end. I muted you. Unmute yourself when you want to speak. Thanks!</td>
</tr>
<tr>
<td class=\"org-left\">Bill Zimmerly</td>
<td class=\"org-left\">9:13 PM</td>
<td class=\"org-left\">Great ssh client for Android –&amp;gt; <a href=\"https://play.google.com/store/apps/details?id=com.server.auditor.ssh.client\">https://play.google.com/store/apps/details?id=com.server.auditor.ssh.client</a></td>
</tr>
<tr>
<td class=\"org-left\">me</td>
<td class=\"org-left\">9:13 PM</td>
<td class=\"org-left\"><a href=\"http://zot.github.io/Leisure/?load=http://zot.github.io/Leisure/elisp/README.org\">http://zot.github.io/Leisure/?load=http://zot.github.io/Leisure/elisp/README.org</a></td>
</tr>
<tr>
<td class=\"org-left\">me</td>
<td class=\"org-left\">9:18 PM</td>
<td class=\"org-left\">tmate</td>
</tr>
<tr>
<td class=\"org-left\">Joe Heyming</td>
<td class=\"org-left\">9:21 PM</td>
<td class=\"org-left\">gotta go, bye</td>
</tr>
<tr>
<td class=\"org-left\">me</td>
<td class=\"org-left\">9:22 PM</td>
<td class=\"org-left\">Quick tmate demo: ssh <a href=\"mailto:ro-OPif3M1DSekzNKzpfI7LScPid@to2.tmate.io\">ro-OPif3M1DSekzNKzpfI7LScPid@to2.tmate.io</a></td>
</tr>
<tr>
<td class=\"org-left\">Puneeth Chaganti</td>
<td class=\"org-left\">9:23 PM</td>
<td class=\"org-left\">I can see the emacs tutorial. ~.</td>
</tr>
</tbody>
</table>
<p>The post <a href=\"http://sachachua.com/blog/2016/01/2016-01-16-emacs-hangout/\" rel=\"nofollow\">2016-01-16 Emacs Hangout</a> appeared first on <a href=\"http://sachachua.com/blog\" rel=\"nofollow\">sacha chua :: living an awesome life</a>.</p>") (author nil (name nil "Sacha Chua") (uri nil "http://sachachua.com/blog/category/geek/emacs/")) (source nil (title ((type . "html")) "Emacs - Sacha Chua") (subtitle ((type . "html")) "learn - share - scale") (link ((rel . "self") (href . "http://feeds.feedburner.com/pimpmyemacs"))) (id nil "http://sachachua.com/blog/category/geek/emacs/")))) ("Pragmatic Emacs: Aligning text" "<p> Emacs has a flexible tool, <code>align-regexp</code>, for aligning text but it is surprisingly fiddly to use. For example to align a section of text like this: </p>
<pre class=\"example\">the quick brown fox
jumped over the lazy
dogs the quick brown
</pre>
<p> into columns like this: </p>
<pre class=\"example\">the     quick  brown  fox
jumped  over   the    lazy
dogs    the    quick  brown
</pre>
<p> you would highlight the text and use <code>C-u M-x align-regexp \\(\\s-*\\)\\s- RET 1 RET 0 RET y</code>. See what I mean! </p>
<p> To make life easier, I wrote a couple of simple wrappers around <code>align-regexp</code> for common tasks. The first aligns on whitespace, and the second aligns on <code>&amp;</code> (useful for LaTeX tables). </p>
<div class=\"org-src-container\">
<pre class=\"src src-elisp\"><span style=\"color: #DCDCCC;\">(</span><span style=\"color: #F0DFAF; font-weight: bold;\">defun</span> <span style=\"color: #93E0E3;\">bjm/align-whitespace</span> <span style=\"color: #BFEBBF;\">(</span>start end<span style=\"color: #BFEBBF;\">)</span>
<span style=\"color: #9FC59F;\">\"Align columns by whitespace\"</span>
<span style=\"color: #BFEBBF;\">(</span>interactive <span style=\"color: #CC9393;\">\"r\"</span><span style=\"color: #BFEBBF;\">)</span>
<span style=\"color: #BFEBBF;\">(</span>align-regexp start end
<span style=\"color: #CC9393;\">\"</span><span style=\"color: #7F9F7F; font-weight: bold;\">\\\\</span><span style=\"color: #F0DFAF; font-weight: bold;\">(</span><span style=\"color: #CC9393;\">\\\\s-*</span><span style=\"color: #7F9F7F; font-weight: bold;\">\\\\</span><span style=\"color: #F0DFAF; font-weight: bold;\">)</span><span style=\"color: #CC9393;\">\\\\s-\"</span> 1 0 t<span style=\"color: #BFEBBF;\">)</span><span style=\"color: #DCDCCC;\">)</span>
<span style=\"color: #DCDCCC;\">(</span><span style=\"color: #F0DFAF; font-weight: bold;\">defun</span> <span style=\"color: #93E0E3;\">bjm/align-&amp;</span> <span style=\"color: #BFEBBF;\">(</span>start end<span style=\"color: #BFEBBF;\">)</span>
<span style=\"color: #9FC59F;\">\"Align columns by ampersand\"</span>
<span style=\"color: #BFEBBF;\">(</span>interactive <span style=\"color: #CC9393;\">\"r\"</span><span style=\"color: #BFEBBF;\">)</span>
<span style=\"color: #BFEBBF;\">(</span>align-regexp start end
<span style=\"color: #CC9393;\">\"</span><span style=\"color: #7F9F7F; font-weight: bold;\">\\\\</span><span style=\"color: #F0DFAF; font-weight: bold;\">(</span><span style=\"color: #CC9393;\">\\\\s-*</span><span style=\"color: #7F9F7F; font-weight: bold;\">\\\\</span><span style=\"color: #F0DFAF; font-weight: bold;\">)</span><span style=\"color: #CC9393;\">\\\\&amp;\"</span> 1 1 t<span style=\"color: #BFEBBF;\">)</span><span style=\"color: #DCDCCC;\">)</span>
</pre>
</div>" "http://pragmaticemacs.com/emacs/aligning-text/" (22170 47820) old 7 nil nil ((guid nil "http://pragmaticemacs.com/?p=444") (title ((type . "html") (lang . "en")) "Pragmatic Emacs: Aligning text") (link ((href . "http://pragmaticemacs.com/emacs/aligning-text/"))) (id nil "http://pragmaticemacs.com/?p=444") (updated nil "2016-01-16T21:49:00+00:00") (content ((type . "html") (lang . "en")) "<p> Emacs has a flexible tool, <code>align-regexp</code>, for aligning text but it is surprisingly fiddly to use. For example to align a section of text like this: </p>
<pre class=\"example\">the quick brown fox
jumped over the lazy
dogs the quick brown
</pre>
<p> into columns like this: </p>
<pre class=\"example\">the     quick  brown  fox
jumped  over   the    lazy
dogs    the    quick  brown
</pre>
<p> you would highlight the text and use <code>C-u M-x align-regexp \\(\\s-*\\)\\s- RET 1 RET 0 RET y</code>. See what I mean! </p>
<p> To make life easier, I wrote a couple of simple wrappers around <code>align-regexp</code> for common tasks. The first aligns on whitespace, and the second aligns on <code>&amp;</code> (useful for LaTeX tables). </p>
<div class=\"org-src-container\">
<pre class=\"src src-elisp\"><span style=\"color: #DCDCCC;\">(</span><span style=\"color: #F0DFAF; font-weight: bold;\">defun</span> <span style=\"color: #93E0E3;\">bjm/align-whitespace</span> <span style=\"color: #BFEBBF;\">(</span>start end<span style=\"color: #BFEBBF;\">)</span>
  <span style=\"color: #9FC59F;\">\"Align columns by whitespace\"</span>
  <span style=\"color: #BFEBBF;\">(</span>interactive <span style=\"color: #CC9393;\">\"r\"</span><span style=\"color: #BFEBBF;\">)</span>
  <span style=\"color: #BFEBBF;\">(</span>align-regexp start end
                <span style=\"color: #CC9393;\">\"</span><span style=\"color: #7F9F7F; font-weight: bold;\">\\\\</span><span style=\"color: #F0DFAF; font-weight: bold;\">(</span><span style=\"color: #CC9393;\">\\\\s-*</span><span style=\"color: #7F9F7F; font-weight: bold;\">\\\\</span><span style=\"color: #F0DFAF; font-weight: bold;\">)</span><span style=\"color: #CC9393;\">\\\\s-\"</span> 1 0 t<span style=\"color: #BFEBBF;\">)</span><span style=\"color: #DCDCCC;\">)</span>

<span style=\"color: #DCDCCC;\">(</span><span style=\"color: #F0DFAF; font-weight: bold;\">defun</span> <span style=\"color: #93E0E3;\">bjm/align-&amp;</span> <span style=\"color: #BFEBBF;\">(</span>start end<span style=\"color: #BFEBBF;\">)</span>
  <span style=\"color: #9FC59F;\">\"Align columns by ampersand\"</span>
  <span style=\"color: #BFEBBF;\">(</span>interactive <span style=\"color: #CC9393;\">\"r\"</span><span style=\"color: #BFEBBF;\">)</span>
  <span style=\"color: #BFEBBF;\">(</span>align-regexp start end
                <span style=\"color: #CC9393;\">\"</span><span style=\"color: #7F9F7F; font-weight: bold;\">\\\\</span><span style=\"color: #F0DFAF; font-weight: bold;\">(</span><span style=\"color: #CC9393;\">\\\\s-*</span><span style=\"color: #7F9F7F; font-weight: bold;\">\\\\</span><span style=\"color: #F0DFAF; font-weight: bold;\">)</span><span style=\"color: #CC9393;\">\\\\&amp;\"</span> 1 1 t<span style=\"color: #BFEBBF;\">)</span><span style=\"color: #DCDCCC;\">)</span>
</pre>
</div>") (author nil (name nil "Ben Maughan") (uri nil "http://pragmaticemacs.com")) (source nil (title ((type . "html")) "Pragmatic Emacs") (subtitle ((type . "html")) "practical tips for everyday emacs") (link ((rel . "self") (href . "http://pragmaticemacs.com/feed/"))) (id nil "http://pragmaticemacs.com")))) ("Marcin Borkowski: save-excursion changed semantics" "Recently, when coding on a new Emacs (compiled from source), I stumbled upon a strange behavior of save-excursion: it didn’t restore the mark status. I was quite sure that it should do that, but – for lack of better ideas – I C-h f‘d it. And here is what I learned..." "http://mbork.pl/2016-01-16_save-excursion_changed_semantics" (22170 46875) old 8 nil nil ((guid nil "http://mbork.pl/2016-01-16_save-excursion_changed_semantics") (title ((type . "html")) "Marcin Borkowski: save-excursion changed semantics") (link ((href . "http://mbork.pl/2016-01-16_save-excursion_changed_semantics"))) (id nil "http://mbork.pl/2016-01-16_save-excursion_changed_semantics") (updated nil "2016-01-16T21:33:15+00:00") (content ((type . "html")) "Recently, when coding on a new Emacs (compiled from source), I stumbled upon a strange behavior of save-excursion: it didn’t restore the mark status. I was quite sure that it should do that, but – for lack of better ideas – I C-h f‘d it. And here is what I learned...") (author nil (name nil "Marcin Borkowski") (uri nil "http://mbork.pl/Homepage")) (source nil (title ((type . "html")) "Marcin Borkowski:  Content AND Presentation") (subtitle ((type . "html")) "Strona domowa Marcina Borkowskiego") (link ((rel . "self") (href . "http://mbork.pl?action=rss;all=0;showedit=0;rcfilteronly=CategoryEmacs"))) (id nil "http://mbork.pl/Homepage")))) ("Irreal: Running Emacs as a Daemon" "<p> <a href=\"http://mjwall.com/\">M. J. Wall</a> has an interesting post entitled <a href=\"http://mjwall.com/blog/2013/10/04/how-i-use-emacs/\">How I Use Emacs</a>. Wall's workflow is a bit unusual<img alt=\"&lt;img src=\" src=\"http://s.w.org/images/core/emoji/72x72/2014.png\" /><img alt=\"—\" class=\"wp-smiley\" src=\"http://s.w.org/images/core/emoji/72x72/2014.png\" style=\"height: 1em;\" />\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /&gt;by which I mean different from mine<img alt=\"&lt;img src=\" src=\"http://s.w.org/images/core/emoji/72x72/2014.png\" /><img alt=\"—\" class=\"wp-smiley\" src=\"http://s.w.org/images/core/emoji/72x72/2014.png\" style=\"height: 1em;\" />\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /&gt;in that he spends a lot of time in the terminal even though he's running GUI desktops in Linux and OS X. Sometimes he just wants to edit a file and then return to the terminal. Other times he wants to pop up an Emacs buffer and return to the terminal immediately. </p>
<p> To facilitate that workflow, he has two scripts. One starts Emacs in the terminal window and waits for Emacs to finish before returning to the shell. The other pops up a new Emacs frame and returns to the terminal immediately. An interesting trick that both these scripts use is to call <code>emacsclient</code> with the <code>-a “”</code> option. That says that if the Emacs server is not already running, start it and then reattach <code>emacsclient</code> to it. </p>
<p> As I mentioned, my workflow is different. I <i>always</i> have Emacs running and have a shortcut key to change focus to it so if I'm in a terminal and need Emacs I just press【<kbd>F6</kbd>】 to pop into Emacs and do what needs doing. Nonetheless, there is one case where Wall's technique is useful to me. Usually if I want to edit a file on another machine, I just use <code>tramp</code> but if I'm <code>ssh</code>ed into that machine already it's convenient to just bring up <code>emacsclient</code> on the remote machine. Wall's <code>et</code> script is perfect for that. Even if the remote machine doesn't have a copy of the <code>et</code> script installed, it's simple to call <code>emacsclient</code> directly </p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">emacsclient -a <span style=\"color: #8b2252;\">\"\"</span> -t file-to-edit
</pre>
</div>
<p> If you use Emacs and ever <code>ssh</code> into remote machines, this is a technique worth knowing. </p>" "http://irreal.org/blog/?p=4887" (22170 33960) old 9 nil nil ((guid nil "http://irreal.org/blog/?p=4887") (title ((type . "html") (lang . "en-US")) "Irreal: Running Emacs as a Daemon") (link ((href . "http://irreal.org/blog/?p=4887"))) (id nil "http://irreal.org/blog/?p=4887") (updated nil "2016-01-16T17:58:00+00:00") (content ((type . "html") (lang . "en-US")) "<p> <a href=\"http://mjwall.com/\">M. J. Wall</a> has an interesting post entitled <a href=\"http://mjwall.com/blog/2013/10/04/how-i-use-emacs/\">How I Use Emacs</a>. Wall's workflow is a bit unusual<img alt=\"&lt;img src=\" src=\"http://s.w.org/images/core/emoji/72x72/2014.png\" /><img alt=\"—\" class=\"wp-smiley\" src=\"http://s.w.org/images/core/emoji/72x72/2014.png\" style=\"height: 1em;\" />\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /&gt;by which I mean different from mine<img alt=\"&lt;img src=\" src=\"http://s.w.org/images/core/emoji/72x72/2014.png\" /><img alt=\"—\" class=\"wp-smiley\" src=\"http://s.w.org/images/core/emoji/72x72/2014.png\" style=\"height: 1em;\" />\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /&gt;in that he spends a lot of time in the terminal even though he's running GUI desktops in Linux and OS X. Sometimes he just wants to edit a file and then return to the terminal. Other times he wants to pop up an Emacs buffer and return to the terminal immediately. </p>
<p> To facilitate that workflow, he has two scripts. One starts Emacs in the terminal window and waits for Emacs to finish before returning to the shell. The other pops up a new Emacs frame and returns to the terminal immediately. An interesting trick that both these scripts use is to call <code>emacsclient</code> with the <code>-a “”</code> option. That says that if the Emacs server is not already running, start it and then reattach <code>emacsclient</code> to it. </p>
<p> As I mentioned, my workflow is different. I <i>always</i> have Emacs running and have a shortcut key to change focus to it so if I'm in a terminal and need Emacs I just press【<kbd>F6</kbd>】 to pop into Emacs and do what needs doing. Nonetheless, there is one case where Wall's technique is useful to me. Usually if I want to edit a file on another machine, I just use <code>tramp</code> but if I'm <code>ssh</code>ed into that machine already it's convenient to just bring up <code>emacsclient</code> on the remote machine. Wall's <code>et</code> script is perfect for that. Even if the remote machine doesn't have a copy of the <code>et</code> script installed, it's simple to call <code>emacsclient</code> directly </p>
<div class=\"org-src-container\">
<pre class=\"src src-sh\">emacsclient -a <span style=\"color: #8b2252;\">\"\"</span> -t file-to-edit
</pre>
</div>
<p> If you use Emacs and ever <code>ssh</code> into remote machines, this is a technique worth knowing. </p>") (author nil (name nil "jcs") (uri nil "http://irreal.org/blog")) (source nil (title ((type . "html")) "Emacs – Irreal") (subtitle ((type . "html")) "The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession") (link ((rel . "self") (href . "http://irreal.org/blog/?tag=emacs&feed=rss2"))) (id nil "http://irreal.org/blog")))) ("Irreal: Gnus Guide Update" "<p> After <a href=\"http://irreal.org/blog/?p=4789\">Sacha's chat with John Wiegley</a> that explored how Wiegley uses Gnus to manage his Emacs maintainer workflow, there's been a bit of renewed interest from Emacsers in using it for <i>their</i> email client. Unfortunately, Gnus is a large and complex system that is difficult to set up and use. Back in 2014, I wrote about Chen Bin's <a href=\"http://irreal.org/blog/?p=2870\">Gnus Guide</a>. </p>
<p> The guide takes the pragmatic approach of covering the basic 5% of Gnus that a new user needs to get started. Now, just in time for the renewed Gnus interest, Chen Bin has has <a href=\"https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org\">updated his guide</a>. He also provides his configuration so you have a go-by if you want to set up your own instance. </p>
<p> The guide is oriented towards using Gmail as the server but it should be pretty easy to adapt to other providers. If you've been wanting to try Gnus but were put off by the difficulty of getting it set up, Chen Bin's guide may be just what you need. </p>" "http://irreal.org/blog/?p=4891" (22171 49904) old 5 nil nil ((guid nil "http://irreal.org/blog/?p=4891") (title ((type . "html") (lang . "en-US")) "Irreal: Gnus Guide Update") (link ((href . "http://irreal.org/blog/?p=4891"))) (id nil "http://irreal.org/blog/?p=4891") (updated nil "2016-01-17T16:36:00+00:00") (content ((type . "html") (lang . "en-US")) "<p> After <a href=\"http://irreal.org/blog/?p=4789\">Sacha's chat with John Wiegley</a> that explored how Wiegley uses Gnus to manage his Emacs maintainer workflow, there's been a bit of renewed interest from Emacsers in using it for <i>their</i> email client. Unfortunately, Gnus is a large and complex system that is difficult to set up and use. Back in 2014, I wrote about Chen Bin's <a href=\"http://irreal.org/blog/?p=2870\">Gnus Guide</a>. </p>
<p> The guide takes the pragmatic approach of covering the basic 5% of Gnus that a new user needs to get started. Now, just in time for the renewed Gnus interest, Chen Bin has has <a href=\"https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org\">updated his guide</a>. He also provides his configuration so you have a go-by if you want to set up your own instance. </p>
<p> The guide is oriented towards using Gmail as the server but it should be pretty easy to adapt to other providers. If you've been wanting to try Gnus but were put off by the difficulty of getting it set up, Chen Bin's guide may be just what you need. </p>") (author nil (name nil "jcs") (uri nil "http://irreal.org/blog")) (source nil (title ((type . "html")) "Emacs – Irreal") (subtitle ((type . "html")) "The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession") (link ((rel . "self") (href . "http://irreal.org/blog/?tag=emacs&feed=rss2"))) (id nil "http://irreal.org/blog")))) ("sachachua: 2016-01-18 Emacs News" "<ul class=\"org-ul\">
<li>Emacs configuration:
<ul class=\"org-ul\">
<li><a href=\"https://www.reddit.com/r/emacs/comments/419zj1/emacs_bankruptcy_and_starter_kits/\">Emacs bankruptcy and starter kits</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/40yzb8/smoothscrolling_always_keeps_n_lines_of_context/\">Smooth-scrolling – always keeps n lines of context at top and bottom of screen</a></li>
<li><a href=\"https://www.youtube.com/watch?v=dyWn30HMgQg\">Emacs Tutorial – Git Your First Init File (13:11)</a></li>
<li><a href=\"http://irreal.org/blog/?p=4887\">Running Emacs as a Daemon</a></li>
</ul>
</li>
<li>Text:
<ul class=\"org-ul\">
<li><a href=\"http://pragmaticemacs.com/emacs/aligning-text/\">Aligning text</a></li>
<li><a href=\"http://pragmaticemacs.com/emacs/email-templates-in-mu4e-with-yasnippet/\">Email templates in mu4e with yasnippet</a></li>
<li><a href=\"http://endlessparentheses.com/an-improvement-to-emacs-auto-correct.html?source=rss\">An improvement to Emacs auto-correct</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/41jkuf/emacs_autocorrect_mode/\">Emacs autocorrect mode</a></li>
<li><a href=\"https://github.com/xuchunyang/region-state.el\">region-state – A global minor-mode that shows the number of chars/lines or rows/columns in the region (aka. selection).</a> (<a href=\"https://www.reddit.com/r/emacs/comments/41i6mg/regionstate_a_global_minormode_that_shows_the/\">Reddit</a>)</li>
<li><a href=\"http://pasoev.github.io/programming/2015/10/31/jekyll-posts-emacs-capture/\">Emacs Shortcuts for Writing Posts Using Jekyll</a></li>
</ul>
</li>
<li>Web:
<ul class=\"org-ul\">
<li><a href=\"https://www.reddit.com/r/emacs/comments/40sol0/emacs_user_agent/\">Emacs user agent?</a> Also, notes about proxies</li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/40nte5/emacs_for_landing_pages_simple_websites/\">Emacs for landing pages / simple websites?</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/40u8fx/new_emacswiki_theme/\">New EmacsWiki theme</a></li>
</ul>
</li>
<li>Org Mode:
<ul class=\"org-ul\">
<li><a href=\"https://thraxys.wordpress.com/2016/01/14/pimp-up-your-org-agenda/\">Pimp Up Your Org-mode Files</a> (<a href=\"https://www.reddit.com/r/emacs/comments/40zrny/pimp_up_your_orgmode_files/\">Reddit</a>)</li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/418rzk/how_to_use_orgmode_to_write_documentation_for/\">How to use org-mode to write documentation for general audience?</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/415imd/prettier_orgmode_source_code_blocks/\">Prettier org-mode source code blocks?</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/40hzjt/whats_your_todo_workflow_within_emacs_at_work/\">What’s your todo workflow within Emacs at work?</a></li>
</ul>
</li>
<li>Coding:
<ul class=\"org-ul\">
<li><a href=\"https://www.reddit.com/r/emacs/comments/41i156/using_smartquotes_with_the_electric_pair_mode/\">Using smart-quotes with the electric pair mode</a></li>
<li><a href=\"http://mbork.pl/2016-01-16_save-excursion_changed_semantics\">save-excursion changed semantics</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/41gd3h/magit_v24_released/\">Magit v2.4 released</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/41dt4d/how_hard_itd_be_to_migrate_a_helm_to_ivy/\">How hard it’d be to migrate a helm-* to ivy-* ?</a></li>
<li><a href=\"https://www.youtube.com/watch?v=TSZJBLNCv4Q\">Emacs elm-mode TAGS demo (2:14)</a></li>
<li><a href=\"https://www.youtube.com/watch?v=wZ9uvU0lZ-E\">Emacs elm-mode demo (9:01)</a></li>
<li><a href=\"https://www.youtube.com/watch?v=XaeAaj7Kf9Q\">List comprehend refactor in Emacs (0:10)</a></li>
</ul>
</li>
<li>Other:
<ul class=\"org-ul\">
<li><a href=\"http://sachachua.com/blog/2016/01/2016-01-16-emacs-hangout/\">2016-01-16 Emacs Hangout</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/40xq0s/encrypted_backups/\">Encrypted backups</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/40w7fh/practical_guide_for_gnus_updated/\">“Practical Guide for Gnus” updated</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/40w1xq/erc_messages_read_aloud/\">ERC Messages Read Aloud</a></li>
</ul>
</li>
<li>New packages:
<ul class=\"org-ul\">
<li><a href=\"http://melpa.org/#/haxor-mode\" target=\"_blank\">haxor-mode</a>: Major mode for exiting .hax files</li>
<li><a href=\"http://melpa.org/#/markdown-preview-eww\" target=\"_blank\">markdown-preview-eww</a>: Realtime preview by eww</li>
<li><a href=\"http://melpa.org/#/markdown-preview-mode\" target=\"_blank\">markdown-preview-mode</a>: markdown realtime preview minor mode.</li>
<li><a href=\"http://melpa.org/#/repo\" target=\"_blank\">repo</a>: Running repo from Emacs</li>
<li><a href=\"http://melpa.org/#/sisyphus\" target=\"_blank\">sisyphus</a>: Support for ERT (Emacs Regression Test)</li>
<li><a href=\"http://melpa.org/#/yahoo-weather\" target=\"_blank\">yahoo-weather</a>: Displays weather information in mode-line</li>
<li><a href=\"https://elpa.gnu.org/packages/html5-schema.html\" target=\"_blank\">html5-schema</a>: Add HTML5 schemas for use by nXML</li>
</ul>
</li>
<li>Emacs development:
<ul class=\"org-ul\">
<li><a href=\"http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=d7896a6f773dc4ae4e1b56c34b6708fe2bc5610a\">nxml now uses standard completion</a>, <a href=\"http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=930f8e8377e40ba161bd16ea4d612cb4c570ee1b\">Unicode and lexical-binding</a></li>
<li><a href=\"http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=a600f4c69309bf37f67c02cbcc9a9e4ba1e69c76\">New Tramp method: sg</a> (edit as different group)</li>
</ul>
</li>
</ul>
<p>Links from <a href=\"http://reddit.com/r/emacs/new\">reddit.com/r/emacs</a>, <a href=\"http://reddit.com/r/orgmode\">/r/orgmode</a>, <a href=\"https://hn.algolia.com/?query=emacs&amp;sort=byDate&amp;prefix&amp;page=0&amp;dateRange=all&amp;type=story\">Hacker News</a>, <a href=\"http://planet.emacsen.org/\">planet.emacsen.org</a>, <a href=\"https://www.youtube.com/results?search_query=emacs&amp;search_sort=video_date_uploaded\">Youtube</a>, the <a href=\"http://git.savannah.gnu.org/cgit/emacs.git/log/?showmsg=1\">Emacs commit log</a>, the changes to the <a href=\"http://git.savannah.gnu.org/cgit/emacs.git/log/etc/NEWS\">Emacs NEWS file</a>, and <a href=\"http://lists.gnu.org/archive/html/emacs-devel/2016-01\">emacs-devel</a>.</p>
<p><a href=\"http://sachachua.com/blog/category/emacs-news\">Past Emacs News round-ups</a></p>
<p>The post <a href=\"http://sachachua.com/blog/2016/01/2016-01-18-emacs-news/\" rel=\"nofollow\">2016-01-18 Emacs News</a> appeared first on <a href=\"http://sachachua.com/blog\" rel=\"nofollow\">sacha chua :: living an awesome life</a>.</p>" "http://sachachua.com/blog/2016/01/2016-01-18-emacs-news/" (22173 14412) old 1 nil nil ((guid nil "http://sachachua.com/blog/?p=28571") (title ((type . "html") (lang . "en-US")) "sachachua: 2016-01-18 Emacs News") (link ((href . "http://sachachua.com/blog/2016/01/2016-01-18-emacs-news/"))) (id nil "http://sachachua.com/blog/?p=28571") (updated nil "2016-01-18T19:09:00+00:00") (content ((type . "html") (lang . "en-US")) "<ul class=\"org-ul\">
<li>Emacs configuration:
<ul class=\"org-ul\">
<li><a href=\"https://www.reddit.com/r/emacs/comments/419zj1/emacs_bankruptcy_and_starter_kits/\">Emacs bankruptcy and starter kits</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/40yzb8/smoothscrolling_always_keeps_n_lines_of_context/\">Smooth-scrolling – always keeps n lines of context at top and bottom of screen</a></li>
<li><a href=\"https://www.youtube.com/watch?v=dyWn30HMgQg\">Emacs Tutorial – Git Your First Init File (13:11)</a></li>
<li><a href=\"http://irreal.org/blog/?p=4887\">Running Emacs as a Daemon</a></li>
</ul>
</li>
<li>Text:
<ul class=\"org-ul\">
<li><a href=\"http://pragmaticemacs.com/emacs/aligning-text/\">Aligning text</a></li>
<li><a href=\"http://pragmaticemacs.com/emacs/email-templates-in-mu4e-with-yasnippet/\">Email templates in mu4e with yasnippet</a></li>
<li><a href=\"http://endlessparentheses.com/an-improvement-to-emacs-auto-correct.html?source=rss\">An improvement to Emacs auto-correct</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/41jkuf/emacs_autocorrect_mode/\">Emacs autocorrect mode</a></li>
<li><a href=\"https://github.com/xuchunyang/region-state.el\">region-state – A global minor-mode that shows the number of chars/lines or rows/columns in the region (aka. selection).</a> (<a href=\"https://www.reddit.com/r/emacs/comments/41i6mg/regionstate_a_global_minormode_that_shows_the/\">Reddit</a>)</li>
<li><a href=\"http://pasoev.github.io/programming/2015/10/31/jekyll-posts-emacs-capture/\">Emacs Shortcuts for Writing Posts Using Jekyll</a></li>
</ul>
</li>
<li>Web:
<ul class=\"org-ul\">
<li><a href=\"https://www.reddit.com/r/emacs/comments/40sol0/emacs_user_agent/\">Emacs user agent?</a> Also, notes about proxies</li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/40nte5/emacs_for_landing_pages_simple_websites/\">Emacs for landing pages / simple websites?</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/40u8fx/new_emacswiki_theme/\">New EmacsWiki theme</a></li>
</ul>
</li>
<li>Org Mode:
<ul class=\"org-ul\">
<li><a href=\"https://thraxys.wordpress.com/2016/01/14/pimp-up-your-org-agenda/\">Pimp Up Your Org-mode Files</a> (<a href=\"https://www.reddit.com/r/emacs/comments/40zrny/pimp_up_your_orgmode_files/\">Reddit</a>)</li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/418rzk/how_to_use_orgmode_to_write_documentation_for/\">How to use org-mode to write documentation for general audience?</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/415imd/prettier_orgmode_source_code_blocks/\">Prettier org-mode source code blocks?</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/40hzjt/whats_your_todo_workflow_within_emacs_at_work/\">What’s your todo workflow within Emacs at work?</a></li>
</ul>
</li>
<li>Coding:
<ul class=\"org-ul\">
<li><a href=\"https://www.reddit.com/r/emacs/comments/41i156/using_smartquotes_with_the_electric_pair_mode/\">Using smart-quotes with the electric pair mode</a></li>
<li><a href=\"http://mbork.pl/2016-01-16_save-excursion_changed_semantics\">save-excursion changed semantics</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/41gd3h/magit_v24_released/\">Magit v2.4 released</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/41dt4d/how_hard_itd_be_to_migrate_a_helm_to_ivy/\">How hard it’d be to migrate a helm-* to ivy-* ?</a></li>
<li><a href=\"https://www.youtube.com/watch?v=TSZJBLNCv4Q\">Emacs elm-mode TAGS demo (2:14)</a></li>
<li><a href=\"https://www.youtube.com/watch?v=wZ9uvU0lZ-E\">Emacs elm-mode demo (9:01)</a></li>
<li><a href=\"https://www.youtube.com/watch?v=XaeAaj7Kf9Q\">List comprehend refactor in Emacs (0:10)</a></li>
</ul>
</li>
<li>Other:
<ul class=\"org-ul\">
<li><a href=\"http://sachachua.com/blog/2016/01/2016-01-16-emacs-hangout/\">2016-01-16 Emacs Hangout</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/40xq0s/encrypted_backups/\">Encrypted backups</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/40w7fh/practical_guide_for_gnus_updated/\">“Practical Guide for Gnus” updated</a></li>
<li><a href=\"https://www.reddit.com/r/emacs/comments/40w1xq/erc_messages_read_aloud/\">ERC Messages Read Aloud</a></li>
</ul>
</li>
<li>New packages:
<ul class=\"org-ul\">
<li><a href=\"http://melpa.org/#/haxor-mode\" target=\"_blank\">haxor-mode</a>: Major mode for exiting .hax files</li>
<li><a href=\"http://melpa.org/#/markdown-preview-eww\" target=\"_blank\">markdown-preview-eww</a>: Realtime preview by eww</li>
<li><a href=\"http://melpa.org/#/markdown-preview-mode\" target=\"_blank\">markdown-preview-mode</a>: markdown realtime preview minor mode.</li>
<li><a href=\"http://melpa.org/#/repo\" target=\"_blank\">repo</a>: Running repo from Emacs</li>
<li><a href=\"http://melpa.org/#/sisyphus\" target=\"_blank\">sisyphus</a>: Support for ERT (Emacs Regression Test)</li>
<li><a href=\"http://melpa.org/#/yahoo-weather\" target=\"_blank\">yahoo-weather</a>: Displays weather information in mode-line</li>
<li><a href=\"https://elpa.gnu.org/packages/html5-schema.html\" target=\"_blank\">html5-schema</a>: Add HTML5 schemas for use by nXML</li>
</ul>
</li>
<li>Emacs development:
<ul class=\"org-ul\">
<li><a href=\"http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=d7896a6f773dc4ae4e1b56c34b6708fe2bc5610a\">nxml now uses standard completion</a>, <a href=\"http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=930f8e8377e40ba161bd16ea4d612cb4c570ee1b\">Unicode and lexical-binding</a></li>
<li><a href=\"http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=a600f4c69309bf37f67c02cbcc9a9e4ba1e69c76\">New Tramp method: sg</a> (edit as different group)</li>
</ul>
</li>
</ul>
<p>Links from <a href=\"http://reddit.com/r/emacs/new\">reddit.com/r/emacs</a>, <a href=\"http://reddit.com/r/orgmode\">/r/orgmode</a>, <a href=\"https://hn.algolia.com/?query=emacs&amp;sort=byDate&amp;prefix&amp;page=0&amp;dateRange=all&amp;type=story\">Hacker News</a>, <a href=\"http://planet.emacsen.org/\">planet.emacsen.org</a>, <a href=\"https://www.youtube.com/results?search_query=emacs&amp;search_sort=video_date_uploaded\">Youtube</a>, the <a href=\"http://git.savannah.gnu.org/cgit/emacs.git/log/?showmsg=1\">Emacs commit log</a>, the changes to the <a href=\"http://git.savannah.gnu.org/cgit/emacs.git/log/etc/NEWS\">Emacs NEWS file</a>, and <a href=\"http://lists.gnu.org/archive/html/emacs-devel/2016-01\">emacs-devel</a>.</p>
<p><a href=\"http://sachachua.com/blog/category/emacs-news\">Past Emacs News round-ups</a></p>
<p>The post <a href=\"http://sachachua.com/blog/2016/01/2016-01-18-emacs-news/\" rel=\"nofollow\">2016-01-18 Emacs News</a> appeared first on <a href=\"http://sachachua.com/blog\" rel=\"nofollow\">sacha chua :: living an awesome life</a>.</p>") (author nil (name nil "Sacha Chua") (uri nil "http://sachachua.com/blog/category/geek/emacs/")) (source nil (title ((type . "html")) "Emacs - Sacha Chua") (subtitle ((type . "html")) "learn - share - scale") (link ((rel . "self") (href . "http://feeds.feedburner.com/pimpmyemacs"))) (id nil "http://sachachua.com/blog/category/geek/emacs/")))) ("Ryan Rix: Matrix-Client.el 0.3.0" "I just pushed a new tag to the Matrix-Client repository and the features should be available in MELPA shortly." "http://whatthefuck.computer/blog/2016/01/18/matrix-client.el-0.3.0" (22172 11008) old 2 nil nil ((guid nil "http://whatthefuck.computer/blog/2016/01/18/matrix-client.el-0.3.0") (title ((type . "html")) "Ryan Rix: Matrix-Client.el 0.3.0") (link ((href . "http://whatthefuck.computer/blog/2016/01/18/matrix-client.el-0.3.0"))) (id nil "http://whatthefuck.computer/blog/2016/01/18/matrix-client.el-0.3.0") (updated nil "2016-01-18T00:00:00+00:00") (content ((type . "html")) "I just pushed a new tag to the Matrix-Client repository and the features should be available in MELPA shortly.") (author nil (name nil "Ryan Rix") (uri nil "http://whatthefuck.computer")) (source nil (title ((type . "html")) "Computer :(") (subtitle ((type . "html")) "/home/rrix") (link ((rel . "self") (href . "http://whatthefuck.computer/rss.xml"))) (id nil "http://whatthefuck.computer")))) ("Endless Parentheses: Quickly search for occurrences of the symbol at point" "<p>
Isearch is one of Emacs’ most useful (and probably most used) features. Getting
in the habit of quickly hitting <kbd>C-s</kbd> followed by 2–4 letters will forever
change the way you navigate buffers, and adding it to your repertoire is a
tremendous productivity improvement. What, then, could we possibly improve on
such a phenomenal command?
</p>
<p>
One of the search actions I find myself doing a lot is to search forward for
other occurrences of the symbol at point. You can do that in Isearch by typing
<kbd>C-w</kbd> a few times (which copies the next word at point into the prompt) until
you’ve got the entire symbol, and then you type <kbd>M-s _</kbd> to toggle symbol-search.
</p>
<p>
However, this is a lot of keys, and it only works if the cursor is at the start
of the symbol. Fortunately, it’s very easy to improve this because the action we
want is already implemented as the <a href=\"http://doc.endlessparentheses.com/Fun/isearch-forward-symbol-at-point\"><code>isearch-forward-symbol-at-point</code></a> command.
</p>
<div class=\"highlight\"><pre><code class=\"language-cl\"><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">endless/isearch-symbol-with-prefix</span> <span class=\"p\">(</span><span class=\"nv\">p</span><span class=\"p\">)</span>
<span class=\"s\">\"Like isearch, unless prefix argument is provided.</span>
<span class=\"s\">With a prefix argument P, isearch for the symbol at point.\"</span>
<span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"s\">\"P\"</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">current-prefix-arg</span> <span class=\"no\">nil</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nv\">call-interactively</span>
<span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"nv\">p</span> <span class=\"nf\">#'</span><span class=\"nv\">isearch-forward-symbol-at-point</span>
<span class=\"nf\">#'</span><span class=\"nv\">isearch-forward</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"nv\">[remap</span> <span class=\"nv\">isearch-forward]</span>
<span class=\"nf\">#'</span><span class=\"nv\">endless/isearch-symbol-with-prefix</span><span class=\"p\">)</span></code></pre></div>
<p>
The result here is that <kbd>C-s</kbd> starts Isearch as usual, but if I type <kbd>C-u C-s</kbd>
instead it’s going to search for other occurrences of the symbol at point—a
huge improvement over the 6+ keys of our previous option.
</p>
<p>
Normally, calling Isearch with a prefix would start it in regexp-mode. That’s
not something I’ve ever used, but you should be aware of it before you override
it.
</p>
<p><a href=\"http://endlessparentheses.com/quickly-search-for-occurrences-of-the-symbol-at-point.html?source=rss#disqus_thread\">Comment on this.</a></p>" "http://endlessparentheses.com/quickly-search-for-occurrences-of-the-symbol-at-point.html?source=rss" (22172 11008) old 3 nil nil ((guid nil "http://endlessparentheses.com/quickly-search-for-occurrences-of-the-symbol-at-point") (title ((type . "html")) "Endless Parentheses: Quickly search for occurrences of the symbol at point") (link ((href . "http://endlessparentheses.com/quickly-search-for-occurrences-of-the-symbol-at-point.html?source=rss"))) (id nil "http://endlessparentheses.com/quickly-search-for-occurrences-of-the-symbol-at-point") (updated nil "2016-01-18T00:00:00+00:00") (content ((type . "html")) "<p>
Isearch is one of Emacs’ most useful (and probably most used) features. Getting
in the habit of quickly hitting <kbd>C-s</kbd> followed by 2–4 letters will forever
change the way you navigate buffers, and adding it to your repertoire is a
tremendous productivity improvement. What, then, could we possibly improve on
such a phenomenal command?
</p>

<p>
One of the search actions I find myself doing a lot is to search forward for
other occurrences of the symbol at point. You can do that in Isearch by typing
<kbd>C-w</kbd> a few times (which copies the next word at point into the prompt) until
you’ve got the entire symbol, and then you type <kbd>M-s _</kbd> to toggle symbol-search.
</p>

<p>
However, this is a lot of keys, and it only works if the cursor is at the start
of the symbol. Fortunately, it’s very easy to improve this because the action we
want is already implemented as the <a href=\"http://doc.endlessparentheses.com/Fun/isearch-forward-symbol-at-point\"><code>isearch-forward-symbol-at-point</code></a> command.
</p>
<div class=\"highlight\"><pre><code class=\"language-cl\"><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">endless/isearch-symbol-with-prefix</span> <span class=\"p\">(</span><span class=\"nv\">p</span><span class=\"p\">)</span>
  <span class=\"s\">\"Like isearch, unless prefix argument is provided.</span>
<span class=\"s\">With a prefix argument P, isearch for the symbol at point.\"</span>
  <span class=\"p\">(</span><span class=\"nv\">interactive</span> <span class=\"s\">\"P\"</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">current-prefix-arg</span> <span class=\"no\">nil</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nv\">call-interactively</span>
     <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"nv\">p</span> <span class=\"nf\">#'</span><span class=\"nv\">isearch-forward-symbol-at-point</span>
       <span class=\"nf\">#'</span><span class=\"nv\">isearch-forward</span><span class=\"p\">))))</span>

<span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"nv\">[remap</span> <span class=\"nv\">isearch-forward]</span>
                <span class=\"nf\">#'</span><span class=\"nv\">endless/isearch-symbol-with-prefix</span><span class=\"p\">)</span></code></pre></div>
<p>
The result here is that <kbd>C-s</kbd> starts Isearch as usual, but if I type <kbd>C-u C-s</kbd>
instead it’s going to search for other occurrences of the symbol at point—a
huge improvement over the 6+ keys of our previous option.
</p>

<p>
Normally, calling Isearch with a prefix would start it in regexp-mode. That’s
not something I’ve ever used, but you should be aware of it before you override
it.
</p>

   <p><a href=\"http://endlessparentheses.com/quickly-search-for-occurrences-of-the-symbol-at-point.html?source=rss#disqus_thread\">Comment on this.</a></p>") (author nil (name nil "Artur Malabarba") (uri nil "http://endlessparentheses.com/?source=rss")) (source nil (title ((type . "html")) "Endless Parentheses") (link ((rel . "self") (href . "http://endlessparentheses.com/atom.xml"))) (id nil "http://endlessparentheses.com")))) ("(or emacs: Using Emacs as system-wide Rhythmbox interface" "<p>In an
<a href=\"http://oremacs.com/2015/07/09/counsel-rhythmbox/\">earlier post</a>, I
described how I've been managing Rhythmbox from Emacs. I've bound the
entry point to <kbd>C-S-o</kbd>:</p>
<div class=\"highlight\"><pre><code class=\"language-elisp\"><span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"C-S-o\"</span><span class=\"p\">)</span> <span class=\"ss\">'counsel-rhythmbox</span><span class=\"p\">)</span>
</code></pre></div>
<p>Obviously, this entry point won't work while outside Emacs. Today,
I'll describe how I've made it work everywhere. Everywhere on Ubuntu
14.04, that is, although a similar approach should work for other
distributions.</p>
<h2 id=\"step-1-make-sure-the-emacs-server-is-running\">Step 1: Make sure the Emacs server is running</h2>
<p>Here's the relevant part of my <a href=\"https://github.com/abo-abo/oremacs/blob/github/init.el\">init.el</a>:</p>
<div class=\"highlight\"><pre><code class=\"language-elisp\"><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'server</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">or</span> <span class=\"p\">(</span><span class=\"nv\">server-running-p</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">server-start</span><span class=\"p\">))</span>
</code></pre></div>
<p>Using <code>emacsclient</code> is essential to avoiding the extra startup time:
even a startup time of one second feels sluggish when all I need is to
open a menu with a song playlist.</p>
<h2 id=\"step-2-install-the-relevant-x-window-tool\">Step 2: Install the relevant X window tool</h2>
<p>Initially, I only wrote a call to <code>emacsclient</code>, which resulted in the
Emacs window gaining focus in the end.  Then I thought it would be
nice to give the focus back the original window after the end of
selection, and raise it as well.</p>
<p>I wanted to do something with <code>wmctrl</code>, but I found that
<a href=\"http://superuser.com/questions/382616/detecting-currently-active-window\">xdotool</a>
can do what I want in a simple way.</p>
<div class=\"highlight\"><pre><code class=\"language-sh\">sudo apt-get install xdotool
</code></pre></div>
<h2 id=\"step-3-write-a-shell-script\">Step 3: Write a shell script</h2>
<div class=\"highlight\"><pre><code class=\"language-sh\"><span class=\"c\">#!/bin/bash</span>
<span class=\"nv\">wnd_id</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"k\">$(</span>xdotool getwindowfocus<span class=\"k\">)</span><span class=\"s2\">\"</span>
emacsclient --eval <span class=\"s2\">\"(progn (x-focus-frame nil) (counsel-rhythmbox))\"</span>
xdotool windowfocus <span class=\"nv\">$wnd_id</span>
xdotool windowraise <span class=\"nv\">$wnd_id</span>
</code></pre></div>
<p>Here, <code>(x-focus-frame nil)</code> will raise the Emacs window and give the
keyboard input focus.  <code>emacsclient</code> will return as soon as I select
something or press <kbd>C-g</kbd>. At that point the keyboard focus
will be returned to whatever window had it when the script was
invoked.</p>
<p>By the way, here's a cool configuration that automatically makes a
file executable if it starts with <code>#!</code>.</p>
<div class=\"highlight\"><pre><code class=\"language-elisp\"><span class=\"p\">(</span><span class=\"nv\">add-hook</span>
<span class=\"ss\">'after-save-hook</span>
<span class=\"ss\">'executable-make-buffer-file-executable-if-script-p</span><span class=\"p\">)</span>
</code></pre></div>
<h2 id=\"step-4-bind-the-shell-script-to-a-key\">Step 4: Bind the shell script to a key</h2>
<p>Open this (possibly using <code>gnome-control-center</code> instead, if applicable):</p>
<div class=\"highlight\"><pre><code class=\"language-text\">unity-control-center keyboard
</code></pre></div>
<p>And add a new shortcut in <code>Shortcuts</code>/<code>Custom Shortcuts</code>. I've bound
that one to <kbd>C-S-o</kbd> as well.</p>
<h2 id=\"the-final-result\">The final result</h2>
<p>It's pretty convenient: as I'm scrolling something I'm reading in
Firefox with <kbd>j</kbd> (via
<a href=\"https://addons.mozilla.org/en-US/firefox/addon/firemacs/\">Firemacs</a>),
I can seamlessly press <kbd>C-S-o moo RET</kbd> to play \"Sisters of
the Moon\", and continue scrolling the web page with <kbd>j</kbd>.</p>
<p>What's more, Emacs has very nice support for input methods with
<kbd>C-\\</kbd> (<code>toggle-input-method</code>), so I can also quickly select
Ukrainian-titled songs, while still keeping shortcuts like
<kbd>C-n</kbd> and <kbd>C-m</kbd> (<em>without</em> having to switch the
input method back).</p>
<p>The whole experience is similar to <code>gnome-do</code>/<code>synapse</code>, which I was
using a few years back, except better because now it's in Emacs.</p>" "http://oremacs.com/2016/01/18/emacs-rhythmbox/" (22172 7408) old 4 nil nil ((guid nil "http://oremacs.com/2016/01/18/emacs-rhythmbox") (title ((type . "html")) "(or emacs: Using Emacs as system-wide Rhythmbox interface") (link ((href . "http://oremacs.com/2016/01/18/emacs-rhythmbox/"))) (id nil "http://oremacs.com/2016/01/18/emacs-rhythmbox") (updated nil "2016-01-17T23:00:00+00:00") (content ((type . "html")) "<p>In an
<a href=\"http://oremacs.com/2015/07/09/counsel-rhythmbox/\">earlier post</a>, I
described how I've been managing Rhythmbox from Emacs. I've bound the
entry point to <kbd>C-S-o</kbd>:</p>
<div class=\"highlight\"><pre><code class=\"language-elisp\"><span class=\"p\">(</span><span class=\"nv\">global-set-key</span> <span class=\"p\">(</span><span class=\"nv\">kbd</span> <span class=\"s\">\"C-S-o\"</span><span class=\"p\">)</span> <span class=\"ss\">'counsel-rhythmbox</span><span class=\"p\">)</span>
</code></pre></div>
<p>Obviously, this entry point won't work while outside Emacs. Today,
I'll describe how I've made it work everywhere. Everywhere on Ubuntu
14.04, that is, although a similar approach should work for other
distributions.</p>

<h2 id=\"step-1-make-sure-the-emacs-server-is-running\">Step 1: Make sure the Emacs server is running</h2>

<p>Here's the relevant part of my <a href=\"https://github.com/abo-abo/oremacs/blob/github/init.el\">init.el</a>:</p>
<div class=\"highlight\"><pre><code class=\"language-elisp\"><span class=\"p\">(</span><span class=\"nb\">require</span> <span class=\"ss\">'server</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">or</span> <span class=\"p\">(</span><span class=\"nv\">server-running-p</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">server-start</span><span class=\"p\">))</span>
</code></pre></div>
<p>Using <code>emacsclient</code> is essential to avoiding the extra startup time:
even a startup time of one second feels sluggish when all I need is to
open a menu with a song playlist.</p>

<h2 id=\"step-2-install-the-relevant-x-window-tool\">Step 2: Install the relevant X window tool</h2>

<p>Initially, I only wrote a call to <code>emacsclient</code>, which resulted in the
Emacs window gaining focus in the end.  Then I thought it would be
nice to give the focus back the original window after the end of
selection, and raise it as well.</p>

<p>I wanted to do something with <code>wmctrl</code>, but I found that
<a href=\"http://superuser.com/questions/382616/detecting-currently-active-window\">xdotool</a>
can do what I want in a simple way.</p>
<div class=\"highlight\"><pre><code class=\"language-sh\">sudo apt-get install xdotool
</code></pre></div>
<h2 id=\"step-3-write-a-shell-script\">Step 3: Write a shell script</h2>
<div class=\"highlight\"><pre><code class=\"language-sh\"><span class=\"c\">#!/bin/bash</span>
<span class=\"nv\">wnd_id</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"k\">$(</span>xdotool getwindowfocus<span class=\"k\">)</span><span class=\"s2\">\"</span>
emacsclient --eval <span class=\"s2\">\"(progn (x-focus-frame nil) (counsel-rhythmbox))\"</span>
xdotool windowfocus <span class=\"nv\">$wnd_id</span>
xdotool windowraise <span class=\"nv\">$wnd_id</span>
</code></pre></div>
<p>Here, <code>(x-focus-frame nil)</code> will raise the Emacs window and give the
keyboard input focus.  <code>emacsclient</code> will return as soon as I select
something or press <kbd>C-g</kbd>. At that point the keyboard focus
will be returned to whatever window had it when the script was
invoked.</p>

<p>By the way, here's a cool configuration that automatically makes a
file executable if it starts with <code>#!</code>.</p>
<div class=\"highlight\"><pre><code class=\"language-elisp\"><span class=\"p\">(</span><span class=\"nv\">add-hook</span>
 <span class=\"ss\">'after-save-hook</span>
 <span class=\"ss\">'executable-make-buffer-file-executable-if-script-p</span><span class=\"p\">)</span>
</code></pre></div>
<h2 id=\"step-4-bind-the-shell-script-to-a-key\">Step 4: Bind the shell script to a key</h2>

<p>Open this (possibly using <code>gnome-control-center</code> instead, if applicable):</p>
<div class=\"highlight\"><pre><code class=\"language-text\">unity-control-center keyboard
</code></pre></div>
<p>And add a new shortcut in <code>Shortcuts</code>/<code>Custom Shortcuts</code>. I've bound
that one to <kbd>C-S-o</kbd> as well.</p>

<h2 id=\"the-final-result\">The final result</h2>

<p>It's pretty convenient: as I'm scrolling something I'm reading in
Firefox with <kbd>j</kbd> (via
<a href=\"https://addons.mozilla.org/en-US/firefox/addon/firemacs/\">Firemacs</a>),
I can seamlessly press <kbd>C-S-o moo RET</kbd> to play \"Sisters of
the Moon\", and continue scrolling the web page with <kbd>j</kbd>.</p>

<p>What's more, Emacs has very nice support for input methods with
<kbd>C-\\</kbd> (<code>toggle-input-method</code>), so I can also quickly select
Ukrainian-titled songs, while still keeping shortcuts like
<kbd>C-n</kbd> and <kbd>C-m</kbd> (<em>without</em> having to switch the
input method back).</p>

<p>The whole experience is similar to <code>gnome-do</code>/<code>synapse</code>, which I was
using a few years back, except better because now it's in Emacs.</p>") (author nil (name nil "(or emacs") (uri nil "http://oremacs.com/")) (source nil (title ((type . "html")) "(or emacs") (link ((rel . "self") (href . "http://oremacs.com/atom.xml"))) (id nil "http://oremacs.com")))))