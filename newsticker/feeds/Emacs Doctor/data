;; -*- coding: utf-8 -*-
(("M-x doctor RET" "Everybody needs a good Emacs doctor." "http://emacs-doctor.com/" (22105 53145 892885 319000) feed 0 nil nil ((title nil "M-x doctor RET") (description nil "Everybody needs a good Emacs doctor.") (link nil "http://emacs-doctor.com/") (link ((href . "http://emacs-doctor.com/feed.xml") (rel . "self") (type . "application/rss+xml"))) (pubDate nil "Wed, 18 Nov 2015 08:54:32 +0100") (lastBuildDate nil "Wed, 18 Nov 2015 08:54:32 +0100") (generator nil "Jekyll v2.5.3") (item nil (title nil "Emacs, naked.") (description nil "
<blockquote>
  <p>When it gets too cold, you can always put on more layers of
    clothing. But when it gets too hot, after a while you can&#8217;t
    take off any more. &#8211; RMS</p>
</blockquote>
<p>This is GNU Emacs:</p>
<p><img src=\"u/bare-emacs.png\" alt=\"u/bare-emacs.png\" /></p>
<p>Now let the show begin&#8230;</p>
<p><i>Code snippets are for GNU Emacs 24.3 and above.</i></p>
<h2>A blank stage</h2>
<div class=\"highlight\"><pre><span class=\"c1\">;; Prevent the cursor from blinking</span>
<span class=\"p\">(</span><span class=\"nf\">blink-cursor-mode</span> <span class=\"mi\">0</span><span class=\"p\">)</span>
<span class=\"c1\">;; Don&#39;t use messages that you don&#39;t read</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">initial-scratch-message</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">inhibit-startup-message</span> <span class=\"nv\">t</span><span class=\"p\">)</span>
<span class=\"c1\">;; Don&#39;t let Emacs hurt your ears</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">visible-bell</span> <span class=\"nv\">t</span><span class=\"p\">)</span>

<span class=\"c1\">;; You need to set `inhibit-startup-echo-area-message&#39; from the</span>
<span class=\"c1\">;; customization interface:</span>
<span class=\"c1\">;; M-x customize-variable RET inhibit-startup-echo-area-message RET</span>
<span class=\"c1\">;; then enter your username</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">inhibit-startup-echo-area-message</span> <span class=\"s\">&quot;guerry&quot;</span><span class=\"p\">)</span>
</pre></div>
<p><img src=\"u/emacs-blank-stage.png\" alt=\"u/emacs-blank-stage.png\" /></p>
<h2>Break the walls</h2>
<div class=\"highlight\"><pre><span class=\"c1\">;; This is bound to f11 in Emacs 24.4</span>
<span class=\"p\">(</span><span class=\"nf\">toggle-frame-fullscreen</span><span class=\"p\">)</span> 
<span class=\"c1\">;; Who use the bar to scroll?</span>
<span class=\"p\">(</span><span class=\"nf\">scroll-bar-mode</span> <span class=\"mi\">0</span><span class=\"p\">)</span>
</pre></div>
<p><img src=\"u/emacs-fullscreen.png\" alt=\"u/emacs-fullscreen.png\" /></p>
<h2>The sky is the limit</h2>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">tool-bar-mode</span> <span class=\"mi\">0</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">menu-bar-mode</span> <span class=\"mi\">0</span><span class=\"p\">)</span>

<span class=\"c1\">;; You can also set the initial frame parameters</span>
<span class=\"c1\">;; (setq initial-frame-alist</span>
<span class=\"c1\">;;       &#39;((menu-bar-lines . 0)</span>
<span class=\"c1\">;;         (tool-bar-lines . 0)))</span>
</pre></div>
<p><img src=\"u/emacs-clear-top.png\" alt=\"u/emacs-clear-top.png\" /></p>
<h2>Groundless fear</h2>
<div class=\"highlight\"><pre><span class=\"c1\">;; See http://bzg.fr/emacs-hide-mode-line.html</span>
<span class=\"p\">(</span><span class=\"nf\">defvar-local</span> <span class=\"nv\">hidden-mode-line-mode</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defvar-local</span> <span class=\"nv\">hide-mode-line</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>

<span class=\"p\">(</span><span class=\"nf\">define-minor-mode</span> <span class=\"nv\">hidden-mode-line-mode</span>
  <span class=\"s\">&quot;Minor mode to hide the mode-line in the current buffer.&quot;</span>
  <span class=\"nv\">:init-value</span> <span class=\"nv\">nil</span>
  <span class=\"nv\">:global</span> <span class=\"nv\">nil</span>
  <span class=\"nv\">:variable</span> <span class=\"nv\">hidden-mode-line-mode</span>
  <span class=\"nv\">:group</span> <span class=\"ss\">&#39;editing-basics</span>
  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"nv\">hidden-mode-line-mode</span>
      <span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">hide-mode-line</span> <span class=\"nv\">mode-line-format</span>
            <span class=\"nv\">mode-line-format</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">mode-line-format</span> <span class=\"nv\">hide-mode-line</span>
          <span class=\"nv\">hide-mode-line</span> <span class=\"nv\">nil</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"nf\">force-mode-line-update</span><span class=\"p\">)</span>
  <span class=\"c1\">;; Apparently force-mode-line-update is not always enough to</span>
  <span class=\"c1\">;; redisplay the mode-line</span>
  <span class=\"p\">(</span><span class=\"nf\">redraw-display</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">when</span> <span class=\"p\">(</span><span class=\"k\">and </span><span class=\"p\">(</span><span class=\"nf\">called-interactively-p</span> <span class=\"ss\">&#39;interactive</span><span class=\"p\">)</span>
             <span class=\"nv\">hidden-mode-line-mode</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">run-with-idle-timer</span>
     <span class=\"mi\">0</span> <span class=\"nv\">nil</span> <span class=\"ss\">&#39;message</span>
     <span class=\"p\">(</span><span class=\"nf\">concat</span> <span class=\"s\">&quot;Hidden Mode Line Mode enabled.  &quot;</span>
             <span class=\"s\">&quot;Use M-x hidden-mode-line-mode to make the mode-line appear.&quot;</span><span class=\"p\">))))</span>

<span class=\"c1\">;; Activate hidden-mode-line-mode</span>
<span class=\"p\">(</span><span class=\"nf\">hidden-mode-line-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>

<span class=\"c1\">;; If you want to hide the mode-line in all new buffers</span>
<span class=\"c1\">;; (add-hook &#39;after-change-major-mode-hook &#39;hidden-mode-line-mode)</span>

<span class=\"c1\">;; Alternatively, you can paint your mode-line in White but then</span>
<span class=\"c1\">;; you&#39;ll have to manually paint it in black again</span>
<span class=\"c1\">;; (custom-set-faces</span>
<span class=\"c1\">;;  &#39;(mode-line-highlight ((t nil)))</span>
<span class=\"c1\">;;  &#39;(mode-line ((t (:foreground &quot;white&quot; :background &quot;white&quot;))))</span>
<span class=\"c1\">;;  &#39;(mode-line-inactive ((t (:background &quot;white&quot; :foreground &quot;white&quot;)))))</span>
</pre></div>
<p><img src=\"u/emacs-clear-bottom.png\" alt=\"u/emacs-clear-bottom.png\" /></p>
<p>Well&#8230; it&#8217;s more interesting with some text:</p>
<p><img src=\"u/emacs-clear-bottom-text.png\" alt=\"u/emacs-clear-bottom-text.png\" /></p>
<h2>In the limelight</h2>
<div class=\"highlight\"><pre><span class=\"c1\">;; A small minor mode to use a big fringe</span>
<span class=\"p\">(</span><span class=\"nf\">defvar</span> <span class=\"nv\">bzg-big-fringe-mode</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">define-minor-mode</span> <span class=\"nv\">bzg-big-fringe-mode</span>
  <span class=\"s\">&quot;Minor mode to use big fringe in the current buffer.&quot;</span>
  <span class=\"nv\">:init-value</span> <span class=\"nv\">nil</span>
  <span class=\"nv\">:global</span> <span class=\"nv\">t</span>
  <span class=\"nv\">:variable</span> <span class=\"nv\">bzg-big-fringe-mode</span>
  <span class=\"nv\">:group</span> <span class=\"ss\">&#39;editing-basics</span>
  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"nv\">bzg-big-fringe-mode</span><span class=\"p\">)</span>
      <span class=\"p\">(</span><span class=\"nf\">set-fringe-style</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">set-fringe-mode</span>
     <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"p\">(</span><span class=\"nf\">frame-pixel-width</span><span class=\"p\">)</span>
           <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"mi\">100</span> <span class=\"p\">(</span><span class=\"nf\">frame-char-width</span><span class=\"p\">)))</span>
        <span class=\"mi\">2</span><span class=\"p\">))))</span>

<span class=\"c1\">;; Now activate this global minor mode</span>
<span class=\"p\">(</span><span class=\"nf\">bzg-big-fringe-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>

<span class=\"c1\">;; To activate the fringe by default and deactivate it when windows</span>
<span class=\"c1\">;; are split vertically, uncomment this:</span>
<span class=\"c1\">;; (add-hook &#39;window-configuration-change-hook</span>
<span class=\"c1\">;;           (lambda ()</span>
<span class=\"c1\">;;             (if (delq nil</span>
<span class=\"c1\">;;                       (let ((fw (frame-width)))</span>
<span class=\"c1\">;;                         (mapcar (lambda(w) (&lt; (window-width w) (/ fw 2)))</span>
<span class=\"c1\">;;                                 (window-list))))</span>
<span class=\"c1\">;;                 (bzg-big-fringe-mode 0)</span>
<span class=\"c1\">;;               (bzg-big-fringe-mode 1))))</span>

<span class=\"c1\">;; Use a minimal cursor</span>
<span class=\"c1\">;; (setq default-cursor-type &#39;hbar)</span>

<span class=\"c1\">;; Get rid of the indicators in the fringe</span>
<span class=\"p\">(</span><span class=\"nf\">mapcar</span> <span class=\"p\">(</span><span class=\"nf\">lambda</span><span class=\"p\">(</span><span class=\"nf\">fb</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">set-fringe-bitmap-face</span> <span class=\"nv\">fb</span> <span class=\"ss\">&#39;org-hide</span><span class=\"p\">))</span>
        <span class=\"nv\">fringe-bitmaps</span><span class=\"p\">)</span>
</pre></div>
<p><img src=\"u/emacs-big-fringe.png\" alt=\"u/emacs-big-fringe.png\" /></p>
<p>Oh, but you don&#8217;t want the grey fringe?</p>
<div class=\"highlight\"><pre><span class=\"c1\">;; Set the color of the fringe</span>
<span class=\"p\">(</span><span class=\"nf\">custom-set-faces</span>
 <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">fringe</span> <span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:background</span> <span class=\"s\">&quot;white&quot;</span><span class=\"p\">)))))</span>
</pre></div>
<p><img src=\"u/emacs-big-white-fringe.png\" alt=\"u/emacs-big-white-fringe.png\" /></p>
<h2>Let&#8217;s turn off the light&#8230;</h2>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">custom-set-faces</span>
  <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">default</span> <span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:background</span> <span class=\"s\">&quot;black&quot;</span> <span class=\"nv\">:foreground</span> <span class=\"s\">&quot;grey&quot;</span><span class=\"p\">))))</span>
  <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">fringe</span> <span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:background</span> <span class=\"s\">&quot;black&quot;</span><span class=\"p\">)))))</span>
</pre></div>
<p><img src=\"u/emacs-by-night.png\" alt=\"u/emacs-by-night.png\" /></p>
<h2>Enjoy !</h2>
<p>(Keep the sound muted.)</p>
 <center>
 <video style=\"width:100%;margin:auto;\" controls muted>
   <source src=\"u/emacs-strip.ogv\" type=\"video/ogg\">
 </video>
 </center>
<p>Download the video <a href=\"u/emacs-strip.ogv\">here</a>.</p>
<p>Download the full Elisp file <a href=\"u/emacs-strip.el\">here</a> or read it as a <a href=\"https://gist.github.com/bzg/8578998\">gist</a>.</p>
<h2>Bonus trick</h2>
<p>Ok, sometimes I <b>still</b> want to see what&#8217;s in the mode-line.</p>
<p>I use the <code>C-s-SPC</code> key for this (Control Super Space) with
  this simple function to display the mode-line in the header:</p>
<div class=\"highlight\"><pre><span class=\"c1\">;; Command to toggle the display of the mode-line as a header</span>
<span class=\"p\">(</span><span class=\"nf\">defvar-local</span> <span class=\"nv\">header-line-format</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">mode-line-in-header</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nf\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"nv\">header-line-format</span><span class=\"p\">)</span>
      <span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">header-line-format</span> <span class=\"nv\">mode-line-format</span>
            <span class=\"nv\">mode-line-format</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">mode-line-format</span> <span class=\"nv\">header-line-format</span>
          <span class=\"nv\">header-line-format</span> <span class=\"nv\">nil</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"nf\">set-window-buffer</span> <span class=\"nv\">nil</span> <span class=\"p\">(</span><span class=\"nf\">current-buffer</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">global-set-key</span> <span class=\"p\">(</span><span class=\"nf\">kbd</span> <span class=\"s\">&quot;C-s-SPC&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;mode-line-in-header</span><span class=\"p\">)</span>
</pre></div>
<p><img src=\"u/emacs-mode-line-header.png\" alt=\"u/emacs-mode-line-header.png\" /></p>
<p>You can check out the <a href=\"https://news.ycombinator.com/item?id%3D7107893\">discussion</a> on Hacker News.</p>


") (pubDate nil "Wed, 22 Jan 2014 00:00:00 +0100") (link nil "http://emacs-doctor.com/emacs-strip-tease.html") (guid ((isPermaLink . "true")) "http://emacs-doctor.com/emacs-strip-tease.html") (category nil "libre")) (item nil (title nil "Emacs mode for hiding the mode-line") (description nil "
<p>Sometimes I don&#8217;t want to display the <code>mode-line</code>.</p>
<p>This minor mode helps me switching it on and off:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">defvar-local</span> <span class=\"nv\">hidden-mode-line-mode</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>

<span class=\"p\">(</span><span class=\"nf\">define-minor-mode</span> <span class=\"nv\">hidden-mode-line-mode</span>
  <span class=\"s\">&quot;Minor mode to hide the mode-line in the current buffer.&quot;</span>
  <span class=\"nv\">:init-value</span> <span class=\"nv\">nil</span>
  <span class=\"nv\">:global</span> <span class=\"nv\">t</span>
  <span class=\"nv\">:variable</span> <span class=\"nv\">hidden-mode-line-mode</span>
  <span class=\"nv\">:group</span> <span class=\"ss\">&#39;editing-basics</span>
  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"nv\">hidden-mode-line-mode</span>
      <span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">hide-mode-line</span> <span class=\"nv\">mode-line-format</span>
            <span class=\"nv\">mode-line-format</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">mode-line-format</span> <span class=\"nv\">hide-mode-line</span>
          <span class=\"nv\">hide-mode-line</span> <span class=\"nv\">nil</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"nf\">force-mode-line-update</span><span class=\"p\">)</span>
  <span class=\"c1\">;; Apparently force-mode-line-update is not always enough to</span>
  <span class=\"c1\">;; redisplay the mode-line</span>
  <span class=\"p\">(</span><span class=\"nf\">redraw-display</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">when</span> <span class=\"p\">(</span><span class=\"k\">and </span><span class=\"p\">(</span><span class=\"nf\">called-interactively-p</span> <span class=\"ss\">&#39;interactive</span><span class=\"p\">)</span>
             <span class=\"nv\">hidden-mode-line-mode</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">run-with-idle-timer</span>
     <span class=\"mi\">0</span> <span class=\"nv\">nil</span> <span class=\"ss\">&#39;message</span>
     <span class=\"p\">(</span><span class=\"nf\">concat</span> <span class=\"s\">&quot;Hidden Mode Line Mode enabled.  &quot;</span>
             <span class=\"s\">&quot;Use M-x hidden-mode-line-mode to make the mode-line appear.&quot;</span><span class=\"p\">))))</span>

<span class=\"c1\">;; If you want to hide the mode-line in every buffer by default</span>
<span class=\"c1\">;; (add-hook &#39;after-change-major-mode-hook &#39;hidden-mode-line-mode)</span>
</pre></div>
<p>Just use <code>M-x hidden-mode-line-mode RET</code> and you&#8217;re done.</p>


") (pubDate nil "Fri, 17 Jan 2014 00:00:00 +0100") (link nil "http://emacs-doctor.com/emacs-hide-mode-line.html") (guid ((isPermaLink . "true")) "http://emacs-doctor.com/emacs-hide-mode-line.html") (category nil "libre")) (item nil (title nil "How To Exit Emacs?") (description nil "
<h2>tl;dr</h2>
<p>Spending the rest of your life in Emacs is a feature, not a bug.</p>
<p><img src=\"u/i3.png\" alt=\"u/i3.png\" /></p>
<h2>tl;dr (take 2)</h2>
<p>This is the magic key combination to exit Emacs:</p>
<pre class=\"example\">
C-x C-c
</pre>
<p>Which reads as</p>
<pre class=\"example\">
Control-x Control-c
</pre>
<h2>&#8211;help</h2>
<p>I.e., press the <code>Control</code> key with your left pinky, hold it pressed,
  then press <code>x</code>, release <code>x</code> (while still holding the <code>Control</code> key),
  press <code>c</code>.</p>
<p>Ta-da!</p>
<p>You are back to normal life.</p>
<h2>&#8211;help &#8211;verbose</h2>
<p>In Emacs, key bindings are called <code>keybindings</code>, because we like
  things to be plain.  Some people in other possible worlds called them
  <code>shortcuts</code>, but that&#8217;s a very narrow view of what a keybinding is,
  since Emacs keybindings have a personnality of their own, and can be a
  bit long sometimes.</p>
<p>The first time you encounter <code>Control-x</code>, you think: &#8220;Aha&#8230; so the
  <code>x</code> stands for eXiting!&#8221;.  Wrong.</p>
<p>The &#8220;x&#8221; stands for eXecuting.</p>
<p>Let&#8217;s tell a bit more about keybindings.</p>
<h2>&#8211;help &#8211;very-verbose</h2>
<p>Emacs keybindings are stored in <code>keymaps</code>.</p>
<p>A <code>keymap</code> is a variable containing a list of associations between
  keys and <code>commands</code>.</p>
<p>The list of all keybindings starting with <code>Control-x</code> is stored in a
  dedicated variable called <code>ctl-x-map</code>.</p>
<p>You can see this list with <code>C-h v ctl-x-map RET</code>: this will open a new
  buffer and display the value of the keymap.</p>
<p>You can also display the list of commands starting with the <code>C-x</code>
  prefix bit hitting <code>C-x C-h</code> (yes, the <code>h</code> stands for help).</p>
<p>Do it <i>now</i>, and enjoy the beautiful view!</p>
<p><img src=\"u/emacs-keybindings.png\" alt=\"u/emacs-keybindings.png\" /></p>
<p>In this buffer, you can follow links by hitting <code>RET</code> (aka <code>return</code>):
  those are links to the descriptions of commands associated with the
  listed keybindings&#8212;or to <i>sub keymaps</i>.</p>
<p>For example, the buffer will let you learn that <code>C-x C-c</code> is bound to
  <code>save-buffers-kill-terminal</code>.  Yes, this is the name of the command
  you call to &#8220;exit Emacs&#8221;, as people call it sometimes.</p>
<p>But <code>C-x C-k</code> is bound to <code>kmacro-keymap</code>, which is not a command, but
  another map.</p>
<p>If you want to know more about this other keymap, hit <code>C-x C-k C-h</code>.</p>
<p>(And yes, the &#8220;h&#8221; in <code>C-h</code> stands for Help.)</p>
<p>Of course, since keymaps are just variables, you can change them at
  will.  I recommend not to change the default keybindings: Emacs is not
  only a text editor, it&#8217;s a shared culture, and sticking to the default
  keybindings helps the community celebrate the same commands together.</p>
<h2>x = ?</h2>
<pre class=\"example\">
Happiness is nothing more than good health and a bad memory.

                            -- Albert Schweitzer
</pre>
<p>The <code>Control-x</code> keymap is the most important keymap in Emacs: main
  commands are called from this keymap.</p>
<p>The <code>Control-c</code> keymap is the second most important one.  Emacs modes
  use it to associate keybindings with the new commands they define.</p>
<p>When reading <code>.emacs.el</code> file late at night, amont binary dreams and
  computer fairies, you sometimes encounter a pattern: <code>C-c x</code>, where
  <code>x</code> is a letter or a digit.  This pattern is reserved for the user:
  this is where you, the user, are required to place your keybindings.
  No decent Emacs mode will ever use this pattern for its keybindings.</p>
<p>Of course <code>C-c C-...</code> is used by all modes: but this is <code>C-c C-...</code>,
  not <code>C-c ...</code> &#8212; please note the difference.</p>
<p>So what does this <code>x</code> stand for?</p>
<p>If you know Emacs, you know a bit of <code>M-x</code>: hitting this puts the
  cursor in the <code>minibuffer</code>, and prompts you for the name of a command.</p>
<p>The name of the command associated with <code>M-x</code> is
  <code>execute-extended-command</code>, so my guess is that <code>x</code> stands for
  &#8220;execute&#8221;.</p>
<p>Which makes sense, right?</p>
<p>I also guess the <code>x</code> in <code>Control-x</code> stands for &#8220;execute&#8221;, since this
  is the main map to <i>execute</i> stuff in Emacs.  At least I want to
  believe so.</p>
<p>What does <code>C-c</code> stands for in <code>C-x C-c</code>?</p>
<p>If you use <code>C-c</code> in shells, you know the answer.  And of course
  <a href=\"http://en.wikipedia.org/wiki/Control-C\">Wikipedia</a> comes to the rescue:</p>
<blockquote>
  <p>As many keyboards and computer terminals once directly generated ASCII
    code, the choice of control-C overlapped with the ASCII end-of-text
    character. This character has a numerical value of three, as &#8220;C&#8221; is
    the third letter of the alphabet. It was chosen to cause an interrupt
    as it is otherwise unlikely to be part of a program&#8217;s interactive
    interface. Many other control codes, such as control-D for the
    end-of-transmission character, do not generate signals and are
    occasionally used to control a program.</p>
</blockquote>
<p>See?  Now you know why <code>C-x C-c</code> exits Emacs.</p>
<p>But remember: you don&#8217;t really want to exit Emacs (see <a href=\"*tl%3Bdr\">tl;dr</a>).</p>


") (pubDate nil "Mon, 23 Dec 2013 00:00:00 +0100") (link nil "http://emacs-doctor.com/how-to-exit-emacs.html") (guid ((isPermaLink . "true")) "http://emacs-doctor.com/how-to-exit-emacs.html") (category nil "libre")) (item nil (title nil "Emacs Org and Overtone quick intro") (description nil "
<p>This file will take you through installing <a href=\"http://www.gnu.org/software/emacs/\">GNU Emacs</a> and <a href=\"http://overtone.github.io/\">Overtone</a> so
  that you can play a few notes.</p>
<p>You want to read it within GNU Emacs and <a href=\"http://orgmode.org/\">Org-mode</a>.</p>
<h2>Installation</h2>
<h3>Install GNU Emacs</h3>
<p>If you are using Debian, <code>~$ apt-get install emacs</code> will do.</p>
<p>To install Emacs from sources, you can download it from <a href=\"ftp://ftp.gnu.org/pub/gnu/emacs/\">here</a> or clone
  the git mirror:</p>
<pre class=\"example\">
~$ git clone git://git.savannah.gnu.org/emacs.git
</pre>
<h3>Configure Emacs</h3>
<p>The beginning of your Emacs configuration should contain this to add
  <code>marmelade</code> to the list of known repositories for Emacs libraries:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;package</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">&#39;package-archives</span>
             <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;marmalade&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;http://marmalade-repo.org/packages/&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">package-initialize</span><span class=\"p\">)</span>
</pre></div>
<p>Now hit <code>C-c C-v C-t</code> to <i>tangle</i> all Emacs Lisp code blocks from this
  file into a new <code>emacs.el</code> file in the same directory.</p>
<p>When done, go check this new <code>emacs.el</code>.</p>
<p>You can use this <code>emacs.el</code> to load the minimal configuration needed
  for this tutorial.</p>
<h3>Install Cider (was &#8220;nrepl.el&#8221;)</h3>
<p>Now run Emacs like this:</p>
<pre class=\"example\">
~$ emacs -l /path/to/overtone-intro/emacs.el
</pre>
<p>In Emacs, get the list of packages:</p>
<p><code>M-x list-packages RET</code></p>
<p>and install <code>cider</code> from that list.</p>
<p><b>Note</b>: This will also install <code>clojure-mode-2.0.0</code>, <code>cl-lib-0.3</code>,
  <code>dash-2.1.0</code> and <code>pkg-info-0.3</code>.</p>
<h3>Install Org-mode</h3>
<p>Install the latest version of <a href=\"http://orgmode.org/\">Org-mode</a>:</p>
<pre class=\"example\">
~$ git clone git://orgmode.org/org-mode.git
~$ cd org-mode
~$ make autoloads
</pre>
<p>This will compile Emacs Lisp files in the <code>org-mode/lisp/</code> directory
  and create <code>org-loaddefs.el</code>, containing the necessary autoloads.</p>
<h3>Configure Org-mode</h3>
<p>This simple Org configuration should do:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">&#39;load-path</span> <span class=\"s\">&quot;~/install/git/org-mode/&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;org</span><span class=\"p\">)</span>

<span class=\"c1\">;; We only need Emacs Lisp and Clojure in this tutorial:</span>
<span class=\"p\">(</span><span class=\"nf\">org-babel-do-load-languages</span>
 <span class=\"ss\">&#39;org-babel-load-languages</span>
 <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"nf\">emacs-lisp</span> <span class=\"o\">.</span> <span class=\"nv\">t</span><span class=\"p\">)</span>
   <span class=\"p\">(</span><span class=\"nf\">clojure</span> <span class=\"o\">.</span> <span class=\"nv\">t</span><span class=\"p\">)))</span>

<span class=\"c1\">;; Use cider as the clojure execution backend</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">org-babel-clojure-backend</span> <span class=\"ss\">&#39;cider</span><span class=\"p\">)</span>

<span class=\"c1\">;; Let&#39;s have pretty source code blocks</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">org-edit-src-content-indentation</span> <span class=\"mi\">0</span>
      <span class=\"nv\">org-src-tab-acts-natively</span> <span class=\"nv\">t</span>
      <span class=\"nv\">org-src-fontify-natively</span> <span class=\"nv\">t</span>
      <span class=\"nv\">org-confirm-babel-evaluate</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
</pre></div>
<h3>Configure cider</h3>
<div class=\"highlight\"><pre><span class=\"c1\">;; Cider configuration</span>
<span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;cider</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">nrepl-hide-special-buffers</span> <span class=\"nv\">t</span>
      <span class=\"nv\">cider-repl-pop-to-buffer-on-connect</span> <span class=\"nv\">nil</span>
      <span class=\"nv\">cider-popup-stacktraces</span> <span class=\"nv\">nil</span>
      <span class=\"nv\">cider-repl-popup-stacktraces</span> <span class=\"nv\">t</span><span class=\"p\">)</span>
</pre></div>
<h3>Install leiningen</h3>
<p><a href=\"http://leiningen.org\">leiningen</a> is the <i>de facto</i> standard for running Clojure projects.</p>
<p>Check the very simple <a href=\"http://leiningen.org/#install\">installation instructions</a>.</p>
<h3>Install SuperCollider</h3>
<p>Supercollider is the audio synthetizer.</p>
<p>You need it to play sounds with Overtone.</p>
<p>On Debian, you can install SuperCollider the usual way: <code>~$ apt-get
  install supercollider</code>.</p>
<p>For other platforms, see the supercollider <a href=\"http://supercollider.sourceforge.net/downloads/\">downloads page</a>.</p>
<p>In this tutorial, we will play piano, so we need the <a href=\"http://sourceforge.net/projects/sc3-plugins/\">sc3-plugins</a>.</p>
<p>If you want to compile supercollider and sc3-plugins from sources,
  check <a href=\"https://github.com/overtone/overtone/wiki/Compiling-SuperCollider\">this page</a> from the Overtone wiki.</p>
<h3>Overtone as a dependency in project.clj</h3>
<p>Previously, we hit <code>C-c C-v C-t</code> to tangle Emacs Lisp code blocks into
  <code>emacs.el</code>.  Since <code>C-c C-v C-t</code> tangles <i>all blocks</i> in the buffer,
  we also created <code>project.clj</code>, which is needed in order to run <code>lein</code>
  and to let <code>cider</code> interact with <code>lein</code>.</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"kd\">defproject </span><span class=\"nv\">overtone-intro</span> <span class=\"s\">&quot;1.0&quot;</span>
  <span class=\"ss\">:dependencies</span> <span class=\"p\">[[</span><span class=\"nv\">org.clojure/clojure</span> <span class=\"s\">&quot;1.5.1&quot;</span><span class=\"p\">]</span>
                 <span class=\"p\">[</span><span class=\"nv\">overtone</span> <span class=\"s\">&quot;0.9.1&quot;</span><span class=\"p\">]])</span>
</pre></div>
<p>From the <code>overtone-intro</code> directory, run <code>~$ lein deps</code> to load all
  dependencies.</p>
<h3>Additional keybindings</h3>
<p>During the live demo, I used these keybindings:</p>
<div class=\"highlight\"><pre><span class=\"c1\">;; Useful keybindings when using Clojure from Org</span>
<span class=\"p\">(</span><span class=\"nf\">org-defkey</span> <span class=\"nv\">org-mode-map</span> <span class=\"s\">&quot;\\C-x\\C-e&quot;</span> <span class=\"ss\">&#39;cider-eval-last-sexp</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">org-defkey</span> <span class=\"nv\">org-mode-map</span> <span class=\"s\">&quot;\\C-c\\C-d&quot;</span> <span class=\"ss\">&#39;cider-doc</span><span class=\"p\">)</span>
</pre></div>
<p>They allow to execute a Clojure source code block by hitting <code>C-x C-e</code>
  after a Clojure sexp, and to get a Clojure docstring by hitting <code>C-c
  C-d</code> after a symbol.</p>
<p>If you don&#8217;t use these keybindings, executing source code blocks is
  done by hitting <code>C-c C-c</code> on the <code>#+BEGIN_SRC</code> line.</p>
<h3>Summary</h3>
<p>This is an overview of my configuration:</p>
<table>
  <tr><th>Prog/Package</th><th>Version</th></tr>
  <tr><td>GNU Emacs</td><td>24.3.50.1</td></tr>
  <tr><td>CIDER</td><td>0.5</td></tr>
  <tr><td>auto-complete</td><td>1.4.0</td></tr>
  <tr><td>dash.el</td><td>2.3.0</td></tr>
  <tr><td>pkg-info</td><td>0.4</td></tr>
  <tr><td>Org-mode</td><td>8.2.4</td></tr>
  <tr><td>Clojure</td><td>1.5.1</td></tr>
  <tr><td>Overtone</td><td>0.9.1</td></tr>
</table>
<p>The tutorial should work with older versions of Emacs, but you need to
  install Org-mode from its master branch to use <a href=\"https://github.com/clojure-emacs/cider\">cider</a>.</p>
<p>Also, remember to hit <code>TAB</code> for (un)folding a section or a source code
  block.</p>
<h2>Connect to the repl</h2>
<p>To connect the current Org buffer to a repl, run</p>
<p><code>M-x cider-jack-in RET</code></p>
<p>&#8230; and wait until you get a confirmation message in the minibuffer.</p>
<p>Do this now, you&#8217;ll need it soon.</p>
<h2>A quick intro to Org Babel</h2>
<p>To get a gist of what Org Babel is, hit <code>C-c C-c</code> on the <code>#+BEGIN_SRC</code>
  line below:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">message</span> <span class=\"s\">&quot;Yeah!&quot;</span><span class=\"p\">)</span>
</pre></div>
<p>Emacs minibuffer displays the output: yeah!</p>
<h3>Babel: vars</h3>
<p>You can bind variables in Babel source code blocks&#8212;hit <code>C-c C-c</code> on
  the code blocks below:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">message</span> <span class=\"p\">(</span><span class=\"nf\">number-to-string</span> <span class=\"nv\">n</span><span class=\"p\">))</span>
</pre></div>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">-&gt; </span><span class=\"nv\">n</span> <span class=\"nb\">inc </span><span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"nv\">m</span><span class=\"p\">))</span>
</pre></div>
<h3>Babel: lists</h3>
<p>Okay, you get it: hit <code>C-c C-c</code> on code blocks to execute them.</p>
<ul>
  <li>simple</li>
  <li>list</li>
</ul>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">print</span> <span class=\"nv\">x</span><span class=\"p\">)</span>
</pre></div>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">clojure.string/upper-case</span> <span class=\"nv\">x</span><span class=\"p\">)</span>
</pre></div>
<h3>Babel: tables</h3>
<table>
  <tr><td>1</td><td>a</td></tr>
  <tr><td>2</td><td>b</td></tr>
  <tr><td>3</td><td>c</td></tr>
  <tr><td>4</td><td>d</td></tr>
</table>
<div class=\"highlight\"><pre><span class=\"nv\">data</span>
</pre></div>
<h2>A quick intro to Overtone</h2>
<h3>Overtone: loading and booting</h3>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">use</span> <span class=\"ss\">&#39;overtone.core</span><span class=\"p\">)</span>
</pre></div>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">boot-external-server</span><span class=\"p\">)</span>
</pre></div>
<p><b>Note</b>: I&#8217;m using GNU/Linux, and I didn&#8217;t take the time to configure
  jackd properly.  You may want to use this instead:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">use</span> <span class=\"ss\">&#39;overtone.live</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">boot-internal-server</span><span class=\"p\">)</span>
</pre></div>
<h3>Overtone: playing/fooling around</h3>
<p><b>Note</b>: the first time you use the <code>overtone.inst.piano</code> namespace, it
  will load quite a lot of files from freesound.org &#8211; you may want to
  do this within a bare <code>lein repl</code> in order to make sure the process is
  over.</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">use</span> <span class=\"ss\">&#39;overtone.inst.piano</span><span class=\"p\">)</span>
</pre></div>
<p>Play a simple midi note:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">piano</span> <span class=\"mi\">60</span><span class=\"p\">)</span>
</pre></div>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">doseq </span><span class=\"p\">[</span><span class=\"nv\">note</span> <span class=\"p\">(</span><span class=\"nf\">chord</span> <span class=\"ss\">:C3</span><span class=\"p\">)]</span> <span class=\"p\">(</span><span class=\"nf\">piano</span> <span class=\"nv\">note</span><span class=\"p\">))</span>
</pre></div>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">doseq </span><span class=\"p\">[</span><span class=\"nv\">note</span> <span class=\"p\">(</span><span class=\"nf\">chord</span> <span class=\"ss\">:E3</span> <span class=\"ss\">:minor</span><span class=\"p\">)]</span> <span class=\"p\">(</span><span class=\"nf\">piano</span> <span class=\"nv\">note</span><span class=\"p\">))</span>
</pre></div>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">play-chord</span> <span class=\"p\">[</span><span class=\"nv\">chord</span><span class=\"p\">]</span>
  <span class=\"p\">(</span><span class=\"nb\">doseq </span><span class=\"p\">[</span><span class=\"nv\">note</span> <span class=\"nv\">chord</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nf\">piano</span> <span class=\"nv\">note</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nf\">play-chord</span> <span class=\"p\">(</span><span class=\"nf\">chord</span> <span class=\"ss\">:A3</span> <span class=\"ss\">:minor</span><span class=\"p\">))</span>
</pre></div>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nb\">time </span><span class=\"p\">(</span><span class=\"nf\">now</span><span class=\"p\">)]</span>
  <span class=\"p\">(</span><span class=\"nf\">at</span> <span class=\"nb\">time </span><span class=\"p\">(</span><span class=\"nf\">play-chord</span> <span class=\"p\">(</span><span class=\"nf\">chord</span> <span class=\"ss\">:C3</span> <span class=\"ss\">:major</span><span class=\"p\">)))</span>
  <span class=\"p\">(</span><span class=\"nf\">at</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">1000</span> <span class=\"nv\">time</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">play-chord</span> <span class=\"p\">(</span><span class=\"nf\">chord</span> <span class=\"ss\">:C3</span> <span class=\"ss\">:major7</span><span class=\"p\">)))</span>
  <span class=\"p\">(</span><span class=\"nf\">at</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">2000</span> <span class=\"nv\">time</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">play-chord</span> <span class=\"p\">(</span><span class=\"nf\">chord</span> <span class=\"ss\">:E3</span> <span class=\"ss\">:minor</span><span class=\"p\">)))</span>
  <span class=\"p\">(</span><span class=\"nf\">at</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">3000</span> <span class=\"nv\">time</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">play-chord</span> <span class=\"p\">(</span><span class=\"nf\">chord</span> <span class=\"ss\">:A2</span> <span class=\"ss\">:minor</span><span class=\"p\">))))</span>
</pre></div>
<p><code>defsynth</code> and <code>definst</code> are the two entry points for creating sounds
  and instruments &#8211; go check their docstrings, they explain a lot.</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">defsynth</span> <span class=\"nv\">bar</span> <span class=\"p\">[</span><span class=\"nv\">freq</span> <span class=\"mi\">440</span><span class=\"p\">]</span>
  <span class=\"p\">(</span><span class=\"nf\">out</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nf\">sin-osc</span> <span class=\"nv\">freq</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nf\">bar</span> <span class=\"mi\">500</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">kill</span> <span class=\"nv\">bar</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">stop</span><span class=\"p\">)</span>

<span class=\"p\">(</span><span class=\"nf\">definst</span> <span class=\"nv\">beep</span> <span class=\"p\">[</span><span class=\"nv\">note</span> <span class=\"mi\">60</span><span class=\"p\">]</span>
  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">sound-src</span> <span class=\"p\">(</span><span class=\"nf\">sin-osc</span> <span class=\"p\">(</span><span class=\"nf\">midicps</span> <span class=\"nv\">note</span><span class=\"p\">))</span>
	 <span class=\"nv\">env</span> <span class=\"p\">(</span><span class=\"nf\">env-gen</span> <span class=\"p\">(</span><span class=\"nf\">perc</span> <span class=\"mf\">0.01</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"ss\">:action</span> <span class=\"nv\">FREE</span><span class=\"p\">)]</span> <span class=\"c1\">; sam uses :free</span>
    <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">sound-src</span> <span class=\"nv\">env</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nf\">beep</span> <span class=\"mi\">60</span><span class=\"p\">)</span>

<span class=\"p\">(</span><span class=\"nf\">defsynth</span> <span class=\"nv\">pad1</span> <span class=\"p\">[</span><span class=\"nv\">freq</span> <span class=\"mi\">110</span> <span class=\"nv\">amp</span> <span class=\"mi\">1</span> <span class=\"nv\">gate</span> <span class=\"mi\">1</span> <span class=\"nv\">out-bus</span> <span class=\"mi\">0</span><span class=\"p\">]</span>
  <span class=\"p\">(</span><span class=\"nf\">out</span> <span class=\"nv\">out-bus</span>
	<span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"p\">(</span><span class=\"nf\">saw</span> <span class=\"p\">[</span><span class=\"nv\">freq</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">freq</span> <span class=\"mf\">1.01</span><span class=\"p\">)])</span>
	   <span class=\"p\">(</span><span class=\"nf\">env-gen</span> <span class=\"p\">(</span><span class=\"nf\">adsr</span> <span class=\"mf\">0.01</span> <span class=\"mf\">0.1</span> <span class=\"mf\">0.7</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"ss\">:gate</span> <span class=\"nv\">gate</span> <span class=\"ss\">:action</span> <span class=\"nv\">FREE</span><span class=\"p\">))))</span>

<span class=\"p\">(</span><span class=\"nf\">pad1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">stop</span><span class=\"p\">)</span>

<span class=\"c1\">;; Let&#39;s try something a bit crazy</span>
<span class=\"p\">(</span><span class=\"nb\">for </span><span class=\"p\">[</span><span class=\"nv\">i</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"mi\">200</span><span class=\"p\">)]</span> <span class=\"p\">(</span><span class=\"nf\">at</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"p\">(</span><span class=\"nf\">now</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">i</span> <span class=\"mi\">20</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nf\">beep</span> <span class=\"nv\">i</span><span class=\"p\">)))</span>
</pre></div>
<p>Some more copy-and-paste from overtone&#8217;s wiki:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">piano</span> <span class=\"p\">[</span><span class=\"mi\">60</span> <span class=\"mi\">63</span> <span class=\"mi\">67</span><span class=\"p\">])</span>
<span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">piano</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">note</span> <span class=\"p\">[</span><span class=\"ss\">:C3</span> <span class=\"ss\">:E4</span> <span class=\"ss\">:G4</span><span class=\"p\">]))</span>
<span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">piano</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">note</span> <span class=\"p\">[</span><span class=\"ss\">:C#5</span> <span class=\"ss\">:E4</span> <span class=\"ss\">:G4</span><span class=\"p\">]))</span>
<span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">piano</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">note</span> <span class=\"p\">[</span><span class=\"ss\">:Cb2</span> <span class=\"ss\">:E4</span> <span class=\"ss\">:G4</span><span class=\"p\">]))</span>

<span class=\"p\">(</span><span class=\"nf\">definst</span> <span class=\"nv\">steel-drum</span> <span class=\"p\">[</span><span class=\"nv\">note</span> <span class=\"mi\">60</span> <span class=\"nv\">amp</span> <span class=\"mf\">0.8</span><span class=\"p\">]</span>
  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">freq</span> <span class=\"p\">(</span><span class=\"nf\">midicps</span> <span class=\"nv\">note</span><span class=\"p\">)]</span>
    <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">amp</span>
	<span class=\"p\">(</span><span class=\"nf\">env-gen</span> <span class=\"p\">(</span><span class=\"nf\">perc</span> <span class=\"mf\">0.01</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"ss\">:action</span> <span class=\"nv\">FREE</span><span class=\"p\">)</span>
	<span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"p\">(</span><span class=\"nf\">sin-osc</span> <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"nv\">freq</span> <span class=\"mi\">2</span><span class=\"p\">))</span>
	   <span class=\"p\">(</span><span class=\"nf\">rlpf</span> <span class=\"p\">(</span><span class=\"nf\">saw</span> <span class=\"nv\">freq</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"mf\">1.1</span> <span class=\"nv\">freq</span><span class=\"p\">)</span> <span class=\"mf\">0.4</span><span class=\"p\">)))))</span>

<span class=\"p\">(</span><span class=\"nf\">steel-drum</span> <span class=\"p\">(</span><span class=\"nf\">note</span> <span class=\"ss\">:E3</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">steel-drum</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">note</span> <span class=\"p\">[</span><span class=\"ss\">:E3</span> <span class=\"ss\">:D#4</span><span class=\"p\">]))</span>
</pre></div>
<h3>Overtone: loading .wav samples</h3>
<div class=\"highlight\"><pre><span class=\"c1\">;; Hint: adapt this to your own .wav files</span>
<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">noa</span> <span class=\"p\">(</span><span class=\"nf\">sample</span> <span class=\"s\">&quot;/path/to/a/file.wav&quot;</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[]</span>
  <span class=\"p\">(</span><span class=\"nf\">noa</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">Thread/sleep</span> <span class=\"mi\">3000</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">piano</span> <span class=\"p\">(</span><span class=\"nf\">note</span> <span class=\"ss\">:Cb3</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"nf\">piano</span> <span class=\"mi\">68</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nf\">stop</span><span class=\"p\">)</span>
</pre></div>
<h3>Overtone: using freesound.org</h3>
<p>You can download samples directly from freesound.org via Overtone:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">snare</span> <span class=\"p\">(</span><span class=\"nf\">sample</span> <span class=\"p\">(</span><span class=\"nf\">freesound-path</span> <span class=\"mi\">26903</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">snare</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">clic</span> <span class=\"p\">(</span><span class=\"nf\">sample</span> <span class=\"p\">(</span><span class=\"nf\">freesound-path</span> <span class=\"mi\">406</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">clic</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">steam</span> <span class=\"p\">(</span><span class=\"nf\">sample</span> <span class=\"p\">(</span><span class=\"nf\">freesound-path</span> <span class=\"mi\">30628</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">steam</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">clap</span> <span class=\"p\">(</span><span class=\"nf\">sample</span> <span class=\"p\">(</span><span class=\"nf\">freesound-path</span> <span class=\"mi\">48310</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">clap</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">clap2</span> <span class=\"p\">(</span><span class=\"nf\">sample</span> <span class=\"p\">(</span><span class=\"nf\">freesound-path</span> <span class=\"mi\">132676</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">clap2</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">boom</span> <span class=\"p\">(</span><span class=\"nf\">sample</span> <span class=\"p\">(</span><span class=\"nf\">freesound-path</span> <span class=\"mi\">80401</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">boom</span><span class=\"p\">)</span>
</pre></div>
<h2>Why I love this?</h2>
<ul>
  <li>I love sounds.</li>
  <li>I love Org+Cider <i>reactivity</i>: evaluating Clojure sexps is fast.</li>
  <li>I love building (mostly random) sounds so fast, it feels like
    <i>sculpting</i> music.</li>
</ul>
<h2>Issues</h2>
<p>If you run into issues while following this tutorial, please report
  them on <a href=\"https://github.com/bzg/org-overtone-intro\">github</a>.</p>
<h2>Exploring further</h2>
<ul>
  <li>https://github.com/overtone/overtone</li>
  <li>https://github.com/overtone/overtone/blob/master/src/overtone/samples/freesound.clj</li>
  <li>http://skillsmatter.com/podcast/home/functional-composition</li>
  <li>http://blog.josephwilk.net/clojure/creating-instruments-with-overtone.html</li>
  <li>http://www.tonalsoft.com/pub/news/pitch-bend.aspx</li>
  <li>http://www.freesound.org/</li>
</ul>


") (pubDate nil "Sat, 21 Dec 2013 00:00:00 +0100") (link nil "http://emacs-doctor.com/emacs-org-babel-overtone-intro.html") (guid ((isPermaLink . "true")) "http://emacs-doctor.com/emacs-org-babel-overtone-intro.html") (category nil "libre")) (item nil (title nil "Blogging from GNU Emacs") (description nil "
<p>Yes, blogging from Emacs is possible.</p>
<p>If you are familiar with <a href=\"http://orgmode.org\">org-mode</a> and if you already know how to
  publish a HTML project, this is straightforward: just download
  <a href=\"http://orgmode.org/cgit.cgi/org-mode.git/plain/contrib/lisp/ox-rss.el\">ox-rss.el</a> and follow the instructions in the comment section.</p>
<p>If you are not so familiar with Org-mode, or with publishing HTML
  project (or just enjoy reviewing the basics from time to time), here
  is a small tutorial describing the steps to let you enjoy an Emacs
  blog.</p>
<h2>Org-mode 15 seconds introduction</h2>
<p>Fire up GNU Emacs.</p>
<p>Then hit <code>C-x C-f ~/my-blog.org RET</code> to create a new Org file named
  <code>my-blog.org</code>.</p>
<p>In this file, hit <code>M-RET</code> to insert a new heading.  Type something
  sensible as the title of your next blog entry:</p>
<div class=\"highlight\"><pre>* My first blog post with Emacs and Org!

This will be the content of my blog entry.
</pre></div>
<p>You&#8217;re done.</p>
<h2>Publishing <code>my-blog.org</code> as a HTML page</h2>
<p>You need to publish your Org page somewhere in your computer.</p>
<p>So let&#8217;s create a <code>public_html/</code> directory in your home directory:</p>
<pre class=\"example\">
~$ mkdir public_html
</pre>
<p>Now edit your <code>.emacs.el</code> file and add this Emacs lisp snippet:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">org-publish-project-alist</span>
      <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"s\">&quot;blog&quot;</span>
         <span class=\"nv\">:base-directory</span> <span class=\"s\">&quot;~/&quot;</span>
         <span class=\"nv\">:html-extension</span> <span class=\"s\">&quot;html&quot;</span>
         <span class=\"nv\">:base-extension</span> <span class=\"s\">&quot;org&quot;</span>
         <span class=\"nv\">:publishing-directory</span> <span class=\"s\">&quot;~/public_html/&quot;</span>
         <span class=\"nv\">:publishing-function</span> <span class=\"p\">(</span><span class=\"nf\">org-html-publish-to-html</span><span class=\"p\">)</span>
         <span class=\"nv\">:html-preamble</span> <span class=\"nv\">nil</span>
         <span class=\"nv\">:html-postamble</span> <span class=\"nv\">nil</span><span class=\"p\">)))</span>
</pre></div>
<p>The code above defines a HTML <i>publishing</i> project with no preamble
  and no postamble.  (To learn more on publishing projects, please read
  the <a href=\"http://orgmode.org/manual/Publishing.html\">Org manual</a>.)</p>
<p>Evaluate this code by hitting <code>C-x e</code> at the end of the last
  parenthesis.</p>
<p>Now hit <code>M-x org-publish RET blog RET</code> anywhere in Emacs to publish
  the project.</p>
<p>Your <code>public_html/</code> directory now contains a new file, <code>my-blog.html</code>,
  with a HTML export of your <code>my-blog.org</code> file.</p>
<h2>Publishing <code>my-blog.org</code> as a RSS feed</h2>
<p>You want to publish this page as a RSS feed so that readers can
  subscribe to it.  (Yes, my own definition of a blog is <i>that</i> simple:
  some HTML content and a feed.)</p>
<p>You are three steps away from having a blog&#8212;you only need to:</p>
<ol>
  <li>load <code>ox-rss.el</code> to enable RSS publishing;</li>
  <li>create a RSS publishing project;</li>
  <li>add some RSS-related info in your HTML publishing project.</li>
</ol>
<h3>Enable RSS publishing</h3>
<p>Find ox-rss.el in Org&#8217;s <code>contrib/lisp/</code> directory and make sure this
  directory is in your Emacs load-path.</p>
<p>Since Org lives in the <code>~/install/git/</code> contrib on my computer, this
  is my configuration:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">&#39;load-path</span> <span class=\"s\">&quot;~/install/git/org-mode/contrib/lisp/&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;ox-rss</span><span class=\"p\">)</span>
</pre></div>
<p>(We use <code>add-to-list</code> to append a new project to
  <code>org-publish-project-alist</code>, but you can simply use <code>setq</code> with both
  projects on <code>org-publish-project-alist</code>.)</p>
<h3>Create a RSS publishing project</h3>
<p>Add this new RSS publishing project:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">&#39;org-publish-project-alist</span>
             <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;blog-rss&quot;</span>
		<span class=\"nv\">:base-directory</span> <span class=\"s\">&quot;~/&quot;</span>
		<span class=\"nv\">:base-extension</span> <span class=\"s\">&quot;org&quot;</span>
		<span class=\"nv\">:publishing-directory</span> <span class=\"s\">&quot;~/public_html/&quot;</span>
		<span class=\"nv\">:publishing-function</span> <span class=\"p\">(</span><span class=\"nf\">org-rss-publish-to-rss</span><span class=\"p\">)</span>
		<span class=\"nv\">:html-link-home</span> <span class=\"s\">&quot;http://mydomain.org/&quot;</span>
		<span class=\"nv\">:html-link-use-abs-url</span> <span class=\"nv\">t</span><span class=\"p\">))</span>
</pre></div>
<p>It is pretty similar to our HTML publishing project except that:</p>
<ul>
  <li>the publishing function we use is <code>org-rss-publish-to-rss</code> instead
    of <code>org-html-publish-to-html</code>;</li>
  <li>we set the <code>:html-link-home</code> publishing option so that relative
    links in our RSS feed are prefixed with the &#8220;http://mydomain.org/&#8221;
    domain name (assuming it will be the final destination of our blog);</li>
  <li>we set the <code>:html-link-use-abs-url</code> publishing option to <code>t</code> (true)
    so that all links in our RSS feed are absolute, since it does not
    make sense to have relative links in RSS feeds.</li>
</ul>
<p>Evaluate the code above with <code>C-x e</code> then hit <code>M-x org-publish RET
  blog-rss RET</code> to publish the RSS feed: <code>public_html/</code> now contains a
  <code>my-blog.xml</code> file along with the <code>my-blog.html</code> file.</p>
<h3>Add some RSS-related info in your HTML publishing project</h3>
<p>Our last step is to link our RSS feed (the <code>my-blog.xml</code> file) with
  the HTML file.  Let&#8217;s rewrite our HTML project like this:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">org-publish-project-alist</span>
      <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"s\">&quot;blog&quot;</span>
         <span class=\"nv\">:base-directory</span> <span class=\"s\">&quot;~/&quot;</span>
         <span class=\"nv\">:html-extension</span> <span class=\"s\">&quot;html&quot;</span>
         <span class=\"nv\">:base-extension</span> <span class=\"s\">&quot;org&quot;</span>
         <span class=\"nv\">:publishing-directory</span> <span class=\"s\">&quot;~/public_html/&quot;</span>
         <span class=\"nv\">:publishing-function</span> <span class=\"p\">(</span><span class=\"nf\">org-html-publish-to-html</span><span class=\"p\">)</span>
         <span class=\"nv\">:html-preamble</span> <span class=\"nv\">nil</span>
         <span class=\"nv\">:html-postamble</span> <span class=\"nv\">nil</span>
         <span class=\"nv\">:html-head-extra</span>
         <span class=\"s\">&quot;&lt;link rel=\\&quot;alternate\\&quot; type=\\&quot;application/rss+xml\\&quot;</span>
<span class=\"s\">                href=\\&quot;http://mydomain.org/my-blog.xml\\&quot;</span>
<span class=\"s\">                title=\\&quot;RSS feed for mydomain.org\\&quot;&gt;&quot;</span><span class=\"p\">)))</span>
</pre></div>
<p>We just appended the <code>:html-head-extra</code> option, which tells what
  information we want to add in our HTML <code>&lt;head&gt;...&lt;/head&gt;</code> section.</p>
<h2>Last but not least: a real setup</h2>
<p>Okay, you now have a single file, with a RSS feed that points to
  headlines in this file.  But what if you want to allow readers to
  <i>comment</i> your blog posts?</p>
<p>In this case, you need to have <i>one page per blog entry</i> and to use
  something like <a href=\"http://disqus.com\">disqus.com</a> to enable comments on this page.</p>
<p>This is perfectly <i>fine</i>!</p>
<p>Just write your blog posts in dedicated .org files, then use the
  <code>my-blog.org</code> file as a collection of <i>summaries</i> of your blog posts.
  At the end of each summary, put a link to the Org page where people
  can comment.</p>
<p>Then update your RSS publishing project like this:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">&#39;org-publish-project-alist</span>
             <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;blog-rss&quot;</span>
		<span class=\"nv\">:base-directory</span> <span class=\"s\">&quot;~/&quot;</span>
		<span class=\"nv\">:base-extension</span> <span class=\"s\">&quot;org&quot;</span>
		<span class=\"nv\">:publishing-directory</span> <span class=\"s\">&quot;~/public_html/&quot;</span>
		<span class=\"nv\">:publishing-function</span> <span class=\"p\">(</span><span class=\"nf\">org-rss-publish-to-rss</span><span class=\"p\">)</span>
		<span class=\"nv\">:html-link-home</span> <span class=\"s\">&quot;http://mydomain.org/&quot;</span>
		<span class=\"nv\">:html-link-use-abs-url</span> <span class=\"nv\">t</span>
		<span class=\"nv\">:exclude</span> <span class=\"s\">&quot;.*&quot;</span>
		<span class=\"nv\">:include</span> <span class=\"p\">(</span><span class=\"s\">&quot;my-blog.org&quot;</span><span class=\"p\">)))</span>
</pre></div>
<p>Note the options <code>:exclude</code> and <code>:include</code>&#8212;they say: &#8220;Don&#8217;t publish
  .xml files for all .org files in the base directory, only publish a
  .xml file for <code>my-blog.org</code>.&#8221;</p>
<p>This setup may sound weird first, but I find it useful on the long
  term: quick thoughts get directly in the main <code>my-blog.org</code> file, and
  longer blogs have their dedicated pages, with comments allowed.</p>
<h2>Going beyond</h2>
<p>Of course: you can do a lot more than that&#8212;here is a quick list:</p>
<ul>
  <li>embed pictures;</li>
  <li>embed arbitrary HTML code;</li>
  <li>embed code snippets (zero headache to get syntax highlighting);</li>
  <li>tweak your RSS publishing project to skip TODO headlines</li>
  <li>use timestamps for drafts that need to be published later;</li>
  <li>etc.</li>
</ul>
<p>If you are not afraid of raw code with too few comments, you can dive
  into my <a href=\"http://bzg.fr/emacs.html\">.emacs.el</a> and grab hints from my configuration.</p>
<h2>Why this is cool?</h2>
<ul>
  <li>Writing in Emacs is just pure delight.</li>
  <li>Blog posts are now part of your Org agenda.</li>
  <li>If you already have a habit of taking your notes in Org, then you&#8217;ll
    more easily take a habit of publishing blog posts from these notes.</li>
  <li>Since Org files are plain text, storing a blog as a git repository
    feels natural: people can contribute your blog with&#8230; patches.</li>
</ul>
<p><code>ox-rss.el</code> is not very well known so far, I hope this blog post will
  encourage people to use it!  Let me know if something is not clear.</p>
<h2>Dependencies</h2>
<p>You need to use Emacs version 24.2.1 (or later) and Org 8.0
  (or later).</p>
<h2>Thanks</h2>
<p>Thanks to Sacha Chua&#8217;s post here about <a href=\"http://sachachua.com/blog/2013/09/when-i-blog-with-emacs-and-when-i-blog-with-something-else/\">blogging with Emacs</a>, as this
  triggered me to write this post!  Her post is worth exploring for the
  links it contains to other Emacs-based solutions I didn&#8217;t mentioned
  here&#8230; but I&#8217;m sure you&#8217;ll discuss them in the comments.</p>


") (pubDate nil "Wed, 25 Sep 2013 00:00:00 +0200") (link nil "http://emacs-doctor.com/blogging-from-emacs.html") (guid ((isPermaLink . "true")) "http://emacs-doctor.com/blogging-from-emacs.html") (category nil "libre")) (item nil (title nil "Learn Emacs Lisp in 15 minutes") (description nil "
<p>I was surprised not to find an introduction to Emacs Lisp on
  <a href=\"http://learnxinyminutes.com\">http://learnxinyminutes.com</a> so I created one.  This page is now on
  http://learnxinyminutes.com/docs/elisp/ too.</p>
<p>Comments and feedback are welcome !</p>
<div class=\"highlight\"><pre><span class=\"c1\">;; This gives an introduction to Emacs Lisp in 15 minutes (v0.2d)</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Author: Bastien / @bzg2 / http://bzg.fr</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; First make sure you read this text by Peter Norvig:</span>
<span class=\"c1\">;; http://norvig.com/21-days.html</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Then install GNU Emacs 24.3:</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Debian: apt-get install emacs (or see your distro instructions)</span>
<span class=\"c1\">;; MacOSX: http://emacsformacosx.com/emacs-builds/Emacs-24.3-universal-10.6.8.dmg</span>
<span class=\"c1\">;; Windows: http://ftp.gnu.org/gnu/windows/emacs/emacs-24.3-bin-i386.zip</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; More general information can be found at:</span>
<span class=\"c1\">;; http://www.gnu.org/software/emacs/#Obtaining</span>

<span class=\"c1\">;; Important warning:</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Going through this tutorial won&#39;t damage your computer unless</span>
<span class=\"c1\">;; you get so angry that you throw it on the floor.  In that case,</span>
<span class=\"c1\">;; I hereby decline any responsability.  Have fun!</span>

<span class=\"c1\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span class=\"c1\">;; </span>
<span class=\"c1\">;; Fire up Emacs.</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Hit the `q&#39; key to dismiss the welcome message.</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Now look at the gray line at the bottom of the window:</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; &quot;*scratch*&quot; is the name of the editing space you are now in.</span>
<span class=\"c1\">;; This editing space is called a &quot;buffer&quot;.</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; The scratch buffer is the default buffer when opening Emacs.</span>
<span class=\"c1\">;; You are never editing files: you are editing buffers that you</span>
<span class=\"c1\">;; can save to a file.</span>
<span class=\"c1\">;; </span>
<span class=\"c1\">;; &quot;Lisp interaction&quot; refers to a set of commands available here.</span>
<span class=\"c1\">;; </span>
<span class=\"c1\">;; Emacs has a built-in set of commands available in every buffer,</span>
<span class=\"c1\">;; and several subsets of commands available when you activate a</span>
<span class=\"c1\">;; specific mode.  Here we use the `lisp-interaction-mode&#39;, which</span>
<span class=\"c1\">;; comes with commands to evaluate and navigate within Elisp code.</span>

<span class=\"c1\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Semi-colons start comments anywhere on a line.</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Elisp programs are made of symbolic expressions (&quot;sexps&quot;):</span>
<span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">2</span> <span class=\"mi\">2</span><span class=\"p\">)</span>

<span class=\"c1\">;; This symbolic expression reads as &quot;Add 2 to 2&quot;.</span>

<span class=\"c1\">;; Sexps are enclosed into parentheses, possibly nested:</span>
<span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">2</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">))</span>

<span class=\"c1\">;; A symbolic expression contains atoms or other symbolic</span>
<span class=\"c1\">;; expressions.  In the above examples, 1 and 2 are atoms,</span>
<span class=\"c1\">;; (+ 2 (+ 1 1)) and (+ 1 1) are symbolic expressions.</span>

<span class=\"c1\">;; From `lisp-interaction-mode&#39; you can evaluate sexps.</span>
<span class=\"c1\">;; Put the cursor right after the closing parenthesis then</span>
<span class=\"c1\">;; hold down the control and hit the j keys (&quot;C-j&quot; for short).</span>

<span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">3</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"p\">))</span>
<span class=\"c1\">;;           ^ cursor here</span>
<span class=\"c1\">;; `C-j&#39; =&gt; 6</span>

<span class=\"c1\">;; `C-j&#39; inserts the result of the evaluation in the buffer.</span>

<span class=\"c1\">;; `C-xC-e&#39; displays the same result in Emacs bottom line,</span>
<span class=\"c1\">;; called the &quot;minibuffer&quot;.  We will generally use `C-xC-e&#39;,</span>
<span class=\"c1\">;; as we don&#39;t want to clutter the buffer with useless text.</span>

<span class=\"c1\">;; `setq&#39; stores a value into a variable:</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">my-name</span> <span class=\"s\">&quot;Bastien&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; `C-xC-e&#39; =&gt; &quot;Bastien&quot; (displayed in the mini-buffer)</span>

<span class=\"c1\">;; `insert&#39; will insert &quot;Hello!&quot; where the cursor is:</span>
<span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"s\">&quot;Hello!&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; `C-xC-e&#39; =&gt; &quot;Hello!&quot;</span>

<span class=\"c1\">;; We used `insert&#39; with only one argument &quot;Hello!&quot;, but</span>
<span class=\"c1\">;; we can pass more arguments -- here we use two:</span>

<span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"s\">&quot;Hello&quot;</span> <span class=\"s\">&quot; world!&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; `C-xC-e&#39; =&gt; &quot;Hello world!&quot;</span>

<span class=\"c1\">;; You can use variables instead of strings:</span>
<span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"s\">&quot;Hello, I am &quot;</span> <span class=\"nv\">my-name</span><span class=\"p\">)</span>
<span class=\"c1\">;; `C-xC-e&#39; =&gt; &quot;Hello, I am Bastien&quot;</span>

<span class=\"c1\">;; You can combine sexps into functions:</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">hello</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"s\">&quot;Hello, I am &quot;</span> <span class=\"nv\">my-name</span><span class=\"p\">))</span>
<span class=\"c1\">;; `C-xC-e&#39; =&gt; hello</span>

<span class=\"c1\">;; You can evaluate functions:</span>
<span class=\"p\">(</span><span class=\"nf\">hello</span><span class=\"p\">)</span>
<span class=\"c1\">;; `C-xC-e&#39; =&gt; Hello, I am Bastien</span>

<span class=\"c1\">;; The empty parentheses in the function&#39;s definition means that</span>
<span class=\"c1\">;; it does not accept arguments.  But always using `my-name&#39; is</span>
<span class=\"c1\">;; boring, let&#39;s tell the function to accept one argument (here</span>
<span class=\"c1\">;; the argument is called &quot;name&quot;): </span>

<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">hello</span> <span class=\"p\">(</span><span class=\"nf\">name</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"s\">&quot;Hello &quot;</span> <span class=\"nv\">name</span><span class=\"p\">))</span>
<span class=\"c1\">;; `C-xC-e&#39; =&gt; hello</span>

<span class=\"c1\">;; Now let&#39;s call the function with the string &quot;you&quot; as the value</span>
<span class=\"c1\">;; for its unique argument:</span>
<span class=\"p\">(</span><span class=\"nf\">hello</span> <span class=\"s\">&quot;you&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; `C-xC-e&#39; =&gt; &quot;Hello you&quot;</span>

<span class=\"c1\">;; Yeah!</span>

<span class=\"c1\">;; Take a breath.</span>

<span class=\"c1\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Now switch to a new buffer named &quot;*test*&quot; in another window:</span>

<span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; `C-xC-e&#39;</span>
<span class=\"c1\">;; =&gt; [screen has two windows and cursor is in the *test* buffer]</span>

<span class=\"c1\">;; Mouse over the top window and left-click to go back.  Or you can</span>
<span class=\"c1\">;; use `C-xo&#39; (i.e. hold down control-x and hit o) to go to the other</span>
<span class=\"c1\">;; window interactively.</span>

<span class=\"c1\">;; You can combine several sexps with `progn&#39;:</span>
<span class=\"p\">(</span><span class=\"nf\">progn</span>
  <span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">hello</span> <span class=\"s\">&quot;you&quot;</span><span class=\"p\">))</span>
<span class=\"c1\">;; `C-xC-e&#39;</span>
<span class=\"c1\">;; =&gt; [The screen has two windows and cursor is in the *test* buffer]</span>

<span class=\"c1\">;; Now if you don&#39;t mind, I&#39;ll stop asking you to hit `C-xC-e&#39;: do it</span>
<span class=\"c1\">;; for every sexp that follows.</span>

<span class=\"c1\">;; Always go back to the *scratch* buffer with the mouse or `C-xo&#39;.</span>

<span class=\"c1\">;; It&#39;s often useful to erase the buffer:</span>
<span class=\"p\">(</span><span class=\"nf\">progn</span>
  <span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">erase-buffer</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">hello</span> <span class=\"s\">&quot;there&quot;</span><span class=\"p\">))</span>

<span class=\"c1\">;; Or to go back to the other window:</span>
<span class=\"p\">(</span><span class=\"nf\">progn</span>
  <span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">erase-buffer</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">hello</span> <span class=\"s\">&quot;you&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">))</span>

<span class=\"c1\">;; You can bind a value to a local variable with `let&#39;:</span>
<span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">((</span><span class=\"nf\">local-name</span> <span class=\"s\">&quot;you&quot;</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">erase-buffer</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">hello</span> <span class=\"nv\">local-name</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">))</span>

<span class=\"c1\">;; No need to use `progn&#39; in that case, since `let&#39; also combines</span>
<span class=\"c1\">;; several sexps.</span>

<span class=\"c1\">;; Let&#39;s format a string:</span>
<span class=\"p\">(</span><span class=\"nf\">format</span> <span class=\"s\">&quot;Hello %s!\\n&quot;</span> <span class=\"s\">&quot;visitor&quot;</span><span class=\"p\">)</span>

<span class=\"c1\">;; %s is a place-holder for a string, replaced by &quot;visitor&quot;.</span>
<span class=\"c1\">;; \\n is the newline character.</span>

<span class=\"c1\">;; Let&#39;s refine our function by using format:</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">hello</span> <span class=\"p\">(</span><span class=\"nf\">name</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"p\">(</span><span class=\"nf\">format</span> <span class=\"s\">&quot;Hello %s!\\n&quot;</span> <span class=\"nv\">name</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nf\">hello</span> <span class=\"s\">&quot;you&quot;</span><span class=\"p\">)</span>

<span class=\"c1\">;; Let&#39;s create another function which uses `let&#39;:</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">greeting</span> <span class=\"p\">(</span><span class=\"nf\">name</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">((</span><span class=\"nf\">your-name</span> <span class=\"s\">&quot;Bastien&quot;</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"p\">(</span><span class=\"nf\">format</span> <span class=\"s\">&quot;Hello %s!\\n\\nI am %s.&quot;</span>
                    <span class=\"nv\">name</span>       <span class=\"c1\">; the argument of the function</span>
                    <span class=\"nv\">your-name</span>  <span class=\"c1\">; the let-bound variable &quot;Bastien&quot;</span>
                    <span class=\"p\">))))</span>

<span class=\"c1\">;; And evaluate it:</span>
<span class=\"p\">(</span><span class=\"nf\">greeting</span> <span class=\"s\">&quot;you&quot;</span><span class=\"p\">)</span>

<span class=\"c1\">;; Some function are interactive:</span>
<span class=\"p\">(</span><span class=\"nf\">read-from-minibuffer</span> <span class=\"s\">&quot;Enter your name: &quot;</span><span class=\"p\">)</span>

<span class=\"c1\">;; Evaluating this function returns what you entered at the prompt.</span>

<span class=\"c1\">;; Let&#39;s make our `greeting&#39; function prompt for your name:</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">greeting</span> <span class=\"p\">(</span><span class=\"nf\">from-name</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">((</span><span class=\"nf\">your-name</span> <span class=\"p\">(</span><span class=\"nf\">read-from-minibuffer</span> <span class=\"s\">&quot;Enter your name: &quot;</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"p\">(</span><span class=\"nf\">format</span> <span class=\"s\">&quot;Hello!\\n\\nI am %s and you are %s.&quot;</span>
                    <span class=\"nv\">from-name</span> <span class=\"c1\">; the argument of the function</span>
                    <span class=\"nv\">your-name</span> <span class=\"c1\">; the let-bound var, entered at prompt</span>
                    <span class=\"p\">))))</span>

<span class=\"p\">(</span><span class=\"nf\">greeting</span> <span class=\"s\">&quot;Bastien&quot;</span><span class=\"p\">)</span>

<span class=\"c1\">;; Let&#39;s complete it by displaying the results in the other window:</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">greeting</span> <span class=\"p\">(</span><span class=\"nf\">from-name</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">((</span><span class=\"nf\">your-name</span> <span class=\"p\">(</span><span class=\"nf\">read-from-minibuffer</span> <span class=\"s\">&quot;Enter your name: &quot;</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">erase-buffer</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"p\">(</span><span class=\"nf\">format</span> <span class=\"s\">&quot;Hello %s!\\n\\nI am %s.&quot;</span> <span class=\"nv\">your-name</span> <span class=\"nv\">from-name</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nf\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>

<span class=\"c1\">;; Now test it:</span>
<span class=\"p\">(</span><span class=\"nf\">greeting</span> <span class=\"s\">&quot;Bastien&quot;</span><span class=\"p\">)</span>

<span class=\"c1\">;; Take a breath.</span>

<span class=\"c1\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Let&#39;s store a list of names:</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">list-of-names</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;Sarah&quot;</span> <span class=\"s\">&quot;Chloe&quot;</span> <span class=\"s\">&quot;Mathilde&quot;</span><span class=\"p\">))</span>

<span class=\"c1\">;; Get the first element of this list with `car&#39;:</span>
<span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">list-of-names</span><span class=\"p\">)</span>

<span class=\"c1\">;; Get a list of all but the first element with `cdr&#39;:</span>
<span class=\"p\">(</span><span class=\"nb\">cdr </span><span class=\"nv\">list-of-names</span><span class=\"p\">)</span>

<span class=\"c1\">;; Add an element to the beginning of a list with `push&#39;:</span>
<span class=\"p\">(</span><span class=\"nf\">push</span> <span class=\"s\">&quot;Stephanie&quot;</span> <span class=\"nv\">list-of-names</span><span class=\"p\">)</span>

<span class=\"c1\">;; NOTE: `car&#39; and `cdr&#39; don&#39;t modify the list, but `push&#39; does.</span>
<span class=\"c1\">;; This is an important difference: some functions don&#39;t have any</span>
<span class=\"c1\">;; side-effects (like `car&#39;) while others have (like `push&#39;).</span>

<span class=\"c1\">;; Let&#39;s call `hello&#39; for each element in `list-of-names&#39;:</span>
<span class=\"p\">(</span><span class=\"nf\">mapcar</span> <span class=\"ss\">&#39;hello</span> <span class=\"nv\">list-of-names</span><span class=\"p\">)</span>

<span class=\"c1\">;; Refine `greeting&#39; to say hello to everyone in `list-of-names&#39;:</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">greeting</span> <span class=\"p\">()</span>
    <span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">erase-buffer</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">mapcar</span> <span class=\"ss\">&#39;hello</span> <span class=\"nv\">list-of-names</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nf\">greeting</span><span class=\"p\">)</span>

<span class=\"c1\">;; Remember the `hello&#39; function we defined above?  It takes one</span>
<span class=\"c1\">;; argument, a name.  `mapcar&#39; calls `hello&#39;, successively using each</span>
<span class=\"c1\">;; element of `list-of-names&#39; as the argument for `hello&#39;.</span>

<span class=\"c1\">;; Now let&#39;s arrange a bit what we have in the displayed buffer:</span>

<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">replace-hello-by-bonjour</span> <span class=\"p\">()</span>
    <span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">goto-char</span> <span class=\"p\">(</span><span class=\"nf\">point-min</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nf\">while</span> <span class=\"p\">(</span><span class=\"nf\">search-forward</span> <span class=\"s\">&quot;Hello&quot;</span><span class=\"p\">)</span>
      <span class=\"p\">(</span><span class=\"nf\">replace-match</span> <span class=\"s\">&quot;Bonjour&quot;</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nf\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">))</span>

<span class=\"c1\">;; (goto-char (point-min)) goes to the beginning of the buffer.</span>
<span class=\"c1\">;; (search-forward &quot;Hello&quot;) searches for the string &quot;Hello&quot;.</span>
<span class=\"c1\">;; (while x y) evaluates the y sexp(s) while x returns something.</span>
<span class=\"c1\">;; If x returns `nil&#39; (nothing), we exit the while loop.</span>

<span class=\"p\">(</span><span class=\"nf\">replace-hello-by-bonjour</span><span class=\"p\">)</span>

<span class=\"c1\">;; You should see all occurrences of &quot;Hello&quot; in the *test* buffer</span>
<span class=\"c1\">;; replaced by &quot;Bonjour&quot;.</span>

<span class=\"c1\">;; You should also get an error: &quot;Search failed: Hello&quot;.</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; To avoid this error, you need to tell `search-forward&#39; whether it</span>
<span class=\"c1\">;; should stop searching at some point in the buffer, and whether it</span>
<span class=\"c1\">;; should silently fail when nothing is found:</span>

<span class=\"c1\">;; (search-forward &quot;Hello&quot; nil t) does the trick:</span>

<span class=\"c1\">;; The `nil&#39; argument says: the search is not bound to a position.</span>
<span class=\"c1\">;; The `t&#39; argument says: silently fail when nothing is found.</span>

<span class=\"c1\">;; We use this sexp in the function below, which doesn&#39;t throw an error:</span>

<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">hello-to-bonjour</span> <span class=\"p\">()</span>
    <span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">erase-buffer</span><span class=\"p\">)</span>
    <span class=\"c1\">;; Say hello to names in `list-of-names&#39;</span>
    <span class=\"p\">(</span><span class=\"nf\">mapcar</span> <span class=\"ss\">&#39;hello</span> <span class=\"nv\">list-of-names</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">goto-char</span> <span class=\"p\">(</span><span class=\"nf\">point-min</span><span class=\"p\">))</span>
    <span class=\"c1\">;; Replace &quot;Hello&quot; by &quot;Bonjour&quot;</span>
    <span class=\"p\">(</span><span class=\"nf\">while</span> <span class=\"p\">(</span><span class=\"nf\">search-forward</span> <span class=\"s\">&quot;Hello&quot;</span> <span class=\"nv\">nil</span> <span class=\"nv\">t</span><span class=\"p\">)</span>
      <span class=\"p\">(</span><span class=\"nf\">replace-match</span> <span class=\"s\">&quot;Bonjour&quot;</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nf\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nf\">hello-to-bonjour</span><span class=\"p\">)</span>

<span class=\"c1\">;; Let&#39;s colorize the names:</span>

<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">boldify-names</span> <span class=\"p\">()</span>
    <span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">goto-char</span> <span class=\"p\">(</span><span class=\"nf\">point-min</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nf\">while</span> <span class=\"p\">(</span><span class=\"nf\">re-search-forward</span> <span class=\"s\">&quot;Bonjour \\\\(.+\\\\)!&quot;</span> <span class=\"nv\">nil</span> <span class=\"nv\">t</span><span class=\"p\">)</span>
      <span class=\"p\">(</span><span class=\"nf\">add-text-properties</span> <span class=\"p\">(</span><span class=\"nf\">match-beginning</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
                           <span class=\"p\">(</span><span class=\"nf\">match-end</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
                           <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"ss\">&#39;face</span> <span class=\"ss\">&#39;bold</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"nf\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">))</span>

<span class=\"c1\">;; This functions introduces `re-search-forward&#39;: instead of</span>
<span class=\"c1\">;; searching for the string &quot;Bonjour&quot;, you search for a pattern,</span>
<span class=\"c1\">;; using a &quot;regular expression&quot; (abbreviated in the prefix &quot;re-&quot;).</span>

<span class=\"c1\">;; The regular expression is &quot;Bonjour \\\\(.+\\\\)!&quot; and it reads:</span>
<span class=\"c1\">;; the string &quot;Bonjour &quot;, and</span>
<span class=\"c1\">;; a group of           | this is the \\\\( ... \\\\) construct</span>
<span class=\"c1\">;;   any character      | this is the .</span>
<span class=\"c1\">;;   possibly repeated  | this is the +</span>
<span class=\"c1\">;; and the &quot;!&quot; string.</span>

<span class=\"c1\">;; Ready?  Test it!</span>

<span class=\"p\">(</span><span class=\"nf\">boldify-names</span><span class=\"p\">)</span>

<span class=\"c1\">;; `add-text-properties&#39; adds... text properties, like a face.</span>

<span class=\"c1\">;; OK, we are done.  Happy hacking!</span>

<span class=\"c1\">;; If you want to know more about a variable or a function:</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; C-h v a-variable RET</span>
<span class=\"c1\">;; C-h f a-function RET</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; To read the Emacs Lisp manual with Emacs:</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; C-h i m elisp RET</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; To read an online introduction to Emacs Lisp:</span>
<span class=\"c1\">;; https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html</span>

<span class=\"c1\">;; Thanks to these people for their feedback and suggestions:</span>
<span class=\"c1\">;; - Wes Hardaker</span>
<span class=\"c1\">;; - notbob</span>
<span class=\"c1\">;; - Kevin Montuori</span>
<span class=\"c1\">;; - Arne Babenhauserheide</span>
<span class=\"c1\">;; - Alan Schmitt</span>
<span class=\"c1\">;; - LinXitoW</span>
<span class=\"c1\">;; - Aaron Meurer</span>
</pre></div>


") (pubDate nil "Thu, 25 Jul 2013 00:00:00 +0200") (link nil "http://emacs-doctor.com/learn-emacs-lisp-in-15-minutes.html") (guid ((isPermaLink . "true")) "http://emacs-doctor.com/learn-emacs-lisp-in-15-minutes.html") (category nil "libre")) (item nil (title nil "Bastien Guerry Orgmode Emacs Chat with Sacha Chua") (description nil "
<p>Thanks to Sacha Chua for inviting me to chat with her!  (Check <a href=\"http://sachachua.com/blog/2013/05/emacs-chat-bastien-guerry/\">her blog
  post</a> about it.)  So here are some bits about Emacs, Org-mode&#8230; and a few
  others things.</p>
<center>
<iframe width=\"420\" height=\"315\" src=\"http://www.youtube.com/embed/fnk0TJC7iJI?rel=0\" frameborder=\"0\" allowfullscreen></iframe>
</center>
<br/>


") (pubDate nil "Sun, 26 May 2013 00:00:00 +0200") (link nil "http://emacs-doctor.com/bastien_guerry_orgmode_emacs_chat.html") (guid ((isPermaLink . "true")) "http://emacs-doctor.com/bastien_guerry_orgmode_emacs_chat.html") (category nil "libre")) (item nil (title nil "How to Become a Hacker (in the 21st century)?") (description nil "
<center>
<iframe src=\"http://www.slideshare.net/slideshow/embed_code/16070695\" width=\"768\" height=\"630\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px\" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"http://www.slideshare.net/bzg/how-to-become-a-hacker-16070695\" title=\"How to Become A Hacker?\" target=\"_blank\">How to Become A Hacker?</a> </strong> from <strong><a href=\"http://www.slideshare.net/bzg\" target=\"_blank\">Bastien Guerry</a></strong> </div>
</center>


") (pubDate nil "Fri, 18 Jan 2013 00:00:00 +0100") (link nil "http://emacs-doctor.com/how-to-become-a-hacker.html") (guid ((isPermaLink . "true")) "http://emacs-doctor.com/how-to-become-a-hacker.html") (category nil "libre")) (item nil (title nil "The Orgfather") (description nil "
<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">
(
  {video_url: \"http://vimeo.com/28194358\",
   video_config: {width: 800, height: 600}
}
)
</script>


") (pubDate nil "Sun, 28 Aug 2011 00:00:00 +0200") (link nil "http://emacs-doctor.com/theorgfather.html") (guid ((isPermaLink . "true")) "http://emacs-doctor.com/theorgfather.html") (category nil "libre")) (item nil (title nil "Emacs Org-mode at the GNU Hackers Meeting 2011") (description nil "
<center>
<iframe src=\"http://www.slideshare.net/slideshow/embed_code/9188827\" width=\"768\" height=\"630\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"http://www.slideshare.net/bzg/emacs-orgmode-gnu-hackers-meeting-paris-2011\" title=\"Emacs org-mode -- GNU hackers meeting Paris 2011\" target=\"_blank\">Emacs org-mode &#8211; GNU hackers meeting Paris 2011</a> </strong> from <strong><a href=\"http://www.slideshare.net/bzg\" target=\"_blank\">Bastien Guerry</a></strong> </div>
</center>


") (pubDate nil "Sun, 28 Aug 2011 00:00:00 +0200") (link nil "http://emacs-doctor.com/emacs-orgmode-gnu-hackers-meeting-2011.html") (guid ((isPermaLink . "true")) "http://emacs-doctor.com/emacs-orgmode-gnu-hackers-meeting-2011.html") (category nil "libre")))) ("Emacs, naked." "<blockquote>
<p>When it gets too cold, you can always put on more layers of
clothing. But when it gets too hot, after a while you can’t
take off any more. – RMS</p>
</blockquote>
<p>This is GNU Emacs:</p>
<p><img src=\"u/bare-emacs.png\" alt=\"u/bare-emacs.png\" /></p>
<p>Now let the show begin…</p>
<p><i>Code snippets are for GNU Emacs 24.3 and above.</i></p>
<h2>A blank stage</h2>
<div class=\"highlight\"><pre><span class=\"c1\">;; Prevent the cursor from blinking</span>
<span class=\"p\">(</span><span class=\"nf\">blink-cursor-mode</span> <span class=\"mi\">0</span><span class=\"p\">)</span>
<span class=\"c1\">;; Don't use messages that you don't read</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">initial-scratch-message</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">inhibit-startup-message</span> <span class=\"nv\">t</span><span class=\"p\">)</span>
<span class=\"c1\">;; Don't let Emacs hurt your ears</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">visible-bell</span> <span class=\"nv\">t</span><span class=\"p\">)</span>
<span class=\"c1\">;; You need to set `inhibit-startup-echo-area-message' from the</span>
<span class=\"c1\">;; customization interface:</span>
<span class=\"c1\">;; M-x customize-variable RET inhibit-startup-echo-area-message RET</span>
<span class=\"c1\">;; then enter your username</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">inhibit-startup-echo-area-message</span> <span class=\"s\">&quot;guerry&quot;</span><span class=\"p\">)</span>
</pre></div>
<p><img src=\"u/emacs-blank-stage.png\" alt=\"u/emacs-blank-stage.png\" /></p>
<h2>Break the walls</h2>
<div class=\"highlight\"><pre><span class=\"c1\">;; This is bound to f11 in Emacs 24.4</span>
<span class=\"p\">(</span><span class=\"nf\">toggle-frame-fullscreen</span><span class=\"p\">)</span>
<span class=\"c1\">;; Who use the bar to scroll?</span>
<span class=\"p\">(</span><span class=\"nf\">scroll-bar-mode</span> <span class=\"mi\">0</span><span class=\"p\">)</span>
</pre></div>
<p><img src=\"u/emacs-fullscreen.png\" alt=\"u/emacs-fullscreen.png\" /></p>
<h2>The sky is the limit</h2>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">tool-bar-mode</span> <span class=\"mi\">0</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">menu-bar-mode</span> <span class=\"mi\">0</span><span class=\"p\">)</span>
<span class=\"c1\">;; You can also set the initial frame parameters</span>
<span class=\"c1\">;; (setq initial-frame-alist</span>
<span class=\"c1\">;;       '((menu-bar-lines . 0)</span>
<span class=\"c1\">;;         (tool-bar-lines . 0)))</span>
</pre></div>
<p><img src=\"u/emacs-clear-top.png\" alt=\"u/emacs-clear-top.png\" /></p>
<h2>Groundless fear</h2>
<div class=\"highlight\"><pre><span class=\"c1\">;; See http://bzg.fr/emacs-hide-mode-line.html</span>
<span class=\"p\">(</span><span class=\"nf\">defvar-local</span> <span class=\"nv\">hidden-mode-line-mode</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defvar-local</span> <span class=\"nv\">hide-mode-line</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">define-minor-mode</span> <span class=\"nv\">hidden-mode-line-mode</span>
<span class=\"s\">&quot;Minor mode to hide the mode-line in the current buffer.&quot;</span>
<span class=\"nv\">:init-value</span> <span class=\"nv\">nil</span>
<span class=\"nv\">:global</span> <span class=\"nv\">nil</span>
<span class=\"nv\">:variable</span> <span class=\"nv\">hidden-mode-line-mode</span>
<span class=\"nv\">:group</span> <span class=\"ss\">'editing-basics</span>
<span class=\"p\">(</span><span class=\"k\">if </span><span class=\"nv\">hidden-mode-line-mode</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">hide-mode-line</span> <span class=\"nv\">mode-line-format</span>
<span class=\"nv\">mode-line-format</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">mode-line-format</span> <span class=\"nv\">hide-mode-line</span>
<span class=\"nv\">hide-mode-line</span> <span class=\"nv\">nil</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">force-mode-line-update</span><span class=\"p\">)</span>
<span class=\"c1\">;; Apparently force-mode-line-update is not always enough to</span>
<span class=\"c1\">;; redisplay the mode-line</span>
<span class=\"p\">(</span><span class=\"nf\">redraw-display</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">when</span> <span class=\"p\">(</span><span class=\"k\">and </span><span class=\"p\">(</span><span class=\"nf\">called-interactively-p</span> <span class=\"ss\">'interactive</span><span class=\"p\">)</span>
<span class=\"nv\">hidden-mode-line-mode</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">run-with-idle-timer</span>
<span class=\"mi\">0</span> <span class=\"nv\">nil</span> <span class=\"ss\">'message</span>
<span class=\"p\">(</span><span class=\"nf\">concat</span> <span class=\"s\">&quot;Hidden Mode Line Mode enabled.  &quot;</span>
<span class=\"s\">&quot;Use M-x hidden-mode-line-mode to make the mode-line appear.&quot;</span><span class=\"p\">))))</span>
<span class=\"c1\">;; Activate hidden-mode-line-mode</span>
<span class=\"p\">(</span><span class=\"nf\">hidden-mode-line-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
<span class=\"c1\">;; If you want to hide the mode-line in all new buffers</span>
<span class=\"c1\">;; (add-hook 'after-change-major-mode-hook 'hidden-mode-line-mode)</span>
<span class=\"c1\">;; Alternatively, you can paint your mode-line in White but then</span>
<span class=\"c1\">;; you'll have to manually paint it in black again</span>
<span class=\"c1\">;; (custom-set-faces</span>
<span class=\"c1\">;;  '(mode-line-highlight ((t nil)))</span>
<span class=\"c1\">;;  '(mode-line ((t (:foreground &quot;white&quot; :background &quot;white&quot;))))</span>
<span class=\"c1\">;;  '(mode-line-inactive ((t (:background &quot;white&quot; :foreground &quot;white&quot;)))))</span>
</pre></div>
<p><img src=\"u/emacs-clear-bottom.png\" alt=\"u/emacs-clear-bottom.png\" /></p>
<p>Well… it’s more interesting with some text:</p>
<p><img src=\"u/emacs-clear-bottom-text.png\" alt=\"u/emacs-clear-bottom-text.png\" /></p>
<h2>In the limelight</h2>
<div class=\"highlight\"><pre><span class=\"c1\">;; A small minor mode to use a big fringe</span>
<span class=\"p\">(</span><span class=\"nf\">defvar</span> <span class=\"nv\">bzg-big-fringe-mode</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">define-minor-mode</span> <span class=\"nv\">bzg-big-fringe-mode</span>
<span class=\"s\">&quot;Minor mode to use big fringe in the current buffer.&quot;</span>
<span class=\"nv\">:init-value</span> <span class=\"nv\">nil</span>
<span class=\"nv\">:global</span> <span class=\"nv\">t</span>
<span class=\"nv\">:variable</span> <span class=\"nv\">bzg-big-fringe-mode</span>
<span class=\"nv\">:group</span> <span class=\"ss\">'editing-basics</span>
<span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"nv\">bzg-big-fringe-mode</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">set-fringe-style</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">set-fringe-mode</span>
<span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"p\">(</span><span class=\"nf\">frame-pixel-width</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"mi\">100</span> <span class=\"p\">(</span><span class=\"nf\">frame-char-width</span><span class=\"p\">)))</span>
<span class=\"mi\">2</span><span class=\"p\">))))</span>
<span class=\"c1\">;; Now activate this global minor mode</span>
<span class=\"p\">(</span><span class=\"nf\">bzg-big-fringe-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
<span class=\"c1\">;; To activate the fringe by default and deactivate it when windows</span>
<span class=\"c1\">;; are split vertically, uncomment this:</span>
<span class=\"c1\">;; (add-hook 'window-configuration-change-hook</span>
<span class=\"c1\">;;           (lambda ()</span>
<span class=\"c1\">;;             (if (delq nil</span>
<span class=\"c1\">;;                       (let ((fw (frame-width)))</span>
<span class=\"c1\">;;                         (mapcar (lambda(w) (&lt; (window-width w) (/ fw 2)))</span>
<span class=\"c1\">;;                                 (window-list))))</span>
<span class=\"c1\">;;                 (bzg-big-fringe-mode 0)</span>
<span class=\"c1\">;;               (bzg-big-fringe-mode 1))))</span>
<span class=\"c1\">;; Use a minimal cursor</span>
<span class=\"c1\">;; (setq default-cursor-type 'hbar)</span>
<span class=\"c1\">;; Get rid of the indicators in the fringe</span>
<span class=\"p\">(</span><span class=\"nf\">mapcar</span> <span class=\"p\">(</span><span class=\"nf\">lambda</span><span class=\"p\">(</span><span class=\"nf\">fb</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">set-fringe-bitmap-face</span> <span class=\"nv\">fb</span> <span class=\"ss\">'org-hide</span><span class=\"p\">))</span>
<span class=\"nv\">fringe-bitmaps</span><span class=\"p\">)</span>
</pre></div>
<p><img src=\"u/emacs-big-fringe.png\" alt=\"u/emacs-big-fringe.png\" /></p>
<p>Oh, but you don’t want the grey fringe?</p>
<div class=\"highlight\"><pre><span class=\"c1\">;; Set the color of the fringe</span>
<span class=\"p\">(</span><span class=\"nf\">custom-set-faces</span>
<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"nv\">fringe</span> <span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:background</span> <span class=\"s\">&quot;white&quot;</span><span class=\"p\">)))))</span>
</pre></div>
<p><img src=\"u/emacs-big-white-fringe.png\" alt=\"u/emacs-big-white-fringe.png\" /></p>
<h2>Let’s turn off the light…</h2>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">custom-set-faces</span>
<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"nv\">default</span> <span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:background</span> <span class=\"s\">&quot;black&quot;</span> <span class=\"nv\">:foreground</span> <span class=\"s\">&quot;grey&quot;</span><span class=\"p\">))))</span>
<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"nv\">fringe</span> <span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:background</span> <span class=\"s\">&quot;black&quot;</span><span class=\"p\">)))))</span>
</pre></div>
<p><img src=\"u/emacs-by-night.png\" alt=\"u/emacs-by-night.png\" /></p>
<h2>Enjoy !</h2>
<p>(Keep the sound muted.)</p>
<center>
<video style=\"width:100%;margin:auto;\" controls muted>
<source src=\"u/emacs-strip.ogv\" type=\"video/ogg\">
</video>
</center>
<p>Download the video <a href=\"u/emacs-strip.ogv\">here</a>.</p>
<p>Download the full Elisp file <a href=\"u/emacs-strip.el\">here</a> or read it as a <a href=\"https://gist.github.com/bzg/8578998\">gist</a>.</p>
<h2>Bonus trick</h2>
<p>Ok, sometimes I <b>still</b> want to see what’s in the mode-line.</p>
<p>I use the <code>C-s-SPC</code> key for this (Control Super Space) with
this simple function to display the mode-line in the header:</p>
<div class=\"highlight\"><pre><span class=\"c1\">;; Command to toggle the display of the mode-line as a header</span>
<span class=\"p\">(</span><span class=\"nf\">defvar-local</span> <span class=\"nv\">header-line-format</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">mode-line-in-header</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nf\">interactive</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"nv\">header-line-format</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">header-line-format</span> <span class=\"nv\">mode-line-format</span>
<span class=\"nv\">mode-line-format</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">mode-line-format</span> <span class=\"nv\">header-line-format</span>
<span class=\"nv\">header-line-format</span> <span class=\"nv\">nil</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">set-window-buffer</span> <span class=\"nv\">nil</span> <span class=\"p\">(</span><span class=\"nf\">current-buffer</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">global-set-key</span> <span class=\"p\">(</span><span class=\"nf\">kbd</span> <span class=\"s\">&quot;C-s-SPC&quot;</span><span class=\"p\">)</span> <span class=\"ss\">'mode-line-in-header</span><span class=\"p\">)</span>
</pre></div>
<p><img src=\"u/emacs-mode-line-header.png\" alt=\"u/emacs-mode-line-header.png\" /></p>
<p>You can check out the <a href=\"https://news.ycombinator.com/item?id%3D7107893\">discussion</a> on Hacker News.</p>" "http://emacs-doctor.com/emacs-strip-tease.html" (21214 64496) old 1 nil nil ((title nil "Emacs, naked.") (description nil "
<blockquote>
  <p>When it gets too cold, you can always put on more layers of
    clothing. But when it gets too hot, after a while you can&#8217;t
    take off any more. &#8211; RMS</p>
</blockquote>
<p>This is GNU Emacs:</p>
<p><img src=\"u/bare-emacs.png\" alt=\"u/bare-emacs.png\" /></p>
<p>Now let the show begin&#8230;</p>
<p><i>Code snippets are for GNU Emacs 24.3 and above.</i></p>
<h2>A blank stage</h2>
<div class=\"highlight\"><pre><span class=\"c1\">;; Prevent the cursor from blinking</span>
<span class=\"p\">(</span><span class=\"nf\">blink-cursor-mode</span> <span class=\"mi\">0</span><span class=\"p\">)</span>
<span class=\"c1\">;; Don&#39;t use messages that you don&#39;t read</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">initial-scratch-message</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">inhibit-startup-message</span> <span class=\"nv\">t</span><span class=\"p\">)</span>
<span class=\"c1\">;; Don&#39;t let Emacs hurt your ears</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">visible-bell</span> <span class=\"nv\">t</span><span class=\"p\">)</span>

<span class=\"c1\">;; You need to set `inhibit-startup-echo-area-message&#39; from the</span>
<span class=\"c1\">;; customization interface:</span>
<span class=\"c1\">;; M-x customize-variable RET inhibit-startup-echo-area-message RET</span>
<span class=\"c1\">;; then enter your username</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">inhibit-startup-echo-area-message</span> <span class=\"s\">&quot;guerry&quot;</span><span class=\"p\">)</span>
</pre></div>
<p><img src=\"u/emacs-blank-stage.png\" alt=\"u/emacs-blank-stage.png\" /></p>
<h2>Break the walls</h2>
<div class=\"highlight\"><pre><span class=\"c1\">;; This is bound to f11 in Emacs 24.4</span>
<span class=\"p\">(</span><span class=\"nf\">toggle-frame-fullscreen</span><span class=\"p\">)</span> 
<span class=\"c1\">;; Who use the bar to scroll?</span>
<span class=\"p\">(</span><span class=\"nf\">scroll-bar-mode</span> <span class=\"mi\">0</span><span class=\"p\">)</span>
</pre></div>
<p><img src=\"u/emacs-fullscreen.png\" alt=\"u/emacs-fullscreen.png\" /></p>
<h2>The sky is the limit</h2>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">tool-bar-mode</span> <span class=\"mi\">0</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">menu-bar-mode</span> <span class=\"mi\">0</span><span class=\"p\">)</span>

<span class=\"c1\">;; You can also set the initial frame parameters</span>
<span class=\"c1\">;; (setq initial-frame-alist</span>
<span class=\"c1\">;;       &#39;((menu-bar-lines . 0)</span>
<span class=\"c1\">;;         (tool-bar-lines . 0)))</span>
</pre></div>
<p><img src=\"u/emacs-clear-top.png\" alt=\"u/emacs-clear-top.png\" /></p>
<h2>Groundless fear</h2>
<div class=\"highlight\"><pre><span class=\"c1\">;; See http://bzg.fr/emacs-hide-mode-line.html</span>
<span class=\"p\">(</span><span class=\"nf\">defvar-local</span> <span class=\"nv\">hidden-mode-line-mode</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defvar-local</span> <span class=\"nv\">hide-mode-line</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>

<span class=\"p\">(</span><span class=\"nf\">define-minor-mode</span> <span class=\"nv\">hidden-mode-line-mode</span>
  <span class=\"s\">&quot;Minor mode to hide the mode-line in the current buffer.&quot;</span>
  <span class=\"nv\">:init-value</span> <span class=\"nv\">nil</span>
  <span class=\"nv\">:global</span> <span class=\"nv\">nil</span>
  <span class=\"nv\">:variable</span> <span class=\"nv\">hidden-mode-line-mode</span>
  <span class=\"nv\">:group</span> <span class=\"ss\">&#39;editing-basics</span>
  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"nv\">hidden-mode-line-mode</span>
      <span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">hide-mode-line</span> <span class=\"nv\">mode-line-format</span>
            <span class=\"nv\">mode-line-format</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">mode-line-format</span> <span class=\"nv\">hide-mode-line</span>
          <span class=\"nv\">hide-mode-line</span> <span class=\"nv\">nil</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"nf\">force-mode-line-update</span><span class=\"p\">)</span>
  <span class=\"c1\">;; Apparently force-mode-line-update is not always enough to</span>
  <span class=\"c1\">;; redisplay the mode-line</span>
  <span class=\"p\">(</span><span class=\"nf\">redraw-display</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">when</span> <span class=\"p\">(</span><span class=\"k\">and </span><span class=\"p\">(</span><span class=\"nf\">called-interactively-p</span> <span class=\"ss\">&#39;interactive</span><span class=\"p\">)</span>
             <span class=\"nv\">hidden-mode-line-mode</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">run-with-idle-timer</span>
     <span class=\"mi\">0</span> <span class=\"nv\">nil</span> <span class=\"ss\">&#39;message</span>
     <span class=\"p\">(</span><span class=\"nf\">concat</span> <span class=\"s\">&quot;Hidden Mode Line Mode enabled.  &quot;</span>
             <span class=\"s\">&quot;Use M-x hidden-mode-line-mode to make the mode-line appear.&quot;</span><span class=\"p\">))))</span>

<span class=\"c1\">;; Activate hidden-mode-line-mode</span>
<span class=\"p\">(</span><span class=\"nf\">hidden-mode-line-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>

<span class=\"c1\">;; If you want to hide the mode-line in all new buffers</span>
<span class=\"c1\">;; (add-hook &#39;after-change-major-mode-hook &#39;hidden-mode-line-mode)</span>

<span class=\"c1\">;; Alternatively, you can paint your mode-line in White but then</span>
<span class=\"c1\">;; you&#39;ll have to manually paint it in black again</span>
<span class=\"c1\">;; (custom-set-faces</span>
<span class=\"c1\">;;  &#39;(mode-line-highlight ((t nil)))</span>
<span class=\"c1\">;;  &#39;(mode-line ((t (:foreground &quot;white&quot; :background &quot;white&quot;))))</span>
<span class=\"c1\">;;  &#39;(mode-line-inactive ((t (:background &quot;white&quot; :foreground &quot;white&quot;)))))</span>
</pre></div>
<p><img src=\"u/emacs-clear-bottom.png\" alt=\"u/emacs-clear-bottom.png\" /></p>
<p>Well&#8230; it&#8217;s more interesting with some text:</p>
<p><img src=\"u/emacs-clear-bottom-text.png\" alt=\"u/emacs-clear-bottom-text.png\" /></p>
<h2>In the limelight</h2>
<div class=\"highlight\"><pre><span class=\"c1\">;; A small minor mode to use a big fringe</span>
<span class=\"p\">(</span><span class=\"nf\">defvar</span> <span class=\"nv\">bzg-big-fringe-mode</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">define-minor-mode</span> <span class=\"nv\">bzg-big-fringe-mode</span>
  <span class=\"s\">&quot;Minor mode to use big fringe in the current buffer.&quot;</span>
  <span class=\"nv\">:init-value</span> <span class=\"nv\">nil</span>
  <span class=\"nv\">:global</span> <span class=\"nv\">t</span>
  <span class=\"nv\">:variable</span> <span class=\"nv\">bzg-big-fringe-mode</span>
  <span class=\"nv\">:group</span> <span class=\"ss\">&#39;editing-basics</span>
  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"nv\">bzg-big-fringe-mode</span><span class=\"p\">)</span>
      <span class=\"p\">(</span><span class=\"nf\">set-fringe-style</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">set-fringe-mode</span>
     <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"p\">(</span><span class=\"nb\">- </span><span class=\"p\">(</span><span class=\"nf\">frame-pixel-width</span><span class=\"p\">)</span>
           <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"mi\">100</span> <span class=\"p\">(</span><span class=\"nf\">frame-char-width</span><span class=\"p\">)))</span>
        <span class=\"mi\">2</span><span class=\"p\">))))</span>

<span class=\"c1\">;; Now activate this global minor mode</span>
<span class=\"p\">(</span><span class=\"nf\">bzg-big-fringe-mode</span> <span class=\"mi\">1</span><span class=\"p\">)</span>

<span class=\"c1\">;; To activate the fringe by default and deactivate it when windows</span>
<span class=\"c1\">;; are split vertically, uncomment this:</span>
<span class=\"c1\">;; (add-hook &#39;window-configuration-change-hook</span>
<span class=\"c1\">;;           (lambda ()</span>
<span class=\"c1\">;;             (if (delq nil</span>
<span class=\"c1\">;;                       (let ((fw (frame-width)))</span>
<span class=\"c1\">;;                         (mapcar (lambda(w) (&lt; (window-width w) (/ fw 2)))</span>
<span class=\"c1\">;;                                 (window-list))))</span>
<span class=\"c1\">;;                 (bzg-big-fringe-mode 0)</span>
<span class=\"c1\">;;               (bzg-big-fringe-mode 1))))</span>

<span class=\"c1\">;; Use a minimal cursor</span>
<span class=\"c1\">;; (setq default-cursor-type &#39;hbar)</span>

<span class=\"c1\">;; Get rid of the indicators in the fringe</span>
<span class=\"p\">(</span><span class=\"nf\">mapcar</span> <span class=\"p\">(</span><span class=\"nf\">lambda</span><span class=\"p\">(</span><span class=\"nf\">fb</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">set-fringe-bitmap-face</span> <span class=\"nv\">fb</span> <span class=\"ss\">&#39;org-hide</span><span class=\"p\">))</span>
        <span class=\"nv\">fringe-bitmaps</span><span class=\"p\">)</span>
</pre></div>
<p><img src=\"u/emacs-big-fringe.png\" alt=\"u/emacs-big-fringe.png\" /></p>
<p>Oh, but you don&#8217;t want the grey fringe?</p>
<div class=\"highlight\"><pre><span class=\"c1\">;; Set the color of the fringe</span>
<span class=\"p\">(</span><span class=\"nf\">custom-set-faces</span>
 <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">fringe</span> <span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:background</span> <span class=\"s\">&quot;white&quot;</span><span class=\"p\">)))))</span>
</pre></div>
<p><img src=\"u/emacs-big-white-fringe.png\" alt=\"u/emacs-big-white-fringe.png\" /></p>
<h2>Let&#8217;s turn off the light&#8230;</h2>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">custom-set-faces</span>
  <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">default</span> <span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:background</span> <span class=\"s\">&quot;black&quot;</span> <span class=\"nv\">:foreground</span> <span class=\"s\">&quot;grey&quot;</span><span class=\"p\">))))</span>
  <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"nv\">fringe</span> <span class=\"p\">((</span><span class=\"nf\">t</span> <span class=\"p\">(</span><span class=\"nf\">:background</span> <span class=\"s\">&quot;black&quot;</span><span class=\"p\">)))))</span>
</pre></div>
<p><img src=\"u/emacs-by-night.png\" alt=\"u/emacs-by-night.png\" /></p>
<h2>Enjoy !</h2>
<p>(Keep the sound muted.)</p>
 <center>
 <video style=\"width:100%;margin:auto;\" controls muted>
   <source src=\"u/emacs-strip.ogv\" type=\"video/ogg\">
 </video>
 </center>
<p>Download the video <a href=\"u/emacs-strip.ogv\">here</a>.</p>
<p>Download the full Elisp file <a href=\"u/emacs-strip.el\">here</a> or read it as a <a href=\"https://gist.github.com/bzg/8578998\">gist</a>.</p>
<h2>Bonus trick</h2>
<p>Ok, sometimes I <b>still</b> want to see what&#8217;s in the mode-line.</p>
<p>I use the <code>C-s-SPC</code> key for this (Control Super Space) with
  this simple function to display the mode-line in the header:</p>
<div class=\"highlight\"><pre><span class=\"c1\">;; Command to toggle the display of the mode-line as a header</span>
<span class=\"p\">(</span><span class=\"nf\">defvar-local</span> <span class=\"nv\">header-line-format</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">mode-line-in-header</span> <span class=\"p\">()</span>
  <span class=\"p\">(</span><span class=\"nf\">interactive</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"nv\">header-line-format</span><span class=\"p\">)</span>
      <span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">header-line-format</span> <span class=\"nv\">mode-line-format</span>
            <span class=\"nv\">mode-line-format</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">mode-line-format</span> <span class=\"nv\">header-line-format</span>
          <span class=\"nv\">header-line-format</span> <span class=\"nv\">nil</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"nf\">set-window-buffer</span> <span class=\"nv\">nil</span> <span class=\"p\">(</span><span class=\"nf\">current-buffer</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">global-set-key</span> <span class=\"p\">(</span><span class=\"nf\">kbd</span> <span class=\"s\">&quot;C-s-SPC&quot;</span><span class=\"p\">)</span> <span class=\"ss\">&#39;mode-line-in-header</span><span class=\"p\">)</span>
</pre></div>
<p><img src=\"u/emacs-mode-line-header.png\" alt=\"u/emacs-mode-line-header.png\" /></p>
<p>You can check out the <a href=\"https://news.ycombinator.com/item?id%3D7107893\">discussion</a> on Hacker News.</p>


") (pubDate nil "Wed, 22 Jan 2014 00:00:00 +0100") (link nil "http://emacs-doctor.com/emacs-strip-tease.html") (guid ((isPermaLink . "true")) "http://emacs-doctor.com/emacs-strip-tease.html") (category nil "libre"))) ("Emacs mode for hiding the mode-line" "<p>Sometimes I don’t want to display the <code>mode-line</code>.</p>
<p>This minor mode helps me switching it on and off:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">defvar-local</span> <span class=\"nv\">hidden-mode-line-mode</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">define-minor-mode</span> <span class=\"nv\">hidden-mode-line-mode</span>
<span class=\"s\">&quot;Minor mode to hide the mode-line in the current buffer.&quot;</span>
<span class=\"nv\">:init-value</span> <span class=\"nv\">nil</span>
<span class=\"nv\">:global</span> <span class=\"nv\">t</span>
<span class=\"nv\">:variable</span> <span class=\"nv\">hidden-mode-line-mode</span>
<span class=\"nv\">:group</span> <span class=\"ss\">'editing-basics</span>
<span class=\"p\">(</span><span class=\"k\">if </span><span class=\"nv\">hidden-mode-line-mode</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">hide-mode-line</span> <span class=\"nv\">mode-line-format</span>
<span class=\"nv\">mode-line-format</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">mode-line-format</span> <span class=\"nv\">hide-mode-line</span>
<span class=\"nv\">hide-mode-line</span> <span class=\"nv\">nil</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">force-mode-line-update</span><span class=\"p\">)</span>
<span class=\"c1\">;; Apparently force-mode-line-update is not always enough to</span>
<span class=\"c1\">;; redisplay the mode-line</span>
<span class=\"p\">(</span><span class=\"nf\">redraw-display</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">when</span> <span class=\"p\">(</span><span class=\"k\">and </span><span class=\"p\">(</span><span class=\"nf\">called-interactively-p</span> <span class=\"ss\">'interactive</span><span class=\"p\">)</span>
<span class=\"nv\">hidden-mode-line-mode</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">run-with-idle-timer</span>
<span class=\"mi\">0</span> <span class=\"nv\">nil</span> <span class=\"ss\">'message</span>
<span class=\"p\">(</span><span class=\"nf\">concat</span> <span class=\"s\">&quot;Hidden Mode Line Mode enabled.  &quot;</span>
<span class=\"s\">&quot;Use M-x hidden-mode-line-mode to make the mode-line appear.&quot;</span><span class=\"p\">))))</span>
<span class=\"c1\">;; If you want to hide the mode-line in every buffer by default</span>
<span class=\"c1\">;; (add-hook 'after-change-major-mode-hook 'hidden-mode-line-mode)</span>
</pre></div>
<p>Just use <code>M-x hidden-mode-line-mode RET</code> and you’re done.</p>" "http://emacs-doctor.com/emacs-hide-mode-line.html" (21208 25712) old 2 nil nil ((title nil "Emacs mode for hiding the mode-line") (description nil "
<p>Sometimes I don&#8217;t want to display the <code>mode-line</code>.</p>
<p>This minor mode helps me switching it on and off:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">defvar-local</span> <span class=\"nv\">hidden-mode-line-mode</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>

<span class=\"p\">(</span><span class=\"nf\">define-minor-mode</span> <span class=\"nv\">hidden-mode-line-mode</span>
  <span class=\"s\">&quot;Minor mode to hide the mode-line in the current buffer.&quot;</span>
  <span class=\"nv\">:init-value</span> <span class=\"nv\">nil</span>
  <span class=\"nv\">:global</span> <span class=\"nv\">t</span>
  <span class=\"nv\">:variable</span> <span class=\"nv\">hidden-mode-line-mode</span>
  <span class=\"nv\">:group</span> <span class=\"ss\">&#39;editing-basics</span>
  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"nv\">hidden-mode-line-mode</span>
      <span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">hide-mode-line</span> <span class=\"nv\">mode-line-format</span>
            <span class=\"nv\">mode-line-format</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">mode-line-format</span> <span class=\"nv\">hide-mode-line</span>
          <span class=\"nv\">hide-mode-line</span> <span class=\"nv\">nil</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"nf\">force-mode-line-update</span><span class=\"p\">)</span>
  <span class=\"c1\">;; Apparently force-mode-line-update is not always enough to</span>
  <span class=\"c1\">;; redisplay the mode-line</span>
  <span class=\"p\">(</span><span class=\"nf\">redraw-display</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">when</span> <span class=\"p\">(</span><span class=\"k\">and </span><span class=\"p\">(</span><span class=\"nf\">called-interactively-p</span> <span class=\"ss\">&#39;interactive</span><span class=\"p\">)</span>
             <span class=\"nv\">hidden-mode-line-mode</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">run-with-idle-timer</span>
     <span class=\"mi\">0</span> <span class=\"nv\">nil</span> <span class=\"ss\">&#39;message</span>
     <span class=\"p\">(</span><span class=\"nf\">concat</span> <span class=\"s\">&quot;Hidden Mode Line Mode enabled.  &quot;</span>
             <span class=\"s\">&quot;Use M-x hidden-mode-line-mode to make the mode-line appear.&quot;</span><span class=\"p\">))))</span>

<span class=\"c1\">;; If you want to hide the mode-line in every buffer by default</span>
<span class=\"c1\">;; (add-hook &#39;after-change-major-mode-hook &#39;hidden-mode-line-mode)</span>
</pre></div>
<p>Just use <code>M-x hidden-mode-line-mode RET</code> and you&#8217;re done.</p>


") (pubDate nil "Fri, 17 Jan 2014 00:00:00 +0100") (link nil "http://emacs-doctor.com/emacs-hide-mode-line.html") (guid ((isPermaLink . "true")) "http://emacs-doctor.com/emacs-hide-mode-line.html") (category nil "libre"))) ("How To Exit Emacs?" "<h2>tl;dr</h2>
<p>Spending the rest of your life in Emacs is a feature, not a bug.</p>
<p><img src=\"u/i3.png\" alt=\"u/i3.png\" /></p>
<h2>tl;dr (take 2)</h2>
<p>This is the magic key combination to exit Emacs:</p>
<pre class=\"example\">
C-x C-c
</pre>
<p>Which reads as</p>
<pre class=\"example\">
Control-x Control-c
</pre>
<h2>–help</h2>
<p>I.e., press the <code>Control</code> key with your left pinky, hold it pressed,
then press <code>x</code>, release <code>x</code> (while still holding the <code>Control</code> key),
press <code>c</code>.</p>
<p>Ta-da!</p>
<p>You are back to normal life.</p>
<h2>–help –verbose</h2>
<p>In Emacs, key bindings are called <code>keybindings</code>, because we like
things to be plain.  Some people in other possible worlds called them
<code>shortcuts</code>, but that’s a very narrow view of what a keybinding is,
since Emacs keybindings have a personnality of their own, and can be a
bit long sometimes.</p>
<p>The first time you encounter <code>Control-x</code>, you think: “Aha… so the
<code>x</code> stands for eXiting!”.  Wrong.</p>
<p>The “x” stands for eXecuting.</p>
<p>Let’s tell a bit more about keybindings.</p>
<h2>–help –very-verbose</h2>
<p>Emacs keybindings are stored in <code>keymaps</code>.</p>
<p>A <code>keymap</code> is a variable containing a list of associations between
keys and <code>commands</code>.</p>
<p>The list of all keybindings starting with <code>Control-x</code> is stored in a
dedicated variable called <code>ctl-x-map</code>.</p>
<p>You can see this list with <code>C-h v ctl-x-map RET</code>: this will open a new
buffer and display the value of the keymap.</p>
<p>You can also display the list of commands starting with the <code>C-x</code>
prefix bit hitting <code>C-x C-h</code> (yes, the <code>h</code> stands for help).</p>
<p>Do it <i>now</i>, and enjoy the beautiful view!</p>
<p><img src=\"u/emacs-keybindings.png\" alt=\"u/emacs-keybindings.png\" /></p>
<p>In this buffer, you can follow links by hitting <code>RET</code> (aka <code>return</code>):
those are links to the descriptions of commands associated with the
listed keybindings—or to <i>sub keymaps</i>.</p>
<p>For example, the buffer will let you learn that <code>C-x C-c</code> is bound to
<code>save-buffers-kill-terminal</code>.  Yes, this is the name of the command
you call to “exit Emacs”, as people call it sometimes.</p>
<p>But <code>C-x C-k</code> is bound to <code>kmacro-keymap</code>, which is not a command, but
another map.</p>
<p>If you want to know more about this other keymap, hit <code>C-x C-k C-h</code>.</p>
<p>(And yes, the “h” in <code>C-h</code> stands for Help.)</p>
<p>Of course, since keymaps are just variables, you can change them at
will.  I recommend not to change the default keybindings: Emacs is not
only a text editor, it’s a shared culture, and sticking to the default
keybindings helps the community celebrate the same commands together.</p>
<h2>x = ?</h2>
<pre class=\"example\">
Happiness is nothing more than good health and a bad memory.
-- Albert Schweitzer
</pre>
<p>The <code>Control-x</code> keymap is the most important keymap in Emacs: main
commands are called from this keymap.</p>
<p>The <code>Control-c</code> keymap is the second most important one.  Emacs modes
use it to associate keybindings with the new commands they define.</p>
<p>When reading <code>.emacs.el</code> file late at night, amont binary dreams and
computer fairies, you sometimes encounter a pattern: <code>C-c x</code>, where
<code>x</code> is a letter or a digit.  This pattern is reserved for the user:
this is where you, the user, are required to place your keybindings.
No decent Emacs mode will ever use this pattern for its keybindings.</p>
<p>Of course <code>C-c C-...</code> is used by all modes: but this is <code>C-c C-...</code>,
not <code>C-c ...</code> — please note the difference.</p>
<p>So what does this <code>x</code> stand for?</p>
<p>If you know Emacs, you know a bit of <code>M-x</code>: hitting this puts the
cursor in the <code>minibuffer</code>, and prompts you for the name of a command.</p>
<p>The name of the command associated with <code>M-x</code> is
<code>execute-extended-command</code>, so my guess is that <code>x</code> stands for
“execute”.</p>
<p>Which makes sense, right?</p>
<p>I also guess the <code>x</code> in <code>Control-x</code> stands for “execute”, since this
is the main map to <i>execute</i> stuff in Emacs.  At least I want to
believe so.</p>
<p>What does <code>C-c</code> stands for in <code>C-x C-c</code>?</p>
<p>If you use <code>C-c</code> in shells, you know the answer.  And of course
<a href=\"http://en.wikipedia.org/wiki/Control-C\">Wikipedia</a> comes to the rescue:</p>
<blockquote>
<p>As many keyboards and computer terminals once directly generated ASCII
code, the choice of control-C overlapped with the ASCII end-of-text
character. This character has a numerical value of three, as “C” is
the third letter of the alphabet. It was chosen to cause an interrupt
as it is otherwise unlikely to be part of a program’s interactive
interface. Many other control codes, such as control-D for the
end-of-transmission character, do not generate signals and are
occasionally used to control a program.</p>
</blockquote>
<p>See?  Now you know why <code>C-x C-c</code> exits Emacs.</p>
<p>But remember: you don’t really want to exit Emacs (see <a href=\"*tl%3Bdr\">tl;dr</a>).</p>" "http://emacs-doctor.com/how-to-exit-emacs.html" (21175 28400) old 3 nil nil ((title nil "How To Exit Emacs?") (description nil "
<h2>tl;dr</h2>
<p>Spending the rest of your life in Emacs is a feature, not a bug.</p>
<p><img src=\"u/i3.png\" alt=\"u/i3.png\" /></p>
<h2>tl;dr (take 2)</h2>
<p>This is the magic key combination to exit Emacs:</p>
<pre class=\"example\">
C-x C-c
</pre>
<p>Which reads as</p>
<pre class=\"example\">
Control-x Control-c
</pre>
<h2>&#8211;help</h2>
<p>I.e., press the <code>Control</code> key with your left pinky, hold it pressed,
  then press <code>x</code>, release <code>x</code> (while still holding the <code>Control</code> key),
  press <code>c</code>.</p>
<p>Ta-da!</p>
<p>You are back to normal life.</p>
<h2>&#8211;help &#8211;verbose</h2>
<p>In Emacs, key bindings are called <code>keybindings</code>, because we like
  things to be plain.  Some people in other possible worlds called them
  <code>shortcuts</code>, but that&#8217;s a very narrow view of what a keybinding is,
  since Emacs keybindings have a personnality of their own, and can be a
  bit long sometimes.</p>
<p>The first time you encounter <code>Control-x</code>, you think: &#8220;Aha&#8230; so the
  <code>x</code> stands for eXiting!&#8221;.  Wrong.</p>
<p>The &#8220;x&#8221; stands for eXecuting.</p>
<p>Let&#8217;s tell a bit more about keybindings.</p>
<h2>&#8211;help &#8211;very-verbose</h2>
<p>Emacs keybindings are stored in <code>keymaps</code>.</p>
<p>A <code>keymap</code> is a variable containing a list of associations between
  keys and <code>commands</code>.</p>
<p>The list of all keybindings starting with <code>Control-x</code> is stored in a
  dedicated variable called <code>ctl-x-map</code>.</p>
<p>You can see this list with <code>C-h v ctl-x-map RET</code>: this will open a new
  buffer and display the value of the keymap.</p>
<p>You can also display the list of commands starting with the <code>C-x</code>
  prefix bit hitting <code>C-x C-h</code> (yes, the <code>h</code> stands for help).</p>
<p>Do it <i>now</i>, and enjoy the beautiful view!</p>
<p><img src=\"u/emacs-keybindings.png\" alt=\"u/emacs-keybindings.png\" /></p>
<p>In this buffer, you can follow links by hitting <code>RET</code> (aka <code>return</code>):
  those are links to the descriptions of commands associated with the
  listed keybindings&#8212;or to <i>sub keymaps</i>.</p>
<p>For example, the buffer will let you learn that <code>C-x C-c</code> is bound to
  <code>save-buffers-kill-terminal</code>.  Yes, this is the name of the command
  you call to &#8220;exit Emacs&#8221;, as people call it sometimes.</p>
<p>But <code>C-x C-k</code> is bound to <code>kmacro-keymap</code>, which is not a command, but
  another map.</p>
<p>If you want to know more about this other keymap, hit <code>C-x C-k C-h</code>.</p>
<p>(And yes, the &#8220;h&#8221; in <code>C-h</code> stands for Help.)</p>
<p>Of course, since keymaps are just variables, you can change them at
  will.  I recommend not to change the default keybindings: Emacs is not
  only a text editor, it&#8217;s a shared culture, and sticking to the default
  keybindings helps the community celebrate the same commands together.</p>
<h2>x = ?</h2>
<pre class=\"example\">
Happiness is nothing more than good health and a bad memory.

                            -- Albert Schweitzer
</pre>
<p>The <code>Control-x</code> keymap is the most important keymap in Emacs: main
  commands are called from this keymap.</p>
<p>The <code>Control-c</code> keymap is the second most important one.  Emacs modes
  use it to associate keybindings with the new commands they define.</p>
<p>When reading <code>.emacs.el</code> file late at night, amont binary dreams and
  computer fairies, you sometimes encounter a pattern: <code>C-c x</code>, where
  <code>x</code> is a letter or a digit.  This pattern is reserved for the user:
  this is where you, the user, are required to place your keybindings.
  No decent Emacs mode will ever use this pattern for its keybindings.</p>
<p>Of course <code>C-c C-...</code> is used by all modes: but this is <code>C-c C-...</code>,
  not <code>C-c ...</code> &#8212; please note the difference.</p>
<p>So what does this <code>x</code> stand for?</p>
<p>If you know Emacs, you know a bit of <code>M-x</code>: hitting this puts the
  cursor in the <code>minibuffer</code>, and prompts you for the name of a command.</p>
<p>The name of the command associated with <code>M-x</code> is
  <code>execute-extended-command</code>, so my guess is that <code>x</code> stands for
  &#8220;execute&#8221;.</p>
<p>Which makes sense, right?</p>
<p>I also guess the <code>x</code> in <code>Control-x</code> stands for &#8220;execute&#8221;, since this
  is the main map to <i>execute</i> stuff in Emacs.  At least I want to
  believe so.</p>
<p>What does <code>C-c</code> stands for in <code>C-x C-c</code>?</p>
<p>If you use <code>C-c</code> in shells, you know the answer.  And of course
  <a href=\"http://en.wikipedia.org/wiki/Control-C\">Wikipedia</a> comes to the rescue:</p>
<blockquote>
  <p>As many keyboards and computer terminals once directly generated ASCII
    code, the choice of control-C overlapped with the ASCII end-of-text
    character. This character has a numerical value of three, as &#8220;C&#8221; is
    the third letter of the alphabet. It was chosen to cause an interrupt
    as it is otherwise unlikely to be part of a program&#8217;s interactive
    interface. Many other control codes, such as control-D for the
    end-of-transmission character, do not generate signals and are
    occasionally used to control a program.</p>
</blockquote>
<p>See?  Now you know why <code>C-x C-c</code> exits Emacs.</p>
<p>But remember: you don&#8217;t really want to exit Emacs (see <a href=\"*tl%3Bdr\">tl;dr</a>).</p>


") (pubDate nil "Mon, 23 Dec 2013 00:00:00 +0100") (link nil "http://emacs-doctor.com/how-to-exit-emacs.html") (guid ((isPermaLink . "true")) "http://emacs-doctor.com/how-to-exit-emacs.html") (category nil "libre"))) ("Emacs Org and Overtone quick intro" "<p>This file will take you through installing <a href=\"http://www.gnu.org/software/emacs/\">GNU Emacs</a> and <a href=\"http://overtone.github.io/\">Overtone</a> so
that you can play a few notes.</p>
<p>You want to read it within GNU Emacs and <a href=\"http://orgmode.org/\">Org-mode</a>.</p>
<h2>Installation</h2>
<h3>Install GNU Emacs</h3>
<p>If you are using Debian, <code>~$ apt-get install emacs</code> will do.</p>
<p>To install Emacs from sources, you can download it from <a href=\"ftp://ftp.gnu.org/pub/gnu/emacs/\">here</a> or clone
the git mirror:</p>
<pre class=\"example\">
~$ git clone git://git.savannah.gnu.org/emacs.git
</pre>
<h3>Configure Emacs</h3>
<p>The beginning of your Emacs configuration should contain this to add
<code>marmelade</code> to the list of known repositories for Emacs libraries:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">'package</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">'package-archives</span>
<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">&quot;marmalade&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;http://marmalade-repo.org/packages/&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">package-initialize</span><span class=\"p\">)</span>
</pre></div>
<p>Now hit <code>C-c C-v C-t</code> to <i>tangle</i> all Emacs Lisp code blocks from this
file into a new <code>emacs.el</code> file in the same directory.</p>
<p>When done, go check this new <code>emacs.el</code>.</p>
<p>You can use this <code>emacs.el</code> to load the minimal configuration needed
for this tutorial.</p>
<h3>Install Cider (was “nrepl.el”)</h3>
<p>Now run Emacs like this:</p>
<pre class=\"example\">
~$ emacs -l /path/to/overtone-intro/emacs.el
</pre>
<p>In Emacs, get the list of packages:</p>
<p><code>M-x list-packages RET</code></p>
<p>and install <code>cider</code> from that list.</p>
<p><b>Note</b>: This will also install <code>clojure-mode-2.0.0</code>, <code>cl-lib-0.3</code>,
<code>dash-2.1.0</code> and <code>pkg-info-0.3</code>.</p>
<h3>Install Org-mode</h3>
<p>Install the latest version of <a href=\"http://orgmode.org/\">Org-mode</a>:</p>
<pre class=\"example\">
~$ git clone git://orgmode.org/org-mode.git
~$ cd org-mode
~$ make autoloads
</pre>
<p>This will compile Emacs Lisp files in the <code>org-mode/lisp/</code> directory
and create <code>org-loaddefs.el</code>, containing the necessary autoloads.</p>
<h3>Configure Org-mode</h3>
<p>This simple Org configuration should do:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">'load-path</span> <span class=\"s\">&quot;~/install/git/org-mode/&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">'org</span><span class=\"p\">)</span>
<span class=\"c1\">;; We only need Emacs Lisp and Clojure in this tutorial:</span>
<span class=\"p\">(</span><span class=\"nf\">org-babel-do-load-languages</span>
<span class=\"ss\">'org-babel-load-languages</span>
<span class=\"o\">'</span><span class=\"p\">((</span><span class=\"nf\">emacs-lisp</span> <span class=\"o\">.</span> <span class=\"nv\">t</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">clojure</span> <span class=\"o\">.</span> <span class=\"nv\">t</span><span class=\"p\">)))</span>
<span class=\"c1\">;; Use cider as the clojure execution backend</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">org-babel-clojure-backend</span> <span class=\"ss\">'cider</span><span class=\"p\">)</span>
<span class=\"c1\">;; Let's have pretty source code blocks</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">org-edit-src-content-indentation</span> <span class=\"mi\">0</span>
<span class=\"nv\">org-src-tab-acts-natively</span> <span class=\"nv\">t</span>
<span class=\"nv\">org-src-fontify-natively</span> <span class=\"nv\">t</span>
<span class=\"nv\">org-confirm-babel-evaluate</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
</pre></div>
<h3>Configure cider</h3>
<div class=\"highlight\"><pre><span class=\"c1\">;; Cider configuration</span>
<span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">'cider</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">nrepl-hide-special-buffers</span> <span class=\"nv\">t</span>
<span class=\"nv\">cider-repl-pop-to-buffer-on-connect</span> <span class=\"nv\">nil</span>
<span class=\"nv\">cider-popup-stacktraces</span> <span class=\"nv\">nil</span>
<span class=\"nv\">cider-repl-popup-stacktraces</span> <span class=\"nv\">t</span><span class=\"p\">)</span>
</pre></div>
<h3>Install leiningen</h3>
<p><a href=\"http://leiningen.org\">leiningen</a> is the <i>de facto</i> standard for running Clojure projects.</p>
<p>Check the very simple <a href=\"http://leiningen.org/#install\">installation instructions</a>.</p>
<h3>Install SuperCollider</h3>
<p>Supercollider is the audio synthetizer.</p>
<p>You need it to play sounds with Overtone.</p>
<p>On Debian, you can install SuperCollider the usual way: <code>~$ apt-get
install supercollider</code>.</p>
<p>For other platforms, see the supercollider <a href=\"http://supercollider.sourceforge.net/downloads/\">downloads page</a>.</p>
<p>In this tutorial, we will play piano, so we need the <a href=\"http://sourceforge.net/projects/sc3-plugins/\">sc3-plugins</a>.</p>
<p>If you want to compile supercollider and sc3-plugins from sources,
check <a href=\"https://github.com/overtone/overtone/wiki/Compiling-SuperCollider\">this page</a> from the Overtone wiki.</p>
<h3>Overtone as a dependency in project.clj</h3>
<p>Previously, we hit <code>C-c C-v C-t</code> to tangle Emacs Lisp code blocks into
<code>emacs.el</code>.  Since <code>C-c C-v C-t</code> tangles <i>all blocks</i> in the buffer,
we also created <code>project.clj</code>, which is needed in order to run <code>lein</code>
and to let <code>cider</code> interact with <code>lein</code>.</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"kd\">defproject </span><span class=\"nv\">overtone-intro</span> <span class=\"s\">&quot;1.0&quot;</span>
<span class=\"ss\">:dependencies</span> <span class=\"p\">[[</span><span class=\"nv\">org.clojure/clojure</span> <span class=\"s\">&quot;1.5.1&quot;</span><span class=\"p\">]</span>
<span class=\"p\">[</span><span class=\"nv\">overtone</span> <span class=\"s\">&quot;0.9.1&quot;</span><span class=\"p\">]])</span>
</pre></div>
<p>From the <code>overtone-intro</code> directory, run <code>~$ lein deps</code> to load all
dependencies.</p>
<h3>Additional keybindings</h3>
<p>During the live demo, I used these keybindings:</p>
<div class=\"highlight\"><pre><span class=\"c1\">;; Useful keybindings when using Clojure from Org</span>
<span class=\"p\">(</span><span class=\"nf\">org-defkey</span> <span class=\"nv\">org-mode-map</span> <span class=\"s\">&quot;\\C-x\\C-e&quot;</span> <span class=\"ss\">'cider-eval-last-sexp</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">org-defkey</span> <span class=\"nv\">org-mode-map</span> <span class=\"s\">&quot;\\C-c\\C-d&quot;</span> <span class=\"ss\">'cider-doc</span><span class=\"p\">)</span>
</pre></div>
<p>They allow to execute a Clojure source code block by hitting <code>C-x C-e</code>
after a Clojure sexp, and to get a Clojure docstring by hitting <code>C-c
C-d</code> after a symbol.</p>
<p>If you don’t use these keybindings, executing source code blocks is
done by hitting <code>C-c C-c</code> on the <code>#+BEGIN_SRC</code> line.</p>
<h3>Summary</h3>
<p>This is an overview of my configuration:</p>
<table>
<tr><th>Prog/Package</th><th>Version</th></tr>
<tr><td>GNU Emacs</td><td>24.3.50.1</td></tr>
<tr><td>CIDER</td><td>0.5</td></tr>
<tr><td>auto-complete</td><td>1.4.0</td></tr>
<tr><td>dash.el</td><td>2.3.0</td></tr>
<tr><td>pkg-info</td><td>0.4</td></tr>
<tr><td>Org-mode</td><td>8.2.4</td></tr>
<tr><td>Clojure</td><td>1.5.1</td></tr>
<tr><td>Overtone</td><td>0.9.1</td></tr>
</table>
<p>The tutorial should work with older versions of Emacs, but you need to
install Org-mode from its master branch to use <a href=\"https://github.com/clojure-emacs/cider\">cider</a>.</p>
<p>Also, remember to hit <code>TAB</code> for (un)folding a section or a source code
block.</p>
<h2>Connect to the repl</h2>
<p>To connect the current Org buffer to a repl, run</p>
<p><code>M-x cider-jack-in RET</code></p>
<p>… and wait until you get a confirmation message in the minibuffer.</p>
<p>Do this now, you’ll need it soon.</p>
<h2>A quick intro to Org Babel</h2>
<p>To get a gist of what Org Babel is, hit <code>C-c C-c</code> on the <code>#+BEGIN_SRC</code>
line below:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">message</span> <span class=\"s\">&quot;Yeah!&quot;</span><span class=\"p\">)</span>
</pre></div>
<p>Emacs minibuffer displays the output: yeah!</p>
<h3>Babel: vars</h3>
<p>You can bind variables in Babel source code blocks—hit <code>C-c C-c</code> on
the code blocks below:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">message</span> <span class=\"p\">(</span><span class=\"nf\">number-to-string</span> <span class=\"nv\">n</span><span class=\"p\">))</span>
</pre></div>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">-&gt; </span><span class=\"nv\">n</span> <span class=\"nb\">inc </span><span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"nv\">m</span><span class=\"p\">))</span>
</pre></div>
<h3>Babel: lists</h3>
<p>Okay, you get it: hit <code>C-c C-c</code> on code blocks to execute them.</p>
<ul>
<li>simple</li>
<li>list</li>
</ul>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">print</span> <span class=\"nv\">x</span><span class=\"p\">)</span>
</pre></div>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">clojure.string/upper-case</span> <span class=\"nv\">x</span><span class=\"p\">)</span>
</pre></div>
<h3>Babel: tables</h3>
<table>
<tr><td>1</td><td>a</td></tr>
<tr><td>2</td><td>b</td></tr>
<tr><td>3</td><td>c</td></tr>
<tr><td>4</td><td>d</td></tr>
</table>
<div class=\"highlight\"><pre><span class=\"nv\">data</span>
</pre></div>
<h2>A quick intro to Overtone</h2>
<h3>Overtone: loading and booting</h3>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">use</span> <span class=\"ss\">'overtone.core</span><span class=\"p\">)</span>
</pre></div>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">boot-external-server</span><span class=\"p\">)</span>
</pre></div>
<p><b>Note</b>: I’m using GNU/Linux, and I didn’t take the time to configure
jackd properly.  You may want to use this instead:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">use</span> <span class=\"ss\">'overtone.live</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">boot-internal-server</span><span class=\"p\">)</span>
</pre></div>
<h3>Overtone: playing/fooling around</h3>
<p><b>Note</b>: the first time you use the <code>overtone.inst.piano</code> namespace, it
will load quite a lot of files from freesound.org – you may want to
do this within a bare <code>lein repl</code> in order to make sure the process is
over.</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">use</span> <span class=\"ss\">'overtone.inst.piano</span><span class=\"p\">)</span>
</pre></div>
<p>Play a simple midi note:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">piano</span> <span class=\"mi\">60</span><span class=\"p\">)</span>
</pre></div>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">doseq </span><span class=\"p\">[</span><span class=\"nv\">note</span> <span class=\"p\">(</span><span class=\"nf\">chord</span> <span class=\"ss\">:C3</span><span class=\"p\">)]</span> <span class=\"p\">(</span><span class=\"nf\">piano</span> <span class=\"nv\">note</span><span class=\"p\">))</span>
</pre></div>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">doseq </span><span class=\"p\">[</span><span class=\"nv\">note</span> <span class=\"p\">(</span><span class=\"nf\">chord</span> <span class=\"ss\">:E3</span> <span class=\"ss\">:minor</span><span class=\"p\">)]</span> <span class=\"p\">(</span><span class=\"nf\">piano</span> <span class=\"nv\">note</span><span class=\"p\">))</span>
</pre></div>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">play-chord</span> <span class=\"p\">[</span><span class=\"nv\">chord</span><span class=\"p\">]</span>
<span class=\"p\">(</span><span class=\"nb\">doseq </span><span class=\"p\">[</span><span class=\"nv\">note</span> <span class=\"nv\">chord</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nf\">piano</span> <span class=\"nv\">note</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">play-chord</span> <span class=\"p\">(</span><span class=\"nf\">chord</span> <span class=\"ss\">:A3</span> <span class=\"ss\">:minor</span><span class=\"p\">))</span>
</pre></div>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nb\">time </span><span class=\"p\">(</span><span class=\"nf\">now</span><span class=\"p\">)]</span>
<span class=\"p\">(</span><span class=\"nf\">at</span> <span class=\"nb\">time </span><span class=\"p\">(</span><span class=\"nf\">play-chord</span> <span class=\"p\">(</span><span class=\"nf\">chord</span> <span class=\"ss\">:C3</span> <span class=\"ss\">:major</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">at</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">1000</span> <span class=\"nv\">time</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">play-chord</span> <span class=\"p\">(</span><span class=\"nf\">chord</span> <span class=\"ss\">:C3</span> <span class=\"ss\">:major7</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">at</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">2000</span> <span class=\"nv\">time</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">play-chord</span> <span class=\"p\">(</span><span class=\"nf\">chord</span> <span class=\"ss\">:E3</span> <span class=\"ss\">:minor</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">at</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">3000</span> <span class=\"nv\">time</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">play-chord</span> <span class=\"p\">(</span><span class=\"nf\">chord</span> <span class=\"ss\">:A2</span> <span class=\"ss\">:minor</span><span class=\"p\">))))</span>
</pre></div>
<p><code>defsynth</code> and <code>definst</code> are the two entry points for creating sounds
and instruments – go check their docstrings, they explain a lot.</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">defsynth</span> <span class=\"nv\">bar</span> <span class=\"p\">[</span><span class=\"nv\">freq</span> <span class=\"mi\">440</span><span class=\"p\">]</span>
<span class=\"p\">(</span><span class=\"nf\">out</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nf\">sin-osc</span> <span class=\"nv\">freq</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">bar</span> <span class=\"mi\">500</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">kill</span> <span class=\"nv\">bar</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">stop</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">definst</span> <span class=\"nv\">beep</span> <span class=\"p\">[</span><span class=\"nv\">note</span> <span class=\"mi\">60</span><span class=\"p\">]</span>
<span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">sound-src</span> <span class=\"p\">(</span><span class=\"nf\">sin-osc</span> <span class=\"p\">(</span><span class=\"nf\">midicps</span> <span class=\"nv\">note</span><span class=\"p\">))</span>
<span class=\"nv\">env</span> <span class=\"p\">(</span><span class=\"nf\">env-gen</span> <span class=\"p\">(</span><span class=\"nf\">perc</span> <span class=\"mf\">0.01</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"ss\">:action</span> <span class=\"nv\">FREE</span><span class=\"p\">)]</span> <span class=\"c1\">; sam uses :free</span>
<span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">sound-src</span> <span class=\"nv\">env</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">beep</span> <span class=\"mi\">60</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">defsynth</span> <span class=\"nv\">pad1</span> <span class=\"p\">[</span><span class=\"nv\">freq</span> <span class=\"mi\">110</span> <span class=\"nv\">amp</span> <span class=\"mi\">1</span> <span class=\"nv\">gate</span> <span class=\"mi\">1</span> <span class=\"nv\">out-bus</span> <span class=\"mi\">0</span><span class=\"p\">]</span>
<span class=\"p\">(</span><span class=\"nf\">out</span> <span class=\"nv\">out-bus</span>
<span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"p\">(</span><span class=\"nf\">saw</span> <span class=\"p\">[</span><span class=\"nv\">freq</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">freq</span> <span class=\"mf\">1.01</span><span class=\"p\">)])</span>
<span class=\"p\">(</span><span class=\"nf\">env-gen</span> <span class=\"p\">(</span><span class=\"nf\">adsr</span> <span class=\"mf\">0.01</span> <span class=\"mf\">0.1</span> <span class=\"mf\">0.7</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"ss\">:gate</span> <span class=\"nv\">gate</span> <span class=\"ss\">:action</span> <span class=\"nv\">FREE</span><span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"nf\">pad1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">stop</span><span class=\"p\">)</span>
<span class=\"c1\">;; Let's try something a bit crazy</span>
<span class=\"p\">(</span><span class=\"nb\">for </span><span class=\"p\">[</span><span class=\"nv\">i</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"mi\">200</span><span class=\"p\">)]</span> <span class=\"p\">(</span><span class=\"nf\">at</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"p\">(</span><span class=\"nf\">now</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">i</span> <span class=\"mi\">20</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nf\">beep</span> <span class=\"nv\">i</span><span class=\"p\">)))</span>
</pre></div>
<p>Some more copy-and-paste from overtone’s wiki:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">piano</span> <span class=\"p\">[</span><span class=\"mi\">60</span> <span class=\"mi\">63</span> <span class=\"mi\">67</span><span class=\"p\">])</span>
<span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">piano</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">note</span> <span class=\"p\">[</span><span class=\"ss\">:C3</span> <span class=\"ss\">:E4</span> <span class=\"ss\">:G4</span><span class=\"p\">]))</span>
<span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">piano</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">note</span> <span class=\"p\">[</span><span class=\"ss\">:C#5</span> <span class=\"ss\">:E4</span> <span class=\"ss\">:G4</span><span class=\"p\">]))</span>
<span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">piano</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">note</span> <span class=\"p\">[</span><span class=\"ss\">:Cb2</span> <span class=\"ss\">:E4</span> <span class=\"ss\">:G4</span><span class=\"p\">]))</span>
<span class=\"p\">(</span><span class=\"nf\">definst</span> <span class=\"nv\">steel-drum</span> <span class=\"p\">[</span><span class=\"nv\">note</span> <span class=\"mi\">60</span> <span class=\"nv\">amp</span> <span class=\"mf\">0.8</span><span class=\"p\">]</span>
<span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">freq</span> <span class=\"p\">(</span><span class=\"nf\">midicps</span> <span class=\"nv\">note</span><span class=\"p\">)]</span>
<span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">amp</span>
<span class=\"p\">(</span><span class=\"nf\">env-gen</span> <span class=\"p\">(</span><span class=\"nf\">perc</span> <span class=\"mf\">0.01</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"ss\">:action</span> <span class=\"nv\">FREE</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"p\">(</span><span class=\"nf\">sin-osc</span> <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"nv\">freq</span> <span class=\"mi\">2</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">rlpf</span> <span class=\"p\">(</span><span class=\"nf\">saw</span> <span class=\"nv\">freq</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"mf\">1.1</span> <span class=\"nv\">freq</span><span class=\"p\">)</span> <span class=\"mf\">0.4</span><span class=\"p\">)))))</span>
<span class=\"p\">(</span><span class=\"nf\">steel-drum</span> <span class=\"p\">(</span><span class=\"nf\">note</span> <span class=\"ss\">:E3</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">steel-drum</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">note</span> <span class=\"p\">[</span><span class=\"ss\">:E3</span> <span class=\"ss\">:D#4</span><span class=\"p\">]))</span>
</pre></div>
<h3>Overtone: loading .wav samples</h3>
<div class=\"highlight\"><pre><span class=\"c1\">;; Hint: adapt this to your own .wav files</span>
<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">noa</span> <span class=\"p\">(</span><span class=\"nf\">sample</span> <span class=\"s\">&quot;/path/to/a/file.wav&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[]</span>
<span class=\"p\">(</span><span class=\"nf\">noa</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">Thread/sleep</span> <span class=\"mi\">3000</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">piano</span> <span class=\"p\">(</span><span class=\"nf\">note</span> <span class=\"ss\">:Cb3</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">piano</span> <span class=\"mi\">68</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">stop</span><span class=\"p\">)</span>
</pre></div>
<h3>Overtone: using freesound.org</h3>
<p>You can download samples directly from freesound.org via Overtone:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">snare</span> <span class=\"p\">(</span><span class=\"nf\">sample</span> <span class=\"p\">(</span><span class=\"nf\">freesound-path</span> <span class=\"mi\">26903</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">snare</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">clic</span> <span class=\"p\">(</span><span class=\"nf\">sample</span> <span class=\"p\">(</span><span class=\"nf\">freesound-path</span> <span class=\"mi\">406</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">clic</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">steam</span> <span class=\"p\">(</span><span class=\"nf\">sample</span> <span class=\"p\">(</span><span class=\"nf\">freesound-path</span> <span class=\"mi\">30628</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">steam</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">clap</span> <span class=\"p\">(</span><span class=\"nf\">sample</span> <span class=\"p\">(</span><span class=\"nf\">freesound-path</span> <span class=\"mi\">48310</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">clap</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">clap2</span> <span class=\"p\">(</span><span class=\"nf\">sample</span> <span class=\"p\">(</span><span class=\"nf\">freesound-path</span> <span class=\"mi\">132676</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">clap2</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">boom</span> <span class=\"p\">(</span><span class=\"nf\">sample</span> <span class=\"p\">(</span><span class=\"nf\">freesound-path</span> <span class=\"mi\">80401</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">boom</span><span class=\"p\">)</span>
</pre></div>
<h2>Why I love this?</h2>
<ul>
<li>I love sounds.</li>
<li>I love Org+Cider <i>reactivity</i>: evaluating Clojure sexps is fast.</li>
<li>I love building (mostly random) sounds so fast, it feels like
<i>sculpting</i> music.</li>
</ul>
<h2>Issues</h2>
<p>If you run into issues while following this tutorial, please report
them on <a href=\"https://github.com/bzg/org-overtone-intro\">github</a>.</p>
<h2>Exploring further</h2>
<ul>
<li>https://github.com/overtone/overtone</li>
<li>https://github.com/overtone/overtone/blob/master/src/overtone/samples/freesound.clj</li>
<li>http://skillsmatter.com/podcast/home/functional-composition</li>
<li>http://blog.josephwilk.net/clojure/creating-instruments-with-overtone.html</li>
<li>http://www.tonalsoft.com/pub/news/pitch-bend.aspx</li>
<li>http://www.freesound.org/</li>
</ul>" "http://emacs-doctor.com/emacs-org-babel-overtone-intro.html" (21172 52208) old 4 nil nil ((title nil "Emacs Org and Overtone quick intro") (description nil "
<p>This file will take you through installing <a href=\"http://www.gnu.org/software/emacs/\">GNU Emacs</a> and <a href=\"http://overtone.github.io/\">Overtone</a> so
  that you can play a few notes.</p>
<p>You want to read it within GNU Emacs and <a href=\"http://orgmode.org/\">Org-mode</a>.</p>
<h2>Installation</h2>
<h3>Install GNU Emacs</h3>
<p>If you are using Debian, <code>~$ apt-get install emacs</code> will do.</p>
<p>To install Emacs from sources, you can download it from <a href=\"ftp://ftp.gnu.org/pub/gnu/emacs/\">here</a> or clone
  the git mirror:</p>
<pre class=\"example\">
~$ git clone git://git.savannah.gnu.org/emacs.git
</pre>
<h3>Configure Emacs</h3>
<p>The beginning of your Emacs configuration should contain this to add
  <code>marmelade</code> to the list of known repositories for Emacs libraries:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;package</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">&#39;package-archives</span>
             <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;marmalade&quot;</span> <span class=\"o\">.</span> <span class=\"s\">&quot;http://marmalade-repo.org/packages/&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">package-initialize</span><span class=\"p\">)</span>
</pre></div>
<p>Now hit <code>C-c C-v C-t</code> to <i>tangle</i> all Emacs Lisp code blocks from this
  file into a new <code>emacs.el</code> file in the same directory.</p>
<p>When done, go check this new <code>emacs.el</code>.</p>
<p>You can use this <code>emacs.el</code> to load the minimal configuration needed
  for this tutorial.</p>
<h3>Install Cider (was &#8220;nrepl.el&#8221;)</h3>
<p>Now run Emacs like this:</p>
<pre class=\"example\">
~$ emacs -l /path/to/overtone-intro/emacs.el
</pre>
<p>In Emacs, get the list of packages:</p>
<p><code>M-x list-packages RET</code></p>
<p>and install <code>cider</code> from that list.</p>
<p><b>Note</b>: This will also install <code>clojure-mode-2.0.0</code>, <code>cl-lib-0.3</code>,
  <code>dash-2.1.0</code> and <code>pkg-info-0.3</code>.</p>
<h3>Install Org-mode</h3>
<p>Install the latest version of <a href=\"http://orgmode.org/\">Org-mode</a>:</p>
<pre class=\"example\">
~$ git clone git://orgmode.org/org-mode.git
~$ cd org-mode
~$ make autoloads
</pre>
<p>This will compile Emacs Lisp files in the <code>org-mode/lisp/</code> directory
  and create <code>org-loaddefs.el</code>, containing the necessary autoloads.</p>
<h3>Configure Org-mode</h3>
<p>This simple Org configuration should do:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">&#39;load-path</span> <span class=\"s\">&quot;~/install/git/org-mode/&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;org</span><span class=\"p\">)</span>

<span class=\"c1\">;; We only need Emacs Lisp and Clojure in this tutorial:</span>
<span class=\"p\">(</span><span class=\"nf\">org-babel-do-load-languages</span>
 <span class=\"ss\">&#39;org-babel-load-languages</span>
 <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"nf\">emacs-lisp</span> <span class=\"o\">.</span> <span class=\"nv\">t</span><span class=\"p\">)</span>
   <span class=\"p\">(</span><span class=\"nf\">clojure</span> <span class=\"o\">.</span> <span class=\"nv\">t</span><span class=\"p\">)))</span>

<span class=\"c1\">;; Use cider as the clojure execution backend</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">org-babel-clojure-backend</span> <span class=\"ss\">&#39;cider</span><span class=\"p\">)</span>

<span class=\"c1\">;; Let&#39;s have pretty source code blocks</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">org-edit-src-content-indentation</span> <span class=\"mi\">0</span>
      <span class=\"nv\">org-src-tab-acts-natively</span> <span class=\"nv\">t</span>
      <span class=\"nv\">org-src-fontify-natively</span> <span class=\"nv\">t</span>
      <span class=\"nv\">org-confirm-babel-evaluate</span> <span class=\"nv\">nil</span><span class=\"p\">)</span>
</pre></div>
<h3>Configure cider</h3>
<div class=\"highlight\"><pre><span class=\"c1\">;; Cider configuration</span>
<span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;cider</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">nrepl-hide-special-buffers</span> <span class=\"nv\">t</span>
      <span class=\"nv\">cider-repl-pop-to-buffer-on-connect</span> <span class=\"nv\">nil</span>
      <span class=\"nv\">cider-popup-stacktraces</span> <span class=\"nv\">nil</span>
      <span class=\"nv\">cider-repl-popup-stacktraces</span> <span class=\"nv\">t</span><span class=\"p\">)</span>
</pre></div>
<h3>Install leiningen</h3>
<p><a href=\"http://leiningen.org\">leiningen</a> is the <i>de facto</i> standard for running Clojure projects.</p>
<p>Check the very simple <a href=\"http://leiningen.org/#install\">installation instructions</a>.</p>
<h3>Install SuperCollider</h3>
<p>Supercollider is the audio synthetizer.</p>
<p>You need it to play sounds with Overtone.</p>
<p>On Debian, you can install SuperCollider the usual way: <code>~$ apt-get
  install supercollider</code>.</p>
<p>For other platforms, see the supercollider <a href=\"http://supercollider.sourceforge.net/downloads/\">downloads page</a>.</p>
<p>In this tutorial, we will play piano, so we need the <a href=\"http://sourceforge.net/projects/sc3-plugins/\">sc3-plugins</a>.</p>
<p>If you want to compile supercollider and sc3-plugins from sources,
  check <a href=\"https://github.com/overtone/overtone/wiki/Compiling-SuperCollider\">this page</a> from the Overtone wiki.</p>
<h3>Overtone as a dependency in project.clj</h3>
<p>Previously, we hit <code>C-c C-v C-t</code> to tangle Emacs Lisp code blocks into
  <code>emacs.el</code>.  Since <code>C-c C-v C-t</code> tangles <i>all blocks</i> in the buffer,
  we also created <code>project.clj</code>, which is needed in order to run <code>lein</code>
  and to let <code>cider</code> interact with <code>lein</code>.</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"kd\">defproject </span><span class=\"nv\">overtone-intro</span> <span class=\"s\">&quot;1.0&quot;</span>
  <span class=\"ss\">:dependencies</span> <span class=\"p\">[[</span><span class=\"nv\">org.clojure/clojure</span> <span class=\"s\">&quot;1.5.1&quot;</span><span class=\"p\">]</span>
                 <span class=\"p\">[</span><span class=\"nv\">overtone</span> <span class=\"s\">&quot;0.9.1&quot;</span><span class=\"p\">]])</span>
</pre></div>
<p>From the <code>overtone-intro</code> directory, run <code>~$ lein deps</code> to load all
  dependencies.</p>
<h3>Additional keybindings</h3>
<p>During the live demo, I used these keybindings:</p>
<div class=\"highlight\"><pre><span class=\"c1\">;; Useful keybindings when using Clojure from Org</span>
<span class=\"p\">(</span><span class=\"nf\">org-defkey</span> <span class=\"nv\">org-mode-map</span> <span class=\"s\">&quot;\\C-x\\C-e&quot;</span> <span class=\"ss\">&#39;cider-eval-last-sexp</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">org-defkey</span> <span class=\"nv\">org-mode-map</span> <span class=\"s\">&quot;\\C-c\\C-d&quot;</span> <span class=\"ss\">&#39;cider-doc</span><span class=\"p\">)</span>
</pre></div>
<p>They allow to execute a Clojure source code block by hitting <code>C-x C-e</code>
  after a Clojure sexp, and to get a Clojure docstring by hitting <code>C-c
  C-d</code> after a symbol.</p>
<p>If you don&#8217;t use these keybindings, executing source code blocks is
  done by hitting <code>C-c C-c</code> on the <code>#+BEGIN_SRC</code> line.</p>
<h3>Summary</h3>
<p>This is an overview of my configuration:</p>
<table>
  <tr><th>Prog/Package</th><th>Version</th></tr>
  <tr><td>GNU Emacs</td><td>24.3.50.1</td></tr>
  <tr><td>CIDER</td><td>0.5</td></tr>
  <tr><td>auto-complete</td><td>1.4.0</td></tr>
  <tr><td>dash.el</td><td>2.3.0</td></tr>
  <tr><td>pkg-info</td><td>0.4</td></tr>
  <tr><td>Org-mode</td><td>8.2.4</td></tr>
  <tr><td>Clojure</td><td>1.5.1</td></tr>
  <tr><td>Overtone</td><td>0.9.1</td></tr>
</table>
<p>The tutorial should work with older versions of Emacs, but you need to
  install Org-mode from its master branch to use <a href=\"https://github.com/clojure-emacs/cider\">cider</a>.</p>
<p>Also, remember to hit <code>TAB</code> for (un)folding a section or a source code
  block.</p>
<h2>Connect to the repl</h2>
<p>To connect the current Org buffer to a repl, run</p>
<p><code>M-x cider-jack-in RET</code></p>
<p>&#8230; and wait until you get a confirmation message in the minibuffer.</p>
<p>Do this now, you&#8217;ll need it soon.</p>
<h2>A quick intro to Org Babel</h2>
<p>To get a gist of what Org Babel is, hit <code>C-c C-c</code> on the <code>#+BEGIN_SRC</code>
  line below:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">message</span> <span class=\"s\">&quot;Yeah!&quot;</span><span class=\"p\">)</span>
</pre></div>
<p>Emacs minibuffer displays the output: yeah!</p>
<h3>Babel: vars</h3>
<p>You can bind variables in Babel source code blocks&#8212;hit <code>C-c C-c</code> on
  the code blocks below:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">message</span> <span class=\"p\">(</span><span class=\"nf\">number-to-string</span> <span class=\"nv\">n</span><span class=\"p\">))</span>
</pre></div>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">-&gt; </span><span class=\"nv\">n</span> <span class=\"nb\">inc </span><span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"nv\">m</span><span class=\"p\">))</span>
</pre></div>
<h3>Babel: lists</h3>
<p>Okay, you get it: hit <code>C-c C-c</code> on code blocks to execute them.</p>
<ul>
  <li>simple</li>
  <li>list</li>
</ul>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">print</span> <span class=\"nv\">x</span><span class=\"p\">)</span>
</pre></div>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">clojure.string/upper-case</span> <span class=\"nv\">x</span><span class=\"p\">)</span>
</pre></div>
<h3>Babel: tables</h3>
<table>
  <tr><td>1</td><td>a</td></tr>
  <tr><td>2</td><td>b</td></tr>
  <tr><td>3</td><td>c</td></tr>
  <tr><td>4</td><td>d</td></tr>
</table>
<div class=\"highlight\"><pre><span class=\"nv\">data</span>
</pre></div>
<h2>A quick intro to Overtone</h2>
<h3>Overtone: loading and booting</h3>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">use</span> <span class=\"ss\">&#39;overtone.core</span><span class=\"p\">)</span>
</pre></div>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">boot-external-server</span><span class=\"p\">)</span>
</pre></div>
<p><b>Note</b>: I&#8217;m using GNU/Linux, and I didn&#8217;t take the time to configure
  jackd properly.  You may want to use this instead:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">use</span> <span class=\"ss\">&#39;overtone.live</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">boot-internal-server</span><span class=\"p\">)</span>
</pre></div>
<h3>Overtone: playing/fooling around</h3>
<p><b>Note</b>: the first time you use the <code>overtone.inst.piano</code> namespace, it
  will load quite a lot of files from freesound.org &#8211; you may want to
  do this within a bare <code>lein repl</code> in order to make sure the process is
  over.</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">use</span> <span class=\"ss\">&#39;overtone.inst.piano</span><span class=\"p\">)</span>
</pre></div>
<p>Play a simple midi note:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">piano</span> <span class=\"mi\">60</span><span class=\"p\">)</span>
</pre></div>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">doseq </span><span class=\"p\">[</span><span class=\"nv\">note</span> <span class=\"p\">(</span><span class=\"nf\">chord</span> <span class=\"ss\">:C3</span><span class=\"p\">)]</span> <span class=\"p\">(</span><span class=\"nf\">piano</span> <span class=\"nv\">note</span><span class=\"p\">))</span>
</pre></div>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">doseq </span><span class=\"p\">[</span><span class=\"nv\">note</span> <span class=\"p\">(</span><span class=\"nf\">chord</span> <span class=\"ss\">:E3</span> <span class=\"ss\">:minor</span><span class=\"p\">)]</span> <span class=\"p\">(</span><span class=\"nf\">piano</span> <span class=\"nv\">note</span><span class=\"p\">))</span>
</pre></div>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">play-chord</span> <span class=\"p\">[</span><span class=\"nv\">chord</span><span class=\"p\">]</span>
  <span class=\"p\">(</span><span class=\"nb\">doseq </span><span class=\"p\">[</span><span class=\"nv\">note</span> <span class=\"nv\">chord</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nf\">piano</span> <span class=\"nv\">note</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nf\">play-chord</span> <span class=\"p\">(</span><span class=\"nf\">chord</span> <span class=\"ss\">:A3</span> <span class=\"ss\">:minor</span><span class=\"p\">))</span>
</pre></div>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nb\">time </span><span class=\"p\">(</span><span class=\"nf\">now</span><span class=\"p\">)]</span>
  <span class=\"p\">(</span><span class=\"nf\">at</span> <span class=\"nb\">time </span><span class=\"p\">(</span><span class=\"nf\">play-chord</span> <span class=\"p\">(</span><span class=\"nf\">chord</span> <span class=\"ss\">:C3</span> <span class=\"ss\">:major</span><span class=\"p\">)))</span>
  <span class=\"p\">(</span><span class=\"nf\">at</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">1000</span> <span class=\"nv\">time</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">play-chord</span> <span class=\"p\">(</span><span class=\"nf\">chord</span> <span class=\"ss\">:C3</span> <span class=\"ss\">:major7</span><span class=\"p\">)))</span>
  <span class=\"p\">(</span><span class=\"nf\">at</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">2000</span> <span class=\"nv\">time</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">play-chord</span> <span class=\"p\">(</span><span class=\"nf\">chord</span> <span class=\"ss\">:E3</span> <span class=\"ss\">:minor</span><span class=\"p\">)))</span>
  <span class=\"p\">(</span><span class=\"nf\">at</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">3000</span> <span class=\"nv\">time</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">play-chord</span> <span class=\"p\">(</span><span class=\"nf\">chord</span> <span class=\"ss\">:A2</span> <span class=\"ss\">:minor</span><span class=\"p\">))))</span>
</pre></div>
<p><code>defsynth</code> and <code>definst</code> are the two entry points for creating sounds
  and instruments &#8211; go check their docstrings, they explain a lot.</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">defsynth</span> <span class=\"nv\">bar</span> <span class=\"p\">[</span><span class=\"nv\">freq</span> <span class=\"mi\">440</span><span class=\"p\">]</span>
  <span class=\"p\">(</span><span class=\"nf\">out</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nf\">sin-osc</span> <span class=\"nv\">freq</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nf\">bar</span> <span class=\"mi\">500</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">kill</span> <span class=\"nv\">bar</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">stop</span><span class=\"p\">)</span>

<span class=\"p\">(</span><span class=\"nf\">definst</span> <span class=\"nv\">beep</span> <span class=\"p\">[</span><span class=\"nv\">note</span> <span class=\"mi\">60</span><span class=\"p\">]</span>
  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">sound-src</span> <span class=\"p\">(</span><span class=\"nf\">sin-osc</span> <span class=\"p\">(</span><span class=\"nf\">midicps</span> <span class=\"nv\">note</span><span class=\"p\">))</span>
	 <span class=\"nv\">env</span> <span class=\"p\">(</span><span class=\"nf\">env-gen</span> <span class=\"p\">(</span><span class=\"nf\">perc</span> <span class=\"mf\">0.01</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"ss\">:action</span> <span class=\"nv\">FREE</span><span class=\"p\">)]</span> <span class=\"c1\">; sam uses :free</span>
    <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">sound-src</span> <span class=\"nv\">env</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nf\">beep</span> <span class=\"mi\">60</span><span class=\"p\">)</span>

<span class=\"p\">(</span><span class=\"nf\">defsynth</span> <span class=\"nv\">pad1</span> <span class=\"p\">[</span><span class=\"nv\">freq</span> <span class=\"mi\">110</span> <span class=\"nv\">amp</span> <span class=\"mi\">1</span> <span class=\"nv\">gate</span> <span class=\"mi\">1</span> <span class=\"nv\">out-bus</span> <span class=\"mi\">0</span><span class=\"p\">]</span>
  <span class=\"p\">(</span><span class=\"nf\">out</span> <span class=\"nv\">out-bus</span>
	<span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"p\">(</span><span class=\"nf\">saw</span> <span class=\"p\">[</span><span class=\"nv\">freq</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">freq</span> <span class=\"mf\">1.01</span><span class=\"p\">)])</span>
	   <span class=\"p\">(</span><span class=\"nf\">env-gen</span> <span class=\"p\">(</span><span class=\"nf\">adsr</span> <span class=\"mf\">0.01</span> <span class=\"mf\">0.1</span> <span class=\"mf\">0.7</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"ss\">:gate</span> <span class=\"nv\">gate</span> <span class=\"ss\">:action</span> <span class=\"nv\">FREE</span><span class=\"p\">))))</span>

<span class=\"p\">(</span><span class=\"nf\">pad1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">stop</span><span class=\"p\">)</span>

<span class=\"c1\">;; Let&#39;s try something a bit crazy</span>
<span class=\"p\">(</span><span class=\"nb\">for </span><span class=\"p\">[</span><span class=\"nv\">i</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"mi\">200</span><span class=\"p\">)]</span> <span class=\"p\">(</span><span class=\"nf\">at</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"p\">(</span><span class=\"nf\">now</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">i</span> <span class=\"mi\">20</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nf\">beep</span> <span class=\"nv\">i</span><span class=\"p\">)))</span>
</pre></div>
<p>Some more copy-and-paste from overtone&#8217;s wiki:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">piano</span> <span class=\"p\">[</span><span class=\"mi\">60</span> <span class=\"mi\">63</span> <span class=\"mi\">67</span><span class=\"p\">])</span>
<span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">piano</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">note</span> <span class=\"p\">[</span><span class=\"ss\">:C3</span> <span class=\"ss\">:E4</span> <span class=\"ss\">:G4</span><span class=\"p\">]))</span>
<span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">piano</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">note</span> <span class=\"p\">[</span><span class=\"ss\">:C#5</span> <span class=\"ss\">:E4</span> <span class=\"ss\">:G4</span><span class=\"p\">]))</span>
<span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">piano</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">note</span> <span class=\"p\">[</span><span class=\"ss\">:Cb2</span> <span class=\"ss\">:E4</span> <span class=\"ss\">:G4</span><span class=\"p\">]))</span>

<span class=\"p\">(</span><span class=\"nf\">definst</span> <span class=\"nv\">steel-drum</span> <span class=\"p\">[</span><span class=\"nv\">note</span> <span class=\"mi\">60</span> <span class=\"nv\">amp</span> <span class=\"mf\">0.8</span><span class=\"p\">]</span>
  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">freq</span> <span class=\"p\">(</span><span class=\"nf\">midicps</span> <span class=\"nv\">note</span><span class=\"p\">)]</span>
    <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">amp</span>
	<span class=\"p\">(</span><span class=\"nf\">env-gen</span> <span class=\"p\">(</span><span class=\"nf\">perc</span> <span class=\"mf\">0.01</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"ss\">:action</span> <span class=\"nv\">FREE</span><span class=\"p\">)</span>
	<span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"p\">(</span><span class=\"nf\">sin-osc</span> <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"nv\">freq</span> <span class=\"mi\">2</span><span class=\"p\">))</span>
	   <span class=\"p\">(</span><span class=\"nf\">rlpf</span> <span class=\"p\">(</span><span class=\"nf\">saw</span> <span class=\"nv\">freq</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"mf\">1.1</span> <span class=\"nv\">freq</span><span class=\"p\">)</span> <span class=\"mf\">0.4</span><span class=\"p\">)))))</span>

<span class=\"p\">(</span><span class=\"nf\">steel-drum</span> <span class=\"p\">(</span><span class=\"nf\">note</span> <span class=\"ss\">:E3</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">steel-drum</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">note</span> <span class=\"p\">[</span><span class=\"ss\">:E3</span> <span class=\"ss\">:D#4</span><span class=\"p\">]))</span>
</pre></div>
<h3>Overtone: loading .wav samples</h3>
<div class=\"highlight\"><pre><span class=\"c1\">;; Hint: adapt this to your own .wav files</span>
<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">noa</span> <span class=\"p\">(</span><span class=\"nf\">sample</span> <span class=\"s\">&quot;/path/to/a/file.wav&quot;</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[]</span>
  <span class=\"p\">(</span><span class=\"nf\">noa</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">Thread/sleep</span> <span class=\"mi\">3000</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">piano</span> <span class=\"p\">(</span><span class=\"nf\">note</span> <span class=\"ss\">:Cb3</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"nf\">piano</span> <span class=\"mi\">68</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nf\">stop</span><span class=\"p\">)</span>
</pre></div>
<h3>Overtone: using freesound.org</h3>
<p>You can download samples directly from freesound.org via Overtone:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">snare</span> <span class=\"p\">(</span><span class=\"nf\">sample</span> <span class=\"p\">(</span><span class=\"nf\">freesound-path</span> <span class=\"mi\">26903</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">snare</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">clic</span> <span class=\"p\">(</span><span class=\"nf\">sample</span> <span class=\"p\">(</span><span class=\"nf\">freesound-path</span> <span class=\"mi\">406</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">clic</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">steam</span> <span class=\"p\">(</span><span class=\"nf\">sample</span> <span class=\"p\">(</span><span class=\"nf\">freesound-path</span> <span class=\"mi\">30628</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">steam</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">clap</span> <span class=\"p\">(</span><span class=\"nf\">sample</span> <span class=\"p\">(</span><span class=\"nf\">freesound-path</span> <span class=\"mi\">48310</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">clap</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">clap2</span> <span class=\"p\">(</span><span class=\"nf\">sample</span> <span class=\"p\">(</span><span class=\"nf\">freesound-path</span> <span class=\"mi\">132676</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">clap2</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">def </span><span class=\"nv\">boom</span> <span class=\"p\">(</span><span class=\"nf\">sample</span> <span class=\"p\">(</span><span class=\"nf\">freesound-path</span> <span class=\"mi\">80401</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">boom</span><span class=\"p\">)</span>
</pre></div>
<h2>Why I love this?</h2>
<ul>
  <li>I love sounds.</li>
  <li>I love Org+Cider <i>reactivity</i>: evaluating Clojure sexps is fast.</li>
  <li>I love building (mostly random) sounds so fast, it feels like
    <i>sculpting</i> music.</li>
</ul>
<h2>Issues</h2>
<p>If you run into issues while following this tutorial, please report
  them on <a href=\"https://github.com/bzg/org-overtone-intro\">github</a>.</p>
<h2>Exploring further</h2>
<ul>
  <li>https://github.com/overtone/overtone</li>
  <li>https://github.com/overtone/overtone/blob/master/src/overtone/samples/freesound.clj</li>
  <li>http://skillsmatter.com/podcast/home/functional-composition</li>
  <li>http://blog.josephwilk.net/clojure/creating-instruments-with-overtone.html</li>
  <li>http://www.tonalsoft.com/pub/news/pitch-bend.aspx</li>
  <li>http://www.freesound.org/</li>
</ul>


") (pubDate nil "Sat, 21 Dec 2013 00:00:00 +0100") (link nil "http://emacs-doctor.com/emacs-org-babel-overtone-intro.html") (guid ((isPermaLink . "true")) "http://emacs-doctor.com/emacs-org-babel-overtone-intro.html") (category nil "libre"))) ("Blogging from GNU Emacs" "<p>Yes, blogging from Emacs is possible.</p>
<p>If you are familiar with <a href=\"http://orgmode.org\">org-mode</a> and if you already know how to
publish a HTML project, this is straightforward: just download
<a href=\"http://orgmode.org/cgit.cgi/org-mode.git/plain/contrib/lisp/ox-rss.el\">ox-rss.el</a> and follow the instructions in the comment section.</p>
<p>If you are not so familiar with Org-mode, or with publishing HTML
project (or just enjoy reviewing the basics from time to time), here
is a small tutorial describing the steps to let you enjoy an Emacs
blog.</p>
<h2>Org-mode 15 seconds introduction</h2>
<p>Fire up GNU Emacs.</p>
<p>Then hit <code>C-x C-f ~/my-blog.org RET</code> to create a new Org file named
<code>my-blog.org</code>.</p>
<p>In this file, hit <code>M-RET</code> to insert a new heading.  Type something
sensible as the title of your next blog entry:</p>
<div class=\"highlight\"><pre>* My first blog post with Emacs and Org!
This will be the content of my blog entry.
</pre></div>
<p>You’re done.</p>
<h2>Publishing <code>my-blog.org</code> as a HTML page</h2>
<p>You need to publish your Org page somewhere in your computer.</p>
<p>So let’s create a <code>public_html/</code> directory in your home directory:</p>
<pre class=\"example\">
~$ mkdir public_html
</pre>
<p>Now edit your <code>.emacs.el</code> file and add this Emacs lisp snippet:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">org-publish-project-alist</span>
<span class=\"o\">'</span><span class=\"p\">((</span><span class=\"s\">&quot;blog&quot;</span>
<span class=\"nv\">:base-directory</span> <span class=\"s\">&quot;~/&quot;</span>
<span class=\"nv\">:html-extension</span> <span class=\"s\">&quot;html&quot;</span>
<span class=\"nv\">:base-extension</span> <span class=\"s\">&quot;org&quot;</span>
<span class=\"nv\">:publishing-directory</span> <span class=\"s\">&quot;~/public_html/&quot;</span>
<span class=\"nv\">:publishing-function</span> <span class=\"p\">(</span><span class=\"nf\">org-html-publish-to-html</span><span class=\"p\">)</span>
<span class=\"nv\">:html-preamble</span> <span class=\"nv\">nil</span>
<span class=\"nv\">:html-postamble</span> <span class=\"nv\">nil</span><span class=\"p\">)))</span>
</pre></div>
<p>The code above defines a HTML <i>publishing</i> project with no preamble
and no postamble.  (To learn more on publishing projects, please read
the <a href=\"http://orgmode.org/manual/Publishing.html\">Org manual</a>.)</p>
<p>Evaluate this code by hitting <code>C-x e</code> at the end of the last
parenthesis.</p>
<p>Now hit <code>M-x org-publish RET blog RET</code> anywhere in Emacs to publish
the project.</p>
<p>Your <code>public_html/</code> directory now contains a new file, <code>my-blog.html</code>,
with a HTML export of your <code>my-blog.org</code> file.</p>
<h2>Publishing <code>my-blog.org</code> as a RSS feed</h2>
<p>You want to publish this page as a RSS feed so that readers can
subscribe to it.  (Yes, my own definition of a blog is <i>that</i> simple:
some HTML content and a feed.)</p>
<p>You are three steps away from having a blog—you only need to:</p>
<ol>
<li>load <code>ox-rss.el</code> to enable RSS publishing;</li>
<li>create a RSS publishing project;</li>
<li>add some RSS-related info in your HTML publishing project.</li>
</ol>
<h3>Enable RSS publishing</h3>
<p>Find ox-rss.el in Org’s <code>contrib/lisp/</code> directory and make sure this
directory is in your Emacs load-path.</p>
<p>Since Org lives in the <code>~/install/git/</code> contrib on my computer, this
is my configuration:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">'load-path</span> <span class=\"s\">&quot;~/install/git/org-mode/contrib/lisp/&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">'ox-rss</span><span class=\"p\">)</span>
</pre></div>
<p>(We use <code>add-to-list</code> to append a new project to
<code>org-publish-project-alist</code>, but you can simply use <code>setq</code> with both
projects on <code>org-publish-project-alist</code>.)</p>
<h3>Create a RSS publishing project</h3>
<p>Add this new RSS publishing project:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">'org-publish-project-alist</span>
<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">&quot;blog-rss&quot;</span>
<span class=\"nv\">:base-directory</span> <span class=\"s\">&quot;~/&quot;</span>
<span class=\"nv\">:base-extension</span> <span class=\"s\">&quot;org&quot;</span>
<span class=\"nv\">:publishing-directory</span> <span class=\"s\">&quot;~/public_html/&quot;</span>
<span class=\"nv\">:publishing-function</span> <span class=\"p\">(</span><span class=\"nf\">org-rss-publish-to-rss</span><span class=\"p\">)</span>
<span class=\"nv\">:html-link-home</span> <span class=\"s\">&quot;http://mydomain.org/&quot;</span>
<span class=\"nv\">:html-link-use-abs-url</span> <span class=\"nv\">t</span><span class=\"p\">))</span>
</pre></div>
<p>It is pretty similar to our HTML publishing project except that:</p>
<ul>
<li>the publishing function we use is <code>org-rss-publish-to-rss</code> instead
of <code>org-html-publish-to-html</code>;</li>
<li>we set the <code>:html-link-home</code> publishing option so that relative
links in our RSS feed are prefixed with the “http://mydomain.org/”
domain name (assuming it will be the final destination of our blog);</li>
<li>we set the <code>:html-link-use-abs-url</code> publishing option to <code>t</code> (true)
so that all links in our RSS feed are absolute, since it does not
make sense to have relative links in RSS feeds.</li>
</ul>
<p>Evaluate the code above with <code>C-x e</code> then hit <code>M-x org-publish RET
blog-rss RET</code> to publish the RSS feed: <code>public_html/</code> now contains a
<code>my-blog.xml</code> file along with the <code>my-blog.html</code> file.</p>
<h3>Add some RSS-related info in your HTML publishing project</h3>
<p>Our last step is to link our RSS feed (the <code>my-blog.xml</code> file) with
the HTML file.  Let’s rewrite our HTML project like this:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">org-publish-project-alist</span>
<span class=\"o\">'</span><span class=\"p\">((</span><span class=\"s\">&quot;blog&quot;</span>
<span class=\"nv\">:base-directory</span> <span class=\"s\">&quot;~/&quot;</span>
<span class=\"nv\">:html-extension</span> <span class=\"s\">&quot;html&quot;</span>
<span class=\"nv\">:base-extension</span> <span class=\"s\">&quot;org&quot;</span>
<span class=\"nv\">:publishing-directory</span> <span class=\"s\">&quot;~/public_html/&quot;</span>
<span class=\"nv\">:publishing-function</span> <span class=\"p\">(</span><span class=\"nf\">org-html-publish-to-html</span><span class=\"p\">)</span>
<span class=\"nv\">:html-preamble</span> <span class=\"nv\">nil</span>
<span class=\"nv\">:html-postamble</span> <span class=\"nv\">nil</span>
<span class=\"nv\">:html-head-extra</span>
<span class=\"s\">&quot;&lt;link rel=\\&quot;alternate\\&quot; type=\\&quot;application/rss+xml\\&quot;</span>
<span class=\"s\">                href=\\&quot;http://mydomain.org/my-blog.xml\\&quot;</span>
<span class=\"s\">                title=\\&quot;RSS feed for mydomain.org\\&quot;&gt;&quot;</span><span class=\"p\">)))</span>
</pre></div>
<p>We just appended the <code>:html-head-extra</code> option, which tells what
information we want to add in our HTML <code>&lt;head&gt;...&lt;/head&gt;</code> section.</p>
<h2>Last but not least: a real setup</h2>
<p>Okay, you now have a single file, with a RSS feed that points to
headlines in this file.  But what if you want to allow readers to
<i>comment</i> your blog posts?</p>
<p>In this case, you need to have <i>one page per blog entry</i> and to use
something like <a href=\"http://disqus.com\">disqus.com</a> to enable comments on this page.</p>
<p>This is perfectly <i>fine</i>!</p>
<p>Just write your blog posts in dedicated .org files, then use the
<code>my-blog.org</code> file as a collection of <i>summaries</i> of your blog posts.
At the end of each summary, put a link to the Org page where people
can comment.</p>
<p>Then update your RSS publishing project like this:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">'org-publish-project-alist</span>
<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">&quot;blog-rss&quot;</span>
<span class=\"nv\">:base-directory</span> <span class=\"s\">&quot;~/&quot;</span>
<span class=\"nv\">:base-extension</span> <span class=\"s\">&quot;org&quot;</span>
<span class=\"nv\">:publishing-directory</span> <span class=\"s\">&quot;~/public_html/&quot;</span>
<span class=\"nv\">:publishing-function</span> <span class=\"p\">(</span><span class=\"nf\">org-rss-publish-to-rss</span><span class=\"p\">)</span>
<span class=\"nv\">:html-link-home</span> <span class=\"s\">&quot;http://mydomain.org/&quot;</span>
<span class=\"nv\">:html-link-use-abs-url</span> <span class=\"nv\">t</span>
<span class=\"nv\">:exclude</span> <span class=\"s\">&quot;.*&quot;</span>
<span class=\"nv\">:include</span> <span class=\"p\">(</span><span class=\"s\">&quot;my-blog.org&quot;</span><span class=\"p\">)))</span>
</pre></div>
<p>Note the options <code>:exclude</code> and <code>:include</code>—they say: “Don’t publish
.xml files for all .org files in the base directory, only publish a
.xml file for <code>my-blog.org</code>.”</p>
<p>This setup may sound weird first, but I find it useful on the long
term: quick thoughts get directly in the main <code>my-blog.org</code> file, and
longer blogs have their dedicated pages, with comments allowed.</p>
<h2>Going beyond</h2>
<p>Of course: you can do a lot more than that—here is a quick list:</p>
<ul>
<li>embed pictures;</li>
<li>embed arbitrary HTML code;</li>
<li>embed code snippets (zero headache to get syntax highlighting);</li>
<li>tweak your RSS publishing project to skip TODO headlines</li>
<li>use timestamps for drafts that need to be published later;</li>
<li>etc.</li>
</ul>
<p>If you are not afraid of raw code with too few comments, you can dive
into my <a href=\"http://bzg.fr/emacs.html\">.emacs.el</a> and grab hints from my configuration.</p>
<h2>Why this is cool?</h2>
<ul>
<li>Writing in Emacs is just pure delight.</li>
<li>Blog posts are now part of your Org agenda.</li>
<li>If you already have a habit of taking your notes in Org, then you’ll
more easily take a habit of publishing blog posts from these notes.</li>
<li>Since Org files are plain text, storing a blog as a git repository
feels natural: people can contribute your blog with… patches.</li>
</ul>
<p><code>ox-rss.el</code> is not very well known so far, I hope this blog post will
encourage people to use it!  Let me know if something is not clear.</p>
<h2>Dependencies</h2>
<p>You need to use Emacs version 24.2.1 (or later) and Org 8.0
(or later).</p>
<h2>Thanks</h2>
<p>Thanks to Sacha Chua’s post here about <a href=\"http://sachachua.com/blog/2013/09/when-i-blog-with-emacs-and-when-i-blog-with-something-else/\">blogging with Emacs</a>, as this
triggered me to write this post!  Her post is worth exploring for the
links it contains to other Emacs-based solutions I didn’t mentioned
here… but I’m sure you’ll discuss them in the comments.</p>" "http://emacs-doctor.com/blogging-from-emacs.html" (21058 2912) old 5 nil nil ((title nil "Blogging from GNU Emacs") (description nil "
<p>Yes, blogging from Emacs is possible.</p>
<p>If you are familiar with <a href=\"http://orgmode.org\">org-mode</a> and if you already know how to
  publish a HTML project, this is straightforward: just download
  <a href=\"http://orgmode.org/cgit.cgi/org-mode.git/plain/contrib/lisp/ox-rss.el\">ox-rss.el</a> and follow the instructions in the comment section.</p>
<p>If you are not so familiar with Org-mode, or with publishing HTML
  project (or just enjoy reviewing the basics from time to time), here
  is a small tutorial describing the steps to let you enjoy an Emacs
  blog.</p>
<h2>Org-mode 15 seconds introduction</h2>
<p>Fire up GNU Emacs.</p>
<p>Then hit <code>C-x C-f ~/my-blog.org RET</code> to create a new Org file named
  <code>my-blog.org</code>.</p>
<p>In this file, hit <code>M-RET</code> to insert a new heading.  Type something
  sensible as the title of your next blog entry:</p>
<div class=\"highlight\"><pre>* My first blog post with Emacs and Org!

This will be the content of my blog entry.
</pre></div>
<p>You&#8217;re done.</p>
<h2>Publishing <code>my-blog.org</code> as a HTML page</h2>
<p>You need to publish your Org page somewhere in your computer.</p>
<p>So let&#8217;s create a <code>public_html/</code> directory in your home directory:</p>
<pre class=\"example\">
~$ mkdir public_html
</pre>
<p>Now edit your <code>.emacs.el</code> file and add this Emacs lisp snippet:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">org-publish-project-alist</span>
      <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"s\">&quot;blog&quot;</span>
         <span class=\"nv\">:base-directory</span> <span class=\"s\">&quot;~/&quot;</span>
         <span class=\"nv\">:html-extension</span> <span class=\"s\">&quot;html&quot;</span>
         <span class=\"nv\">:base-extension</span> <span class=\"s\">&quot;org&quot;</span>
         <span class=\"nv\">:publishing-directory</span> <span class=\"s\">&quot;~/public_html/&quot;</span>
         <span class=\"nv\">:publishing-function</span> <span class=\"p\">(</span><span class=\"nf\">org-html-publish-to-html</span><span class=\"p\">)</span>
         <span class=\"nv\">:html-preamble</span> <span class=\"nv\">nil</span>
         <span class=\"nv\">:html-postamble</span> <span class=\"nv\">nil</span><span class=\"p\">)))</span>
</pre></div>
<p>The code above defines a HTML <i>publishing</i> project with no preamble
  and no postamble.  (To learn more on publishing projects, please read
  the <a href=\"http://orgmode.org/manual/Publishing.html\">Org manual</a>.)</p>
<p>Evaluate this code by hitting <code>C-x e</code> at the end of the last
  parenthesis.</p>
<p>Now hit <code>M-x org-publish RET blog RET</code> anywhere in Emacs to publish
  the project.</p>
<p>Your <code>public_html/</code> directory now contains a new file, <code>my-blog.html</code>,
  with a HTML export of your <code>my-blog.org</code> file.</p>
<h2>Publishing <code>my-blog.org</code> as a RSS feed</h2>
<p>You want to publish this page as a RSS feed so that readers can
  subscribe to it.  (Yes, my own definition of a blog is <i>that</i> simple:
  some HTML content and a feed.)</p>
<p>You are three steps away from having a blog&#8212;you only need to:</p>
<ol>
  <li>load <code>ox-rss.el</code> to enable RSS publishing;</li>
  <li>create a RSS publishing project;</li>
  <li>add some RSS-related info in your HTML publishing project.</li>
</ol>
<h3>Enable RSS publishing</h3>
<p>Find ox-rss.el in Org&#8217;s <code>contrib/lisp/</code> directory and make sure this
  directory is in your Emacs load-path.</p>
<p>Since Org lives in the <code>~/install/git/</code> contrib on my computer, this
  is my configuration:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">&#39;load-path</span> <span class=\"s\">&quot;~/install/git/org-mode/contrib/lisp/&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;ox-rss</span><span class=\"p\">)</span>
</pre></div>
<p>(We use <code>add-to-list</code> to append a new project to
  <code>org-publish-project-alist</code>, but you can simply use <code>setq</code> with both
  projects on <code>org-publish-project-alist</code>.)</p>
<h3>Create a RSS publishing project</h3>
<p>Add this new RSS publishing project:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">&#39;org-publish-project-alist</span>
             <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;blog-rss&quot;</span>
		<span class=\"nv\">:base-directory</span> <span class=\"s\">&quot;~/&quot;</span>
		<span class=\"nv\">:base-extension</span> <span class=\"s\">&quot;org&quot;</span>
		<span class=\"nv\">:publishing-directory</span> <span class=\"s\">&quot;~/public_html/&quot;</span>
		<span class=\"nv\">:publishing-function</span> <span class=\"p\">(</span><span class=\"nf\">org-rss-publish-to-rss</span><span class=\"p\">)</span>
		<span class=\"nv\">:html-link-home</span> <span class=\"s\">&quot;http://mydomain.org/&quot;</span>
		<span class=\"nv\">:html-link-use-abs-url</span> <span class=\"nv\">t</span><span class=\"p\">))</span>
</pre></div>
<p>It is pretty similar to our HTML publishing project except that:</p>
<ul>
  <li>the publishing function we use is <code>org-rss-publish-to-rss</code> instead
    of <code>org-html-publish-to-html</code>;</li>
  <li>we set the <code>:html-link-home</code> publishing option so that relative
    links in our RSS feed are prefixed with the &#8220;http://mydomain.org/&#8221;
    domain name (assuming it will be the final destination of our blog);</li>
  <li>we set the <code>:html-link-use-abs-url</code> publishing option to <code>t</code> (true)
    so that all links in our RSS feed are absolute, since it does not
    make sense to have relative links in RSS feeds.</li>
</ul>
<p>Evaluate the code above with <code>C-x e</code> then hit <code>M-x org-publish RET
  blog-rss RET</code> to publish the RSS feed: <code>public_html/</code> now contains a
  <code>my-blog.xml</code> file along with the <code>my-blog.html</code> file.</p>
<h3>Add some RSS-related info in your HTML publishing project</h3>
<p>Our last step is to link our RSS feed (the <code>my-blog.xml</code> file) with
  the HTML file.  Let&#8217;s rewrite our HTML project like this:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">org-publish-project-alist</span>
      <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"s\">&quot;blog&quot;</span>
         <span class=\"nv\">:base-directory</span> <span class=\"s\">&quot;~/&quot;</span>
         <span class=\"nv\">:html-extension</span> <span class=\"s\">&quot;html&quot;</span>
         <span class=\"nv\">:base-extension</span> <span class=\"s\">&quot;org&quot;</span>
         <span class=\"nv\">:publishing-directory</span> <span class=\"s\">&quot;~/public_html/&quot;</span>
         <span class=\"nv\">:publishing-function</span> <span class=\"p\">(</span><span class=\"nf\">org-html-publish-to-html</span><span class=\"p\">)</span>
         <span class=\"nv\">:html-preamble</span> <span class=\"nv\">nil</span>
         <span class=\"nv\">:html-postamble</span> <span class=\"nv\">nil</span>
         <span class=\"nv\">:html-head-extra</span>
         <span class=\"s\">&quot;&lt;link rel=\\&quot;alternate\\&quot; type=\\&quot;application/rss+xml\\&quot;</span>
<span class=\"s\">                href=\\&quot;http://mydomain.org/my-blog.xml\\&quot;</span>
<span class=\"s\">                title=\\&quot;RSS feed for mydomain.org\\&quot;&gt;&quot;</span><span class=\"p\">)))</span>
</pre></div>
<p>We just appended the <code>:html-head-extra</code> option, which tells what
  information we want to add in our HTML <code>&lt;head&gt;...&lt;/head&gt;</code> section.</p>
<h2>Last but not least: a real setup</h2>
<p>Okay, you now have a single file, with a RSS feed that points to
  headlines in this file.  But what if you want to allow readers to
  <i>comment</i> your blog posts?</p>
<p>In this case, you need to have <i>one page per blog entry</i> and to use
  something like <a href=\"http://disqus.com\">disqus.com</a> to enable comments on this page.</p>
<p>This is perfectly <i>fine</i>!</p>
<p>Just write your blog posts in dedicated .org files, then use the
  <code>my-blog.org</code> file as a collection of <i>summaries</i> of your blog posts.
  At the end of each summary, put a link to the Org page where people
  can comment.</p>
<p>Then update your RSS publishing project like this:</p>
<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"nf\">add-to-list</span> <span class=\"ss\">&#39;org-publish-project-alist</span>
             <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;blog-rss&quot;</span>
		<span class=\"nv\">:base-directory</span> <span class=\"s\">&quot;~/&quot;</span>
		<span class=\"nv\">:base-extension</span> <span class=\"s\">&quot;org&quot;</span>
		<span class=\"nv\">:publishing-directory</span> <span class=\"s\">&quot;~/public_html/&quot;</span>
		<span class=\"nv\">:publishing-function</span> <span class=\"p\">(</span><span class=\"nf\">org-rss-publish-to-rss</span><span class=\"p\">)</span>
		<span class=\"nv\">:html-link-home</span> <span class=\"s\">&quot;http://mydomain.org/&quot;</span>
		<span class=\"nv\">:html-link-use-abs-url</span> <span class=\"nv\">t</span>
		<span class=\"nv\">:exclude</span> <span class=\"s\">&quot;.*&quot;</span>
		<span class=\"nv\">:include</span> <span class=\"p\">(</span><span class=\"s\">&quot;my-blog.org&quot;</span><span class=\"p\">)))</span>
</pre></div>
<p>Note the options <code>:exclude</code> and <code>:include</code>&#8212;they say: &#8220;Don&#8217;t publish
  .xml files for all .org files in the base directory, only publish a
  .xml file for <code>my-blog.org</code>.&#8221;</p>
<p>This setup may sound weird first, but I find it useful on the long
  term: quick thoughts get directly in the main <code>my-blog.org</code> file, and
  longer blogs have their dedicated pages, with comments allowed.</p>
<h2>Going beyond</h2>
<p>Of course: you can do a lot more than that&#8212;here is a quick list:</p>
<ul>
  <li>embed pictures;</li>
  <li>embed arbitrary HTML code;</li>
  <li>embed code snippets (zero headache to get syntax highlighting);</li>
  <li>tweak your RSS publishing project to skip TODO headlines</li>
  <li>use timestamps for drafts that need to be published later;</li>
  <li>etc.</li>
</ul>
<p>If you are not afraid of raw code with too few comments, you can dive
  into my <a href=\"http://bzg.fr/emacs.html\">.emacs.el</a> and grab hints from my configuration.</p>
<h2>Why this is cool?</h2>
<ul>
  <li>Writing in Emacs is just pure delight.</li>
  <li>Blog posts are now part of your Org agenda.</li>
  <li>If you already have a habit of taking your notes in Org, then you&#8217;ll
    more easily take a habit of publishing blog posts from these notes.</li>
  <li>Since Org files are plain text, storing a blog as a git repository
    feels natural: people can contribute your blog with&#8230; patches.</li>
</ul>
<p><code>ox-rss.el</code> is not very well known so far, I hope this blog post will
  encourage people to use it!  Let me know if something is not clear.</p>
<h2>Dependencies</h2>
<p>You need to use Emacs version 24.2.1 (or later) and Org 8.0
  (or later).</p>
<h2>Thanks</h2>
<p>Thanks to Sacha Chua&#8217;s post here about <a href=\"http://sachachua.com/blog/2013/09/when-i-blog-with-emacs-and-when-i-blog-with-something-else/\">blogging with Emacs</a>, as this
  triggered me to write this post!  Her post is worth exploring for the
  links it contains to other Emacs-based solutions I didn&#8217;t mentioned
  here&#8230; but I&#8217;m sure you&#8217;ll discuss them in the comments.</p>


") (pubDate nil "Wed, 25 Sep 2013 00:00:00 +0200") (link nil "http://emacs-doctor.com/blogging-from-emacs.html") (guid ((isPermaLink . "true")) "http://emacs-doctor.com/blogging-from-emacs.html") (category nil "libre"))) ("Learn Emacs Lisp in 15 minutes" "<p>I was surprised not to find an introduction to Emacs Lisp on
<a href=\"http://learnxinyminutes.com\">http://learnxinyminutes.com</a> so I created one.  This page is now on
http://learnxinyminutes.com/docs/elisp/ too.</p>
<p>Comments and feedback are welcome !</p>
<div class=\"highlight\"><pre><span class=\"c1\">;; This gives an introduction to Emacs Lisp in 15 minutes (v0.2d)</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Author: Bastien / @bzg2 / http://bzg.fr</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; First make sure you read this text by Peter Norvig:</span>
<span class=\"c1\">;; http://norvig.com/21-days.html</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Then install GNU Emacs 24.3:</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Debian: apt-get install emacs (or see your distro instructions)</span>
<span class=\"c1\">;; MacOSX: http://emacsformacosx.com/emacs-builds/Emacs-24.3-universal-10.6.8.dmg</span>
<span class=\"c1\">;; Windows: http://ftp.gnu.org/gnu/windows/emacs/emacs-24.3-bin-i386.zip</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; More general information can be found at:</span>
<span class=\"c1\">;; http://www.gnu.org/software/emacs/#Obtaining</span>
<span class=\"c1\">;; Important warning:</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Going through this tutorial won't damage your computer unless</span>
<span class=\"c1\">;; you get so angry that you throw it on the floor.  In that case,</span>
<span class=\"c1\">;; I hereby decline any responsability.  Have fun!</span>
<span class=\"c1\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span class=\"c1\">;; </span>
<span class=\"c1\">;; Fire up Emacs.</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Hit the `q' key to dismiss the welcome message.</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Now look at the gray line at the bottom of the window:</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; &quot;*scratch*&quot; is the name of the editing space you are now in.</span>
<span class=\"c1\">;; This editing space is called a &quot;buffer&quot;.</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; The scratch buffer is the default buffer when opening Emacs.</span>
<span class=\"c1\">;; You are never editing files: you are editing buffers that you</span>
<span class=\"c1\">;; can save to a file.</span>
<span class=\"c1\">;; </span>
<span class=\"c1\">;; &quot;Lisp interaction&quot; refers to a set of commands available here.</span>
<span class=\"c1\">;; </span>
<span class=\"c1\">;; Emacs has a built-in set of commands available in every buffer,</span>
<span class=\"c1\">;; and several subsets of commands available when you activate a</span>
<span class=\"c1\">;; specific mode.  Here we use the `lisp-interaction-mode', which</span>
<span class=\"c1\">;; comes with commands to evaluate and navigate within Elisp code.</span>
<span class=\"c1\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Semi-colons start comments anywhere on a line.</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Elisp programs are made of symbolic expressions (&quot;sexps&quot;):</span>
<span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">2</span> <span class=\"mi\">2</span><span class=\"p\">)</span>
<span class=\"c1\">;; This symbolic expression reads as &quot;Add 2 to 2&quot;.</span>
<span class=\"c1\">;; Sexps are enclosed into parentheses, possibly nested:</span>
<span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">2</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">))</span>
<span class=\"c1\">;; A symbolic expression contains atoms or other symbolic</span>
<span class=\"c1\">;; expressions.  In the above examples, 1 and 2 are atoms,</span>
<span class=\"c1\">;; (+ 2 (+ 1 1)) and (+ 1 1) are symbolic expressions.</span>
<span class=\"c1\">;; From `lisp-interaction-mode' you can evaluate sexps.</span>
<span class=\"c1\">;; Put the cursor right after the closing parenthesis then</span>
<span class=\"c1\">;; hold down the control and hit the j keys (&quot;C-j&quot; for short).</span>
<span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">3</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"p\">))</span>
<span class=\"c1\">;;           ^ cursor here</span>
<span class=\"c1\">;; `C-j' =&gt; 6</span>
<span class=\"c1\">;; `C-j' inserts the result of the evaluation in the buffer.</span>
<span class=\"c1\">;; `C-xC-e' displays the same result in Emacs bottom line,</span>
<span class=\"c1\">;; called the &quot;minibuffer&quot;.  We will generally use `C-xC-e',</span>
<span class=\"c1\">;; as we don't want to clutter the buffer with useless text.</span>
<span class=\"c1\">;; `setq' stores a value into a variable:</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">my-name</span> <span class=\"s\">&quot;Bastien&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; `C-xC-e' =&gt; &quot;Bastien&quot; (displayed in the mini-buffer)</span>
<span class=\"c1\">;; `insert' will insert &quot;Hello!&quot; where the cursor is:</span>
<span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"s\">&quot;Hello!&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; `C-xC-e' =&gt; &quot;Hello!&quot;</span>
<span class=\"c1\">;; We used `insert' with only one argument &quot;Hello!&quot;, but</span>
<span class=\"c1\">;; we can pass more arguments -- here we use two:</span>
<span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"s\">&quot;Hello&quot;</span> <span class=\"s\">&quot; world!&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; `C-xC-e' =&gt; &quot;Hello world!&quot;</span>
<span class=\"c1\">;; You can use variables instead of strings:</span>
<span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"s\">&quot;Hello, I am &quot;</span> <span class=\"nv\">my-name</span><span class=\"p\">)</span>
<span class=\"c1\">;; `C-xC-e' =&gt; &quot;Hello, I am Bastien&quot;</span>
<span class=\"c1\">;; You can combine sexps into functions:</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">hello</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"s\">&quot;Hello, I am &quot;</span> <span class=\"nv\">my-name</span><span class=\"p\">))</span>
<span class=\"c1\">;; `C-xC-e' =&gt; hello</span>
<span class=\"c1\">;; You can evaluate functions:</span>
<span class=\"p\">(</span><span class=\"nf\">hello</span><span class=\"p\">)</span>
<span class=\"c1\">;; `C-xC-e' =&gt; Hello, I am Bastien</span>
<span class=\"c1\">;; The empty parentheses in the function's definition means that</span>
<span class=\"c1\">;; it does not accept arguments.  But always using `my-name' is</span>
<span class=\"c1\">;; boring, let's tell the function to accept one argument (here</span>
<span class=\"c1\">;; the argument is called &quot;name&quot;): </span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">hello</span> <span class=\"p\">(</span><span class=\"nf\">name</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"s\">&quot;Hello &quot;</span> <span class=\"nv\">name</span><span class=\"p\">))</span>
<span class=\"c1\">;; `C-xC-e' =&gt; hello</span>
<span class=\"c1\">;; Now let's call the function with the string &quot;you&quot; as the value</span>
<span class=\"c1\">;; for its unique argument:</span>
<span class=\"p\">(</span><span class=\"nf\">hello</span> <span class=\"s\">&quot;you&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; `C-xC-e' =&gt; &quot;Hello you&quot;</span>
<span class=\"c1\">;; Yeah!</span>
<span class=\"c1\">;; Take a breath.</span>
<span class=\"c1\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Now switch to a new buffer named &quot;*test*&quot; in another window:</span>
<span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; `C-xC-e'</span>
<span class=\"c1\">;; =&gt; [screen has two windows and cursor is in the *test* buffer]</span>
<span class=\"c1\">;; Mouse over the top window and left-click to go back.  Or you can</span>
<span class=\"c1\">;; use `C-xo' (i.e. hold down control-x and hit o) to go to the other</span>
<span class=\"c1\">;; window interactively.</span>
<span class=\"c1\">;; You can combine several sexps with `progn':</span>
<span class=\"p\">(</span><span class=\"nf\">progn</span>
<span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">hello</span> <span class=\"s\">&quot;you&quot;</span><span class=\"p\">))</span>
<span class=\"c1\">;; `C-xC-e'</span>
<span class=\"c1\">;; =&gt; [The screen has two windows and cursor is in the *test* buffer]</span>
<span class=\"c1\">;; Now if you don't mind, I'll stop asking you to hit `C-xC-e': do it</span>
<span class=\"c1\">;; for every sexp that follows.</span>
<span class=\"c1\">;; Always go back to the *scratch* buffer with the mouse or `C-xo'.</span>
<span class=\"c1\">;; It's often useful to erase the buffer:</span>
<span class=\"p\">(</span><span class=\"nf\">progn</span>
<span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">erase-buffer</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">hello</span> <span class=\"s\">&quot;there&quot;</span><span class=\"p\">))</span>
<span class=\"c1\">;; Or to go back to the other window:</span>
<span class=\"p\">(</span><span class=\"nf\">progn</span>
<span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">erase-buffer</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">hello</span> <span class=\"s\">&quot;you&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">))</span>
<span class=\"c1\">;; You can bind a value to a local variable with `let':</span>
<span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">((</span><span class=\"nf\">local-name</span> <span class=\"s\">&quot;you&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">erase-buffer</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">hello</span> <span class=\"nv\">local-name</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">))</span>
<span class=\"c1\">;; No need to use `progn' in that case, since `let' also combines</span>
<span class=\"c1\">;; several sexps.</span>
<span class=\"c1\">;; Let's format a string:</span>
<span class=\"p\">(</span><span class=\"nf\">format</span> <span class=\"s\">&quot;Hello %s!\\n&quot;</span> <span class=\"s\">&quot;visitor&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; %s is a place-holder for a string, replaced by &quot;visitor&quot;.</span>
<span class=\"c1\">;; \\n is the newline character.</span>
<span class=\"c1\">;; Let's refine our function by using format:</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">hello</span> <span class=\"p\">(</span><span class=\"nf\">name</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"p\">(</span><span class=\"nf\">format</span> <span class=\"s\">&quot;Hello %s!\\n&quot;</span> <span class=\"nv\">name</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">hello</span> <span class=\"s\">&quot;you&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; Let's create another function which uses `let':</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">greeting</span> <span class=\"p\">(</span><span class=\"nf\">name</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">((</span><span class=\"nf\">your-name</span> <span class=\"s\">&quot;Bastien&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"p\">(</span><span class=\"nf\">format</span> <span class=\"s\">&quot;Hello %s!\\n\\nI am %s.&quot;</span>
<span class=\"nv\">name</span>       <span class=\"c1\">; the argument of the function</span>
<span class=\"nv\">your-name</span>  <span class=\"c1\">; the let-bound variable &quot;Bastien&quot;</span>
<span class=\"p\">))))</span>
<span class=\"c1\">;; And evaluate it:</span>
<span class=\"p\">(</span><span class=\"nf\">greeting</span> <span class=\"s\">&quot;you&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; Some function are interactive:</span>
<span class=\"p\">(</span><span class=\"nf\">read-from-minibuffer</span> <span class=\"s\">&quot;Enter your name: &quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; Evaluating this function returns what you entered at the prompt.</span>
<span class=\"c1\">;; Let's make our `greeting' function prompt for your name:</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">greeting</span> <span class=\"p\">(</span><span class=\"nf\">from-name</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">((</span><span class=\"nf\">your-name</span> <span class=\"p\">(</span><span class=\"nf\">read-from-minibuffer</span> <span class=\"s\">&quot;Enter your name: &quot;</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"p\">(</span><span class=\"nf\">format</span> <span class=\"s\">&quot;Hello!\\n\\nI am %s and you are %s.&quot;</span>
<span class=\"nv\">from-name</span> <span class=\"c1\">; the argument of the function</span>
<span class=\"nv\">your-name</span> <span class=\"c1\">; the let-bound var, entered at prompt</span>
<span class=\"p\">))))</span>
<span class=\"p\">(</span><span class=\"nf\">greeting</span> <span class=\"s\">&quot;Bastien&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; Let's complete it by displaying the results in the other window:</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">greeting</span> <span class=\"p\">(</span><span class=\"nf\">from-name</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">((</span><span class=\"nf\">your-name</span> <span class=\"p\">(</span><span class=\"nf\">read-from-minibuffer</span> <span class=\"s\">&quot;Enter your name: &quot;</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">erase-buffer</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"p\">(</span><span class=\"nf\">format</span> <span class=\"s\">&quot;Hello %s!\\n\\nI am %s.&quot;</span> <span class=\"nv\">your-name</span> <span class=\"nv\">from-name</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>
<span class=\"c1\">;; Now test it:</span>
<span class=\"p\">(</span><span class=\"nf\">greeting</span> <span class=\"s\">&quot;Bastien&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; Take a breath.</span>
<span class=\"c1\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Let's store a list of names:</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">list-of-names</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s\">&quot;Sarah&quot;</span> <span class=\"s\">&quot;Chloe&quot;</span> <span class=\"s\">&quot;Mathilde&quot;</span><span class=\"p\">))</span>
<span class=\"c1\">;; Get the first element of this list with `car':</span>
<span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">list-of-names</span><span class=\"p\">)</span>
<span class=\"c1\">;; Get a list of all but the first element with `cdr':</span>
<span class=\"p\">(</span><span class=\"nb\">cdr </span><span class=\"nv\">list-of-names</span><span class=\"p\">)</span>
<span class=\"c1\">;; Add an element to the beginning of a list with `push':</span>
<span class=\"p\">(</span><span class=\"nf\">push</span> <span class=\"s\">&quot;Stephanie&quot;</span> <span class=\"nv\">list-of-names</span><span class=\"p\">)</span>
<span class=\"c1\">;; NOTE: `car' and `cdr' don't modify the list, but `push' does.</span>
<span class=\"c1\">;; This is an important difference: some functions don't have any</span>
<span class=\"c1\">;; side-effects (like `car') while others have (like `push').</span>
<span class=\"c1\">;; Let's call `hello' for each element in `list-of-names':</span>
<span class=\"p\">(</span><span class=\"nf\">mapcar</span> <span class=\"ss\">'hello</span> <span class=\"nv\">list-of-names</span><span class=\"p\">)</span>
<span class=\"c1\">;; Refine `greeting' to say hello to everyone in `list-of-names':</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">greeting</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">erase-buffer</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">mapcar</span> <span class=\"ss\">'hello</span> <span class=\"nv\">list-of-names</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">greeting</span><span class=\"p\">)</span>
<span class=\"c1\">;; Remember the `hello' function we defined above?  It takes one</span>
<span class=\"c1\">;; argument, a name.  `mapcar' calls `hello', successively using each</span>
<span class=\"c1\">;; element of `list-of-names' as the argument for `hello'.</span>
<span class=\"c1\">;; Now let's arrange a bit what we have in the displayed buffer:</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">replace-hello-by-bonjour</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">goto-char</span> <span class=\"p\">(</span><span class=\"nf\">point-min</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">while</span> <span class=\"p\">(</span><span class=\"nf\">search-forward</span> <span class=\"s\">&quot;Hello&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">replace-match</span> <span class=\"s\">&quot;Bonjour&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">))</span>
<span class=\"c1\">;; (goto-char (point-min)) goes to the beginning of the buffer.</span>
<span class=\"c1\">;; (search-forward &quot;Hello&quot;) searches for the string &quot;Hello&quot;.</span>
<span class=\"c1\">;; (while x y) evaluates the y sexp(s) while x returns something.</span>
<span class=\"c1\">;; If x returns `nil' (nothing), we exit the while loop.</span>
<span class=\"p\">(</span><span class=\"nf\">replace-hello-by-bonjour</span><span class=\"p\">)</span>
<span class=\"c1\">;; You should see all occurrences of &quot;Hello&quot; in the *test* buffer</span>
<span class=\"c1\">;; replaced by &quot;Bonjour&quot;.</span>
<span class=\"c1\">;; You should also get an error: &quot;Search failed: Hello&quot;.</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; To avoid this error, you need to tell `search-forward' whether it</span>
<span class=\"c1\">;; should stop searching at some point in the buffer, and whether it</span>
<span class=\"c1\">;; should silently fail when nothing is found:</span>
<span class=\"c1\">;; (search-forward &quot;Hello&quot; nil t) does the trick:</span>
<span class=\"c1\">;; The `nil' argument says: the search is not bound to a position.</span>
<span class=\"c1\">;; The `t' argument says: silently fail when nothing is found.</span>
<span class=\"c1\">;; We use this sexp in the function below, which doesn't throw an error:</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">hello-to-bonjour</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">erase-buffer</span><span class=\"p\">)</span>
<span class=\"c1\">;; Say hello to names in `list-of-names'</span>
<span class=\"p\">(</span><span class=\"nf\">mapcar</span> <span class=\"ss\">'hello</span> <span class=\"nv\">list-of-names</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">goto-char</span> <span class=\"p\">(</span><span class=\"nf\">point-min</span><span class=\"p\">))</span>
<span class=\"c1\">;; Replace &quot;Hello&quot; by &quot;Bonjour&quot;</span>
<span class=\"p\">(</span><span class=\"nf\">while</span> <span class=\"p\">(</span><span class=\"nf\">search-forward</span> <span class=\"s\">&quot;Hello&quot;</span> <span class=\"nv\">nil</span> <span class=\"nv\">t</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">replace-match</span> <span class=\"s\">&quot;Bonjour&quot;</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">hello-to-bonjour</span><span class=\"p\">)</span>
<span class=\"c1\">;; Let's colorize the names:</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">boldify-names</span> <span class=\"p\">()</span>
<span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">goto-char</span> <span class=\"p\">(</span><span class=\"nf\">point-min</span><span class=\"p\">))</span>
<span class=\"p\">(</span><span class=\"nf\">while</span> <span class=\"p\">(</span><span class=\"nf\">re-search-forward</span> <span class=\"s\">&quot;Bonjour \\\\(.+\\\\)!&quot;</span> <span class=\"nv\">nil</span> <span class=\"nv\">t</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">add-text-properties</span> <span class=\"p\">(</span><span class=\"nf\">match-beginning</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nf\">match-end</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
<span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"ss\">'face</span> <span class=\"ss\">'bold</span><span class=\"p\">)))</span>
<span class=\"p\">(</span><span class=\"nf\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">))</span>
<span class=\"c1\">;; This functions introduces `re-search-forward': instead of</span>
<span class=\"c1\">;; searching for the string &quot;Bonjour&quot;, you search for a pattern,</span>
<span class=\"c1\">;; using a &quot;regular expression&quot; (abbreviated in the prefix &quot;re-&quot;).</span>
<span class=\"c1\">;; The regular expression is &quot;Bonjour \\\\(.+\\\\)!&quot; and it reads:</span>
<span class=\"c1\">;; the string &quot;Bonjour &quot;, and</span>
<span class=\"c1\">;; a group of           | this is the \\\\( ... \\\\) construct</span>
<span class=\"c1\">;;   any character      | this is the .</span>
<span class=\"c1\">;;   possibly repeated  | this is the +</span>
<span class=\"c1\">;; and the &quot;!&quot; string.</span>
<span class=\"c1\">;; Ready?  Test it!</span>
<span class=\"p\">(</span><span class=\"nf\">boldify-names</span><span class=\"p\">)</span>
<span class=\"c1\">;; `add-text-properties' adds... text properties, like a face.</span>
<span class=\"c1\">;; OK, we are done.  Happy hacking!</span>
<span class=\"c1\">;; If you want to know more about a variable or a function:</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; C-h v a-variable RET</span>
<span class=\"c1\">;; C-h f a-function RET</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; To read the Emacs Lisp manual with Emacs:</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; C-h i m elisp RET</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; To read an online introduction to Emacs Lisp:</span>
<span class=\"c1\">;; https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html</span>
<span class=\"c1\">;; Thanks to these people for their feedback and suggestions:</span>
<span class=\"c1\">;; - Wes Hardaker</span>
<span class=\"c1\">;; - notbob</span>
<span class=\"c1\">;; - Kevin Montuori</span>
<span class=\"c1\">;; - Arne Babenhauserheide</span>
<span class=\"c1\">;; - Alan Schmitt</span>
<span class=\"c1\">;; - LinXitoW</span>
<span class=\"c1\">;; - Aaron Meurer</span>
</pre></div>" "http://emacs-doctor.com/learn-emacs-lisp-in-15-minutes.html" (20976 20064) old 6 nil nil ((title nil "Learn Emacs Lisp in 15 minutes") (description nil "
<p>I was surprised not to find an introduction to Emacs Lisp on
  <a href=\"http://learnxinyminutes.com\">http://learnxinyminutes.com</a> so I created one.  This page is now on
  http://learnxinyminutes.com/docs/elisp/ too.</p>
<p>Comments and feedback are welcome !</p>
<div class=\"highlight\"><pre><span class=\"c1\">;; This gives an introduction to Emacs Lisp in 15 minutes (v0.2d)</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Author: Bastien / @bzg2 / http://bzg.fr</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; First make sure you read this text by Peter Norvig:</span>
<span class=\"c1\">;; http://norvig.com/21-days.html</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Then install GNU Emacs 24.3:</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Debian: apt-get install emacs (or see your distro instructions)</span>
<span class=\"c1\">;; MacOSX: http://emacsformacosx.com/emacs-builds/Emacs-24.3-universal-10.6.8.dmg</span>
<span class=\"c1\">;; Windows: http://ftp.gnu.org/gnu/windows/emacs/emacs-24.3-bin-i386.zip</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; More general information can be found at:</span>
<span class=\"c1\">;; http://www.gnu.org/software/emacs/#Obtaining</span>

<span class=\"c1\">;; Important warning:</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Going through this tutorial won&#39;t damage your computer unless</span>
<span class=\"c1\">;; you get so angry that you throw it on the floor.  In that case,</span>
<span class=\"c1\">;; I hereby decline any responsability.  Have fun!</span>

<span class=\"c1\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span class=\"c1\">;; </span>
<span class=\"c1\">;; Fire up Emacs.</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Hit the `q&#39; key to dismiss the welcome message.</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Now look at the gray line at the bottom of the window:</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; &quot;*scratch*&quot; is the name of the editing space you are now in.</span>
<span class=\"c1\">;; This editing space is called a &quot;buffer&quot;.</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; The scratch buffer is the default buffer when opening Emacs.</span>
<span class=\"c1\">;; You are never editing files: you are editing buffers that you</span>
<span class=\"c1\">;; can save to a file.</span>
<span class=\"c1\">;; </span>
<span class=\"c1\">;; &quot;Lisp interaction&quot; refers to a set of commands available here.</span>
<span class=\"c1\">;; </span>
<span class=\"c1\">;; Emacs has a built-in set of commands available in every buffer,</span>
<span class=\"c1\">;; and several subsets of commands available when you activate a</span>
<span class=\"c1\">;; specific mode.  Here we use the `lisp-interaction-mode&#39;, which</span>
<span class=\"c1\">;; comes with commands to evaluate and navigate within Elisp code.</span>

<span class=\"c1\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Semi-colons start comments anywhere on a line.</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Elisp programs are made of symbolic expressions (&quot;sexps&quot;):</span>
<span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">2</span> <span class=\"mi\">2</span><span class=\"p\">)</span>

<span class=\"c1\">;; This symbolic expression reads as &quot;Add 2 to 2&quot;.</span>

<span class=\"c1\">;; Sexps are enclosed into parentheses, possibly nested:</span>
<span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">2</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"p\">))</span>

<span class=\"c1\">;; A symbolic expression contains atoms or other symbolic</span>
<span class=\"c1\">;; expressions.  In the above examples, 1 and 2 are atoms,</span>
<span class=\"c1\">;; (+ 2 (+ 1 1)) and (+ 1 1) are symbolic expressions.</span>

<span class=\"c1\">;; From `lisp-interaction-mode&#39; you can evaluate sexps.</span>
<span class=\"c1\">;; Put the cursor right after the closing parenthesis then</span>
<span class=\"c1\">;; hold down the control and hit the j keys (&quot;C-j&quot; for short).</span>

<span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">3</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"p\">))</span>
<span class=\"c1\">;;           ^ cursor here</span>
<span class=\"c1\">;; `C-j&#39; =&gt; 6</span>

<span class=\"c1\">;; `C-j&#39; inserts the result of the evaluation in the buffer.</span>

<span class=\"c1\">;; `C-xC-e&#39; displays the same result in Emacs bottom line,</span>
<span class=\"c1\">;; called the &quot;minibuffer&quot;.  We will generally use `C-xC-e&#39;,</span>
<span class=\"c1\">;; as we don&#39;t want to clutter the buffer with useless text.</span>

<span class=\"c1\">;; `setq&#39; stores a value into a variable:</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">my-name</span> <span class=\"s\">&quot;Bastien&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; `C-xC-e&#39; =&gt; &quot;Bastien&quot; (displayed in the mini-buffer)</span>

<span class=\"c1\">;; `insert&#39; will insert &quot;Hello!&quot; where the cursor is:</span>
<span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"s\">&quot;Hello!&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; `C-xC-e&#39; =&gt; &quot;Hello!&quot;</span>

<span class=\"c1\">;; We used `insert&#39; with only one argument &quot;Hello!&quot;, but</span>
<span class=\"c1\">;; we can pass more arguments -- here we use two:</span>

<span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"s\">&quot;Hello&quot;</span> <span class=\"s\">&quot; world!&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; `C-xC-e&#39; =&gt; &quot;Hello world!&quot;</span>

<span class=\"c1\">;; You can use variables instead of strings:</span>
<span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"s\">&quot;Hello, I am &quot;</span> <span class=\"nv\">my-name</span><span class=\"p\">)</span>
<span class=\"c1\">;; `C-xC-e&#39; =&gt; &quot;Hello, I am Bastien&quot;</span>

<span class=\"c1\">;; You can combine sexps into functions:</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">hello</span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"s\">&quot;Hello, I am &quot;</span> <span class=\"nv\">my-name</span><span class=\"p\">))</span>
<span class=\"c1\">;; `C-xC-e&#39; =&gt; hello</span>

<span class=\"c1\">;; You can evaluate functions:</span>
<span class=\"p\">(</span><span class=\"nf\">hello</span><span class=\"p\">)</span>
<span class=\"c1\">;; `C-xC-e&#39; =&gt; Hello, I am Bastien</span>

<span class=\"c1\">;; The empty parentheses in the function&#39;s definition means that</span>
<span class=\"c1\">;; it does not accept arguments.  But always using `my-name&#39; is</span>
<span class=\"c1\">;; boring, let&#39;s tell the function to accept one argument (here</span>
<span class=\"c1\">;; the argument is called &quot;name&quot;): </span>

<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">hello</span> <span class=\"p\">(</span><span class=\"nf\">name</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"s\">&quot;Hello &quot;</span> <span class=\"nv\">name</span><span class=\"p\">))</span>
<span class=\"c1\">;; `C-xC-e&#39; =&gt; hello</span>

<span class=\"c1\">;; Now let&#39;s call the function with the string &quot;you&quot; as the value</span>
<span class=\"c1\">;; for its unique argument:</span>
<span class=\"p\">(</span><span class=\"nf\">hello</span> <span class=\"s\">&quot;you&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; `C-xC-e&#39; =&gt; &quot;Hello you&quot;</span>

<span class=\"c1\">;; Yeah!</span>

<span class=\"c1\">;; Take a breath.</span>

<span class=\"c1\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Now switch to a new buffer named &quot;*test*&quot; in another window:</span>

<span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
<span class=\"c1\">;; `C-xC-e&#39;</span>
<span class=\"c1\">;; =&gt; [screen has two windows and cursor is in the *test* buffer]</span>

<span class=\"c1\">;; Mouse over the top window and left-click to go back.  Or you can</span>
<span class=\"c1\">;; use `C-xo&#39; (i.e. hold down control-x and hit o) to go to the other</span>
<span class=\"c1\">;; window interactively.</span>

<span class=\"c1\">;; You can combine several sexps with `progn&#39;:</span>
<span class=\"p\">(</span><span class=\"nf\">progn</span>
  <span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">hello</span> <span class=\"s\">&quot;you&quot;</span><span class=\"p\">))</span>
<span class=\"c1\">;; `C-xC-e&#39;</span>
<span class=\"c1\">;; =&gt; [The screen has two windows and cursor is in the *test* buffer]</span>

<span class=\"c1\">;; Now if you don&#39;t mind, I&#39;ll stop asking you to hit `C-xC-e&#39;: do it</span>
<span class=\"c1\">;; for every sexp that follows.</span>

<span class=\"c1\">;; Always go back to the *scratch* buffer with the mouse or `C-xo&#39;.</span>

<span class=\"c1\">;; It&#39;s often useful to erase the buffer:</span>
<span class=\"p\">(</span><span class=\"nf\">progn</span>
  <span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">erase-buffer</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">hello</span> <span class=\"s\">&quot;there&quot;</span><span class=\"p\">))</span>

<span class=\"c1\">;; Or to go back to the other window:</span>
<span class=\"p\">(</span><span class=\"nf\">progn</span>
  <span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">erase-buffer</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">hello</span> <span class=\"s\">&quot;you&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">))</span>

<span class=\"c1\">;; You can bind a value to a local variable with `let&#39;:</span>
<span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">((</span><span class=\"nf\">local-name</span> <span class=\"s\">&quot;you&quot;</span><span class=\"p\">))</span>
  <span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">erase-buffer</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">hello</span> <span class=\"nv\">local-name</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">))</span>

<span class=\"c1\">;; No need to use `progn&#39; in that case, since `let&#39; also combines</span>
<span class=\"c1\">;; several sexps.</span>

<span class=\"c1\">;; Let&#39;s format a string:</span>
<span class=\"p\">(</span><span class=\"nf\">format</span> <span class=\"s\">&quot;Hello %s!\\n&quot;</span> <span class=\"s\">&quot;visitor&quot;</span><span class=\"p\">)</span>

<span class=\"c1\">;; %s is a place-holder for a string, replaced by &quot;visitor&quot;.</span>
<span class=\"c1\">;; \\n is the newline character.</span>

<span class=\"c1\">;; Let&#39;s refine our function by using format:</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">hello</span> <span class=\"p\">(</span><span class=\"nf\">name</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"p\">(</span><span class=\"nf\">format</span> <span class=\"s\">&quot;Hello %s!\\n&quot;</span> <span class=\"nv\">name</span><span class=\"p\">)))</span>

<span class=\"p\">(</span><span class=\"nf\">hello</span> <span class=\"s\">&quot;you&quot;</span><span class=\"p\">)</span>

<span class=\"c1\">;; Let&#39;s create another function which uses `let&#39;:</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">greeting</span> <span class=\"p\">(</span><span class=\"nf\">name</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">((</span><span class=\"nf\">your-name</span> <span class=\"s\">&quot;Bastien&quot;</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"p\">(</span><span class=\"nf\">format</span> <span class=\"s\">&quot;Hello %s!\\n\\nI am %s.&quot;</span>
                    <span class=\"nv\">name</span>       <span class=\"c1\">; the argument of the function</span>
                    <span class=\"nv\">your-name</span>  <span class=\"c1\">; the let-bound variable &quot;Bastien&quot;</span>
                    <span class=\"p\">))))</span>

<span class=\"c1\">;; And evaluate it:</span>
<span class=\"p\">(</span><span class=\"nf\">greeting</span> <span class=\"s\">&quot;you&quot;</span><span class=\"p\">)</span>

<span class=\"c1\">;; Some function are interactive:</span>
<span class=\"p\">(</span><span class=\"nf\">read-from-minibuffer</span> <span class=\"s\">&quot;Enter your name: &quot;</span><span class=\"p\">)</span>

<span class=\"c1\">;; Evaluating this function returns what you entered at the prompt.</span>

<span class=\"c1\">;; Let&#39;s make our `greeting&#39; function prompt for your name:</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">greeting</span> <span class=\"p\">(</span><span class=\"nf\">from-name</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">((</span><span class=\"nf\">your-name</span> <span class=\"p\">(</span><span class=\"nf\">read-from-minibuffer</span> <span class=\"s\">&quot;Enter your name: &quot;</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"p\">(</span><span class=\"nf\">format</span> <span class=\"s\">&quot;Hello!\\n\\nI am %s and you are %s.&quot;</span>
                    <span class=\"nv\">from-name</span> <span class=\"c1\">; the argument of the function</span>
                    <span class=\"nv\">your-name</span> <span class=\"c1\">; the let-bound var, entered at prompt</span>
                    <span class=\"p\">))))</span>

<span class=\"p\">(</span><span class=\"nf\">greeting</span> <span class=\"s\">&quot;Bastien&quot;</span><span class=\"p\">)</span>

<span class=\"c1\">;; Let&#39;s complete it by displaying the results in the other window:</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">greeting</span> <span class=\"p\">(</span><span class=\"nf\">from-name</span><span class=\"p\">)</span>
  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">((</span><span class=\"nf\">your-name</span> <span class=\"p\">(</span><span class=\"nf\">read-from-minibuffer</span> <span class=\"s\">&quot;Enter your name: &quot;</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">erase-buffer</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"p\">(</span><span class=\"nf\">format</span> <span class=\"s\">&quot;Hello %s!\\n\\nI am %s.&quot;</span> <span class=\"nv\">your-name</span> <span class=\"nv\">from-name</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nf\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>

<span class=\"c1\">;; Now test it:</span>
<span class=\"p\">(</span><span class=\"nf\">greeting</span> <span class=\"s\">&quot;Bastien&quot;</span><span class=\"p\">)</span>

<span class=\"c1\">;; Take a breath.</span>

<span class=\"c1\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; Let&#39;s store a list of names:</span>
<span class=\"p\">(</span><span class=\"nf\">setq</span> <span class=\"nv\">list-of-names</span> <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"s\">&quot;Sarah&quot;</span> <span class=\"s\">&quot;Chloe&quot;</span> <span class=\"s\">&quot;Mathilde&quot;</span><span class=\"p\">))</span>

<span class=\"c1\">;; Get the first element of this list with `car&#39;:</span>
<span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">list-of-names</span><span class=\"p\">)</span>

<span class=\"c1\">;; Get a list of all but the first element with `cdr&#39;:</span>
<span class=\"p\">(</span><span class=\"nb\">cdr </span><span class=\"nv\">list-of-names</span><span class=\"p\">)</span>

<span class=\"c1\">;; Add an element to the beginning of a list with `push&#39;:</span>
<span class=\"p\">(</span><span class=\"nf\">push</span> <span class=\"s\">&quot;Stephanie&quot;</span> <span class=\"nv\">list-of-names</span><span class=\"p\">)</span>

<span class=\"c1\">;; NOTE: `car&#39; and `cdr&#39; don&#39;t modify the list, but `push&#39; does.</span>
<span class=\"c1\">;; This is an important difference: some functions don&#39;t have any</span>
<span class=\"c1\">;; side-effects (like `car&#39;) while others have (like `push&#39;).</span>

<span class=\"c1\">;; Let&#39;s call `hello&#39; for each element in `list-of-names&#39;:</span>
<span class=\"p\">(</span><span class=\"nf\">mapcar</span> <span class=\"ss\">&#39;hello</span> <span class=\"nv\">list-of-names</span><span class=\"p\">)</span>

<span class=\"c1\">;; Refine `greeting&#39; to say hello to everyone in `list-of-names&#39;:</span>
<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">greeting</span> <span class=\"p\">()</span>
    <span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">erase-buffer</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">mapcar</span> <span class=\"ss\">&#39;hello</span> <span class=\"nv\">list-of-names</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nf\">greeting</span><span class=\"p\">)</span>

<span class=\"c1\">;; Remember the `hello&#39; function we defined above?  It takes one</span>
<span class=\"c1\">;; argument, a name.  `mapcar&#39; calls `hello&#39;, successively using each</span>
<span class=\"c1\">;; element of `list-of-names&#39; as the argument for `hello&#39;.</span>

<span class=\"c1\">;; Now let&#39;s arrange a bit what we have in the displayed buffer:</span>

<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">replace-hello-by-bonjour</span> <span class=\"p\">()</span>
    <span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">goto-char</span> <span class=\"p\">(</span><span class=\"nf\">point-min</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nf\">while</span> <span class=\"p\">(</span><span class=\"nf\">search-forward</span> <span class=\"s\">&quot;Hello&quot;</span><span class=\"p\">)</span>
      <span class=\"p\">(</span><span class=\"nf\">replace-match</span> <span class=\"s\">&quot;Bonjour&quot;</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nf\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">))</span>

<span class=\"c1\">;; (goto-char (point-min)) goes to the beginning of the buffer.</span>
<span class=\"c1\">;; (search-forward &quot;Hello&quot;) searches for the string &quot;Hello&quot;.</span>
<span class=\"c1\">;; (while x y) evaluates the y sexp(s) while x returns something.</span>
<span class=\"c1\">;; If x returns `nil&#39; (nothing), we exit the while loop.</span>

<span class=\"p\">(</span><span class=\"nf\">replace-hello-by-bonjour</span><span class=\"p\">)</span>

<span class=\"c1\">;; You should see all occurrences of &quot;Hello&quot; in the *test* buffer</span>
<span class=\"c1\">;; replaced by &quot;Bonjour&quot;.</span>

<span class=\"c1\">;; You should also get an error: &quot;Search failed: Hello&quot;.</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; To avoid this error, you need to tell `search-forward&#39; whether it</span>
<span class=\"c1\">;; should stop searching at some point in the buffer, and whether it</span>
<span class=\"c1\">;; should silently fail when nothing is found:</span>

<span class=\"c1\">;; (search-forward &quot;Hello&quot; nil t) does the trick:</span>

<span class=\"c1\">;; The `nil&#39; argument says: the search is not bound to a position.</span>
<span class=\"c1\">;; The `t&#39; argument says: silently fail when nothing is found.</span>

<span class=\"c1\">;; We use this sexp in the function below, which doesn&#39;t throw an error:</span>

<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">hello-to-bonjour</span> <span class=\"p\">()</span>
    <span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">erase-buffer</span><span class=\"p\">)</span>
    <span class=\"c1\">;; Say hello to names in `list-of-names&#39;</span>
    <span class=\"p\">(</span><span class=\"nf\">mapcar</span> <span class=\"ss\">&#39;hello</span> <span class=\"nv\">list-of-names</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">goto-char</span> <span class=\"p\">(</span><span class=\"nf\">point-min</span><span class=\"p\">))</span>
    <span class=\"c1\">;; Replace &quot;Hello&quot; by &quot;Bonjour&quot;</span>
    <span class=\"p\">(</span><span class=\"nf\">while</span> <span class=\"p\">(</span><span class=\"nf\">search-forward</span> <span class=\"s\">&quot;Hello&quot;</span> <span class=\"nv\">nil</span> <span class=\"nv\">t</span><span class=\"p\">)</span>
      <span class=\"p\">(</span><span class=\"nf\">replace-match</span> <span class=\"s\">&quot;Bonjour&quot;</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nf\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">))</span>

<span class=\"p\">(</span><span class=\"nf\">hello-to-bonjour</span><span class=\"p\">)</span>

<span class=\"c1\">;; Let&#39;s colorize the names:</span>

<span class=\"p\">(</span><span class=\"nf\">defun</span> <span class=\"nv\">boldify-names</span> <span class=\"p\">()</span>
    <span class=\"p\">(</span><span class=\"nf\">switch-to-buffer-other-window</span> <span class=\"s\">&quot;*test*&quot;</span><span class=\"p\">)</span>
    <span class=\"p\">(</span><span class=\"nf\">goto-char</span> <span class=\"p\">(</span><span class=\"nf\">point-min</span><span class=\"p\">))</span>
    <span class=\"p\">(</span><span class=\"nf\">while</span> <span class=\"p\">(</span><span class=\"nf\">re-search-forward</span> <span class=\"s\">&quot;Bonjour \\\\(.+\\\\)!&quot;</span> <span class=\"nv\">nil</span> <span class=\"nv\">t</span><span class=\"p\">)</span>
      <span class=\"p\">(</span><span class=\"nf\">add-text-properties</span> <span class=\"p\">(</span><span class=\"nf\">match-beginning</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
                           <span class=\"p\">(</span><span class=\"nf\">match-end</span> <span class=\"mi\">1</span><span class=\"p\">)</span>
                           <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"ss\">&#39;face</span> <span class=\"ss\">&#39;bold</span><span class=\"p\">)))</span>
    <span class=\"p\">(</span><span class=\"nf\">other-window</span> <span class=\"mi\">1</span><span class=\"p\">))</span>

<span class=\"c1\">;; This functions introduces `re-search-forward&#39;: instead of</span>
<span class=\"c1\">;; searching for the string &quot;Bonjour&quot;, you search for a pattern,</span>
<span class=\"c1\">;; using a &quot;regular expression&quot; (abbreviated in the prefix &quot;re-&quot;).</span>

<span class=\"c1\">;; The regular expression is &quot;Bonjour \\\\(.+\\\\)!&quot; and it reads:</span>
<span class=\"c1\">;; the string &quot;Bonjour &quot;, and</span>
<span class=\"c1\">;; a group of           | this is the \\\\( ... \\\\) construct</span>
<span class=\"c1\">;;   any character      | this is the .</span>
<span class=\"c1\">;;   possibly repeated  | this is the +</span>
<span class=\"c1\">;; and the &quot;!&quot; string.</span>

<span class=\"c1\">;; Ready?  Test it!</span>

<span class=\"p\">(</span><span class=\"nf\">boldify-names</span><span class=\"p\">)</span>

<span class=\"c1\">;; `add-text-properties&#39; adds... text properties, like a face.</span>

<span class=\"c1\">;; OK, we are done.  Happy hacking!</span>

<span class=\"c1\">;; If you want to know more about a variable or a function:</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; C-h v a-variable RET</span>
<span class=\"c1\">;; C-h f a-function RET</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; To read the Emacs Lisp manual with Emacs:</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; C-h i m elisp RET</span>
<span class=\"c1\">;;</span>
<span class=\"c1\">;; To read an online introduction to Emacs Lisp:</span>
<span class=\"c1\">;; https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html</span>

<span class=\"c1\">;; Thanks to these people for their feedback and suggestions:</span>
<span class=\"c1\">;; - Wes Hardaker</span>
<span class=\"c1\">;; - notbob</span>
<span class=\"c1\">;; - Kevin Montuori</span>
<span class=\"c1\">;; - Arne Babenhauserheide</span>
<span class=\"c1\">;; - Alan Schmitt</span>
<span class=\"c1\">;; - LinXitoW</span>
<span class=\"c1\">;; - Aaron Meurer</span>
</pre></div>


") (pubDate nil "Thu, 25 Jul 2013 00:00:00 +0200") (link nil "http://emacs-doctor.com/learn-emacs-lisp-in-15-minutes.html") (guid ((isPermaLink . "true")) "http://emacs-doctor.com/learn-emacs-lisp-in-15-minutes.html") (category nil "libre"))) ("Bastien Guerry Orgmode Emacs Chat with Sacha Chua" "<p>Thanks to Sacha Chua for inviting me to chat with her!  (Check <a href=\"http://sachachua.com/blog/2013/05/emacs-chat-bastien-guerry/\">her blog
post</a> about it.)  So here are some bits about Emacs, Org-mode… and a few
others things.</p>
<center>
<iframe width=\"420\" height=\"315\" src=\"http://www.youtube.com/embed/fnk0TJC7iJI?rel=0\" frameborder=\"0\" allowfullscreen></iframe>
</center>
<br/>" "http://emacs-doctor.com/bastien_guerry_orgmode_emacs_chat.html" (20897 13408) old 7 nil nil ((title nil "Bastien Guerry Orgmode Emacs Chat with Sacha Chua") (description nil "
<p>Thanks to Sacha Chua for inviting me to chat with her!  (Check <a href=\"http://sachachua.com/blog/2013/05/emacs-chat-bastien-guerry/\">her blog
  post</a> about it.)  So here are some bits about Emacs, Org-mode&#8230; and a few
  others things.</p>
<center>
<iframe width=\"420\" height=\"315\" src=\"http://www.youtube.com/embed/fnk0TJC7iJI?rel=0\" frameborder=\"0\" allowfullscreen></iframe>
</center>
<br/>


") (pubDate nil "Sun, 26 May 2013 00:00:00 +0200") (link nil "http://emacs-doctor.com/bastien_guerry_orgmode_emacs_chat.html") (guid ((isPermaLink . "true")) "http://emacs-doctor.com/bastien_guerry_orgmode_emacs_chat.html") (category nil "libre"))) ("How to Become a Hacker (in the 21st century)?" "<center>
<iframe src=\"http://www.slideshare.net/slideshow/embed_code/16070695\" width=\"768\" height=\"630\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px\" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"http://www.slideshare.net/bzg/how-to-become-a-hacker-16070695\" title=\"How to Become A Hacker?\" target=\"_blank\">How to Become A Hacker?</a> </strong> from <strong><a href=\"http://www.slideshare.net/bzg\" target=\"_blank\">Bastien Guerry</a></strong> </div>
</center>" "http://emacs-doctor.com/how-to-become-a-hacker.html" (20728 33392) old 8 nil nil ((title nil "How to Become a Hacker (in the 21st century)?") (description nil "
<center>
<iframe src=\"http://www.slideshare.net/slideshow/embed_code/16070695\" width=\"768\" height=\"630\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px\" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"http://www.slideshare.net/bzg/how-to-become-a-hacker-16070695\" title=\"How to Become A Hacker?\" target=\"_blank\">How to Become A Hacker?</a> </strong> from <strong><a href=\"http://www.slideshare.net/bzg\" target=\"_blank\">Bastien Guerry</a></strong> </div>
</center>


") (pubDate nil "Fri, 18 Jan 2013 00:00:00 +0100") (link nil "http://emacs-doctor.com/how-to-become-a-hacker.html") (guid ((isPermaLink . "true")) "http://emacs-doctor.com/how-to-become-a-hacker.html") (category nil "libre"))) ("The Orgfather" "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">
(
{video_url: \"http://vimeo.com/28194358\",
video_config: {width: 800, height: 600}
}
)
</script>" "http://emacs-doctor.com/theorgfather.html" (20057 26848) old 9 nil nil ((title nil "The Orgfather") (description nil "
<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">
(
  {video_url: \"http://vimeo.com/28194358\",
   video_config: {width: 800, height: 600}
}
)
</script>


") (pubDate nil "Sun, 28 Aug 2011 00:00:00 +0200") (link nil "http://emacs-doctor.com/theorgfather.html") (guid ((isPermaLink . "true")) "http://emacs-doctor.com/theorgfather.html") (category nil "libre"))) ("Emacs Org-mode at the GNU Hackers Meeting 2011" "<center>
<iframe src=\"http://www.slideshare.net/slideshow/embed_code/9188827\" width=\"768\" height=\"630\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"http://www.slideshare.net/bzg/emacs-orgmode-gnu-hackers-meeting-paris-2011\" title=\"Emacs org-mode -- GNU hackers meeting Paris 2011\" target=\"_blank\">Emacs org-mode – GNU hackers meeting Paris 2011</a> </strong> from <strong><a href=\"http://www.slideshare.net/bzg\" target=\"_blank\">Bastien Guerry</a></strong> </div>
</center>" "http://emacs-doctor.com/emacs-orgmode-gnu-hackers-meeting-2011.html" (20057 26848) old 10 nil nil ((title nil "Emacs Org-mode at the GNU Hackers Meeting 2011") (description nil "
<center>
<iframe src=\"http://www.slideshare.net/slideshow/embed_code/9188827\" width=\"768\" height=\"630\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"http://www.slideshare.net/bzg/emacs-orgmode-gnu-hackers-meeting-paris-2011\" title=\"Emacs org-mode -- GNU hackers meeting Paris 2011\" target=\"_blank\">Emacs org-mode &#8211; GNU hackers meeting Paris 2011</a> </strong> from <strong><a href=\"http://www.slideshare.net/bzg\" target=\"_blank\">Bastien Guerry</a></strong> </div>
</center>


") (pubDate nil "Sun, 28 Aug 2011 00:00:00 +0200") (link nil "http://emacs-doctor.com/emacs-orgmode-gnu-hackers-meeting-2011.html") (guid ((isPermaLink . "true")) "http://emacs-doctor.com/emacs-orgmode-gnu-hackers-meeting-2011.html") (category nil "libre"))))